<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Operating System - 分类 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/categories/operating-system/</link>
        <description>Operating System - 分类 - Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1239946358@qq.com (Jungle)</managingEditor>
            <webMaster>1239946358@qq.com (Jungle)</webMaster><lastBuildDate>Sun, 01 Jan 2023 19:59:41 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/categories/operating-system/" rel="self" type="application/rss+xml" /><item>
    <title>Operating System Chapter3 多处理器编程：从入门到放弃</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter3/</link>
    <pubDate>Sun, 01 Jan 2023 19:59:41 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter3/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="多处理器编程从入门到放弃">多处理器编程：从入门到放弃</h2>
<h3 id="overview">Overview</h3>
<p>复习</p>
<ul>
<li>程序 (源代码<code>S</code>、二进制代码<code>C</code>) = 状态机
<ul>
<li>编译器 $C = \textrm{compile}(S)\newline$</li>
</ul>
</li>
<li>应用视角的操作系统 = syscall 指令</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 在多处理器时代，上面的理解应该作出怎样的变化？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>并发程序的状态机模型</li>
<li>线程库 <code>thread.h</code></li>
<li>多线程带来的麻烦</li>
</ul>
<h3 id="入门">入门</h3>
<h4 id="three-easy-pieces-并发">Three Easy Pieces: 并发</h4>
<blockquote>
<p>Concurrent: existing, happening, or done <em>at the same time</em>.</p>
<p>In computer science, concurrency refers to the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. (Wikipedia)</p>
</blockquote>
<p>为什么在这门课 (先) 讲并发？</p>
<ul>
<li>讲并发
<ul>
<li><strong>操作系统是最早的并发程序之一</strong></li>
<li>今天遍地都是多处理器系统 (为什么？)</li>
</ul>
</li>
<li>先讲并发
<ul>
<li>实验是 bottom-up 的 (L1: 多处理器上的 <code>malloc</code>/<code>free</code>)</li>
</ul>
</li>
</ul>
<h4 id="并发的基本单位线程">并发的基本单位：线程</h4>
<p>共享内存的多个执行流</p>
<ul>
<li>执行流拥有独立的堆栈/寄存器</li>
<li>共享全部的内存 (指针可以互相引用)</li>
</ul>
<hr>
<p>用状态机的视角就很容易理解了！</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-1.jpg" title="/img/Operating System/chapter3-1.jpg" data-thumbnail="/img/Operating System/chapter3-1.jpg" data-sub-html="<h2>手写(状态机,stack frame与共享内存)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>状态机,stack frame与共享内存</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-2.jpg" title="/img/Operating System/chapter3-2.jpg" data-thumbnail="/img/Operating System/chapter3-2.jpg" data-sub-html="<h2>手写(线程)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>线程</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-3.jpg" title="/img/Operating System/chapter3-3.jpg" data-thumbnail="/img/Operating System/chapter3-3.jpg" data-sub-html="<h2>手写(并发编程的不确定性)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>并发编程的不确定性</code>)</figcaption>
    </figure>
<h4 id="入门threadh-简化的线程-api">入门：<code>thread.h</code> 简化的线程 API</h4>
<p>我们为大家封装了超级好用的线程 API (<a href="https://jyywiki.cn/pages/OS/2022/demos/thread.h" target="_blank" rel="noopener noreffer"><code>thread.h</code></a>)</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">create</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>创建一个入口函数是<code>fn</code>的线程，并立即开始执行（状态机理解创建 $\rightarrow$ 在状态机里加入一个新的栈帧的列表，并且每次可以选到每一个链表来执行）</p>
<ul>
<li>
<p>void fn(int tid) { &hellip; }</p>
</li>
<li>
<p>参数 <code>tid</code> 从 1 开始编号</p>
</li>
</ul>
</li>
<li>
<p>语义：在状态中新增 stack frame 列表并初始化为 <code>fn(tid)</code></p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">join</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>等待所有运行线程的 <code>fn</code> 返回</li>
<li>在 <code>main</code> 返回时会自动等待所有线程结束</li>
<li><strong>语义：在有其他线程未执行完时死循环，否则返回</strong>（用状态机空转的角度来理解）</li>
</ul>
</li>
<li>
<p>编译时需要增加 <code>-lpthread</code></p>
</li>
</ul>
<p><code>thread.h</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdatomic.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define NTHREAD 64
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">enum</span> <span class="p">{</span> <span class="n">T_FREE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">T_LIVE</span><span class="p">,</span> <span class="n">T_DEAD</span><span class="p">,</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kr">thread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_t</span> <span class="kr">thread</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kr">thread</span> <span class="n">tpool</span><span class="p">[</span><span class="n">NTHREAD</span><span class="p">],</span> <span class="o">*</span><span class="n">tptr</span> <span class="o">=</span> <span class="n">tpool</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">wrapper</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="kr">thread</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">thread</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">(</span><span class="kr">thread</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">create</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">tptr</span> <span class="o">-</span> <span class="n">tpool</span> <span class="o">&lt;</span> <span class="n">NTHREAD</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">tptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">tptr</span> <span class="o">-</span> <span class="n">tpool</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">T_LIVE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">fn</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">tptr</span><span class="o">-&gt;</span><span class="kr">thread</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">,</span> <span class="n">tptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">++</span><span class="n">tptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">join</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NTHREAD</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tpool</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">status</span> <span class="o">==</span> <span class="n">T_LIVE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pthread_join</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="kr">thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">t</span><span class="o">-&gt;</span><span class="n">status</span> <span class="o">=</span> <span class="n">T_DEAD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">cleanup</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="入门-contd">入门 (cont&rsquo;d)</h4>
<p>Hello, Multi-threaded World!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Ta</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tb</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;b&#34;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Ta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译（注意使用<code>-lpthread</code>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc the.c -lpthread 
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行 $\rightarrow$ 交替输出</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-4.png" title="/img/Operating System/chapter3-4.png" data-thumbnail="/img/Operating System/chapter3-4.png" data-sub-html="<h2>Linux(输出结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>输出结果</code>)</figcaption>
    </figure>
<p>利用 <code>thread.h</code> 就可以写出利用多处理器的程序！</p>
<ul>
<li>操作系统会自动把线程放置在不同的处理器上</li>
<li>在后台运行，可以看到 CPU 使用率超过了 100%（2个接近200， 4个接近400）$\rightarrow$ 使用了多个CPU</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-5.png" title="/img/Operating System/chapter3-5.png" data-thumbnail="/img/Operating System/chapter3-5.png" data-sub-html="<h2>top(查看CPU使用率)</h2>">
        
    </a><figcaption class="image-caption">top(<code>查看CPU使用率</code>)</figcaption>
    </figure>
<blockquote>
<p>会编程，你就拥有全世界！</p>
</blockquote>
<p>如何证明线程确实共享内存？</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/shm-test.c" target="_blank" rel="noopener noreffer">shm-test.c</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Thello</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">usleep</span><span class="p">(</span><span class="n">id</span> <span class="o">*</span> <span class="mi">100000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello from thread #%c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;123456789ABCDEF&#34;</span><span class="p">[</span><span class="n">x</span><span class="o">++</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Thello</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-6.png" title="/img/Operating System/chapter3-6.png" data-thumbnail="/img/Operating System/chapter3-6.png" data-sub-html="<h2>Linux(shm-test.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>shm-test.c运行结果</code>)</figcaption>
    </figure>
<hr>
<p>如何证明线程具有独立堆栈 (以及确定它们的范围)？</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/stack-probe.c" target="_blank" rel="noopener noreffer">stack-probe.c</a> (输出有点乱？我们还有 <code>sort</code>!)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__thread</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span> <span class="c1">// thread-local variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__thread</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// objdump to see how thread-local variables are implemented
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">set_cur</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">char</span> <span class="o">*</span><span class="n">get_cur</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="n">cur</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">stackoverflow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">set_cur</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">1024</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">base</span> <span class="o">-</span> <span class="n">get_cur</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Stack size of T%d &gt;= %d KB</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">sz</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tprobe</span><span class="p">(</span><span class="kt">int</span> <span class="n">tid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tprobe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-7.png" title="/img/Operating System/chapter3-7.png" data-thumbnail="/img/Operating System/chapter3-7.png" data-sub-html="<h2>Linux(stack-probe.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>stack-probe.c运行结果</code>)</figcaption>
    </figure>
<p>进行排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc stack-probe.c -lpthread <span class="o">&amp;&amp;</span> ./a.out <span class="p">|</span> sort -nk <span class="m">6</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果：</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-8.png" title="/img/Operating System/chapter3-8.png" data-thumbnail="/img/Operating System/chapter3-8.png" data-sub-html="<h2>stack-probe.c(排序后)</h2>">
        
    </a><figcaption class="image-caption">stack-probe.c(<code>排序后</code>)</figcaption>
    </figure>
<p>$size\ of\ stack=8192KB\newline$</p>
<hr>
<p>更多的习题</p>
<ul>
<li>创建线程使用的是哪个系统调用？</li>
<li>能不能用 gdb 调试？</li>
<li>基本原则：有需求，就能做到 (<a href="https://sourceware.org/gdb/onlinedocs/gdb/Threads.html" target="_blank" rel="noopener noreffer">RTFM</a>)</li>
</ul>
<h4 id="threadh-背后posix-threads"><code>thread.h</code> 背后：POSIX Threads</h4>
<p>想进一步配置线程？</p>
<ul>
<li>设置更大的线程栈</li>
<li>设置 detach 运行 (不在进程结束后被杀死，也不能 join)</li>
<li>……</li>
</ul>
<hr>
<p>POSIX 为我们提供了线程库 (pthreads)</p>
<ul>
<li>
<p><code>man 7 pthreads</code></p>
</li>
<li>
<p>练习：改写 thread.h，使得线程拥有更大的栈</p>
<ul>
<li>可以用 <a href="https://jyywiki.cn/pages/OS/2022/demos/stack-probe.c" target="_blank" rel="noopener noreffer">stack-probe.c</a> 验证</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__thread</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span> <span class="c1">// thread-local variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__thread</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// objdump to see how thread-local variables are implemented
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">set_cur</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">char</span> <span class="o">*</span><span class="n">get_cur</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="n">cur</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">stackoverflow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">set_cur</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">1024</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">base</span> <span class="o">-</span> <span class="n">get_cur</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Stack size of T%d &gt;= %d KB</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">sz</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tprobe</span><span class="p">(</span><span class="kt">int</span> <span class="n">tid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tprobe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，可怕的事情正在悄悄逼近……</p>
<ul>
<li>
<p>多处理器系统中线程的代码可能同时执行</p>
<ul>
<li>两个线程同时执行 <code>x++</code>，结果会是什么呢？</li>
</ul>
</li>
</ul>
<h3 id="放弃1原子性">放弃（1）：原子性</h3>
<h4 id="例子山寨多线程支付宝">例子：山寨多线程支付宝</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">FAIL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>两个线程并发支付 ¥100 会发生什么？<a href="https://jyywiki.cn/pages/OS/2022/demos/alipay.c" target="_blank" rel="noopener noreffer">alipay.c</a></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-10.jpg" title="/img/Operating System/chapter3-10.jpg" data-thumbnail="/img/Operating System/chapter3-10.jpg" data-sub-html="<h2>手写(山寨支付宝状态机)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>山寨支付宝状态机</code>)</figcaption>
    </figure>
<ul>
<li>账户里会多出用不完的钱！</li>
<li>Bug/漏洞不跟你开玩笑：Mt. Gox Hack 损失650,000
<ul>
<li>今天价值 $28,000,000,000</li>
</ul>
</li>
</ul>
<p><code>alipay.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// unexpected delays
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Talipay</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Alipay_withdraw</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;balance = %lu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">balance</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter3-9.png" title="/img/Operating System/chapter3-9.png" data-thumbnail="/img/Operating System/chapter3-9.png" data-sub-html="<h2>Linux(alipay.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>alipay.c运行结果</code>)</figcaption>
    </figure>
<h4 id="例子求和">例子：求和</h4>
<p>分两个线程，计算 $1+1+1+\ldots+1+1+1+1+…+1$ (共计 2n 个 1)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> 运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-11.png" title="/img/Operating System/chapter3-11.png" data-thumbnail="/img/Operating System/chapter3-11.png" data-sub-html="<h2>Linux(sum.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>sum.c运行结果</code>)</figcaption>
    </figure>
<ul>
<li>
<p>119790390, 99872322 (结果可以比 <code>N</code> 还要小), &hellip;</p>
</li>
<li>
<p>Inline assembly 也不行</p>
</li>
</ul>
<p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;lock add $1, %0&#34;</span><span class="o">:</span> <span class="s">&#34;+m&#34;</span><span class="p">(</span><span class="n">sum</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-12.png" title="/img/Operating System/chapter3-12.png" data-thumbnail="/img/Operating System/chapter3-12.png" data-sub-html="<h2>Linux(sum.c修改后运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>sum.c修改后运行结果</code>)</figcaption>
    </figure>
<p>结果正确，但是运行性能显著下降</p>
<h4 id="原子性的丧失">原子性的丧失</h4>
<blockquote>
<p>“程序 (甚至是一条指令) 独占处理器执行” 的基本假设在现代多处理器系统上不再成立。</p>
</blockquote>
<p>原子性：一段代码执行 (例如 <code>pay()</code>) 独占整个计算机系统</p>
<ul>
<li>单处理器多线程
<ul>
<li>线程在运行时可能被中断，切换到另一个线程执行</li>
</ul>
</li>
<li>多处理器多线程
<ul>
<li>线程根本就是并行执行的</li>
</ul>
</li>
</ul>
<hr>
<p>(历史) 1960s，大家争先在共享内存上实现原子性 (互斥)</p>
<ul>
<li>但几乎所有的实现都是错的，直到 <a href="https://en.wikipedia.org/wiki/Dekker%27s_algorithm" target="_blank" rel="noopener noreffer">Dekker&rsquo;s Algorithm</a>，还只能保证两个线程的互斥</li>
</ul>
<h4 id="原子性的丧失有没有感到后怕">原子性的丧失：有没有感到后怕？</h4>
<p><code>printf</code> 还能在多线程程序里调用吗？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">void thread1() { while (1) { printf(&#34;a&#34;); } }
</span></span><span class="line"><span class="cl">void thread2() { while (1) { printf(&#34;b&#34;); } }
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们都知道 printf 是有缓冲区的 (为什么？)</p>
<ul>
<li>如果执行 <code>buf[pos++] = ch</code> (<code>pos</code> 共享) 不就💥了吗？</li>
</ul>
<hr>
<p>RTFM!</p>
<p>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ man <span class="m">3</span> <span class="nb">printf</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ATTRIBUTES
</span></span><span class="line"><span class="cl">       For an explanation of the terms used in this section, see attributes<span class="o">(</span>7<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       ┌────────────────────────┬───────────────┬────────────────┐
</span></span><span class="line"><span class="cl">       │Interface               │ Attribute     │ Value          │
</span></span><span class="line"><span class="cl">       ├────────────────────────┼───────────────┼────────────────┤
</span></span><span class="line"><span class="cl">       │printf<span class="o">()</span>, fprintf<span class="o">()</span>,    │ Thread safety │ MT-Safe locale │
</span></span><span class="line"><span class="cl">       │sprintf<span class="o">()</span>, snprintf<span class="o">()</span>,  │               │                │
</span></span><span class="line"><span class="cl">       │vprintf<span class="o">()</span>, vfprintf<span class="o">()</span>,  │               │                │
</span></span><span class="line"><span class="cl">       │vsprintf<span class="o">()</span>, vsnprintf<span class="o">()</span> │               │                │
</span></span><span class="line"><span class="cl">       └────────────────────────┴───────────────┴────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>进程安全！</strong></p>
<h4 id="实现原子性">实现原子性</h4>
<p>互斥和原子性是本学期的重要主题</p>
<ul>
<li>
<p><code>lock(&amp;lk)</code></p>
</li>
<li>
<p><code>unlock(&amp;lk)</code></p>
<ul>
<li>实现临界区 (critical section) 之间的绝对串行化</li>
<li>程序的其他部分依然可以并行执行</li>
</ul>
</li>
</ul>
<hr>
<p>99% 的并发问题都可以用一个队列解决</p>
<ul>
<li>
<p>把大任务切分成可以并行的小任务</p>
</li>
<li>
<p>worker thread 去锁保护的队列里取任务</p>
</li>
<li>
<p>除去不可并行的部分，剩下的部分可以获得线性的加速</p>
<ul>
<li>$Thm.\ T_n&lt;T_{\infty}+\frac {T_1}{n}$(<a href="https://web.mit.edu/dimitrib/www/pdc.html" target="_blank" rel="noopener noreffer">PDC</a>, Chap. 1)</li>
</ul>
</li>
</ul>
<h3 id="放弃2顺序">放弃（2）：顺序</h3>
<h4 id="例子求和-再次出现">例子：求和 (再次出现)</h4>
<p>分两个线程，计算 $1+1+1+\ldots+1+1+1+1+…+1$ (共计 2n 个 1)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们好像忘记给 <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> 添加编译优化了？</p>
<ul>
<li><code>-O1</code>: 100000000 😱😱</li>
<li><code>-O2</code>: 200000000 😱😱😱</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -O1 sum.c -lpthread <span class="o">&amp;&amp;</span> ./a.out 
</span></span><span class="line"><span class="cl"><span class="nv">sum</span> <span class="o">=</span> <span class="m">100000000</span>
</span></span><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -O2 sum.c -lpthread <span class="o">&amp;&amp;</span> ./a.out 
</span></span><span class="line"><span class="cl"><span class="nv">sum</span> <span class="o">=</span> <span class="m">200000000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="顺序的丧失">顺序的丧失</h4>
<blockquote>
<p>编译器对内存访问 “eventually consistent” 的处理导致共享内存作为线程同步工具的失效。</p>
</blockquote>
<p>刚才的例子</p>
<ul>
<li><code>-O1</code>: <code>R[eax] = sum; R[eax] += N; sum = R[eax]</code></li>
<li><code>-O2</code>: <code>sum += N;</code></li>
<li>(你的编译器也许是不同的结果)</li>
</ul>
<p>另一个例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// would be optimized to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -c -O1 sum.c <span class="o">&amp;&amp;</span> objdump -d sum.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sum.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;wrapper&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">48</span> <span class="m">83</span> ec <span class="m">08</span>          	sub    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">   8:	<span class="m">48</span> <span class="m">89</span> f8             	mov    %rdi,%rax
</span></span><span class="line"><span class="cl">   b:	8b 3f                	mov    <span class="o">(</span>%rdi<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl">   d:	ff <span class="m">50</span> <span class="m">10</span>             	call   *0x10<span class="o">(</span>%rax<span class="o">)</span>
</span></span><span class="line"><span class="cl">  10:	b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  15:	<span class="m">48</span> <span class="m">83</span> c4 <span class="m">08</span>          	add    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">  19:	c3                   	ret    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">000000000000001a &lt;Tsum&gt;:
</span></span><span class="line"><span class="cl">  1a:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">  1e:	<span class="m">48</span> 8b <span class="m">15</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	mov    0x0<span class="o">(</span>%rip<span class="o">)</span>,%rdx        <span class="c1"># 25 &lt;Tsum+0xb&gt; -&gt; R[eax] = sum</span>
</span></span><span class="line"><span class="cl">  25:	<span class="m">48</span> 8d <span class="m">42</span> <span class="m">01</span>          	lea    0x1<span class="o">(</span>%rdx<span class="o">)</span>,%rax		 <span class="c1"># -&gt; R[eax] += N, sum = R[eax]</span>
</span></span><span class="line"><span class="cl">  29:	<span class="m">48</span> <span class="m">81</span> c2 <span class="m">01</span> e1 f5 <span class="m">05</span> 	add    <span class="nv">$0</span>x5f5e101,%rdx
</span></span><span class="line"><span class="cl">  30:	<span class="m">48</span> <span class="m">89</span> c1             	mov    %rax,%rcx
</span></span><span class="line"><span class="cl">  33:	<span class="m">48</span> <span class="m">83</span> c0 <span class="m">01</span>          	add    <span class="nv">$0</span>x1,%rax
</span></span><span class="line"><span class="cl">  37:	<span class="m">48</span> <span class="m">39</span> d0             	cmp    %rdx,%rax
</span></span><span class="line"><span class="cl">  3a:	<span class="m">75</span> f4                	jne    <span class="m">30</span> &lt;Tsum+0x16&gt;
</span></span><span class="line"><span class="cl">  3c:	<span class="m">48</span> <span class="m">89</span> 0d <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	mov    %rcx,0x0<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 43 &lt;Tsum+0x29&gt;</span>
</span></span><span class="line"><span class="cl">  43:	c3                   	ret    
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter3-13.jpg" title="/img/Operating System/chapter3-13.jpg" data-thumbnail="/img/Operating System/chapter3-13.jpg" data-sub-html="<h2>手写(O1模式下优化)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>O1模式下优化</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -c -O2 sum.c <span class="o">&amp;&amp;</span> objdump -d sum.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sum.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;wrapper&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">48</span> <span class="m">83</span> ec <span class="m">08</span>          	sub    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">   8:	<span class="m">48</span> <span class="m">89</span> f8             	mov    %rdi,%rax
</span></span><span class="line"><span class="cl">   b:	8b 3f                	mov    <span class="o">(</span>%rdi<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl">   d:	ff <span class="m">50</span> <span class="m">10</span>             	call   *0x10<span class="o">(</span>%rax<span class="o">)</span>
</span></span><span class="line"><span class="cl">  10:	<span class="m">31</span> c0                	xor    %eax,%eax
</span></span><span class="line"><span class="cl">  12:	<span class="m">48</span> <span class="m">83</span> c4 <span class="m">08</span>          	add    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">  16:	c3                   	ret    
</span></span><span class="line"><span class="cl">  17:	<span class="m">66</span> 0f 1f <span class="m">84</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	nopw   0x0<span class="o">(</span>%rax,%rax,1<span class="o">)</span>
</span></span><span class="line"><span class="cl">  1e:	<span class="m">00</span> <span class="m">00</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000020</span> &lt;Tsum&gt;:
</span></span><span class="line"><span class="cl">  20:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">  24:	<span class="m">48</span> <span class="m">81</span> <span class="m">05</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	addq   <span class="nv">$0</span>x5f5e100,0x0<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 2f &lt;Tsum+0xf&gt;</span>
</span></span><span class="line"><span class="cl">  2b:	<span class="m">00</span> e1 f5 <span class="m">05</span> 
</span></span><span class="line"><span class="cl">  2f:	c3                   	ret 
</span></span></code></pre></td></tr></table>
</div>
</div><p>O2优化的比较彻底，只add了一次（出问题的概率比较低）</p>
<h4 id="实现源代码的按顺序翻译">实现源代码的按顺序翻译</h4>
<p>在代码中插入 “优化不能穿越” 的 barrier</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">asm</span> <span class="nf">volatile</span> <span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:::</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Barrier 的含义是 “可以读写任何内存”</li>
</ul>
</li>
<li>
<p>使用<code>volatile</code>变量</p>
<ul>
<li>保持 C 语义和汇编语义一致</li>
</ul>
</li>
</ul>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">int</span> <span class="k">volatile</span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span> <span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="放弃-3可见性">放弃 (3)：可见性</h3>
<h4 id="例子">例子</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">T1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="o">:</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span> <span class="c1">// compiler barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;y = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="o">:</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span> <span class="c1">// compiler barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;x = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>问题：我们最终能看到哪些结果？</p>
<p>状态机</p>
<div class="mermaid" id="id-1"></div>
<ul>
<li>mem-ordering.c
<ul>
<li>输出不好读？<code>pipe to head -n 1000000 | sort | uniq -c</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">flag</span><span class="p">;</span> <span class="c1">//开关初始为0（关着），原子变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define FLAG atomic_load(&amp;flag) </span><span class="c1">//原子读
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define FLAG_XOR(val) atomic_fetch_xor(&amp;flag, val) </span><span class="c1">//原子异或
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define WAIT_FOR(cond) while (!(cond)) ;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_x_read_y</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// x = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// y_val = y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">y_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">y_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_y_read_x</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// y = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// x_val = x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">x_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">x_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T1</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">));</span> <span class="c1">//等开关1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">write_x_read_y</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//关掉开关1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">//等开关2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">write_y_read_x</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//关掉开关2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tsync</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//控制线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//布置好初值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">__sync_synchronize</span><span class="p">();</span> <span class="c1">// full barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>            <span class="c1">// + delay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">//确定开关是关着的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//开关的两个bit从0变为1（开启开关1，2）（原子操作）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// T1 and T2 clear 0/1-bit, respectively
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WAIT_FOR</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsync</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>-O2模式下编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">00000000000001a0 &lt;write_x_read_y&gt;:
</span></span><span class="line"><span class="cl"> 1a0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl"> 1a4:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 1ae &lt;write_x_read_y+0xe&gt;
</span></span><span class="line"><span class="cl"> 1ab:	00 00 00 
</span></span><span class="line"><span class="cl"> 1ae:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 1b4 &lt;write_x_read_y+0x14&gt;
</span></span><span class="line"><span class="cl"> 1b4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1bb &lt;write_x_read_y+0x1b&gt;
</span></span><span class="line"><span class="cl"> 1bb:	bf 01 00 00 00       	mov    $0x1,%edi
</span></span><span class="line"><span class="cl"> 1c0:	31 c0                	xor    %eax,%eax
</span></span><span class="line"><span class="cl"> 1c2:	e9 00 00 00 00       	jmp    1c7 &lt;write_x_read_y+0x27&gt;
</span></span><span class="line"><span class="cl"> 1c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
</span></span><span class="line"><span class="cl"> 1ce:	00 00 
</span></span></code></pre></td></tr></table>
</div>
</div><p>利用脚本来统计，不知道为啥自己的乌班图💩🐴跑出来都是01，00，01，10，11都跑出来了，和我们的状态机模型不符🤡</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-14.png" title="/img/Operating System/chapter3-14.png" data-thumbnail="/img/Operating System/chapter3-14.png" data-sub-html="<h2>From class(输出结果)</h2>">
        
    </a><figcaption class="image-caption">From class(<code>输出结果</code>)</figcaption>
    </figure>
<h4 id="现代处理器处理器也是-动态-编译器">现代处理器：处理器也是 (动态) 编译器！</h4>
<p>单个处理器把汇编代码 (用电路) “编译” 成更小的 $\mu ops\newline$</p>
<ul>
<li>RF[9] = load(RF[7] + 400)</li>
<li>store(RF[12], RF[13])</li>
<li>RF[3] = RF[4] + RF[5]
<ul>
<li>每个 $\mu op$ 都有 Fetch, Issue, Execute, Commit 四个阶段</li>
</ul>
</li>
</ul>
<hr>
<p>在任何时刻，处理器都维护一个 $\mu op$ 的 “池子”</p>
<ul>
<li>
<p>每一周期向池子补充尽可能多的$\mu op\newline$</p>
<ul>
<li>“多发射”</li>
</ul>
</li>
<li>
<p>每一周期 (在不违反编译正确性的前提下) 执行尽可能多的$\mu op\newline$</p>
<ul>
<li>“乱序执行”、“按序提交”</li>
</ul>
</li>
<li>
<p>这就是《计算机体系结构》 (剩下就是木桶效应，哪里短板补哪里)</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-15.jpg" title="/img/Operating System/chapter3-15.jpg" data-thumbnail="/img/Operating System/chapter3-15.jpg" data-sub-html="<h2>神书(《计算机体系结构——量化研究方法》)</h2>">
        
    </a><figcaption class="image-caption">神书(<code>《计算机体系结构——量化研究方法》</code>)</figcaption>
    </figure>
<h4 id="多处理器间即时可见性的丧失">多处理器间即时可见性的丧失</h4>
<blockquote>
<p>满足单处理器 eventual memory consistency 的执行，在多处理器上可能无法序列化！</p>
</blockquote>
<p>当 $x \ne y$ 时，对 $x ,y$ 的内存读写可以交换顺序</p>
<ul>
<li>它们甚至可以在同一个周期里完成 (只要 load/store unit 支持)</li>
<li>如果写x发生 cache miss，可以让读y先执行
<ul>
<li>满足 “尽可能执行 “$\mu op$” 的原则，最大化处理器性能</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">     # &lt;-----------+
</span></span><span class="line"><span class="cl">movl $1, (x)   #   |
</span></span><span class="line"><span class="cl">movl (y), %eax # --+
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在多处理器上的表现
<ul>
<li>两个处理器分别看到 $y=0 和 x=0\newline$</li>
</ul>
</li>
</ul>
<h4 id="宽松内存模型-relaxedweak-memory-model">宽松内存模型 (Relaxed/Weak Memory Model)</h4>
<blockquote>
<p>宽松内存模型的目的是使单处理器的执行更高效。</p>
</blockquote>
<p>x86 已经是市面上能买到的 “最强” 的内存模型了 😂</p>
<ul>
<li>这也是 Intel 自己给自己加的包袱</li>
<li>看看 <a href="https://research.swtch.com/mem-weak@2x.png" target="_blank" rel="noopener noreffer">ARM/RISC-V</a> 吧，根本就是个分布式系统</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-16.png" title="/img/Operating System/chapter3-16.png" data-thumbnail="/img/Operating System/chapter3-16.png" data-sub-html="<h2>x86(内存模型)</h2>">
        
    </a><figcaption class="image-caption">x86(<code>内存模型</code>)</figcaption>
    </figure>
<p><strong>(x86-TSO in <a href="https://research.swtch.com/hwmm" target="_blank" rel="noopener noreffer">Hardware memory models</a> by Russ Cox)</strong></p>
<hr>
<p><strong>ARM/RISC-V</strong></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-17.png" title="/img/Operating System/chapter3-17.png" data-thumbnail="/img/Operating System/chapter3-17.png" data-sub-html="<h2>ARM/RISC-V(内存模型)</h2>">
        
    </a><figcaption class="image-caption">ARM/RISC-V(<code>内存模型</code>)</figcaption>
    </figure>
<h4 id="实现顺序一致性">实现顺序一致性</h4>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-18.png" title="/img/Operating System/chapter3-18.png" data-thumbnail="/img/Operating System/chapter3-18.png" data-sub-html="<h2>改良(内存模型)</h2>">
        
    </a><figcaption class="image-caption">改良(<code>内存模型</code>)</figcaption>
    </figure>
<hr>
<p>软件做不到，硬件来帮忙</p>
<ul>
<li>
<p>Memory barrier: __sync_synchronize() (RTFM)</p>
<ul>
<li>Compiler barrier + fence 指令</li>
<li>插入 fence 指令后，将阻止 x=y=0</li>
</ul>
</li>
<li>
<p>原子指令 (lock,prefix, lr/sc, &hellip;)</p>
<ul>
<li><code>stdatomic.h</code></li>
</ul>
</li>
</ul>
<p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">flag</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define FLAG atomic_load(&amp;flag)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define FLAG_XOR(val) atomic_fetch_xor(&amp;flag, val)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define WAIT_FOR(cond) while (!(cond)) ;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_x_read_y</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// x = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;mfence;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// y_val = y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">y_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">y_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_y_read_x</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// y = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;mfence;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// x_val = x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">x_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">x_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T1</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_x_read_y</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_y_read_x</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tsync</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">__sync_synchronize</span><span class="p">();</span> <span class="c1">// full barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>            <span class="c1">// + delay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// T1 and T2 clear 0/1-bit, respectively
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WAIT_FOR</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsync</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>不会再看见00的组合了</p>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何理解多处理器系统？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>多处理器编程：入门
<ul>
<li>多处理器程序 = 状态机 (共享内存；非确定选择线程执行)</li>
<li>thread.h = create + join</li>
</ul>
</li>
<li>多处理器编程：放弃你对 “程序” 的旧理解
<ul>
<li>不原子、能乱序、不立即可见（现代处理器就是一个动态的数据流分析器）
<ul>
<li>来自于编译优化 (处理器也是编译器)</li>
<li><a href="https://www.usenix.org/events/osdi10/tech/full_papers/Xiong.pdf" target="_blank" rel="noopener noreffer">Ad hoc synchronization considered harmful</a> (OSDI'10)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter2 操作系统上的程序</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter2/</link>
    <pubDate>Sat, 31 Dec 2022 19:30:30 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter2/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="操作系统上的程序">操作系统上的程序</h2>
<h3 id="overview">Overview</h3>
<h4 id="复习">复习</h4>
<p>什么是操作系统？</p>
<ul>
<li>应用视角 (设计): 一组对象 (进程/文件/&hellip;) + API</li>
<li>硬件视角 (实现): 一个 C 程序</li>
</ul>
<h4 id="本次课程主要问题">本次课程主要问题</h4>
<ul>
<li>到底什么是”程序”？</li>
</ul>
<h4 id="本次课主要内容">本次课主要内容</h4>
<ul>
<li>程序的状态机模型 (和编译器)</li>
<li>操作系统上的 {最小/一般/图形} 程序</li>
</ul>
<h3 id="状态机与数字电路">状态机与数字电路</h3>
<p>数字逻辑电路</p>
<ul>
<li>状态 = 寄存器保存的值 (flip-flop)</li>
<li>初始状态 = RESET (implementation dependent)</li>
<li>迁移 = 组合逻辑电路计算寄存器下一周期的值</li>
</ul>
<p>例子：
$$
\begin{align}
&amp;X^{&rsquo;}= \neg X \wedge Y\newline
&amp;Y^{&rsquo;}= \neg X \wedge \neg Y\newline
\end{align}
$$</p>
<div class="mermaid" id="id-1"></div>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define REGS_FOREACH(_)  _(X) _(Y)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define RUN_LOGIC        X1 = !X &amp;&amp; Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         Y1 = !X &amp;&amp; !Y;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define DEFINE(X)        static int X, X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UPDATE(X)        X = X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PRINT(X)         printf(#X &#34; = %d; &#34;, X);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// clock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">RUN_LOGIC</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">PRINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">UPDATE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>宏展开</p>
<p>使用mingw命令(注意去掉头文件，否则头文件也会一并展开，就没法看了🤡)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -E main.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>展开后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">X1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">X1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">;</span> <span class="n">Y1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;X&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Y&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span> <span class="o">=</span> <span class="n">X1</span><span class="p">;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更完整的实现：数码管显示</p>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define REGS_FOREACH(_)  _(X) _(Y)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OUTS_FOREACH(_)  _(A) _(B) _(C) _(D) _(E) _(F) _(G)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define RUN_LOGIC        X1 = !X &amp;&amp; Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         Y1 = !X &amp;&amp; !Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         A  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         B  = 1; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         C  = (!X &amp;&amp; !Y) || (!X &amp;&amp; Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         D  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         E  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         F  = (!X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         G  = (X &amp;&amp; !Y);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define DEFINE(X)   static int X, X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UPDATE(X)   X = X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PRINT(X)    printf(#X &#34; = %d; &#34;, X);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// clock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">RUN_LOGIC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">OUTS_FOREACH</span><span class="p">(</span><span class="n">PRINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">UPDATE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>宏展开</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">X1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">A1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">B</span><span class="p">,</span> <span class="n">B1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">C</span><span class="p">,</span> <span class="n">C1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">D</span><span class="p">,</span> <span class="n">D1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">E</span><span class="p">,</span> <span class="n">E1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">F</span><span class="p">,</span> <span class="n">F1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">G</span><span class="p">,</span> <span class="n">G1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">X1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">;</span> <span class="n">Y1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">;</span> <span class="n">A</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">B</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">C</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">);</span> <span class="n">D</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">E</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">F</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">G</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;A&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">A</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;B&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">B</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;C&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;D&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">D</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;E&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">E</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;F&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">F</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;G&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">G</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span> <span class="o">=</span> <span class="n">X1</span><span class="p">;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>python后端</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">fileinput</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">TEMPLATE</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1"></span><span class="se">\033</span><span class="s1">[2J</span><span class="se">\033</span><span class="s1">[1;1f
</span></span></span><span class="line"><span class="cl"><span class="s1">     AAAAAAAAA
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    GGGGGGGGGG
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">    DDDDDDDDD
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span> 
</span></span><span class="line"><span class="cl"><span class="n">BLOCK</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">0</span><span class="p">:</span> <span class="s1">&#39;</span><span class="se">\033</span><span class="s1">[37m░</span><span class="se">\033</span><span class="s1">[0m&#39;</span><span class="p">,</span> <span class="c1"># STFW: ANSI Escape Code</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span><span class="p">:</span> <span class="s1">&#39;</span><span class="se">\033</span><span class="s1">[31m█</span><span class="se">\033</span><span class="s1">[0m&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">VARS</span> <span class="o">=</span> <span class="s1">&#39;ABCDEFG&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">VARS</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">globals</span><span class="p">()[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">stdin</span> <span class="o">=</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">exec</span><span class="p">(</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">pic</span> <span class="o">=</span> <span class="n">TEMPLATE</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">VARS</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">pic</span> <span class="o">=</span> <span class="n">pic</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">BLOCK</span><span class="p">[</span><span class="nb">globals</span><span class="p">()[</span><span class="n">v</span><span class="p">]])</span> <span class="c1"># &#39;A&#39; -&gt; BLOCK[A], ...</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">pic</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用方法</p>
<p>先通过gcc将c文件编译为exe文件</p>
<p>然后cmd命令端输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">logisim.exe <span class="p">|</span> python seven-seg.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果：循环出现如下画面</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-1.png" title="/img/Operating System/chapter2-1.png" data-thumbnail="/img/Operating System/chapter2-1.png" data-sub-html="<h2>python后端(image 1)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-2.png" title="/img/Operating System/chapter2-2.png" data-thumbnail="/img/Operating System/chapter2-2.png" data-sub-html="<h2>python后端(image 2)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-3.png" title="/img/Operating System/chapter2-3.png" data-thumbnail="/img/Operating System/chapter2-3.png" data-sub-html="<h2>python后端(image 3)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 3</code>)</figcaption>
    </figure>
<ul>
<li>
<p>会编程，你就拥有全世界！</p>
</li>
<li>
<p>同样的方式可以模拟任何数字系统</p>
<ul>
<li>当然，也包括计算机系统</li>
</ul>
</li>
</ul>
<p>UNIX 哲学</p>
<ul>
<li>Make each program do one thing well</li>
<li>Expect the output of every program to become the input to another</li>
</ul>
<h3 id="什么是程序源代码视角">什么是程序（源代码视角）</h3>
<p>程序就是状态机 (你在 gdb 里看到的)</p>
<p>代码：hanoi-r.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">hanoi</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="kt">char</span> <span class="n">to</span><span class="p">,</span> <span class="kt">char</span> <span class="n">via</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c -&gt; %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">via</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>     <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span>  <span class="n">via</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">via</span><span class="p">,</span>  <span class="n">to</span><span class="p">,</span>  <span class="n">from</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="c-程序的状态机模型角度一">C 程序的状态机模型（角度一）</h4>
<p><strong>(语义，semantics)</strong></p>
<ul>
<li>状态 = 堆 + 栈</li>
<li>初始状态 = <code>main</code> 的第一条语句</li>
<li>迁移 = 执行一条简单语句
<ul>
<li>任何 C 程序都可以改写成 “非复合语句” 的 C 代码</li>
<li><a href="https://cil-project.github.io/cil/" target="_blank" rel="noopener noreffer">真的有这种工具</a> (C Intermediate Language) 和<a href="https://gitlab.com/zsaleeba/picoc" target="_blank" rel="noopener noreffer">解释器</a></li>
</ul>
</li>
</ul>
<hr>
<p>(这还只是 “粗浅” 的理解)</p>
<ul>
<li>Talk is cheap. Show me the code. (Linus Torvalds): 任何真正的理解都应该落到可以执行的代码</li>
</ul>
<h4 id="c-程序的状态机模型角度二">C 程序的状态机模型（角度二）</h4>
<p><strong>(语义，semantics)</strong></p>
<ul>
<li>状态 = stack frame 的列表 (每个 frame 有 PC <code>program counter</code> ) + 全局变量</li>
<li>初始状态 = main(argc, argv), 全局变量初始化</li>
<li>迁移 = 执行 top stack frame PC 的语句; PC++
<ul>
<li>函数调用 = push frame (frame.PC = 入口)</li>
<li>函数返回 = pop frame</li>
</ul>
</li>
</ul>
<p><strong>应用：将任何递归程序就地转为非递归</strong>（模拟$stack$）</p>
<p>$hanoi-nr.c\newline$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">pc</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">via</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Frame</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define call(...) ({ *(++top) = (Frame) { .pc = 0, __VA_ARGS__ }; })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define ret()     ({ top--; })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define goto(loc) ({ f-&gt;pc = (loc) - 1; })
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">hanoi</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="kt">char</span> <span class="n">to</span><span class="p">,</span> <span class="kt">char</span> <span class="n">via</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Frame</span> <span class="n">stk</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="o">*</span><span class="n">top</span> <span class="o">=</span> <span class="n">stk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">call</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">via</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">Frame</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span> <span class="p">(</span><span class="n">f</span> <span class="o">=</span> <span class="n">top</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">stk</span><span class="p">;</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">pc</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">pc</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c -&gt; %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">);</span> <span class="k">goto</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">);</span>   <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span>       <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">);</span>  <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span> <span class="n">ret</span><span class="p">();</span>                                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">default</span><span class="o">:</span> <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>A → B, B → A 的迎刃而解
<ul>
<li>还是一样的 <code>call()</code>，但放入不同的 <code>Frame</code></li>
</ul>
</li>
</ul>
<h3 id="什么是程序-二进制代码视角">什么是程序 (二进制代码视角)</h3>
<p>还是状态机	(没看过南大的计算机基础和数字逻辑课到这多少有点🤡了)</p>
<ul>
<li>状态 = 内存 <code>M</code> + 寄存器 <code>R</code></li>
<li>初始状态 = (稍后回答)</li>
<li>迁移 = 执行一条指令
<ul>
<li>我们花了一整个《计算机系统基础》解释这件事</li>
<li>gdb 同样可以观察状态和执行</li>
</ul>
</li>
</ul>
<hr>
<p>操作系统上的程序</p>
<ul>
<li>
<p>所有的指令都只能<code>计算</code></p>
<ul>
<li>deterministic: mov, add, sub, call, &hellip;</li>
<li>non-deterministic: rdrand, &hellip;</li>
<li>但这些指令甚至都无法使程序停下来 ,直接🤡, 对于操作系统来说没有什么🐔用(NEMU: 加条 <code>trap</code> 指令)</li>
</ul>
</li>
</ul>
<h4 id="一条特殊的指令">一条特殊的指令</h4>
<p>调用操作系统 <code>syscall</code></p>
<ul>
<li>把(<code>M</code>, <code>R</code>)<strong>完全交给操作系统</strong>，任其修改
<ul>
<li>一个有趣的问题：如果程序不打算完全信任操作系统？</li>
</ul>
</li>
<li>实现与操作系统中的其他对象交互
<ul>
<li>读写文件/操作系统状态 (例如把文件内容写入 M<em>M</em>)</li>
<li>改变进程 (运行中状态机) 的状态，例如创建进程/销毁自己</li>
</ul>
</li>
</ul>
<hr>
<p><strong>程序 = 计算 + syscall</strong></p>
<div class="mermaid" id="id-2"></div>
<h4 id="问题怎么构造一个最小的-hello-world">问题：怎么构造一个最小的 Hello, World？</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>gcc 编译出来的文件不满足 “最小”</p>
<ul>
<li><code>--verbose</code>可以查看所有编译选项 (真不少)
<ul>
<li><code>printf </code>变成了 puts@plt</li>
</ul>
</li>
<li><code>-static</code> 会复制 libc</li>
</ul>
<p>gcc能玩的这么多，看来✌️之前天天靠现成$IDE$多少沾点🤡了</p>
<p>实际使用<code>--verbose</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc --verbose hello.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-4.png" title="/img/Operating System/chapter2-4.png" data-thumbnail="/img/Operating System/chapter2-4.png" data-sub-html="<h2>效果(on windows)</h2>">
        
    </a><figcaption class="image-caption">效果(<code>on windows</code>)</figcaption>
    </figure>
<p>实际使用<code>–static</code>(不依赖动态链接库)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -static hello.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译出来的文件会很大（我的是53KB）</p>
<hr>
<p>直接硬来？</p>
<p>强行编译 + 链接：<code>gcc -c</code> + <code>ld</code></p>
<ul>
<li>
<p>直接用 ld 链接失败</p>
<ul>
<li>ld 不知道怎么链接库函数……</li>
</ul>
</li>
<li>
<p>空的 main 函数倒是可以</p>
<ul>
<li>链接时得到奇怪的警告 (可以定义成 <code>_start</code> 避免警告)</li>
<li>但 Segmentation Fault 了……</li>
</ul>
</li>
</ul>
<p>找了一下<code>Segmentation Fault</code></p>
<p>$From\ wikipedia\newline$
$\rightarrow$ <a href="https://en.wikipedia.org/wiki/Segmentation_fault" target="_blank" rel="noopener noreffer">address</a></p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Computing" target="_blank" rel="noopener noreffer">computing</a>, a <strong>segmentation fault</strong> (often shortened to <strong>segfault</strong>) or <strong>access violation</strong> is a <a href="https://en.wikipedia.org/wiki/Fault_%28computing%29" target="_blank" rel="noopener noreffer">fault</a>, or failure condition, raised by hardware with <a href="https://en.wikipedia.org/wiki/Memory_protection" target="_blank" rel="noopener noreffer">memory protection</a>, notifying an <a href="https://en.wikipedia.org/wiki/Operating_system" target="_blank" rel="noopener noreffer">operating system</a> (OS) the software has attempted to access a restricted area of memory (a memory access violation). On standard <a href="https://en.wikipedia.org/wiki/X86" target="_blank" rel="noopener noreffer">x86</a> computers, this is a form of <a href="https://en.wikipedia.org/wiki/General_protection_fault" target="_blank" rel="noopener noreffer">general protection fault</a>. The <a href="https://en.wikipedia.org/wiki/Operating_system_kernel" target="_blank" rel="noopener noreffer">operating system kernel</a> will, in response, usually perform some corrective action, generally passing the fault on to the offending <a href="https://en.wikipedia.org/wiki/Process_%28computing%29" target="_blank" rel="noopener noreffer">process</a> by sending the process a <a href="https://en.wikipedia.org/wiki/Signal_%28computing%29" target="_blank" rel="noopener noreffer">signal</a>. Processes can in some cases install a custom signal handler, allowing them to recover on their own,[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-Peter_Van_der_Linden-1" target="_blank" rel="noopener noreffer">1]</a> but otherwise the OS default signal handler is used, generally causing <a href="https://en.wikipedia.org/wiki/Abnormal_termination" target="_blank" rel="noopener noreffer">abnormal termination</a> of the process (a program <a href="https://en.wikipedia.org/wiki/Crash_%28computing%29" target="_blank" rel="noopener noreffer">crash</a>), and sometimes a <a href="https://en.wikipedia.org/wiki/Core_dump" target="_blank" rel="noopener noreffer">core dump</a>.</p>
<p>Segmentation faults are a common class of error in programs written in languages like <a href="https://en.wikipedia.org/wiki/C_%28programming_language%29" target="_blank" rel="noopener noreffer">C</a> that provide low-level memory access and few to no safety checks. They arise primarily due to errors in use of <a href="https://en.wikipedia.org/wiki/Pointer_%28computer_programming%29" target="_blank" rel="noopener noreffer">pointers</a> for <a href="https://en.wikipedia.org/wiki/Virtual_memory" target="_blank" rel="noopener noreffer">virtual memory</a> addressing, particularly illegal access. Another type of memory access error is a <a href="https://en.wikipedia.org/wiki/Bus_error" target="_blank" rel="noopener noreffer">bus error</a>, which also has various causes, but is today much rarer; these occur primarily due to incorrect <em>physical</em> memory addressing, or due to misaligned memory access – these are memory references that the hardware <em>cannot</em> address, rather than references that a process is not <em>allowed</em> to address.</p>
<p>Many programming languages may employ mechanisms designed to avoid segmentation faults and improve memory safety. For example, <a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29" target="_blank" rel="noopener noreffer">Rust</a> employs an ownership-based[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-2" target="_blank" rel="noopener noreffer">2]</a> model to ensure memory safety.[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-3" target="_blank" rel="noopener noreffer">3]</a> Other languages, such as <a href="https://en.wikipedia.org/wiki/Lisp_%28programming_language%29" target="_blank" rel="noopener noreffer">Lisp</a> and <a href="https://en.wikipedia.org/wiki/Java_%28programming_language%29" target="_blank" rel="noopener noreffer">Java</a>, employ <a href="https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" target="_blank" rel="noopener noreffer">garbage collection</a>,[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-4" target="_blank" rel="noopener noreffer">4]</a> which avoids certain classes of memory errors that could lead to segmentation faults.[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-5" target="_blank" rel="noopener noreffer">5]</a></p>
</blockquote>
<p>主要和非法访问内存有关</p>
<p>解决方法：观察程序（状态机）执行</p>
<ul>
<li>
<p><code>starti</code>可以帮助我们从<strong>第一条指令</strong>开始执行程序</p>
<ul>
<li><code>gdb</code> 可以在两种状态机视角之间切换 (<code>layout</code>) <a href="http://sourceware.org/gdb/documentation/" target="_blank" rel="noopener noreffer">GDB官方文档</a></li>
</ul>
</li>
</ul>
<p>定位出错位置</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-5.png" title="/img/Operating System/chapter2-5.png" data-thumbnail="/img/Operating System/chapter2-5.png" data-sub-html="<h2>出错位置(on linux)</h2>">
        
    </a><figcaption class="image-caption">出错位置(<code>on linux</code>)</figcaption>
    </figure>
<p><code>retq</code>:栈由<code>rsp</code>（寄存器）控制,<code>retq</code>就是从<code>rsp</code>寄存器当中取出8个字节，赋值给<code>rip</code>(pc)，然后<code>rsp &lt;- rsp + 8</code>（往上挪一格）（栈向下增长）</p>
<p>初始<code>rsp</code>顶部为1</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-6.png" title="/img/Operating System/chapter2-6.png" data-thumbnail="/img/Operating System/chapter2-6.png" data-sub-html="<h2>查看错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">查看错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>栈</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-7.png" title="/img/Operating System/chapter2-7.png" data-thumbnail="/img/Operating System/chapter2-7.png" data-sub-html="<h2>查看错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">查看错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>但是当执行完有问题的语句之后<code>retq</code>，<code>rip</code>就变成了8</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-8.png" title="/img/Operating System/chapter2-8.png" data-thumbnail="/img/Operating System/chapter2-8.png" data-sub-html="<h2>出现错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">出现错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>非法访问，触发了<code>Segmentation Fault</code></p>
<p><strong>所以该程序能被操作系统正确的执行，但没有办法返回，问题出在初始状态上（即错误的指令）</strong></p>
<h5 id="解决异常退出">解决异常退出</h5>
<p>有办法让状态机 “停下来” 吗？</p>
<ul>
<li>纯 “计算” 的状态机：不行</li>
<li>要么死循环，要么 undefined behavior</li>
</ul>
<p>解决办法：<code>syscall</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span><span class="p">(</span><span class="n">SYS_exit</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>linux</code>环境下使用<code>gdb</code>进行调试</p>
<p>发现调用了<code>syscall</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-9.png" title="/img/Operating System/chapter2-9.png" data-thumbnail="/img/Operating System/chapter2-9.png" data-sub-html="<h2>gdb(on linux)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>on linux</code>)</figcaption>
    </figure>
<p>进入<code>syscall</code>继续查看</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-10.png" title="/img/Operating System/chapter2-10.png" data-thumbnail="/img/Operating System/chapter2-10.png" data-sub-html="<h2>gdb(继续查看)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>继续查看</code>)</figcaption>
    </figure>
<p>发现该函数给一大堆寄存器赋了值，赋完值之后会执行一个<code>syscall</code>指令</p>
<p>实质：准备好一个系统调用的参数，然后把自己完全交给操作系统</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-11.png" title="/img/Operating System/chapter2-11.png" data-thumbnail="/img/Operating System/chapter2-11.png" data-sub-html="<h2>gdb(可以看到退出码)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>可以看到退出码</code>)</figcaption>
    </figure>
<p>（终止）</p>
<ul>
<li>调试代码：syscall 的实现在哪里？
<ul>
<li>坏消息：在 libc 里，不方便直接链接</li>
<li>好消息：代码很短，而且似乎看懂了</li>
</ul>
</li>
</ul>
<h5 id="hello-world的汇编实现">Hello, World的汇编实现</h5>
<p>minmal.S</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_write</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">write</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">fd</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span>        <span class="o">%</span><span class="n">rsi</span>   <span class="err">#</span>   <span class="n">buf</span><span class="o">=</span><span class="n">st</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>   <span class="err">#</span>   <span class="n">count</span><span class="o">=</span><span class="n">ed</span><span class="o">-</span><span class="n">st</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_exit</span><span class="p">,</span>  <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">exit</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">status</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Note: gcc 支持对汇编代码的预编译 (还会定义 <code>__ASSEMBLER__</code> 宏)</p>
<p>运行成功，红色的hello,world（<code>linux</code>开始💩🐴犯病，用gdb才调出来）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-12.png" title="/img/Operating System/chapter2-12.png" data-thumbnail="/img/Operating System/chapter2-12.png" data-sub-html="<h2>运行程序(on gdb)</h2>">
        
    </a><figcaption class="image-caption">运行程序(<code>on gdb</code>)</figcaption>
    </figure>
<p>宏展开结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -E minmal.S
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span> <span class="err">#</span> <span class="n">write</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span> <span class="err">#</span> <span class="n">fd</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span> <span class="o">%</span><span class="n">rsi</span> <span class="err">#</span> <span class="n">buf</span><span class="o">=</span><span class="n">st</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span> <span class="err">#</span> <span class="n">count</span><span class="o">=</span><span class="n">ed</span><span class="o">-</span><span class="n">st</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span> <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">60</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span> <span class="err">#</span> <span class="n">exit</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span> <span class="err">#</span> <span class="n">status</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span> <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>深究<code>syscall</code></p>
<p>使用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">man syscall
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以直接查看手册</p>
<hr>
<p>回顾：状态机视角的程序</p>
<ul>
<li>程序 = 计算 → <code>syscall </code>→ 计算 → &hellip;</li>
</ul>
<h6 id="彩蛋ansi-escape-code">彩蛋：ANSI Escape Code</h6>
<blockquote>
<p>为什么 Hello World 有颜色？？</p>
</blockquote>
<p>特殊编码的字符实现终端控制</p>
<ul>
<li>
<p><a href="https://git.busybox.net/busybox/tree/editors/vi.c" target="_blank" rel="noopener noreffer">vi.c</a> from busybox</p>
</li>
<li>
<p><code>telnet towel.blinkenlights.nl</code> (电影；Ctrl-] and q 退出)</p>
</li>
<li>
<p><code>dialog --msgbox 'Hello, OS World!' 8 32</code></p>
</li>
<li>
<p><code>ssh sshtron.zachlatta.com</code>(网络游戏)</p>
<ul>
<li>
<p>所以编程可以从一开始就不那么枯燥</p>
</li>
<li>
<p>看似复杂，实际简单明了</p>
</li>
</ul>
</li>
</ul>
<h3 id="编译器与编译优化">编译器与编译优化</h3>
<p>“状态机” 顺便解决了一个非常重要的基本问题：</p>
<blockquote>
<p>什么是编译器？？？</p>
</blockquote>
<p>编译器：源代码 <code>S</code>(状态机) → 二进制代码 <code>C</code> (状态机)</p>
<p>$C = \textrm{compile}(S)\newline$</p>
<p>编译 (优化) 的正确性 (Soundness):</p>
<ul>
<li>S<em>S</em> 与 C<em>C</em> 的可观测行为严格一致
<ul>
<li>system calls; volatile variable loads/stores; termination</li>
</ul>
</li>
<li><code>Trivially</code> 正确 (但低效) 的实现
<ul>
<li>解释执行/直接翻译 <code>S</code>的语义</li>
</ul>
</li>
</ul>
<h4 id="现代-与未来的-编译优化">现代 (与未来的) 编译优化</h4>
<p>在保证观测一致性 (sound) 的前提下改写代码 (rewriting)</p>
<ul>
<li>
<p>Inline assembly 也可以参与优化</p>
<ul>
<li>其他优化可能会跨过不带 barrier 的 <code>asm volatile</code></li>
</ul>
</li>
<li>
<p>Eventual memory consistency</p>
</li>
<li>
<p>Call to external CU = write back visible memory</p>
<ul>
<li>talk is cheap, show me the code!</li>
</ul>
</li>
</ul>
<hr>
<p>这给了我们很多想象的空间（🐮🍺的东西）</p>
<ul>
<li>Semantic-based compilation (synthesis)</li>
<li>AI-based rewriting</li>
<li>Fine-grained semantics &amp; system call fusion</li>
</ul>
<p>不可优化的部分可以进行合并？（🐮🍺的东西）</p>
<h4 id="进入-plprogramming-language-的领域">进入 PL(Programming language) 的领域</h4>
<p>PL 领域 (的很多人) 有一种倾向：用数学化的语言定义和理解一切 (all about semantics)</p>
<ul>
<li><del>所以你看一眼 paper 就觉得自己瞎了</del></li>
<li>但背后的直觉依然是 system/software 的
<ul>
<li>(我们是人，不是无情的数学机器 😂)</li>
<li>溜了溜了，回到 system 的世界</li>
</ul>
</li>
</ul>
<hr>
<p>Further readings</p>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/2103621.2103719" target="_blank" rel="noopener noreffer">An executable formal semantics of C with applications</a> (POPL'12)</li>
<li><a href="https://compcert.org/motivations.html" target="_blank" rel="noopener noreffer">CompCert C verified compiler</a> and a <a href="https://xavierleroy.org/publi/compcert-backend.pdf" target="_blank" rel="noopener noreffer">paper</a> (POPL'06, Most Influential Paper Award :gold medal🐮)</li>
<li><a href="https://dl.acm.org/doi/10.1145/3485513" target="_blank" rel="noopener noreffer">Copy-and-patch compilation</a> (OOPSLA'21, Distinguished Paper 🐮)</li>
</ul>
<h3 id="操作系统中的程序">操作系统中的程序</h3>
<h4 id="操作系统中的一般程序">操作系统中的一般程序</h4>
<blockquote>
<p>和 <a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a> 没有本质区别：程序 = 计算 → syscall → &hellip;</p>
</blockquote>
<p>操作系统收编了所有的硬件/软件资源</p>
<ul>
<li>只能用操作系统允许的方式访问操作系统中的对象
<ul>
<li>从而实现操作系统的 “霸主” 地位</li>
<li>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/tryopen.c" target="_blank" rel="noopener noreffer">tryopen.c</a></li>
</ul>
</li>
<li>这是为 “管理多个状态机” 所必须的
<ul>
<li>不能打架，谁有权限就给他</li>
</ul>
</li>
</ul>
<p>tryopen.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">try_open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;open(</span><span class="se">\&#34;</span><span class="s">%s</span><span class="se">\&#34;</span><span class="s">) returns %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">perror</span><span class="p">(</span><span class="s">&#34;  FAIL&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;  SUCCESS!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">try_open</span><span class="p">(</span><span class="s">&#34;/something/not/exist&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">try_open</span><span class="p">(</span><span class="s">&#34;/dev/sda&#34;</span><span class="p">);</span> <span class="c1">// hard drive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc tryopen.c <span class="o">&amp;&amp;</span> ./a.out
</span></span><span class="line"><span class="cl">open<span class="o">(</span><span class="s2">&#34;/something/not/exist&#34;</span><span class="o">)</span> returns -1
</span></span><span class="line"><span class="cl">  FAIL: No such file or directory
</span></span><span class="line"><span class="cl">open<span class="o">(</span><span class="s2">&#34;/dev/sda&#34;</span><span class="o">)</span> returns -1
</span></span><span class="line"><span class="cl">  FAIL: Permission denied
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="二进制-程序也是操作系统中的对象">(二进制) 程序也是操作系统中的对象</h4>
<p>可执行文件</p>
<ul>
<li>与大家日常使用的文件 (a.c, README.txt) 没有本质区别</li>
<li>操作系统提供 API 打开、读取、改写 (都需要相应的权限)</li>
</ul>
<hr>
<p>查看可执行文件</p>
<ul>
<li>
<p><code>vim</code>,<code>cat</code>,<code>xxd</code></p>
<p>都可以直接查看可执行文件</p>
<ul>
<li><code>vim</code> 中二进制的部分无法 “阅读”，但可以看到字符串常量</li>
<li>使用 <code>xxd</code> 可以看到文件以 <code>&quot;\x7f&quot; &quot;ELF&quot;</code> 开头</li>
<li>vscode 有 <code>binary editor</code> 插件</li>
</ul>
</li>
</ul>
<h4 id="系统中常见的应用程序">系统中常见的应用程序</h4>
<p>Core Utilities (coreutils)</p>
<ul>
<li><em>standard</em> programs for text and file manipulation</li>
<li>系统中安装的是 <a href="https://www.gnu.org/software/coreutils/" target="_blank" rel="noopener noreffer">GNU Coreutils</a>
<ul>
<li>有较小的替代品 <a href="https://www.busybox.net/" target="_blank" rel="noopener noreffer">busybox</a></li>
</ul>
</li>
</ul>
<hr>
<p>系统/工具程序</p>
<ul>
<li>
<p>bash,binutils, apt, ip, ssh, vim, tmux, jdk, python, &hellip;</p>
<ul>
<li>
<p>这些工具的原理都不复杂 (例如 apt 其实只是 dpkg 的壳)</p>
</li>
<li>
<p><a href="https://packages.ubuntu.com/" target="_blank" rel="noopener noreffer">Ubuntu Packages</a> (和 apt-file 工具) 支持文件名检索</p>
<ul>
<li>例子：找不到 <code>SDL2/SDL.h</code> 时&hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>其他各种应用程序</p>
<ul>
<li>浏览器、音乐播放器……</li>
</ul>
<h4 id="操作系统中的程序dark-side">操作系统中的程序：Dark Side</h4>
<blockquote>
<p>杀人的面试题 (1)：一个普通的、人畜无害的 Hello World C 程序执行的第一条指令在哪里？</p>
</blockquote>
<p>等价问法</p>
<ul>
<li>“二进制程序状态机的初始状态是什么？”
<ul>
<li><code>main</code> 的第一条指令 ❌</li>
<li><code>libc</code> 的 <code>_start</code> ❌</li>
</ul>
</li>
</ul>
<hr>
<p>问 gdb 吧</p>
<ul>
<li><code>info proc {mappings,...}</code> - 打印进程内存</li>
</ul>
<p>使用<code>gdb</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-13.png" title="/img/Operating System/chapter2-13.png" data-thumbnail="/img/Operating System/chapter2-13.png" data-sub-html="<h2>gdb(查看入口)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>查看入口</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">0x00007ffff7fe32b0 in _start <span class="o">()</span> from /lib64/ld-linux-x86-64.so.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>info proc mappings</code>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> info proc mappings 
</span></span><span class="line"><span class="cl">process <span class="m">48808</span>
</span></span><span class="line"><span class="cl">Mapped address spaces:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          Start Addr           End Addr       Size     Offset  Perms  objfile
</span></span><span class="line"><span class="cl">      0x555555554000     0x555555555000     0x1000        0x0  r--p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555555000     0x555555556000     0x1000     0x1000  r-xp   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555556000     0x555555557000     0x1000     0x2000  r--p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555557000     0x555555559000     0x2000     0x2000  rw-p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x7ffff7fbd000     0x7ffff7fc1000     0x4000        0x0  r--p   <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">      0x7ffff7fc1000     0x7ffff7fc3000     0x2000        0x0  r-xp   <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">      0x7ffff7fc3000     0x7ffff7fc5000     0x2000        0x0  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7fc5000     0x7ffff7fef000    0x2a000     0x2000  r-xp   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7fef000     0x7ffff7ffa000     0xb000    0x2c000  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7ffb000     0x7ffff7fff000     0x4000    0x37000  rw-p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffffffde000     0x7ffffffff000    0x21000        0x0  rw-p   <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">  0xffffffffff600000 0xffffffffff601000     0x1000        0x0  --xp   <span class="o">[</span>vsyscall<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="main-之前发生了什么"><code>main()</code> 之前发生了什么？</h5>
<p><code>ld-linux-x86-64.so</code> 加载了 libc</p>
<ul>
<li>之后 libc 完成了自己的初始化
<ul>
<li>RTFM: <a href="https://www.gnu.org/software/hurd/glibc/startup.html" target="_blank" rel="noopener noreffer">libc startup</a> on Hurd</li>
<li><code>main()</code> 的开始/结束并不是整个程序的开始/结束</li>
<li>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/hello-goodbye.c" target="_blank" rel="noopener noreffer">hello-goodbye.c</a></li>
</ul>
</li>
</ul>
<hr>
<p>谁规定是 <code>ld-linux-x86-64.so</code>，而不是 <code>rtfm.so</code>？</p>
<ul>
<li>readelf 告诉你答案</li>
<li>(计算机系统不存在玄学；一切都建立在确定的机制上)
<ul>
<li>回顾 <code>gcc --verbose</code></li>
</ul>
</li>
</ul>
<p><code>hello-goodbye.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// See also: atexit(3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">goodbye</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Goodbye, Cruel OS World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter2-14.png" title="/img/Operating System/chapter2-14.png" data-thumbnail="/img/Operating System/chapter2-14.png" data-sub-html="<h2>vim(汇编代码)</h2>">
        
    </a><figcaption class="image-caption">vim(<code>汇编代码</code>)</figcaption>
    </figure>
<p>后面老师hacker改二进制代码的时候✌️的👀已经跟不上了，脑子更是直接💩🐴</p>
<blockquote>
<p>杀人的面试题 (2)：main 执行之前、执行中、执行后，发生了哪些操作系统 API 调用？</p>
</blockquote>
<hr>
<p>呃……</p>
<ul>
<li>(计算机系统不存在玄学；一切都建立在确定的机制上)</li>
<li>所以你应该有一个强烈的信念：这个问题是可以回答的</li>
</ul>
<h4 id="打开程序的执行trace-踪迹">打开程序的执行：Trace (踪迹)</h4>
<blockquote>
<p>In general, trace refers to the process of following <em>anything</em> from the beginning to the end. For example, the <code>traceroute</code> command follows each of the network hops as your computer connects to another computer.</p>
</blockquote>
<p>这门课中很重要的工具：strace</p>
<ul>
<li>system call trace</li>
<li>理解程序运行时使用的系统调用
<ul>
<li>demo: <code>strace ./hello-goodbye</code></li>
<li>在这门课中，你能理解 strace 的输出并在你自己的操作系统里实现相当一部分系统调用 (mmap, execve, &hellip;)</li>
</ul>
</li>
</ul>
<p>使用<code>strace</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-15.png" title="/img/Operating System/chapter2-15.png" data-thumbnail="/img/Operating System/chapter2-15.png" data-sub-html="<h2>linux(使用strace)</h2>">
        
    </a><figcaption class="image-caption">linux(<code>使用strace</code>)</figcaption>
    </figure>
<h4 id="本质上所有的程序和-hello-world-类似">本质上，所有的程序和 Hello World 类似</h4>
<p>程序 = 状态机 = 计算 → syscall → 计算 →</p>
<ul>
<li>
<p>被操作系统加载</p>
<ul>
<li>通过另一个进程执行 execve 设置为初始状态</li>
</ul>
</li>
<li>
<p>状态机执行</p>
<ul>
<li>进程管理：fork, execve, exit, &hellip;</li>
<li>文件/设备管理：open, close, read, write, &hellip;</li>
<li>存储管理：mmap, brk, &hellip;</li>
</ul>
</li>
<li>
<p>直到 _exit (exit_group) 退出</p>
</li>
</ul>
<hr>
<ul>
<li>说好的浏览器、游戏、杀毒软件、病毒呢？都是这些 API 吗？💢💢💢(都是) $\rightarrow$🐮🍺</li>
</ul>
<h4 id="yes---这些-api-就是操作系统的全部">Yes! - 这些 API 就是操作系统的全部</h4>
<p>编译器 (gcc)，代表其他工具程序</p>
<ul>
<li>
<p>主要的系统调用：execve, read, write</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace -f gcc a.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>(gcc 会启动其他进程)</p>
<ul>
<li>可以管道给编辑器 <code>vim -</code></li>
<li>编辑器里还可以 <code>%!grep</code> (细节/技巧)</li>
</ul>
</li>
</ul>
<hr>
<p>图形界面程序 (xedit)，代表其他图形界面程序 (例如 vscode)</p>
<ul>
<li>
<p>主要的系统调用：poll, recvmsg, writev</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace xedit
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>图形界面程序和 X-Window 服务器按照 X11 协议通信</li>
<li>虚拟机中的 <code>xedit</code> 将 <code>X11</code> 命令通过<code>ssh</code>(X11 forwarding) 转发到 Host</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-16.png" title="/img/Operating System/chapter2-16.png" data-thumbnail="/img/Operating System/chapter2-16.png" data-sub-html="<h2>strace(xedit)</h2>">
        
    </a><figcaption class="image-caption">strace(<code>xedit</code>)</figcaption>
    </figure>
<h4 id="各式各样的应用程序">各式各样的应用程序</h4>
<p>都在操作系统 API (syscall) 和操作系统中的对象上构建</p>
<ul>
<li>窗口管理器
<ul>
<li>管理设备和屏幕 (read/write/mmap)</li>
<li>进程间通信 (send, recv)</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>任务管理器
<ul>
<li>访问操作系统提供的进程对象 (readdir/read)</li>
<li>参考 gdb 里的 <code>info proc *</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>杀毒软件
<ul>
<li>文件静态扫描 (read)</li>
<li>主动防御 (ptrace)</li>
<li>其他更复杂的安全机制……</li>
</ul>
</li>
</ul>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 到底什么是 “程序”？</li>
</ul>
<hr>
<p>$Take-away\ message\newline$</p>
<ul>
<li>程序 = 状态机
<ul>
<li>源代码 S: 状态迁移 = 执行语句</li>
<li>二进制代码 C: 状态迁移 = 执行指令</li>
<li>编译器 $C=compile(S)\newline$</li>
</ul>
</li>
<li>应用视角的操作系统
<ul>
<li>就是一条 <code>syscall</code> 指令</li>
</ul>
</li>
<li>计算机系统不存在玄学；一切都建立在确定的机制上
<ul>
<li>理解操作系统的重要工具：<code>gcc</code>, <code>binutils</code>, <code>gdb</code>, <code>strace</code></li>
</ul>
</li>
</ul>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter1 操作系统概述</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter1/</link>
    <pubDate>Fri, 30 Dec 2022 16:27:09 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter1/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="操作系统概述">操作系统概述</h2>
<p>$Overvier\newline$</p>
<ul>
<li>为什么要学操作系统? $(why)\newline$</li>
<li>到底什么是操作系统? $(what)\newline$</li>
<li>怎么学操作系统? $(how)\newline$</li>
</ul>
<h3 id="为什么学操作系统whynewline">为什么学操作系统?$(why)\newline$</h3>
<ul>
<li>
<p>每天都在用的东西你没搞明白 $\rightarrow$ 窗口是怎么创建的？ 为什么$Ctrl-C$有时不能退出程序？</p>
</li>
<li>
<p>组里的服务器有128个处理器，而你的程序却只能用一个 😂</p>
</li>
<li>
<p>你每天都在用的东西，却实现不出来🤡 $\rightarrow$ 浏览器，编译器，$IDE$，游戏/外挂，任务管理器，杀毒软件，病毒…</p>
</li>
</ul>
<p>学完：</p>
<p>悟性好 $\rightarrow$ 系统方向“毕业”，具有编写一切“能写出来”程序的能力（具备阅读论文的能力）</p>
<p>悟性差 $\rightarrow$ 内力大增， 可能在工作中的某一天想起上课的内容</p>
<h3 id="什么是操作系统whatnewline">什么是操作系统?$(what)\newline$</h3>
<blockquote>
<p>Operating System: A body of software, in fact, that is responsible for <em>making it easy to run programs</em> (even allowing you to seemingly run many at the same time), allowing programs to share memory, enabling programs to interact with devices, and other fun stuff like that. (OSTEP)</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-1.png" title="/img/Operating System/chapter1-1.png" data-thumbnail="/img/Operating System/chapter1-1.png" data-sub-html="<h2>From PPT(什么是操作系统？)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>什么是操作系统？</code>)</figcaption>
    </figure>
<p>Question:操作系统如何从一开始变成现在这样的？</p>
<p>$\rightarrow$ 三个重要的线索</p>
<blockquote>
<p>计算机（硬件）</p>
<p>程序（软件）</p>
<p>操作系统（管理软件的软件）</p>
</blockquote>
<h4 id="操作系统历史">操作系统历史</h4>
<h5 id="1940s">1940s</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-2.png" title="/img/Operating System/chapter1-2.png" data-thumbnail="/img/Operating System/chapter1-2.png" data-sub-html="<h2>From PPT(1940s 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-3.jpg" title="/img/Operating System/chapter1-3.jpg" data-thumbnail="/img/Operating System/chapter1-3.jpg" data-sub-html="<h2>From PPT(1940s 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-4.jpg" title="/img/Operating System/chapter1-4.jpg" data-thumbnail="/img/Operating System/chapter1-4.jpg" data-sub-html="<h2>From PPT(1940s 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-5.png" title="/img/Operating System/chapter1-5.png" data-thumbnail="/img/Operating System/chapter1-5.png" data-sub-html="<h2>From PPT(1940s 4)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 4</code>)</figcaption>
    </figure>
<h5 id="1950s">1950s</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-6.png" title="/img/Operating System/chapter1-6.png" data-thumbnail="/img/Operating System/chapter1-6.png" data-sub-html="<h2>From PPT(1950s 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-7.png" title="/img/Operating System/chapter1-7.png" data-thumbnail="/img/Operating System/chapter1-7.png" data-sub-html="<h2>From PPT(1950s 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 2</code>)</figcaption>
    </figure>
<p>Example code on ppt</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fortran" data-lang="fortran"><span class="line"><span class="cl"><span class="n">C</span><span class="o">----</span><span class="w"> </span><span class="n">THIS</span><span class="w"> </span><span class="k">PROGRAM </span><span class="n">READS</span><span class="w"> </span><span class="n">INPUT</span><span class="w"> </span><span class="n">FROM</span><span class="w"> </span><span class="n">THE</span><span class="w"> </span><span class="n">CARD</span><span class="w"> </span><span class="n">READER</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">C</span><span class="o">----</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="n">INTEGERS</span><span class="w"> </span><span class="n">IN</span><span class="w"> </span><span class="n">EACH</span><span class="w"> </span><span class="n">CARD</span><span class="p">,</span><span class="w"> </span><span class="n">CALCULATE</span><span class="w"> </span><span class="nb">AND </span><span class="n">OUTPUT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">C</span><span class="o">----</span><span class="w"> </span><span class="n">THE</span><span class="w"> </span><span class="nb">SUM </span><span class="n">OF</span><span class="w"> </span><span class="n">THEM</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="mi">100</span><span class="w"> </span><span class="k">READ</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="n">I1</span><span class="p">,</span><span class="w"> </span><span class="n">I2</span><span class="p">,</span><span class="w"> </span><span class="n">I3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="mi">10</span><span class="w"> </span><span class="k">FORMAT</span><span class="p">(</span><span class="mi">3</span><span class="n">I5</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">IF</span><span class="w"> </span><span class="p">(</span><span class="n">I1</span><span class="p">.</span><span class="n">EQ</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="p">.</span><span class="nb">AND</span><span class="p">.</span><span class="w"> </span><span class="n">I2</span><span class="p">.</span><span class="n">EQ</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="p">.</span><span class="nb">AND</span><span class="p">.</span><span class="w"> </span><span class="n">I3</span><span class="p">.</span><span class="n">EQ</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">GOTO</span><span class="w"> </span><span class="mi">200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">ISUM</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">I1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">I2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">I3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">WRITE</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span><span class="w"> </span><span class="n">I1</span><span class="p">,</span><span class="w"> </span><span class="n">I2</span><span class="p">,</span><span class="w"> </span><span class="n">I3</span><span class="p">,</span><span class="w"> </span><span class="n">ISUM</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="mi">20</span><span class="w"> </span><span class="k">FORMAT</span><span class="p">(</span><span class="mi">7</span><span class="n">HSUM</span><span class="w"> </span><span class="n">OF</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I5</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="n">H</span><span class="p">,</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I5</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="n">H</span><span class="w"> </span><span class="nb">AND</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I5</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="o">*</span><span class="w">   </span><span class="mi">4</span><span class="n">H</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I6</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">GOTO</span><span class="w"> </span><span class="mi">100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="mi">200</span><span class="w"> </span><span class="k">STOP
</span></span></span><span class="line"><span class="cl"><span class="k">      END</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter1-8.png" title="/img/Operating System/chapter1-8.png" data-thumbnail="/img/Operating System/chapter1-8.png" data-sub-html="<h2>From PPT(1950s 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-9.png" title="/img/Operating System/chapter1-9.png" data-thumbnail="/img/Operating System/chapter1-9.png" data-sub-html="<h2>From PPT(1950s 4)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 4</code>)</figcaption>
    </figure>
<h5 id="1960s">1960s</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-10.png" title="/img/Operating System/chapter1-10.png" data-thumbnail="/img/Operating System/chapter1-10.png" data-sub-html="<h2>From PPT(1960s 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-11.png" title="/img/Operating System/chapter1-11.png" data-thumbnail="/img/Operating System/chapter1-11.png" data-sub-html="<h2>From PPT(1960s 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-12.png" title="/img/Operating System/chapter1-12.png" data-thumbnail="/img/Operating System/chapter1-12.png" data-sub-html="<h2>From PPT(1960s 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-13.png" title="/img/Operating System/chapter1-13.png" data-thumbnail="/img/Operating System/chapter1-13.png" data-sub-html="<h2>From PPT(1960s 4)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 4</code>)</figcaption>
    </figure>
<h5 id="1970s">1970s+</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-14.png" title="/img/Operating System/chapter1-14.png" data-thumbnail="/img/Operating System/chapter1-14.png" data-sub-html="<h2>From PPT(1970s&#43; 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1970s+ 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-15.png" title="/img/Operating System/chapter1-15.png" data-thumbnail="/img/Operating System/chapter1-15.png" data-sub-html="<h2>From PPT(1970s&#43; 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1970s+ 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-16.png" title="/img/Operating System/chapter1-16.png" data-thumbnail="/img/Operating System/chapter1-16.png" data-sub-html="<h2>From PPT(1970s&#43; 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1970s+ 3</code>)</figcaption>
    </figure>
<h5 id="today">today</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-17.png" title="/img/Operating System/chapter1-17.png" data-thumbnail="/img/Operating System/chapter1-17.png" data-sub-html="<h2>From PPT(today)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>today</code>)</figcaption>
    </figure>
<h4 id="理解操作系统三个根本问题">理解操作系统：三个根本问题</h4>
<p>操作系统服务谁？</p>
<ul>
<li><strong>程序 = 状态机</strong></li>
<li>课程涉及：多线程 $Linux$ 应用程序</li>
</ul>
<hr>
<p>(设计/应用视角) 操作系统为程序提供什么服务？</p>
<ul>
<li><strong>操作系统 = 对象 + $API\newline$</strong></li>
<li>课程涉及：$POSIX$ + 部分$ Linux$ 特性</li>
</ul>
<hr>
<p>(实现/硬件视角) 如何实现操作系统提供的服务？</p>
<ul>
<li><strong>操作系统 = C 程序</strong>
<ul>
<li>完成初始化后就成为 $interrupt/trap/fault handler\newline$</li>
</ul>
</li>
<li>课程涉及：$xv6$, 自制迷你操作系统</li>
</ul>
<h3 id="怎么学操作系统hownewline">怎么学操作系统?$(how)\newline$</h3>
<ol>
<li>是一个合格的操作系统用户
<ul>
<li>会 $STFW/RTFM$ 自己动手解决问题</li>
<li>不怕使用任何命令行工具
<ul>
<li>$vim, tmux, grep, gcc, binutils, &hellip;\newline$</li>
</ul>
</li>
</ul>
</li>
<li>不惧怕写代码
<ul>
<li>能管理一定规模 (数千行) 的代码</li>
<li>能在出 bug 时默念 “机器永远是对的、我肯定能调出来的”
<ul>
<li>然后开始用正确的工具/方法调试</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>写代码 = 创造有趣的东西</p>
<ul>
<li>命令行 + 浏览器就是世界</li>
</ul>
<p>教科书:</p>
<p>Remzi&rsquo;s <a href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener noreffer">Operating Systems: Three Easy Pieces</a></p>
<p>顺序：并发 → 虚拟化 → 持久化</p>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
</channel>
</rss>
