<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - 分类 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/categories/go/</link>
        <description>Go - 分类 - Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>junglece430@gmail.com (Jungle)</managingEditor>
            <webMaster>junglece430@gmail.com (Jungle)</webMaster><lastBuildDate>Sun, 04 Jun 2023 19:46:20 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/categories/go/" rel="self" type="application/rss+xml" /><item>
    <title>Go 1.19 排序算法</title>
    <link>https://Jungle430.github.io/posts/go/pdqsort/</link>
    <pubDate>Sun, 04 Jun 2023 19:46:20 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/pdqsort/</guid>
    <description><![CDATA[<h1 id="go-119-排序算法-pdqsort">Go 1.19 排序算法-$pdqsort$</h1>
<h2 id="三种经典排序算法的对比">三种经典排序算法的对比</h2>
<ul>
<li>所有短元素和元素有序的情况下，<strong>插入排序性能最好</strong></li>
<li>在大部分情况下，快速排序都有较好的<strong>综合性能</strong></li>
<li>几乎在任何情况下，堆排序都表现的<strong>比较稳定</strong></li>
</ul>
<hr>
<ul>
<li>能否结合上面三种排序算法的优点，设计出一个排序算法使得</li>
</ul>
<p>$$
\begin{align}
&amp;Best \Longrightarrow O(n)\newline
&amp;Avg \Longrightarrow O(n\log n)\newline
&amp;Worst \Longrightarrow O(n\log n)\newline
\end{align}
$$</p>
<h2 id="pdqsort">pdqsort</h2>
<ul>
<li>简介</li>
</ul>
<blockquote>
<ul>
<li>
<p>$pdqsort(pattern-defeating-quicksort)$</p>
</li>
<li>
<p>是一种<em>不稳定</em>的<strong>混合</strong>排序算法，它的不同版本被应用在<code>C++ Boost,Rust</code>以及<code>Go</code>1.19中。它对常见的序列类型做了特殊的优化，使得<strong>在不同条件下都拥有不错的性能</strong></p>
</li>
</ul>
</blockquote>
<ul>
<li>复习不稳定:$96_a,96_b \rightarrow^{sort} 96_b,96_a$</li>
</ul>
<h3 id="version-1">version 1</h3>
<ul>
<li>
<p>结合三种排序的优点</p>
<ul>
<li>短序列使用插入排序</li>
<li>其他情况使用快排</li>
<li>如果快速排序表现不佳，则使用<strong>堆排序</strong>保证$Worst$情况下仍有$O(n\log n)$的复杂度</li>
</ul>
</li>
<li>
<p>Q&amp;A</p>
<ul>
<li>短序列的具体长度是多少？
<ul>
<li>12~32，不同语言和场景下会有不同，<strong>在泛型版本中根据测试选定为24</strong></li>
</ul>
</li>
<li>怎么得知快排表现不佳，切换到堆排序?
<ul>
<li>当<strong>最终</strong>的$pivot$的位置离序列两端很接近时$(&lt; \frac{length}{8})$（其实就是分的太少），判定其表现不佳，当这种情况达到$limit(bits.Len(length))$时，切换到堆排序</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image1.png" title="/img/Go/pdqsort/image1.png" data-thumbnail="/img/Go/pdqsort/image1.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>改进：<code>choose pivot</code>尽量能够选中中位数，改进<code>choose pivot</code></li>
</ul>
<h3 id="version-2">version 2</h3>
<ul>
<li>
<p><code>version1</code>中选择<code>pivot</code>的方式是选择首个元素，算法简单但是效率低</p>
</li>
<li>
<p>遍历数组，寻找真正的中位数 $\Longrightarrow$ 遍历代价太高</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>平衡</p>
<ul>
<li>寻找<code>pivot</code>所需要的开销</li>
<li><code>pivot</code>带来的性能优化</li>
</ul>
</li>
<li>
<p>解决方案</p>
<ul>
<li>寻找近似中位数</li>
</ul>
</li>
<li>
<p>根据不同的长度选择<code>pivot</code>策略</p>
<ul>
<li>短序列$(\le 8)$：选择固定元素</li>
<li>中序列$(\le 50)$：采样选用三个元素，<a href="https://brilliant.org/wiki/median-finding-algorithm/#citation-1" target="_blank" rel="noopener noreffer"><code>median of three</code></a></li>
<li>长度列$(&gt;50)$：采样九个元素，<a href="https://www.johndcook.com/blog/2009/06/23/tukey-median-ninther/" target="_blank" rel="noopener noreffer"><code>median of medians</code></a></li>
</ul>
</li>
<li>
<p><u><code>pivot</code>的采样方式可以让我们“感知”当前序列的状态</u></p>
<ul>
<li>采样都为逆序 $\Longrightarrow$ 猜测当前序列可能为<strong>逆序</strong> $\Longrightarrow$ <code>reverse(array)</code></li>
<li>采样都为顺序 $\Longrightarrow$ 猜测当前序列可能为<strong>顺序</strong> $\Longrightarrow$ <code>insertsort(array)</code>
<ul>
<li>注：这里面的插入排序实际使用的是<code>partiallnsertionSort</code>，即有限制次数的插入排序，来限制其最坏情况</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image2.png" title="/img/Go/pdqsort/image2.png" data-thumbnail="/img/Go/pdqsort/image2.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>改进
<ul>
<li>优化了<code>pivot</code>的选择策略（近似中位数）</li>
<li>根据采样来感知序列状态，适当使用其他方法来提高收益(<code>reverse</code>和<code>partiallnsertionSort</code>)</li>
</ul>
</li>
</ul>
<h3 id="final-version">final version</h3>
<ul>
<li>
<p>还有什么情况没有被考虑到，可以被优化？</p>
<ul>
<li><strong>重复度较高</strong></li>
</ul>
</li>
<li>
<p>可以在选择<code>pivot</code>的时候“感知”重复度？</p>
<ul>
<li>不是很好，因为采样不是很多，很难拿到相同的元素</li>
</ul>
</li>
<li>
<p>解决方案</p>
<ul>
<li><u>如果两次<code>partion</code>生成的<code>pivot</code>相同，即对<code>partition</code>进行了无效分割，此时认为<code>piovt</code>的值为重复元素</u>（比上面的方法有更高的采样率）</li>
</ul>
</li>
<li>
<p>优化-重复元素较多的情况(<code>partitionEqual</code>)</p>
<ul>
<li>当检测到此时的<code>pivot</code>和上次相同时 (发生在<code>leftSubArray</code>) ，使用<code>partitionEqual</code>将重复元素排列在一起，减少重复元素对于<code>pivot</code>选择的干扰</li>
</ul>
</li>
<li>
<p>优化-当<code>pivot</code>选择策略表现不佳时，随机交换元素</p>
<ul>
<li>避免一些极端情况使得<code>QuickSort</code>总是表现不佳，以及一些黑客攻击情况（随机交换来增加不确定性）</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image3.png" title="/img/Go/pdqsort/image3.png" data-thumbnail="/img/Go/pdqsort/image3.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>最终效果</li>
</ul>
<p>$$
\begin{align}
&amp;Best \Longrightarrow O(n)\newline
&amp;Avg \Longrightarrow O(n\log n)\newline
&amp;Worst \Longrightarrow O(n\log n)\newline
\end{align}
$$</p>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>高性能的排序算法是如何设计的?</p>
<ul>
<li>根据不同情况选择不同策略，取长补短</li>
</ul>
</li>
<li>
<p>生产环境中使用的的排序算法和课本上的排序算法有什么区别?</p>
<ul>
<li>理论算法注重理论性能，例如时间、空间复杂度等。生产环境中的算法需要面对不同的实践场景，更加注重实践性能</li>
</ul>
</li>
<li>
<p>Go 语言($\le 1.18$)的排序算法是快速排序么?</p>
<ul>
<li>实际一直是<strong>混合排序算法，主体是快速排序</strong>。$Go \le 1.18 $时的算法也是基于快速排序，和<code>pdgsort</code>的区别在于<code>fallback</code>时机、<code>pivot </code>选择策略、是否有针对不同<code>pattern</code>优化等</li>
</ul>
</li>
<li>
<p>附<code>Go 1.20</code>$pdqsort$源码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// pdqsort sorts data[a:b].
</span></span></span><span class="line"><span class="cl"><span class="c1">// The algorithm based on pattern-defeating quicksort(pdqsort), but without the optimizations from BlockQuicksort.
</span></span></span><span class="line"><span class="cl"><span class="c1">// pdqsort paper: https://arxiv.org/pdf/2106.05123.pdf
</span></span></span><span class="line"><span class="cl"><span class="c1">// C++ implementation: https://github.com/orlp/pdqsort
</span></span></span><span class="line"><span class="cl"><span class="c1">// Rust implementation: https://docs.rs/pdqsort/latest/pdqsort/
</span></span></span><span class="line"><span class="cl"><span class="c1">// limit is the number of allowed bad (very unbalanced) pivots before falling back to heapsort.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span> <span class="nx">Interface</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">limit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">const</span> <span class="nx">maxInsertion</span> <span class="p">=</span> <span class="mi">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wasBalanced</span>    <span class="p">=</span> <span class="kc">true</span> <span class="c1">// whether the last partitioning was reasonably balanced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">wasPartitioned</span> <span class="p">=</span> <span class="kc">true</span> <span class="c1">// whether the slice was already partitioned
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">length</span> <span class="o">:=</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">length</span> <span class="o">&lt;=</span> <span class="nx">maxInsertion</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">insertionSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Fall back to heapsort if too many bad choices were made.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">limit</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">heapSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If the last partitioning was imbalanced, we need to breaking patterns.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">wasBalanced</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">breakPatterns</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">limit</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">pivot</span><span class="p">,</span> <span class="nx">hint</span> <span class="o">:=</span> <span class="nf">choosePivot</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">hint</span> <span class="o">==</span> <span class="nx">decreasingHint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">reverseRange</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// The chosen pivot was pivot-a elements after the start of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// After reversing it is pivot-a elements before the end of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// The idea came from Rust&#39;s implementation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">pivot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nx">pivot</span> <span class="o">-</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">hint</span> <span class="p">=</span> <span class="nx">increasingHint</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// The slice is likely already sorted.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">wasBalanced</span> <span class="o">&amp;&amp;</span> <span class="nx">wasPartitioned</span> <span class="o">&amp;&amp;</span> <span class="nx">hint</span> <span class="o">==</span> <span class="nx">increasingHint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nf">partialInsertionSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Probably the slice contains many duplicate elements, partition the slice into
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// elements equal to and elements greater than the pivot.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">data</span><span class="p">.</span><span class="nf">Less</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">mid</span> <span class="o">:=</span> <span class="nf">partitionEqual</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">a</span> <span class="p">=</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">mid</span><span class="p">,</span> <span class="nx">alreadyPartitioned</span> <span class="o">:=</span> <span class="nf">partition</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wasPartitioned</span> <span class="p">=</span> <span class="nx">alreadyPartitioned</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">leftLen</span><span class="p">,</span> <span class="nx">rightLen</span> <span class="o">:=</span> <span class="nx">mid</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="o">-</span><span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="nx">balanceThreshold</span> <span class="o">:=</span> <span class="nx">length</span> <span class="o">/</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">leftLen</span> <span class="p">&lt;</span> <span class="nx">rightLen</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wasBalanced</span> <span class="p">=</span> <span class="nx">leftLen</span> <span class="o">&gt;=</span> <span class="nx">balanceThreshold</span>
</span></span><span class="line"><span class="cl">			<span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">mid</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">a</span> <span class="p">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wasBalanced</span> <span class="p">=</span> <span class="nx">rightLen</span> <span class="o">&gt;=</span> <span class="nx">balanceThreshold</span>
</span></span><span class="line"><span class="cl">			<span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span> <span class="p">=</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>github</code>上面的提交:https://github.com/golang/go/issues/50154</p>
</li>
<li>
<p><a href="https://arxiv.org/pdf/2106.05123.pdf" target="_blank" rel="noopener noreffer">Pattern-defeating Quicksort</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/5HqfRGqPyAhFt0krPgMHOQ" target="_blank" rel="noopener noreffer">公众号文章</a></p>
</li>
</ul>
<hr>
<ul>
<li><code>Go</code>的源码还是不错的，起码不至于像<code>C++</code>那样群魔乱舞，考完试抽时间看看</li>
</ul>
]]></description>
</item>
<item>
    <title>消息队列</title>
    <link>https://Jungle430.github.io/posts/go/message-queue/</link>
    <pubDate>Sat, 03 Jun 2023 16:04:20 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/message-queue/</guid>
    <description><![CDATA[<h1 id="消息队列">消息队列</h1>
<h2 id="走进消息队列">走进消息队列</h2>
<h3 id="场景">场景</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image1.png" title="/img/Go/message-queue/image1.png" data-thumbnail="/img/Go/message-queue/image1.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例一：有一天晚上我们上完课，回到宿舍，想着新出的游戏机，但又摸了摸钱包，太贵了买不起，这个时候你突然想到，今天抖音直播搞活动，瞬间你掏出了手机打开抖音搜索，找到直播间以后，你打开了心心念念的游戏机详情页，看到价格只要500。
<ul>
<li>这个时候我们分析一下，就我们上面这几步操作，在我们的程序背后，做了什么事情。</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image2.png" title="/img/Go/message-queue/image2.png" data-thumbnail="/img/Go/message-queue/image2.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例二：服务能力有限（到点上车，无数用户在对面狂点手机+黄牛的脚本）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image3.png" title="/img/Go/message-queue/image3.png" data-thumbnail="/img/Go/message-queue/image3.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例三：链路耗时长尾（下单之后一直在转圈圈）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image4.png" title="/img/Go/message-queue/image4.png" data-thumbnail="/img/Go/message-queue/image4.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>案例四：日志存储</p>
<ul>
<li>如果完事之后发现本地日志丢掉了怎么办？</li>
</ul>
</li>
<li>
<p>面对上面的四个场景，我们有什么解决办法吗？</p>
</li>
</ul>
<h3 id="解决问题">解决问题</h3>
<ul>
<li>案例一
<ul>
<li>解决方案：解耦</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image5.png" title="/img/Go/message-queue/image5.png" data-thumbnail="/img/Go/message-queue/image5.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>类似生产者消费者模型（或者是<code>go</code>的<code>channel</code>），即使数据库方面宕机但是消息仍然被保存下来，部分请求还是可以被处理掉</p>
</li>
<li>
<p>案例二</p>
<ul>
<li>解决方案：削峰</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image6.png" title="/img/Go/message-queue/image6.png" data-thumbnail="/img/Go/message-queue/image6.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>加了一层缓冲机制</p>
</li>
<li>
<p>案例三</p>
<ul>
<li>解决方案：异步</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image7.png" title="/img/Go/message-queue/image7.png" data-thumbnail="/img/Go/message-queue/image7.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>前两个请求处理完成之后用户会马上得到响应，不再干等着，耗时的通知商家响应方是商家，所以慢一点问题不太大</p>
</li>
<li>
<p>三个过程从原来的<strong>单线程顺序处理</strong>变成<strong>多线程异步处理</strong></p>
</li>
<li>
<p>案例四</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image8.png" title="/img/Go/message-queue/image8.png" data-thumbnail="/img/Go/message-queue/image8.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h2 id="什么是消息队列">什么是消息队列？</h2>
<blockquote>
<p>消息队列(MQ)，指保存<strong>消息</strong>的一个<strong>容器</strong>，本质是个<strong>队列</strong>。但是这个队列需要满足<strong>高吞吐，高并发，并且高可用</strong></p>
</blockquote>
<div class="mermaid" id="id-1"></div>
<h3 id="业界消息队列对比">业界消息队列对比</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image9.png" title="/img/Go/message-queue/image9.png" data-thumbnail="/img/Go/message-queue/image9.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h3 id="消息队列kafka">消息队列<code>Kafka</code></h3>
<ul>
<li>使用场景：离线的消息处理当中（日志信息，<code>Metrics</code>数据，用户行为 $\Longrightarrow$ 搜索，点赞，评论，收藏）</li>
</ul>
<h4 id="如何使用kafka">如何使用<code>Kafka</code></h4>
<div class="mermaid" id="id-2"></div>
<ul>
<li>基本概念
<ul>
<li><code>Topic</code>：逻辑队列，不同的<code>Topic</code>可以建立不同的<code>Topic</code></li>
<li><code>Cluster</code>：物理集群，每个集群中可以建立多个不同的<code>Topic</code></li>
<li><code>Producer</code>：生产者，负责将业务消息发送到<code>Topic</code>中</li>
<li><code>Consumer</code>：消费者，负责消费<code>Topic</code>中的消息</li>
<li><code>ConsumerGroup</code>：消费者组，不同组<code>Consumer</code>互不干涉</li>
<li>同一个<code>Topic</code>中的<code>Partion</code>可以并发处理，提高吞吐量</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image10.png" title="/img/Go/message-queue/image10.png" data-thumbnail="/img/Go/message-queue/image10.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li>Offset</li>
</ul>
<blockquote>
<p><strong>Offset</strong>:消息在Partion内的相对位置信息，可以理解为唯一ID，<strong>在partion内部是严格递增的</strong></p>
</blockquote>
<hr>
<ul>
<li>Replica</li>
</ul>
<blockquote>
<p>每个分片有多个<strong>Replica</strong>，<strong>Leader Replica</strong>将会从$LSR$中选出</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Go/message-queue/image11.png" title="/img/Go/message-queue/image11.png" data-thumbnail="/img/Go/message-queue/image11.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>Leader:对外进行读写</p>
</li>
<li>
<p>Foller:不断将数据从Leader上面拉取下来，努力和Leader保持一个一致的状态，如果和Leader差距过大会被踢出ISR（参考Replica3）</p>
</li>
<li>
<p>ISR的作用：如果ISR里面的leader对应的机器发生了宕机等故障，<strong>ISR会从里面的Foller中选择一个让其重新成为Leader</strong>，保证服务器继续运行，保证了<strong>高可用性</strong></p>
</li>
</ul>
<hr>
<ul>
<li>数据复制</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image12.png" title="/img/Go/message-queue/image12.png" data-thumbnail="/img/Go/message-queue/image12.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>其中有一个Broker同时也扮演了Controller的角色。Controller是整个集群的大脑，负责对副本和Broker的分配</li>
</ul>
<hr>
<ul>
<li><code>Kafka</code>架构</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image13.png" title="/img/Go/message-queue/image13.png" data-thumbnail="/img/Go/message-queue/image13.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h4 id="消息的处理流程">消息的处理流程</h4>
<div class="mermaid" id="id-3"></div>
<h5 id="发送消息">发送消息</h5>
<ul>
<li>如果发送一条消息，等待其成功后再发送下一条消息会有什么问题？</li>
</ul>
<div class="mermaid" id="id-4"></div>
<hr>
<ul>
<li>批量发送消息可以增加吞吐量，<strong>但是如果网络带宽不够怎么办</strong>？</li>
</ul>
<div class="mermaid" id="id-5"></div>
<ul>
<li>解决方法：进行压缩，减少消息大小，目前支持的有:Snappy,Gzip,LZ4,ZSTD压缩算法</li>
</ul>
<div class="mermaid" id="id-6"></div>
<h5 id="存储消息">存储消息</h5>
<div class="mermaid" id="id-7"></div>
<ul>
<li>
<p>如何存储到磁盘？</p>
</li>
<li>
<p><code>Borker</code>的文件结构</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image14.png" title="/img/Go/message-queue/image14.png" data-thumbnail="/img/Go/message-queue/image14.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>磁盘结构：由于寻道成本比较高，所以<u>顺序写入可以减少寻道带来的时间成本</u></li>
</ul>
<hr>
<ul>
<li><code>Broker</code>-顺序写</li>
</ul>
<div class="mermaid" id="id-8"></div>
<ul>
<li>采用顺序写的方式进行写入（磁盘末尾追加，减少动磁头的次数），以提高写入效率</li>
</ul>
<hr>
<ul>
<li>
<p><code>Broker</code>-如何找到消息</p>
</li>
<li>
<p><code>Consumer </code>通过发送<code>FetchRequest</code>请求消息数据，<code>Broker </code>会将指定<code>Offset</code>处的消息，按照时间窗口和消息大小窗口发送给<code> Consumer</code>，<u>寻找数据这个细节是如何做到的呢?</u></p>
</li>
</ul>
<div class="mermaid" id="id-9"></div>
<ul>
<li>
<p>例子：寻找<code>offer=28</code></p>
<ul>
<li>
<p><b>二分法</b>查找小于目标<code>offer</code>的最大文件</p>
</li>
<li>
<p>接着通过偏移量去对应的地址里面继续查找</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image15.png" title="/img/Go/message-queue/image15.png" data-thumbnail="/img/Go/message-queue/image15.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li><code>Broker</code>-时间戳索引文件
<ul>
<li>二分法找到<strong>小于目标时间戳的最大索引位置</strong>，再通过<code>offset</code>的方式找到最终数据</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image16.png" title="/img/Go/message-queue/image16.png" data-thumbnail="/img/Go/message-queue/image16.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
]]></description>
</item>
<item>
    <title>Go Module与测试</title>
    <link>https://Jungle430.github.io/posts/go/module_and_test/</link>
    <pubDate>Sun, 14 May 2023 21:51:22 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/module_and_test/</guid>
    <description><![CDATA[<h1 id="go-module">Go Module</h1>
<h2 id="简介">简介</h2>
<ul>
<li>通过<code>go.mod</code>文件管理依赖包版本</li>
<li>通过<code>go get/go mod</code>指令工具管理依赖包</li>
<li>终极目标
<ul>
<li>定义版本规则和管理项目依赖关系</li>
</ul>
</li>
</ul>
<h2 id="依赖管理三要素">依赖管理三要素</h2>
<ol>
<li>配置文件，描述依赖 <code>go.mod</code>(类比<code>cargo</code>)</li>
<li>中心仓库管理依赖库 <code>Proxy</code>(类比<a href="https://crates.io" target="_blank" rel="noopener noreffer"><strong>crates.io</strong></a>)</li>
<li>本地工具 <code>go get/mod</code></li>
</ol>
<h2 id="配置gomod">配置go.mod</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">module</span> <span class="nx">example</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">app</span> <span class="nx">依赖管理的基本单元</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">有的时候大项目里面的小项目就得则么写</span><span class="err">，</span><span class="nx">类比c</span><span class="o">++</span><span class="nx">中src下面的CMakeList</span><span class="p">.</span><span class="nx">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">或者一个大包</span><span class="err">，</span><span class="nx">但是别人只想用里面的小包</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">go</span> <span class="mf">1.16</span> <span class="nx">原生库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">require</span><span class="p">(</span> <span class="nx">单元依赖</span>
</span></span><span class="line"><span class="cl">  <span class="nx">example</span><span class="o">/</span><span class="nx">lib1</span> <span class="nx">v1</span><span class="mf">.0.2</span>
</span></span><span class="line"><span class="cl">  <span class="nx">example</span><span class="o">/</span><span class="nx">lib2</span> <span class="nx">v1</span><span class="mf">.0.0</span> <span class="c1">//indirect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">example</span><span class="o">/</span><span class="nx">lib6</span> <span class="nx">v3</span><span class="mf">.2.0</span><span class="o">+</span><span class="nx">incompatible</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="依赖配置-version">依赖配置-version</h2>
<ul>
<li>
<p>语义化版本</p>
<ul>
<li><code>${MAJOR}.${MINOR}.${PATCH}</code>
<ul>
<li>MAJOR:大版本，不同的MAJOR间认为是代码不兼容的</li>
<li>MINOR:新增函数或功能，需要保持MAJOR下的兼容性</li>
<li>PATCH:部分<code>bug</code>的修复</li>
</ul>
</li>
<li>V1.3.0</li>
<li>V2.3.0</li>
</ul>
</li>
<li>
<p>基于<code>commit</code>伪版本</p>
<ul>
<li>vX.0.0-yyyymmddhhmmss-abcdefg1234
<ul>
<li>版本前缀-时间戳-哈希码前缀</li>
<li>v0.0.0-20220401081311-c38fb921298</li>
<li>v1.0.0-20201130134442-10cb123792679c6c</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>indirtect</strong></p>
</li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>A -&gt; B:直接依赖</p>
</li>
<li>
<p>A -&gt; C:间接依赖，使用<strong>indirtect</strong>进行标识</p>
</li>
<li>
<p><strong>incompatible</strong></p>
<ul>
<li>对于没有<code>go.mod</code>文件而且主版本2+的依赖，会+incompatible</li>
</ul>
</li>
<li>
<p>最低兼容算法</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/Module_and_test.jpg" title="/img/Go/Module_and_test.jpg" data-thumbnail="/img/Go/Module_and_test.jpg" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h2 id="依赖分发-回源">依赖分发-回源</h2>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>问题</p>
<ul>
<li>无法保证构建的稳定性和依赖的可用性</li>
<li>增加第三方压力</li>
</ul>
</li>
<li>
<p>解决方法<strong>Proxy</strong></p>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<ul>
<li>(类比<a href="https://crates.io" target="_blank" rel="noopener noreffer"><strong>crates.io</strong></a>)，自己构建大仓库保证稳定性</li>
</ul>
<p><code>GOPROXY=&quot;https://proxy1.cn, https://proxy2.cn, direct&quot;</code>(direct表示源站)</p>
<div class="mermaid" id="id-4"></div>
<ul>
<li>我的配置:<code>GOPROXY=https://proxy.golang.com.cn,direct</code></li>
</ul>
<h2 id="工具-go-get">工具-go get</h2>
<ul>
<li>go get example.org/pkg
<ul>
<li>@update 默认</li>
<li>@none 删除依赖</li>
<li>@v1.1.2 <code>tag</code>版本，语义版本</li>
<li>@23dfdd5 特定的<code>commit</code></li>
<li>@master 分支最新的<code>commit</code></li>
</ul>
</li>
</ul>
<h2 id="工具-go-mod">工具-go mod</h2>
<ul>
<li>go mod
<ul>
<li>init 初始化，创建go.mod文件</li>
<li>download 下载模块到本地缓存</li>
<li>tidy 增加需要的依赖，删除不需要的依赖</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<ol>
<li>go.mod</li>
<li>Proxy</li>
<li>go get/mod</li>
</ol>
<h2 id="测试">测试</h2>
<h2 id="单元测试流程">单元测试流程</h2>
<div class="mermaid" id="id-5"></div>
<ul>
<li>测试单元
<ul>
<li>函数</li>
<li>模块</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<h2 id="规则">规则</h2>
<ul>
<li>
<p>所有测试文件以<code>_test.go</code>结尾(如<code>publish_post_test.go</code>)</p>
</li>
<li>
<p><code>func TestXxx(*testing.T)</code>(如<code>func TestPublishPost(t *testing.T)</code>)</p>
</li>
<li>
<p>初始化逻辑放到TestMain中</p>
</li>
<li>
<p>例子<code>publish_post.go</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">HelloTom</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>publish_post_test.go</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">output</span> <span class="o">:=</span> <span class="nf">HelloTom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">exceptOutput</span> <span class="o">:=</span> <span class="s">&#34;Tom&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">output</span> <span class="o">!=</span> <span class="nx">exceptOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="nx">exceptOutput</span><span class="p">,</span> <span class="nx">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>(校对部分建议使用开源的assert包)</p>
<ul>
<li>执行效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span>
</span></span><span class="line"><span class="cl">--- FAIL: TestMain <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="cl">    publish_post_test.go:9: Expect Tom, but output Jerry
</span></span><span class="line"><span class="cl">FAIL
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> status <span class="m">1</span>
</span></span><span class="line"><span class="cl">FAIL    learing_go      0.261s
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="覆盖率">覆盖率</h2>
<ul>
<li>
<p>覆盖度，越高代码的正确性越好</p>
</li>
<li>
<p>示例</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">HelloTom</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="nx">score</span> <span class="kt">int16</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">60</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">output</span> <span class="o">:=</span> <span class="nf">HelloTom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">exceptOutput</span> <span class="o">:=</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">output</span> <span class="o">!=</span> <span class="nx">exceptOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="nx">exceptOutput</span><span class="p">,</span> <span class="nx">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="nx">isPass</span> <span class="o">:=</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="mi">70</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">isPass</span> <span class="o">!=</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">isPass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span> --cover
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">coverage: 27.3% of statements
</span></span><span class="line"><span class="cl">ok      learing_go      0.260s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果加上修改</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="nx">score</span> <span class="kt">int16</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span> .<span class="se">\p</span>ublish_post_test.go .<span class="se">\p</span>ublish_post.go --cover
</span></span><span class="line"><span class="cl">ok      command-line-arguments  0.254s  coverage: 100.0% of statements
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="单元测试-依赖">单元测试-依赖</h2>
<div class="mermaid" id="id-6"></div>
<div class="mermaid" id="id-7"></div>
<ul>
<li>
<p>幂等：每次运行结果一样（应该涉及了并发的问题，暴力测试）</p>
</li>
<li>
<p>稳定：任何时间，任何函数进行独立运行</p>
</li>
<li>
<p>Mock</p>
<ul>
<li><a href="https://github.com/bouk/monkey" target="_blank" rel="noopener noreffer">monkey</a></li>
</ul>
</li>
</ul>
<h2 id="基准测试">基准测试</h2>
<ul>
<li>
<p>优化分析代码</p>
</li>
<li>
<p>内置</p>
</li>
<li>
<p>示例</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;math/rand&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">ServerIndex</span> <span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">InitServerIndex</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">ServerIndex</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Select</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nx">ServerIndex</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkSelect</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nf">InitServerIndex</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">ResetTimer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Select</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkSelectParallel</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nf">InitServerIndex</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">ResetTimer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">RunParallel</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">PB</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="nf">Select</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Running tool: D:<span class="se">\G</span>o<span class="se">\b</span>in<span class="se">\g</span>o.exe <span class="nb">test</span> -benchmem -run<span class="o">=</span>^$ -bench ^BenchmarkSelect$ learing_go
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">goos: windows
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: learing_go
</span></span><span class="line"><span class="cl">cpu: AMD Ryzen <span class="m">9</span> 5900HX with Radeon Graphics        
</span></span><span class="line"><span class="cl">BenchmarkSelect-16     <span class="m">175706265</span>          6.498 ns/op        <span class="m">0</span> B/op        <span class="m">0</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok   learing_go 2.053s
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Running tool: D:<span class="se">\G</span>o<span class="se">\b</span>in<span class="se">\g</span>o.exe <span class="nb">test</span> -benchmem -run<span class="o">=</span>^$ -bench ^BenchmarkSelectParallel$ learing_go
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">goos: windows
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: learing_go
</span></span><span class="line"><span class="cl">cpu: AMD Ryzen <span class="m">9</span> 5900HX with Radeon Graphics        
</span></span><span class="line"><span class="cl">BenchmarkSelectParallel-16     <span class="m">30002550</span>         38.89 ns/op        <span class="m">0</span> B/op        <span class="m">0</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok   learing_go 1.409s
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>
