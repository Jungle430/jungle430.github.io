<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Message-Queue - 标签 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/tags/message-queue/</link>
        <description>Message-Queue - 标签 - Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>junglece430@gmail.com (Jungle)</managingEditor>
            <webMaster>junglece430@gmail.com (Jungle)</webMaster><lastBuildDate>Sat, 03 Jun 2023 16:04:20 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/tags/message-queue/" rel="self" type="application/rss+xml" /><item>
    <title>消息队列</title>
    <link>https://Jungle430.github.io/posts/go/message-queue/</link>
    <pubDate>Sat, 03 Jun 2023 16:04:20 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/message-queue/</guid>
    <description><![CDATA[<h1 id="消息队列">消息队列</h1>
<h2 id="走进消息队列">走进消息队列</h2>
<h3 id="场景">场景</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image1.png" title="/img/Go/message-queue/image1.png" data-thumbnail="/img/Go/message-queue/image1.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例一：有一天晚上我们上完课，回到宿舍，想着新出的游戏机，但又摸了摸钱包，太贵了买不起，这个时候你突然想到，今天抖音直播搞活动，瞬间你掏出了手机打开抖音搜索，找到直播间以后，你打开了心心念念的游戏机详情页，看到价格只要500。
<ul>
<li>这个时候我们分析一下，就我们上面这几步操作，在我们的程序背后，做了什么事情。</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image2.png" title="/img/Go/message-queue/image2.png" data-thumbnail="/img/Go/message-queue/image2.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例二：服务能力有限（到点上车，无数用户在对面狂点手机+黄牛的脚本）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image3.png" title="/img/Go/message-queue/image3.png" data-thumbnail="/img/Go/message-queue/image3.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例三：链路耗时长尾（下单之后一直在转圈圈）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image4.png" title="/img/Go/message-queue/image4.png" data-thumbnail="/img/Go/message-queue/image4.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>案例四：日志存储</p>
<ul>
<li>如果完事之后发现本地日志丢掉了怎么办？</li>
</ul>
</li>
<li>
<p>面对上面的四个场景，我们有什么解决办法吗？</p>
</li>
</ul>
<h3 id="解决问题">解决问题</h3>
<ul>
<li>案例一
<ul>
<li>解决方案：解耦</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image5.png" title="/img/Go/message-queue/image5.png" data-thumbnail="/img/Go/message-queue/image5.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>类似生产者消费者模型（或者是<code>go</code>的<code>channel</code>），即使数据库方面宕机但是消息仍然被保存下来，部分请求还是可以被处理掉</p>
</li>
<li>
<p>案例二</p>
<ul>
<li>解决方案：削峰</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image6.png" title="/img/Go/message-queue/image6.png" data-thumbnail="/img/Go/message-queue/image6.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>加了一层缓冲机制</p>
</li>
<li>
<p>案例三</p>
<ul>
<li>解决方案：异步</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image7.png" title="/img/Go/message-queue/image7.png" data-thumbnail="/img/Go/message-queue/image7.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>前两个请求处理完成之后用户会马上得到响应，不再干等着，耗时的通知商家响应方是商家，所以慢一点问题不太大</p>
</li>
<li>
<p>三个过程从原来的<strong>单线程顺序处理</strong>变成<strong>多线程异步处理</strong></p>
</li>
<li>
<p>案例四</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image8.png" title="/img/Go/message-queue/image8.png" data-thumbnail="/img/Go/message-queue/image8.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h2 id="什么是消息队列">什么是消息队列？</h2>
<blockquote>
<p>消息队列(MQ)，指保存<strong>消息</strong>的一个<strong>容器</strong>，本质是个<strong>队列</strong>。但是这个队列需要满足<strong>高吞吐，高并发，并且高可用</strong></p>
</blockquote>
<div class="mermaid" id="id-1"></div>
<h3 id="业界消息队列对比">业界消息队列对比</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image9.png" title="/img/Go/message-queue/image9.png" data-thumbnail="/img/Go/message-queue/image9.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h3 id="消息队列kafka">消息队列<code>Kafka</code></h3>
<ul>
<li>使用场景：离线的消息处理当中（日志信息，<code>Metrics</code>数据，用户行为 $\Longrightarrow$ 搜索，点赞，评论，收藏）</li>
</ul>
<h4 id="如何使用kafka">如何使用<code>Kafka</code></h4>
<div class="mermaid" id="id-2"></div>
<ul>
<li>基本概念
<ul>
<li><code>Topic</code>：逻辑队列，不同的<code>Topic</code>可以建立不同的<code>Topic</code></li>
<li><code>Cluster</code>：物理集群，每个集群中可以建立多个不同的<code>Topic</code></li>
<li><code>Producer</code>：生产者，负责将业务消息发送到<code>Topic</code>中</li>
<li><code>Consumer</code>：消费者，负责消费<code>Topic</code>中的消息</li>
<li><code>ConsumerGroup</code>：消费者组，不同组<code>Consumer</code>互不干涉</li>
<li>同一个<code>Topic</code>中的<code>Partion</code>可以并发处理，提高吞吐量</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image10.png" title="/img/Go/message-queue/image10.png" data-thumbnail="/img/Go/message-queue/image10.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li>Offset</li>
</ul>
<blockquote>
<p><strong>Offset</strong>:消息在Partion内的相对位置信息，可以理解为唯一ID，<strong>在partion内部是严格递增的</strong></p>
</blockquote>
<hr>
<ul>
<li>Replica</li>
</ul>
<blockquote>
<p>每个分片有多个<strong>Replica</strong>，<strong>Leader Replica</strong>将会从$LSR$中选出</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Go/message-queue/image11.png" title="/img/Go/message-queue/image11.png" data-thumbnail="/img/Go/message-queue/image11.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>Leader:对外进行读写</p>
</li>
<li>
<p>Foller:不断将数据从Leader上面拉取下来，努力和Leader保持一个一致的状态，如果和Leader差距过大会被踢出ISR（参考Replica3）</p>
</li>
<li>
<p>ISR的作用：如果ISR里面的leader对应的机器发生了宕机等故障，<strong>ISR会从里面的Foller中选择一个让其重新成为Leader</strong>，保证服务器继续运行，保证了<strong>高可用性</strong></p>
</li>
</ul>
<hr>
<ul>
<li>数据复制</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image12.png" title="/img/Go/message-queue/image12.png" data-thumbnail="/img/Go/message-queue/image12.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>其中有一个Broker同时也扮演了Controller的角色。Controller是整个集群的大脑，负责对副本和Broker的分配</li>
</ul>
<hr>
<ul>
<li><code>Kafka</code>架构</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image13.png" title="/img/Go/message-queue/image13.png" data-thumbnail="/img/Go/message-queue/image13.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h4 id="消息的处理流程">消息的处理流程</h4>
<div class="mermaid" id="id-3"></div>
<h5 id="发送消息">发送消息</h5>
<ul>
<li>如果发送一条消息，等待其成功后再发送下一条消息会有什么问题？</li>
</ul>
<div class="mermaid" id="id-4"></div>
<hr>
<ul>
<li>批量发送消息可以增加吞吐量，<strong>但是如果网络带宽不够怎么办</strong>？</li>
</ul>
<div class="mermaid" id="id-5"></div>
<ul>
<li>解决方法：进行压缩，减少消息大小，目前支持的有:Snappy,Gzip,LZ4,ZSTD压缩算法</li>
</ul>
<div class="mermaid" id="id-6"></div>
<h5 id="存储消息">存储消息</h5>
<div class="mermaid" id="id-7"></div>
<ul>
<li>
<p>如何存储到磁盘？</p>
</li>
<li>
<p><code>Borker</code>的文件结构</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image14.png" title="/img/Go/message-queue/image14.png" data-thumbnail="/img/Go/message-queue/image14.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>磁盘结构：由于寻道成本比较高，所以<u>顺序写入可以减少寻道带来的时间成本</u></li>
</ul>
<hr>
<ul>
<li><code>Broker</code>-顺序写</li>
</ul>
<div class="mermaid" id="id-8"></div>
<ul>
<li>采用顺序写的方式进行写入（磁盘末尾追加，减少动磁头的次数），以提高写入效率</li>
</ul>
<hr>
<ul>
<li>
<p><code>Broker</code>-如何找到消息</p>
</li>
<li>
<p><code>Consumer </code>通过发送<code>FetchRequest</code>请求消息数据，<code>Broker </code>会将指定<code>Offset</code>处的消息，按照时间窗口和消息大小窗口发送给<code> Consumer</code>，<u>寻找数据这个细节是如何做到的呢?</u></p>
</li>
</ul>
<div class="mermaid" id="id-9"></div>
<ul>
<li>
<p>例子：寻找<code>offer=28</code></p>
<ul>
<li>
<p><b>二分法</b>查找小于目标<code>offer</code>的最大文件</p>
</li>
<li>
<p>接着通过偏移量去对应的地址里面继续查找</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image15.png" title="/img/Go/message-queue/image15.png" data-thumbnail="/img/Go/message-queue/image15.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li><code>Broker</code>-时间戳索引文件
<ul>
<li>二分法找到<strong>小于目标时间戳的最大索引位置</strong>，再通过<code>offset</code>的方式找到最终数据</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image16.png" title="/img/Go/message-queue/image16.png" data-thumbnail="/img/Go/message-queue/image16.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
]]></description>
</item>
</channel>
</rss>
