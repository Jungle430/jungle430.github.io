<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux - 标签 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/tags/linux/</link>
        <description>Linux - 标签 - Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1239946358@qq.com (Jungle)</managingEditor>
            <webMaster>1239946358@qq.com (Jungle)</webMaster><lastBuildDate>Fri, 28 Apr 2023 17:34:50 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/tags/linux/" rel="self" type="application/rss+xml" /><item>
    <title>操作系统——内存管理</title>
    <link>https://Jungle430.github.io/posts/operating-system/support3/</link>
    <pubDate>Fri, 28 Apr 2023 17:34:50 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/support3/</guid>
    <description><![CDATA[<h1 id="内存管理">内存管理</h1>
<h2 id="导读">导读</h2>
<ul>
<li>
<p>物理内存是操作系统需要管理的一个重要资源，让运行在一台机器上的多个应用程序不用“争抢”，都能随时得到想要的任意多的内存，是操作系统的想要达到的理想目标。<b>提高系统物理内存的动态使用效率，通过隔离应用的物理内存空间保证应用间的安全性，把“有限”物理内存变成“无限”虚拟内存，是操作系统的一系列重要的目标，</b>本章展现了操作系统为实现“理想”而要扩展的一系列功能</p>
<ul>
<li>通过动态内存分配，<b>提高了应用程序对内存的动态使用效率</b></li>
<li>通过页表的<b>虚实内存映射机制</b>，简化了编译器对应用的地址空间设置</li>
<li>通过页表的虚实内存映射机制，加强了应用之间，应用与内核之间的内存隔离，增强了系统安全</li>
<li>通过页表的虚实内存映射机制，可以实现空分复用（提出，但没有实现）</li>
</ul>
</li>
<li>
<p>上一章，我们分别实现了多道程序和分时多任务系统，它们的核心机制都是任务切换。由于多道程序和分时多任务系统的设计初衷不同，它们在任务切换的时机和策略也不同。有趣的一点是，任务切换机制对于应用是完全<b>透明(Transparent)</b>的，<b><font color="red">应用可以不对内核实现该机制的策略做任何假定（除非要进行某些针对性优化），甚至可以完全不知道这机制的存在</font></b></p>
</li>
<li>
<p><font color="red"><b>在大多数应用（也就是应用开发者）的视角中，它们会独占一整个 CPU 和特定（连续或不连续）的内存空间（平时写程序还真是这样）</b></font></p>
</li>
<li>
<p>当然，通过上一章的学习，我们知道<u>在现代操作系统中，出于公平性的考虑，我们极少会让独占<code>CPU</code>这种情况发生</u></p>
</li>
<li>
<p>所以应用自认为的独占<code>CPU</code>只是内核想让应用看到的一种<b>幻象(Illusion)</b>，而<code>CPU</code>计算资源被<b>时分复用(TDM, Time-Division Multiplexing)</b>的实质被内核通过恰当的抽象隐藏了起来，<b>对应用不可见</b></p>
</li>
<li>
<p>与之相对，我们目前还没有对内存管理功能进行进一步拓展，仅仅是把程序放到某处的物理内存中</p>
<ul>
<li>在内存访问方面，所有的应用都直接通过物理地址访问物理内存，这使得应用开发者需要了解繁琐的物理地址空间布局，访问内存也很不方便</li>
</ul>
</li>
<li>
<p>在上一章中，出于任务切换的需要，所有的应用都在初始化阶段被加载到内存中并同时驻留下去直到它们全部运行结束。而且，所有的应用都直接通过物理地址访问物理内存。这会带来以下问题：</p>
<ul>
<li>
<p><b>首先，内核提供给应用的内存访问接口不够透明，也不好用</b></p>
<ul>
<li>由于应用直接访问物理内存，这需要它在构建的时候就清楚所运行计算机的物理内存空间布局，还需规划自己需要被加载到哪个地址运行</li>
<li>为了避免冲突可能还需要应用的开发者们对此进行协商，这显然是一件在今天看来不够通用且极端麻烦的事情</li>
</ul>
</li>
<li>
<p><b>其次，内核并没有对应用的访存行为进行任何保护措施，每个应用都有计算机系统中整个物理内存的读写权力</b></p>
<ul>
<li>
<p>即使应用被限制在 U 特权级下运行，它还是能够造成很多麻烦：<b>比如它可以读写其他应用的数据来窃取信息或者破坏其它应用的正常运行（很危险！）</b></p>
</li>
<li>
<p>甚至它还可以修改内核的代码段来替换掉原本的 <code>trap_handler</code> 函数，来挟持内核执行恶意代码。总之，这造成系统既不安全、也不稳定</p>
</li>
</ul>
</li>
<li>
<p><b>再次，目前应用的内存使用空间在其运行前已经限定死了，内核不能灵活地给应用程序提供的运行时动态可用内存空间</b></p>
<ul>
<li><b>比如一个应用结束后，这个应用所占的空间就被释放了，但这块空间无法动态地给其它还在运行的应用使用</b></li>
</ul>
</li>
</ul>
</li>
<li>
<p>因此，为了简化应用开发，防止应用胡作非为，本章将更好地管理物理内存，并提供给应用一个抽象出来的更加透明易用、也更加安全的访存接口，这就是基于分页机制的虚拟内存</p>
<ul>
<li>
<p><b>站在应用程序运行的角度看，就是存在一个从“0”地址开始的非常大的可读/可写/可执行的地址空间(<code>Address Space</code>)</b></p>
</li>
<li>
<p>站在操作系统的角度看，每个应用被局限在分配给它的物理内存空间中运行，<b>无法读写其它应用和操作系统所在的内存空间</b></p>
</li>
</ul>
</li>
<li>
<p>实现地址空间的第一步就是实现分页机制，建立好虚拟内存和物理内存的页映射关系。此过程需要硬件支持，硬件细节与具体CPU相关，涉及地址映射机制等，相对比较复杂。总体而言，我们需要思考如下问题</p>
<ul>
<li>
<p>硬件中物理内存的范围是什么？</p>
</li>
<li>
<p>哪些物理内存空间需要建立页映射关系？</p>
</li>
<li>
<p>如何建立页表使能分页机制？</p>
</li>
<li>
<p>如何确保<code>OS</code>能够在分页机制使能前后的不同时间段中都能正常寻址和执行代码？</p>
</li>
<li>
<p>页目录表（一级）的起始地址设置在哪里？</p>
</li>
<li>
<p>二级/三级等页表的起始地址设置在哪里，需要多大空间？</p>
</li>
<li>
<p>如何设置页目录表项/页表项的内容？</p>
</li>
<li>
<p>如果要让每个任务有自己的地址空间，那每个任务是否要有自己的页表？</p>
</li>
<li>
<p>代表应用程序的任务和操作系统需要有各自的页表吗？</p>
</li>
<li>
<p>在有了页表之后，任务和操作系统之间应该如何传递数据？</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>虚拟内存（<code>Virtual memory</code>）技术概念首次由德国的柏林工业大学（<code>Technische Universität Berlin</code>）博士生 <code>Fritz-Rudolf Güntsch</code> 提出</li>
<li>在他的博士论文中设想了一台计算机，其内存地址空间大小为$ 10^5 $个字，<b>可精确映射到作为二级存储的磁鼓（大小也为$ 10^5 $个字）上</b>，<b><font color="red">应用程序读写的数据的实际位置由硬件和监控器（即操作系统）来管理和控制，并在物理主存(<code>RAM</code>)和辅存(二级存储)之间按需搬移数据</font></b></li>
<li><b><font color="red">即主存中只放置应用程序最近访问的数据，而应用程序最近不访问的数据会搬移到辅存中，在应用程序需要时再搬回内存中</font></b></li>
<li><b>这个搬移过程对应用程序是透明的</b></li>
<li>虚拟内存的设想在 1959 年变成了现实。英国曼彻斯特大学的<code>Tom Kilburn</code>教授领导的团队于 1959 年展示了他们设计的<code>Atlas</code>计算机和<code>Atlas Supervisor</code>操作系统，开创了在今天仍然普遍使用的操作系统技术：<b>分页（<code>paging</code>）技术和虚拟内存（<code>virtual memory</code>，当时称为 <code>one-level storage system</code>）。他们的核心思想中的根本性创新是区分了“地址（<code>address</code>）”和“内存位置（<code>memory location</code>）”</b>。并因此创造了三项发明：
<ul>
<li><b>地址转换：硬件自动将处理器生成的每个地址转换为其当前内存位置</b></li>
<li><b>按需分页（<code>demand paging</code>）：由硬件地址转换触发缺页中断后，由操作系统将缺失的数据页移动到主存储器中，并形成正确的地址转换映射</b></li>
<li><b>页面置换算法：检查最无用（<code>least useful</code>）的页，并将其移回二级存储中，这样可以让经常访问的数据驻留在主存中</b></li>
</ul>
</li>
<li>计算机科学家对<code>Atlas Supervisor</code>操作系统给予高度的评价。<code>Brinch Hansen</code> 认为它是操作系统史上最重大的突破。<code>Simon Lavington</code> 认为它是第一个可识别的现代操作系统</li>
</ul>
</blockquote>
<h2 id="内存管理主要做了什么">内存管理主要做了什么？</h2>
<ul>
<li>
<p><b>内存的分配与回收</b> ：对进程所需的内存进行分配和释放，<code>malloc</code> 函数：申请内存，<code>free</code> 函数：释放内存</p>
</li>
<li>
<p><b>地址转换</b> ：将程序中的虚拟地址转换成内存中的物理地址</p>
</li>
<li>
<p><b>内存扩充</b> ：当系统没有足够的内存时，利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存</p>
</li>
<li>
<p><b>内存映射</b> ： 将一个文件直接映射到进程的进程空间中，<b>这样可以通过内存指针用读写内存的办法直接存取文件内容</b>，速度更快</p>
</li>
<li>
<p><b>内存优化</b> ： 通过调整内存分配策略和回收算法来优化内存使用效率</p>
</li>
<li>
<p><b>内存安全</b> ： 保证进程之间使用内存互不干扰，避免一些恶意程序通过修改内存来破坏系统的安全性</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<h3 id="什么是内存碎片">什么是内存碎片？</h3>
<ul>
<li>
<p>内存碎片是由内存的申请和释放产生的，通常分为下面两种</p>
<ul>
<li>
<p><b>内部内存碎片(<code>Internal Memory Fragmentation</code>，简称为内部碎片)</b></p>
<ul>
<li><u>已经分配给进程使用但未被使用的内存</u></li>
<li>导致内部内存碎片的主要原因是，<u>当采用固定比例比如2的幂次方进行内存分配时，<b>进程所分配的内存可能会比其实际所需要的大</b></u>
<ul>
<li>举个例子，一个进程只需要 65 字节的内存，但为其分配了$ 128（2^7） $大小的内存，那 63 字节的内存就成为了内部内存碎片</li>
</ul>
</li>
</ul>
</li>
<li>
<p><b>外部内存碎片(<code>External Memory Fragmentation</code>，简称为外部碎片)</b></p>
<ul>
<li>
<p>由于未分配的连续内存区域太小，以至于不能满足任意进程所需要的内存分配请求，这些小片段且不连续的内存空间被称为外部碎片</p>
</li>
<li>
<p>也就是说，外部内存碎片指的是那些并为分配给进程但又不能使用的内存。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/support3-1.png" title="/img/Operating System/support3-1.png" data-thumbnail="/img/Operating System/support3-1.png">
        
    </a>
<h3 id="常见的内存管理方式有那些">常见的内存管理方式有那些？</h3>
<ul>
<li>内存管理方式可以简单分为下面两种
<ul>
<li><b>连续内存管理</b> ： 为一个用户程序分配一个连续的内存空间，<u>内存利用率一般不高</u></li>
<li><b>非连续内存管理</b> ： 允许一个程序使用的内存分布在离散或者说不相邻的内存中，<u>相对更加灵活一些</u></li>
</ul>
</li>
</ul>
<h4 id="连续内存管理">连续内存管理</h4>
<ul>
<li>
<p><b>块式管理</b>是早期计算机操作系统的一种连续内存管理方式，存在严重的内存碎片问题</p>
</li>
<li>
<p><b>块式管理会将内存分为几个固定大小的块，<font color="red">每个块中只包含一个进程</font></b>。如果程序运行需要内存的话，操作系统就分配给它一块，<b>如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了</b></p>
<ul>
<li>这些在每个块中未被利用的空间，我们称之为<b>内部内存碎片</b></li>
</ul>
</li>
<li>
<p>除了内部内存碎片之外，由于两个内存块之间可能还会有外部内存碎片，这些不连续的外部内存碎片由于太小了无法再进行分配</p>
</li>
<li>
<p>在<code>Linux</code>系统中，连续内存管理采用了 <strong>伙伴系统（<code>Buddy System</code>）算法</strong> 来实现，这是一种经典的连续内存分配算法，<b>可以有效解决外部内存碎片的问题</b></p>
<ul>
<li>
<p>伙伴系统的主要思想是将内存按 2 的幂次划分（每一块内存大小都是 2 的幂次比如$ 2^6=64 KB$）。并将相邻的内存块组合成一对伙伴（注意：<strong>必须是相邻的才是伙伴</strong>）</p>
</li>
<li>
<p><b>当进行内存分配时，伙伴系统会尝试找到大小最合适的内存块。</b>如果找到的内存块过大，就将其一分为二，分成两个大小相等的伙伴块。如果还是大的话，就继续切分，直到到达合适的大小为止</p>
</li>
<li>
<p><b>假设两块相邻的内存块都被释放，系统会将这两个内存块合并，</b>进而形成一个更大的内存块，以便后续的内存分配。这样就可以减少内存碎片的问题，提高内存利用率</p>
</li>
</ul>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/support3-2.png" title="/img/Operating System/support3-2.png" data-thumbnail="/img/Operating System/support3-2.png">
        
    </a>
<ul>
<li>虽然解决了外部内存碎片的问题，但伙伴系统仍然存在内存利用率不高的问题<b>（内部内存碎片）</b>
<ul>
<li>这主要是因为伙伴系统只能分配大小为$2^n$的内存块，因此<b>当需要分配的内存大小不是$2^n$的整数倍时，会浪费一定的内存空间</b></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-3.png" title="/img/Operating System/support3-3.png" data-thumbnail="/img/Operating System/support3-3.png" data-sub-html="<h2>如果要分配 65 大小的内存快，依然需要分配$2^7=128$大小的内存块</h2>">
        
    </a><figcaption class="image-caption">如果要分配 65 大小的内存快，依然需要分配$2^7=128$大小的内存块</figcaption>
    </figure>
<ul>
<li>对于内部内存碎片的问题，<code>Linux</code>采用<b><code>SLAB</code></b>进行解决（非重点）</li>
</ul>
<h4 id="非连续内存管理">非连续内存管理</h4>
<ul>
<li>
<p>非连续内存管理存在下面 3 种方式：</p>
<ul>
<li>
<p><b>段式管理</b> ： 以段(—段连续的物理内存)的形式管理/分配物理内存</p>
<ul>
<li>应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有<b>主程序段<code>MAIN</code>、子程序段<code>X</code>、数据段<code>D</code>及栈段<code>S</code>等</b></li>
</ul>
</li>
<li>
<p><b>页式管理</b> ： <b>把物理内存分为连续等长的物理页</b>，应用程序的虚拟地址空间划也被分为连续等长的虚拟页，现代操作系统广泛使用的一种内存管理方式</p>
</li>
<li>
<p><b>段页式管理机制</b> ： <b>结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页</b></p>
</li>
</ul>
</li>
</ul>
<h4 id="虚拟内存">虚拟内存</h4>
<ul>
<li><strong>虚拟内存(<code>Virtual Memory</code>)</strong> 是计算机系统内存管理非常重要的一个技术，<u>本质上来说它只是逻辑存在的，是一个假想出来的内存空间，主要作用是作为进程访问主存（物理内存）的桥梁并简化内存管理</u></li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>总结来说，虚拟内存主要提供了下面这些能力</p>
<ul>
<li>
<p><b>隔离进程</b>：<font color="red"><b>物理内存通过虚拟地址空间访问，虚拟地址空间与进程一一对应。</b></font></p>
<ul>
<li>每个进程都认为自己拥有了整个物理内存，<u>进程之间彼此隔离，一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存</u></li>
</ul>
</li>
<li>
<p><b>提升物理内存利用率</b> ： 有了虚拟地址空间后，操作系统只需要将进程当前正在使用的部分数据或指令加载入物理内存</p>
</li>
<li>
<p><b>简化内存管理</b> ： 进程都有一个一致且私有的虚拟地址空间，程序员不用和真正的物理内存打交道，而是借助虚拟地址空间访问物理内存，从而简化了内存管理</p>
</li>
<li>
<p><b>多个进程共享物理内存</b> ： 进程在运行过程中，会加载许多操作系统的动态库。<u>这些库对于每个进程而言都是公用的，它们在内存中实际只会加载一份。这部分称为共享内存。</u></p>
</li>
<li>
<p><b>提高内存使用的安全性</b> ： 控制进程对物理内存的访问，隔壁不同进程的访问权限，提高系统的安全性</p>
</li>
<li>
<p><b>提供更大的可使用内存空间</b> ： 可以让程序拥有超过系统物理内存大小的可用内存空间。<u>这是因为当物理内存不够用时，可以用磁盘充当，将物理内存页（通常大小为$4KB$）保存到磁盘文件（会影响读写速度），数据或代码页会根据需要在物理内存与磁盘之间移动</u></p>
</li>
</ul>
</li>
</ul>
<h5 id="没有虚拟内存有什么问题">没有虚拟内存有什么问题？</h5>
<ul>
<li>
<p>如果没有虚拟内存的话，程序直接访问和操作的都是物理内存，看似少了一层中介，但多了很多问题</p>
</li>
<li>
<p>例子</p>
<ul>
<li><b>用户程序可以访问任意物理内存，可能会不小心操作到系统运行必需的内存，进而造成操作系统崩溃，严重影响系统的安全</b></li>
<li>同时运行多个程序容易崩溃。比如你想同时运行一个微信和一个 QQ 音乐，微信在运行的时候给内存地址<code>1xxx</code>赋值后，QQ 音乐也同样给内存地址<code>1xxx</code>赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就可能会造成微信这个程序会崩溃</li>
<li><b>程序运行过程中使用的所有数据或指令都要载入物理内存</b>，根据局部性原理，其中很大一部分可能都不会用到，白白占用了宝贵的物理内存资源</li>
<li>…</li>
</ul>
</li>
</ul>
<h4 id="什么是虚拟地址和物理地址">什么是虚拟地址和物理地址？</h4>
<ul>
<li>
<p><b>物理地址（<code>Physical Address</code>）</b> 是真正的物理内存中地址，更具体点来说是内存地址寄存器中的地址。<font color="red">程序中访问的内存地址不是物理地址，而是<b>虚拟地址（<code>Virtual Address</code>）</b></font></p>
</li>
<li>
<p>也就是说，我们编程开发的时候实际就是在和虚拟地址打交道。<b>比如在C语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的<font color="red">虚拟地址</font></b></p>
</li>
<li>
<p>操作系统一般通过 CPU 芯片中的一个重要组件<b>MMU(<code>Memory Management Unit</code>，内存管理单元)</b>将虚拟地址转换为物理地址，这个过程被称为<b>地址翻译/地址转换（<code>Address Translation</code>）</b></p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>通过<code>MMU</code>将虚拟地址转换为物理地址后，再通过总线传到物理内存设备，进而完成相应的物理内存读写请求</p>
</li>
<li>
<p><code>MMU </code>将虚拟地址翻译为物理地址的主要机制有两种: <b>分段机制</b> 和 <b>分页机制</b></p>
</li>
</ul>
<h4 id="什么是虚拟地址空间和物理地址空间">什么是虚拟地址空间和物理地址空间？</h4>
<ul>
<li>虚拟地址空间是虚拟地址的集合，是虚拟内存的范围。<b>每一个进程都有一个一致且私有的虚拟地址空间</b></li>
<li>物理地址空间是物理地址的集合，是物理内存的范围</li>
</ul>
<h4 id="虚拟地址与物理内存地址是如何映射的">虚拟地址与物理内存地址是如何映射的？</h4>
<ul>
<li><code>MMU </code>将虚拟地址翻译为物理地址的主要机制有 3 种:</li>
</ul>
<ol>
<li>分段机制</li>
<li>分页机制</li>
<li>段页机制</li>
</ol>
<ul>
<li>其中，<font color="red"><b>现代操作系统广泛采用分页机制，需要重点关注！</b></font></li>
</ul>
<h4 id="分段机制">分段机制</h4>
<ul>
<li>
<p><strong>分段机制（<code>Segmentation</code>）</strong> 以段(—段 <strong>连续</strong> 的物理内存)的形式管理/分配物理内存</p>
</li>
<li>
<p>应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段<code> MAIN</code>、子程序段<code> X</code>、数据段<code>D</code>及栈段<code>S</code>等</p>
</li>
</ul>
<h5 id="段表有什么用地址翻译过程是怎样的">段表有什么用？地址翻译过程是怎样的？</h5>
<ul>
<li>
<p>分段管理通过 <strong>段表（<code>Segment Table</code>）</strong> 映射虚拟地址和物理地址</p>
</li>
<li>
<p>分段机制下的虚拟地址由两部分组成</p>
<ul>
<li><strong>段号</strong> ：<font color="red">标识着该虚拟地址属于整个虚拟地址空间中的哪一个段</font></li>
<li><strong>段内偏移量</strong> ：<font color="red">相对于该段起始地址的偏移量</font></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>具体的地址翻译过程如下
<ul>
<li><code>MMU</code>首先解析得到虚拟地址中的<b>段号</b></li>
<li>通过段号去该应用程序的段表中取出对应的段信息（找到对应的段表项）</li>
<li>从段信息中取出该段的<b>起始地址（物理地址）</b>加上虚拟地址中的<b>段内偏移量</b>得到<b>最终的物理地址</b></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-4.png" title="/img/Operating System/support3-4.png" data-thumbnail="/img/Operating System/support3-4.png" data-sub-html="<h2>流程图</h2>">
        
    </a><figcaption class="image-caption">流程图</figcaption>
    </figure>
<ul>
<li><u>段表中还存有诸如段长(可用于检查虚拟地址是否超出合法范围)、段类型（该段的类型，例如代码段、数据段等）等信息</u></li>
</ul>
<hr>
<ul>
<li><b>通过段号一定要找到对应的段表项吗？得到最终的物理地址后对应的物理内存一定存在吗</b></li>
<li>不一定。段表项可能并不存在
<ul>
<li><b>段表项被删除</b> ：软件错误、软件恶意行为等情况可能会导致段表项被删除</li>
<li><b>段表项还未创建</b> ：如果系统内存不足或者无法分配到连续的物理内存块就会导致段表项无法被创建</li>
</ul>
</li>
</ul>
<h5 id="分段机制为什么会导致内存外部碎片">分段机制为什么会导致内存外部碎片？</h5>
<ul>
<li>分段机制容易出现外部内存碎片，<b>即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)</b>。从而造成物理内存资源利用率的降低</li>
</ul>
<hr>
<ul>
<li>
<p>举个例子：假设可用物理内存为 <code>5G</code> 的系统使用分段机制分配内存。现在有 4 个进程，每个进程的内存占用情况如下</p>
<ul>
<li>
<p>进程 1：0~1G（第 1 段）</p>
</li>
<li>
<p>进程 2：1~3G（第 2 段）</p>
</li>
<li>
<p>进程 3：3~4.5G（第 3 段）</p>
</li>
<li>
<p>进程 4：4.5~5G（第 4 段）</p>
</li>
</ul>
</li>
<li>
<p>此时，我们关闭了进程 1 和进程 4，则第 1 段和第 4 段的内存会被释放，空闲物理内存还有 1.5G。由于这 1.5G 物理内存并不是连续的，导致没办法将空闲的物理内存分配给一个需要 1.5G 物理内存的进程</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-5.png" title="/img/Operating System/support3-5.png" data-thumbnail="/img/Operating System/support3-5.png" data-sub-html="<h2>内存浪费</h2>">
        
    </a><figcaption class="image-caption">内存浪费</figcaption>
    </figure>
<h4 id="分页机制">分页机制</h4>
<ul>
<li>
<p><strong>分页机制（<code>Paging</code>）</strong> 把主存（物理内存）分为连续等长的物理页，应用程序的虚拟地址空间划也被分为连续等长的虚拟页。<b>现代操作系统广泛采用分页机制</b></p>
</li>
<li>
<p><font color="red"><b>注意：这里的页是连续等长的，不同于分段机制下不同长度的段</b></font></p>
</li>
</ul>
<hr>
<ul>
<li>
<p>在分页机制下，应用程序虚拟地址空间中的任意虚拟页可以被映射到物理内存中的任意物理页上，因此可以实现物理内存资源的离散分配</p>
</li>
<li>
<p>分页机制按照固定页大小分配物理内存，使得物理内存资源易于管理，可有效避免分段机制中外部内存碎片的问题</p>
</li>
</ul>
<h5 id="页表有什么用地址翻译过程是怎样的">页表有什么用？地址翻译过程是怎样的？</h5>
<ul>
<li>分页管理通过 <strong>页表（<code>Page Table</code>）</strong> 映射虚拟地址和物理地址。我这里画了一张基于单级页表进行地址翻译的示意图</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-6.png" title="/img/Operating System/support3-6.png" data-thumbnail="/img/Operating System/support3-6.png" data-sub-html="<h2>页表</h2>">
        
    </a><figcaption class="image-caption">页表</figcaption>
    </figure>
<ul>
<li>
<p>在分页机制下，每个应用程序都会有一个对应的页表</p>
</li>
<li>
<p>分页机制下的虚拟地址由两部分组成：</p>
<ul>
<li><strong>页号</strong> ：通过虚拟页号可以从页表中取出对应的物理页号</li>
<li><strong>页内偏移量</strong> ：<font color="red">物理页起始地址+页内偏移量=物理内存地址</font></li>
</ul>
</li>
<li>
<p><font color="red"><b>具体的地址翻译过程如下：</b></font></p>
<ul>
<li><code>MMU </code>首先解析得到虚拟地址中的虚拟页号</li>
<li>通过虚拟页号去<b>该应用程序的页表</b>中取出<b>对应的物理页号</b>（找到对应的页表项）</li>
<li>用该物理页号对应的物理页起始地址（物理地址）加上虚拟地址中的页内偏移量得到最终的物理地址</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>页表中还存有诸如访问标志（标识该页面有没有被访问过）、页类型（该段的类型，例如代码段、数据段等）等信息</p>
</li>
<li>
<p><strong>通过虚拟页号一定要找到对应的物理页号吗？找到了物理页号得到最终的物理地址后对应的物理页一定存在吗？</strong></p>
<ul>
<li>不一定！可能会存在 <strong>页缺失</strong> 。也就是说，物理内存中没有对应的物理页或者物理内存中有对应的物理页但虚拟页还未和物理页建立映射（对应的页表项不存在）。</li>
</ul>
</li>
</ul>
<h5 id="单级页表有什么问题为什么需要多级页表">单级页表有什么问题？为什么需要多级页表？</h5>
<ul>
<li>
<p>以 32 位的环境为例，虚拟地址空间范围共有 $2^{32}（4G）$。假设 一个页的大小是 $2^{12}（4KB）$，那页表项共有 $\frac{4G}{4K} = 2^{20}$个，每个页表项为一个地址，占用 4 字节，$2^{20} \times \frac{2^2}{1024\times1024}= 4MB$（页内地址用12位，页号用20位）。<b><font color="red">也就是说一个程序啥都不干，页表大小就得占用$4M$（页表开太小导致了地址位数太多了）</font></b></p>
</li>
<li>
<p>系统运行的应用程序多起来的话，页表的开销还是非常大的。而且，绝大部分应用程序可能只能用到页表中的几项，其他的白白浪费了</p>
</li>
<li>
<p>总结</p>
<ul>
<li><font color="red">页表必须连续存放，因此当页表很大的时候，需要占用很多个连续的页框</font></li>
<li>没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面</li>
</ul>
</li>
<li>
<p>为了解决这个问题，操作系统引入了<b>多级页表，多级页表对应多个页表，每个页表也前一个页表相关联。</b>32 位系统一般为二级页表，64 位系统一般为四级页表。</p>
<ul>
<li>这里以二级页表为例进行介绍：二级列表分为一级页表和二级页表</li>
<li>一级页表共有 1024 个页表项，一级页表又关联二级页表，二级页表同样共有 1024 个页表项</li>
<li><b>二级页表中的一级页表项是一对多的关系</b>，二级页表按需加载（只会用到很少一部分二级页表），进而节省空间占用</li>
</ul>
</li>
<li>
<p><b>多级页表属于时间换空间的典型场景，利用增加页表查询的次数减少页表占用的空间</b></p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-7.png" title="/img/Operating System/support3-7.png" data-thumbnail="/img/Operating System/support3-7.png" data-sub-html="<h2>页表</h2>">
        
    </a><figcaption class="image-caption">页表</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-8.jpg" title="/img/Operating System/support3-8.jpg" data-thumbnail="/img/Operating System/support3-8.jpg" data-sub-html="<h2>二级页表</h2>">
        
    </a><figcaption class="image-caption">二级页表</figcaption>
    </figure>
<p>（和多级<code>cache</code>做对比，比较相似，增加访问次数来减内存，<b>多级页表通过二次切割页表不让大段的页表留在内存里面，用的时候从辅存里面调就行，这也就是节省内存的原理，也是借鉴了多级<code>cache</code>的局部性原理</b>）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-9.png" title="/img/Operating System/support3-9.png" data-thumbnail="/img/Operating System/support3-9.png" data-sub-html="<h2>多级页表计算</h2>">
        
    </a><figcaption class="image-caption">多级页表计算</figcaption>
    </figure>
<h5 id="tlb-有什么用使用-tlb-之后的地址翻译流程是怎样的"><code>TLB</code> 有什么用？使用 <code>TLB</code> 之后的地址翻译流程是怎样的？</h5>
<ul>
<li>
<p>为了提高虚拟地址到物理地址的转换速度，操作系统在 <strong>页表方案</strong> 基础之上引入了 <strong>转址旁路缓存(<code>Translation Lookasjde Buffer</code>，<code>TLB</code>，也被称为<code>快表</code>)</strong></p>
</li>
<li>
<p>在主流的 <code>Arch64</code> 和 <code>x86-64</code> 体系结构下，<code>TLB</code> 属于 (<code>Memory Management Unit</code>，内存管理单元) 内部的单元，本质上就是一块高速缓存（<code>Cache</code>）</p>
</li>
<li>
<p>使用<code>TLB</code>之后的地址翻译流程是这样的：</p>
<ol>
<li>
<p>用虚拟地址中的虚拟页号作为 <code>key </code>去 <code>TLB</code> 中查询；</p>
</li>
<li>
<p>如果能查到对应的物理页的话，就不用再查询页表了，这种情况称为 <code>TLB</code> 命中（<code>TLB hit</code>)。</p>
</li>
<li>
<p>如果不能查到对应的物理页的话，还是需要去查询主存中的页表，同时将页表中的该映射表项添加到 <code>TLB </code>中，这种情况称为 <code>TLB</code> 未命中（<code>TLB miss</code>)。</p>
</li>
<li>
<p>当 <code>TLB</code> 填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</p>
</li>
</ol>
</li>
</ul>
<p>（和<code>cache</code>一样）</p>
<ul>
<li>
<p>由于页表也在主存中，因此在没有 <code>TLB</code> 之前，每次读写内存数据时 <code>CPU</code> 要访问两次主存。有了 <code>TLB</code> 之后，对于存在于 <code>TLB</code> 中的页表数据只需要访问一次主存即可。</p>
</li>
<li>
<p><code>TLB</code> 的设计思想非常简单，但命中率往往非常高，效果很好。这就是因为被频繁访问的页就是其中的很小一部分。</p>
</li>
<li>
<p>快表和我们平时经常在开发系统中使用的缓存（比如 <code>Redis</code>）很像</p>
</li>
</ul>
<h5 id="换页机制有什么用">换页机制有什么用？</h5>
<ul>
<li>
<p>换页机制的思想是当物理内存不够用的时候，操作系统选择将一些物理页的内容放到磁盘上去，等要用到的时候再将它们读取到物理内存中。也就是说，换页机制利用磁盘这种较低廉的存储设备扩展的物理内存。</p>
</li>
<li>
<p>这也就解释了一个日常使用电脑常见的问题：为什么操作系统中所有进程运行所需的物理内存即使比真实的物理内存要大一些，这些进程也是可以正常运行的，只是运行速度会变慢。</p>
</li>
<li>
<p>这同样是一种<b>时间换空间</b>的策略，你用<code>CPU</code>的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的物理内存空间来支持程序的运行。</p>
</li>
</ul>
<h5 id="什么是页缺失">什么是页缺失？</h5>
<blockquote>
<p>页缺失（<code>Page Fault</code>，又名硬错误、硬中断、分页错误、寻页缺失、缺页中断、页故障等）指的是当软件试图访问已映射在虚拟地址空间中，但是目前并未被加载在物理内存中的一个分页时，由 <code>MMU</code> 所发出的中断</p>
</blockquote>
<ul>
<li>
<p>常见的页缺失有下面这两种：</p>
<ul>
<li>
<p><strong>硬性页缺失（<code>Hard Page Fault</code>）</strong> ：物理内存中没有对应的物理页。于是，<code>Page Fault Handler</code> 会指示 <code>CPU</code> 从已经打开的磁盘文件中读取相应的内容到物理内存（把之前在磁盘的页表给调回到内存里面来），而后交由 <code>MMU</code> 建立相应的虚拟页和物理页的映射关系。</p>
</li>
<li>
<p><strong>软性页缺失（<code>Soft Page Fault</code>）</strong>：物理内存中有对应的物理页，但虚拟页还未和物理页建立映射。于是，<code>Page Fault Handler </code>会指示 <code>MMU</code> 建立相应的虚拟页和物理页的映射关系。</p>
</li>
</ul>
</li>
<li>
<p>发生上面这两种缺页错误的时候，应用程序访问的是有效的物理内存，只是出现了物理页缺失或者虚拟页和物理页的映射关系未建立的问题。如果应用程序访问的是无效的物理内存的话，还会出现 <strong>无效缺页错误（<code>Invalid Page Fault</code>）</strong></p>
<h5 id="常见的页面置换算法有哪些">常见的页面置换算法有哪些？</h5>
</li>
</ul>
<ol>
<li>
<p><strong>最佳页面置换算法（<code>OPT，Optimal</code>）</strong> ：优先选择淘汰的页面是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若干页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现，只是理论最优的页面置换算法，可以作为衡量其他置换算法优劣的标准。</p>
</li>
<li>
<p><strong>先进先出页面置换算法（<code>FIFO，First In First Out</code>）</strong> : 最简单的一种页面置换算法，总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。该算法易于实现和理解，一般只需要通过一个 <code>FIFO</code> 队列即可需求。不过，它的性能并不是很好。</p>
</li>
<li>
<p><strong>最近最久未使用页面置换算法（<code>LRU ，Least Recently Used</code>）</strong> ：<code>LRU</code> 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 <code>T</code>，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。<code>LRU</code> 算法是根据各页之前的访问情况来实现，因此是易于实现的。<code>OPT</code> 算法是根据各页未来的访问情况来实现，因此是不可实现的。</p>
</li>
<li>
<p><strong>最少使用页面置换算法（<code>LFU，Least Frequently Used</code>）</strong> : 和 <code>LRU</code> 算法比较像，不过该置换算法选择的是之前一段时间内使用最少的页面作为淘汰页。</p>
</li>
<li>
<p><strong>时钟页面置换算法（<code>Clock</code>）</strong> ：可以认为是一种最近未使用算法，即逐出的页面都是最近没有使用的那个。</p>
</li>
</ol>
<hr>
<p><code>LRU </code>算法是实际使用中应用的比较多，也被认为是最接近 <code>OPT</code> 的页面置换算法。</p>
<p>不过，需要注意的是，实际应用中这些算法会被做一些改进，就比如 <code>InnoDB Buffer Pool（ InnoDB</code> 缓冲池，<code>MySQL</code> 数据库中用于管理缓存页面的机制）就改进了传统的 <code>LRU</code> 算法，使用了一种称为&quot;<code>Adaptive LRU</code>&ldquo;的算法（同时结合了<code>LRU</code>和<code>LFU</code>算法的思想）</p>
<h4 id="分页机制和分段机制有哪些共同点和区别">分页机制和分段机制有哪些共同点和区别？</h4>
<ul>
<li>
<p><strong>共同点</strong> ：</p>
<ul>
<li>
<p>都是非连续内存管理的方式</p>
</li>
<li>
<p>都采用了地址映射的方法，将虚拟地址映射到物理地址，以实现对内存的管理和保护</p>
</li>
</ul>
</li>
<li>
<p><strong>区别</strong></p>
<ul>
<li>
<p>分页机制以页面为单位进行内存管理，而分段机制以段为单位进行内存管理。页的大小是固定的，由操作系统决定，通常为 2 的幂次方。而段的大小不固定，取决于我们当前运行的程序</p>
</li>
<li>
<p>页是物理单位，即操作系统将物理内存划分成固定大小的页面，每个页面的大小通常是 2 的幂次方，例如 <code>4KB</code>、<code>8KB</code> 等等。而段则是逻辑单位，是为了满足程序对内存空间的逻辑需求而设计的，通常根据程序中数据和代码的逻辑结构来划分</p>
</li>
<li>
<p><b>分段机制容易出现外部内存碎片</b>，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。分页机制解决了外部内存碎片的问题，但仍然可能会出现内部内存碎片</p>
</li>
<li>
<p>分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息</p>
</li>
<li>
<p>分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息</p>
</li>
</ul>
</li>
</ul>
<h4 id="段页机制">段页机制</h4>
<ul>
<li>
<p>结合了段式管理和页式管理的一种内存管理机制，<b><font color="red">把物理内存先分成若干段，每个段又继续分成若干大小相等的页。</font></b></p>
</li>
<li>
<p>在段页式机制下，地址翻译的过程分为两个步骤：</p>
<ol>
<li>
<p>段式地址映射。</p>
</li>
<li>
<p>页式地址映射。</p>
</li>
</ol>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Operating System Chapter10 状态机模型的应用</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</link>
    <pubDate>Tue, 28 Mar 2023 13:10:52 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>状态机：理论
<ul>
<li>数字电路：<a href="https://jyywiki.cn/pages/OS/2022/demos/logisim.c" target="_blank" rel="noopener noreffer">logisim.c</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/seven-seg.py" target="_blank" rel="noopener noreffer">seven-seg.py</a></li>
<li>Model checker: 理解并发程序执行的新方法</li>
</ul>
</li>
<li>状态机：实践
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a></li>
</ul>
</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 状态机模型如此有用，还能更有用一点吗？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>终于做完了铺垫，是时候让你感受到 “真正的力量” 了
<ul>
<li>都是没用的内容，当我口胡就行了</li>
</ul>
</li>
</ul>
<h2 id="状态机理解我们的世界">状态机：理解我们的世界</h2>
<h3 id="哲--学探讨">哲 ♂ 学探讨</h3>
<ul>
<li>
<p>我们的物理世界是 “确定规则” 的状态机吗？</p>
<ul>
<li>
<p>宏观物理世界近似于 deterministic 的状态机 (经典力学)</p>
</li>
<li>
<p>微观世界可能是 non-deterministic 的 (量子力学)</p>
</li>
</ul>
</li>
</ul>
<p>把物理世界建模成基本粒子的运动</p>
<ul>
<li><a href="https://playgameoflife.com/" target="_blank" rel="noopener noreffer">Conway&rsquo;s game of life</a> $\Longrightarrow$ <b>Turing Complete</b></li>
</ul>
<h3 id="哲--学探讨-contd">哲 ♂ 学探讨 (cont&rsquo;d)</h3>
<p>可以在这个模型上严肃地定义很多概念：预测未来、时间旅行……</p>
<ul>
<li>成为你理解物理 (和计算机) 世界的参考</li>
</ul>
<hr>
<ul>
<li>例子
<ul>
<li>Cellular automata 不支持 “时间旅行”
<ul>
<li>怎么添加一个公理使它可以支持？
<ul>
<li>平行宇宙</li>
<li>如果世界线需要合并？可以<a href="https://www.scientificamerican.com/article/time-travel-simulation-resolves-grandfather-paradox/" target="_blank" rel="noopener noreffer">收敛于某个分布</a></li>
</ul>
</li>
</ul>
</li>
<li>Cellular automata 不支持 “预测外来”
<ul>
<li>能否添加一个 syscall 使它支持？
<ul>
<li><a href="https://www.scottaaronson.com/papers/philos.pdf" target="_blank" rel="noopener noreffer">Why philosophers should care about computational complexity, Ch. 10</a> (<b>jyy 强烈推荐，解释部分在10th-section</b>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="状态机模型理解编译器和现代-cpu">状态机模型：理解编译器和现代 CPU</h3>
<ul>
<li>编译器：源代码$S$(状态机) → 二进制代码$C$(状态机)</li>
</ul>
<p>$$
C=compile(S)
$$</p>
<ul>
<li>
<p>编译 (优化) 的正确性 (Soundness):</p>
<ul>
<li><font color="red"><em>S</em> 与 <em>C</em> 的可观测行为严格一致</font> （二进制落实到硬件也是如此，严格一致不是句句对应，而是状态机一致，比如一个时钟周期内执行两条指令 $\Longrightarrow$ <font color="red">instruction-level parallelism</font>）
<ul>
<li>system calls; volatile variable loads/stores; termination</li>
</ul>
</li>
</ul>
</li>
<li>
<p>超标量 (superscalar)/乱序执行处理器</p>
<ul>
<li>
<p>允许在状态机上 “跳跃”</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/ilp-demo.c" target="_blank" rel="noopener noreffer">ilp-demo.c</a></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOOP 1000000000ul
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rax;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rsi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rcx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r10;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r8;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r9;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">:::</span><span class="s">&#34;rax&#34;</span><span class="p">,</span> <span class="s">&#34;rdi&#34;</span><span class="p">,</span> <span class="s">&#34;rsi&#34;</span><span class="p">,</span> <span class="s">&#34;rdx&#34;</span><span class="p">,</span> <span class="s">&#34;rcx&#34;</span><span class="p">,</span> <span class="s">&#34;r10&#34;</span><span class="p">,</span> <span class="s">&#34;r8&#34;</span><span class="p">,</span> <span class="s">&#34;r9&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">loop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">LOOP</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ips</span> <span class="o">=</span> <span class="n">inst</span> <span class="o">/</span> <span class="p">((</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.2lfG instructions/s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ips</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在优化下执行的效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ screenfetch            
</span></span><span class="line"><span class="cl">..............                                  
</span></span><span class="line"><span class="cl">            ..,<span class="p">;</span>:ccc,.                           kali@kali
</span></span><span class="line"><span class="cl">          ......<span class="s1">&#39;&#39;&#39;;lxO.                         OS: Kali Linux 
</span></span></span><span class="line"><span class="cl"><span class="s1">.....&#39;&#39;&#39;&#39;..........,:ld;                         Kernel: x86_64 Linux 6.0.0-kali3-amd64
</span></span></span><span class="line"><span class="cl"><span class="s1">           .&#39;</span><span class="p">;;;</span>:::<span class="p">;</span>,,.x,                        Uptime: 49m
</span></span><span class="line"><span class="cl">      ..<span class="s1">&#39;&#39;&#39;.            0Xxoc:,.  ...            Packages: 2707
</span></span></span><span class="line"><span class="cl"><span class="s1">  ....                ,ONkc;,;cokOdc&#39;</span>,.          Shell: zsh 5.9
</span></span><span class="line"><span class="cl"> .                   OMo           <span class="s1">&#39;:ddo.        Resolution: 1714x874
</span></span></span><span class="line"><span class="cl"><span class="s1">                    dMc               :OO;       DE: Xfce
</span></span></span><span class="line"><span class="cl"><span class="s1">                    0M.                 .:o.     WM: Xfwm4
</span></span></span><span class="line"><span class="cl"><span class="s1">                    ;Wd                          WM Theme: Kali-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                     ;XO,                        GTK Theme: Kali-Dark [GTK2]
</span></span></span><span class="line"><span class="cl"><span class="s1">                       ,d0Odlc;,..               Icon Theme: Flat-Remix-Blue-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                           ..&#39;</span>,<span class="p">;</span>:cdOOd::,.       Font: Cantarell <span class="m">11</span>
</span></span><span class="line"><span class="cl">                                    .:d<span class="p">;</span>.<span class="s1">&#39;:;.    Disk: 19G / 80G (26%)
</span></span></span><span class="line"><span class="cl"><span class="s1">                                       &#39;</span>d,  .<span class="s1">&#39;   CPU: AMD Ryzen 9 5900HX with Radeon Graphics @ 4x 3.294GHz
</span></span></span><span class="line"><span class="cl"><span class="s1">                                         ;l   .. GPU: VMware SVGA II Adapter
</span></span></span><span class="line"><span class="cl"><span class="s1">                                          .o     RAM: 1501MiB / 1972MiB
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            c   
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            .&#39;</span>  
</span></span><span class="line"><span class="cl">                                             .  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo   
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo                      
</span></span><span class="line"><span class="cl">19.06G instructions/s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.38G instructions/s
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.19G instructions/s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>优化过后，<b>每一个时钟周期可以执行远远超过一条指令</b></li>
</ul>
<h2 id="查看状态机执行">查看状态机执行</h2>
<h3 id="trace-和调试器">Trace 和调试器</h3>
<ul>
<li>
<p>程序执行 = 状态机执行</p>
<ul>
<li>我们能不能 “hack” 进这个状态机
<ul>
<li>观察状态机的执行
<ul>
<li>strace/gdb</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>甚至记录和<font color="red">改变</font>状态机的执行</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./ilp-demo 
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffe10420e10 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b2c000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b16000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4935000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb495b000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7f9eb495b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4ab0000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4ab0000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b03000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b03000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b09000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b09000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4932000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7f9eb4932740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7f9eb4932a10<span class="o">)</span>         <span class="o">=</span> <span class="m">5644</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7f9eb4932a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7f9eb4933060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b03000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55de2e4dc000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b5e000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f9eb4b16000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>1796473<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>514062681<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x2a\x03\xa3\xe2\x7d\xa4\x84\x07&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55de2e503000<span class="o">)</span>                     <span class="o">=</span> 0x55de2e503000
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.52G instructions/s\n&#34;</span>, 2219.52G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>strace</code>调试最小的Hello OS，可以清楚地看到系统调用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./minimal
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./minimal&#34;</span>, <span class="o">[</span><span class="s2">&#34;./minimal&#34;</span><span class="o">]</span>, 0x7ffefc958480 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;\33[01;31mHello, OS World\33[0m\n&#34;</span>, 28Hello, OS World
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">28</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>1<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>-T看每一个系统调用花费的时间</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace -T ./ilp-demo
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffdfd498e18 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000258&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000005&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c980a000 &lt;0.000113&gt;
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97f4000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9613000 &lt;0.000084&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c9639000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7fb9c9639000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c978e000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7fb9c978e000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e1000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e1000 &lt;0.000060&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e7000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e7000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9610000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7fb9c9610740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7fb9c9610a10<span class="o">)</span>         <span class="o">=</span> <span class="m">8876</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7fb9c9610a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span> &lt;0.000097&gt;
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7fb9c9611060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000109&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c97e1000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000079&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55a0fcb07000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c983c000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7fb9c97f4000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span> &lt;0.000094&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>876239<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000075&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>511881481<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000199&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000090&gt;
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x6e\x63\x59\xe8\xb3\xfe\x8a\x8d&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span> &lt;0.000143&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000106&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55a0fd298000<span class="o">)</span>                     <span class="o">=</span> 0x55a0fd298000 &lt;0.000052&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.57G instructions/s\n&#34;</span>, 2219.57G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span> &lt;0.000085&gt;
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter10-1.png" title="/img/Operating System/chapter10-1.png" data-thumbnail="/img/Operating System/chapter10-1.png" data-sub-html="<h2>gdb layout src</h2>">
        
    </a><figcaption class="image-caption"><code>gdb layout src</code></figcaption>
    </figure>
<ul>
<li>注意为了让<code>layout src</code>能够成功显示，编译时需要使用<code>gcc</code>的<code>-g</code>编译选项</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo -g  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gdb ilp-demo                     
</span></span><span class="line"><span class="cl">GNU gdb <span class="o">(</span>Debian 13.1-2<span class="o">)</span> 13.1
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2023</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">License GPLv3+: GNU GPL version <span class="m">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show copying&#34;</span> and <span class="s2">&#34;show warranty&#34;</span> <span class="k">for</span> details.
</span></span><span class="line"><span class="cl">This GDB was configured as <span class="s2">&#34;x86_64-linux-gnu&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show configuration&#34;</span> <span class="k">for</span> configuration details.
</span></span><span class="line"><span class="cl">For bug reporting instructions, please see:
</span></span><span class="line"><span class="cl">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.
</span></span><span class="line"><span class="cl">Find the GDB manual and other documentation resources online at:
</span></span><span class="line"><span class="cl">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">For help, <span class="nb">type</span> <span class="s2">&#34;help&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;apropos word&#34;</span> to search <span class="k">for</span> commands related to <span class="s2">&#34;word&#34;</span>...
</span></span><span class="line"><span class="cl">Reading symbols from ilp-demo...
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> start
</span></span><span class="line"><span class="cl">Temporary breakpoint <span class="m">1</span> at 0x1060: file ilp-demo.c, line 22.
</span></span><span class="line"><span class="cl">Starting program: /home/kali/chapter9/ilp-demo 
</span></span><span class="line"><span class="cl"><span class="o">[</span>Thread debugging using libthread_db enabled<span class="o">]</span>
</span></span><span class="line"><span class="cl">Using host libthread_db library <span class="s2">&#34;/lib/x86_64-linux-gnu/libthread_db.so.1&#34;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Temporary breakpoint 1, main <span class="o">()</span> at ilp-demo.c:22
</span></span><span class="line"><span class="cl"><span class="m">22</span>        clock_t <span class="nv">st</span> <span class="o">=</span> clock<span class="o">()</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> layout src
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="应用-1-time-travel-debugging">应用 (1): Time-Travel Debugging</h3>
<ul>
<li>
<p>程序执行是随时间 “前进” 的$s_0 \rightarrow s_1 \rightarrow s_2 \rightarrow \dots$</p>
</li>
<li>
<p>能否在时间上 “后退”？ (time-travel)</p>
<ul>
<li>经常 gdb 不小心 step 过了，从头再来……</li>
<li>记录所有的$s_i$，就能实现任意的 time-traveling</li>
</ul>
</li>
</ul>
<blockquote>
<p>凉性循环，看一会<code>rust</code></p>
</blockquote>
<ul>
<li>记录所有$s_i$的开销太大（$s_i$由内存+寄存器组成）
<ul>
<li>但<font color="red">一条指令的side-effect通常有限</font></li>
</ul>
</li>
</ul>
<h3 id="应用-1-time-travel-debugging-contd">应用 (1): Time-Travel Debugging (cont&rsquo;d)</h3>
<ul>
<li>
<p>gdb 的隐藏功能 (大家读过 gdb 的手册了吗？)</p>
<ul>
<li>
<p><code>record full</code> - 开始记录</p>
</li>
<li>
<p><code>record stop</code> - 结束记录</p>
</li>
<li>
<p><code>reverse-step</code>/<code>reverse-stepi</code> - “时间旅行调试”</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>例子：调试 <a href="https://jyywiki.cn/pages/OS/2022/demos/rdrand.c" target="_blank" rel="noopener noreffer">rdrand.c</a>
<ul>
<li>Reverse execution 不是万能的
<ul>
<li><b><font color="red">有些复杂的指令 (<code>syscall</code>) 无法保证</font></b> $\Longrightarrow$ <code>record and replay</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;rdrand %0&#34;</span><span class="o">:</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;rdrand returns %016lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>asm volatile (&quot;rdrand %0&quot;: &quot;=r&quot;(val));</code>使用了 <code>GCC</code> 内联汇编（<code>Inline Assembly</code>）的语法，使用 Intel 的 RDRAND 指令生成一个随机数，并将该随机数保存到变量 <code>val</code> 中。</p>
<p>具体来说，<code>%0</code> 表示占位符，用来代表第一个输入或输出操作数，这里是 <code>val</code>。而 <code>=r</code> 则表示将 <code>val</code> 寄存器中的值作为输出值，同时通知编译器该变量会被修改。</p>
<p>因此，该代码使用 RDRAND 生成一个随机数，并将其保存到 <code>val</code> 变量中。最后通过 <code>printf</code> 打印出该随机数。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O1 rdrand.c -g -o rdrand   
</span></span><span class="line"><span class="cl">                                                                                         
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns d8112baa2a77dd3e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns 106671f827a8f49e                                                           
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns 04adc0b810ec0565
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>volatile</code>提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，告诉编译器对该变量不做优化，都会直接从变量内存地址中读取数据，从而可以提供对特殊地址的稳定访问。</p>
<p>如果没有<code>volatile</code>关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。（简洁的说就是：<code>volatile</code>关键词影响编译器编译的结果，用<code>volatile</code>声明的变量表示该变量随时可能发生变化，与该变量有关的运算，不要进行编译优化，以免出错）</p>
</blockquote>
<ul>
<li>更改之后进行<code>gdb</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="k">volatile</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">114514</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;rdrand %0&#34;</span><span class="o">:</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;rdrand returns %016lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>每一次的调试结果都不一样，那我们应该如何复现<code>BUG</code>？
<ul>
<li>打开记录模式</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> record full
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter10-2.png" title="/img/Operating System/chapter10-2.png" data-thumbnail="/img/Operating System/chapter10-2.png" data-sub-html="<h2>on wsl</h2>">
        
    </a><figcaption class="image-caption"><code>on wsl</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-3.png" title="/img/Operating System/chapter10-3.png" data-thumbnail="/img/Operating System/chapter10-3.png" data-sub-html="<h2>layout asm</h2>">
        
    </a><figcaption class="image-caption"><code>layout asm</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-4.png" title="/img/Operating System/chapter10-4.png" data-thumbnail="/img/Operating System/chapter10-4.png" data-sub-html="<h2>rax值相同</h2>">
        
    </a><figcaption class="image-caption"><code>rax值相同</code></figcaption>
    </figure>
<ul>
<li><code>val</code>的值已经改变，如何向上回溯？
<ul>
<li>使用<code>rsi</code>往回执行</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-5.png" title="/img/Operating System/chapter10-5.png" data-thumbnail="/img/Operating System/chapter10-5.png" data-sub-html="<h2>rsi</h2>">
        
    </a><figcaption class="image-caption"><code>rsi</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-6.png" title="/img/Operating System/chapter10-6.png" data-thumbnail="/img/Operating System/chapter10-6.png" data-sub-html="<h2>返回旧值</h2>">
        
    </a><figcaption class="image-caption"><code>返回旧值</code></figcaption>
    </figure>
<h3 id="应用-2-record--replay">应用 (2): Record &amp; Replay</h3>
<ul>
<li>在程序执行时记录信息，结束后重现程序的行为
<ul>
<li>确定的程序不需要任何记录
<ul>
<li>假设$s_0$执行 1,000,000 条确定的指令后得到$s^{`}$
<ul>
<li>那么只要记录$s_0$和1,000,000</li>
<li>就能通过“再执行一次” 推导出$s^{`}$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>记录：[指令数（确定指令） + 结果（非确定指令）] $\times n$</li>
</ul>
<h3 id="应用-2-record--replay-contd">应用 (2): Record &amp; Replay (cont&rsquo;d)</h3>
<ul>
<li>
<p><code>Record &amp; Replay</code>: 只需记录 <code>non-deterministic</code> 的指令的<font color="red">效果</font></p>
</li>
<li>
<p>(单线程) 应用程序</p>
<ul>
<li>syscall, rdrand, rdtsc, &hellip;</li>
<li>rr (Mozilla)
<ul>
<li><a href="https://jyywiki.cn/OS/2022/slides/10.slides" target="_blank" rel="noopener noreffer">To catch a failure: The record-and-replay approach to debugging</a> (CACM'20)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>(单处理器) 操作系统</p>
<ul>
<li>
<p>mmio, in, out, rdrand, rdtsc, 中断, &hellip;</p>
</li>
<li>
<p>QEMU (<code>-icount shift=auto,rr=record,rrfile=replay.bin</code>)</p>
<ul>
<li><a href="https://jyywiki.cn/OS/2022/slides/10.slides" target="_blank" rel="noopener noreffer">ReVirt: Enabling intrusion analysis through virtual-machine logging and replay</a> (OSDI'02, Best Paper 🏅)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="采样状态机执行">采样状态机执行</h2>
<h3 id="关于性能优化">关于性能优化</h3>
<blockquote>
<p>Premature optimization is the root of all evil. (D. E. Knuth)</p>
</blockquote>
<ul>
<li>
<p>那到底怎么样才算 <code>mature</code> 呢？</p>
<ul>
<li>
<p>状态机的执行需要时间；对象需要占用空间</p>
</li>
<li>
<p>需要理解好 “时间花在哪里”、“什么对象占用了空间”</p>
</li>
</ul>
</li>
<li>
<p>我们需要真实执行的<font color="red">性能摘要</font>！</p>
<ul>
<li>
<p>本质的回答：“为了做某件事到底花去了多少资源”</p>
</li>
<li>
<p>简化的回答：“一段时间内资源的消耗情况”</p>
</li>
</ul>
</li>
</ul>
<h3 id="profiler-和性能摘要">Profiler 和性能摘要</h3>
<blockquote>
<p><b>性能摘要需要对程序执行性能影响最小（不能因为这个进程过多影响你检测的程序）</b>，往往不需要 full trace。</p>
</blockquote>
<ul>
<li><b><font color="red">隔一段时间 （比如一毫秒）“暂停” 程序、观察状态机的执行</font></b>
<ul>
<li><b>中断</b>就可以做到</li>
<li>将状态 [<em>s</em>→<em>s</em>′] “记账”
<ul>
<li>执行的语句</li>
<li>函数调用栈</li>
<li>服务的请求</li>
</ul>
</li>
<li>得到统计意义的性能摘要</li>
</ul>
</li>
</ul>
<hr>
<p>例子：Linux Kernel perf (支持硬件 PMU) - <a href="https://jyywiki.cn/pages/OS/2022/demos/ilp-demo.c" target="_blank" rel="noopener noreffer">ilp-demo.c</a></p>
<ul>
<li>perf list, perf stat (-e), perf record, perf report</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOOP 1000000000ul
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;mov $1, %%rax;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rdi;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rsi;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rdx;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rcx;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r10;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r8;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r9;&#34;</span> <span class="o">::</span>
</span></span><span class="line"><span class="cl">                     <span class="o">:</span> <span class="s">&#34;rax&#34;</span><span class="p">,</span> <span class="s">&#34;rdi&#34;</span><span class="p">,</span> <span class="s">&#34;rsi&#34;</span><span class="p">,</span> <span class="s">&#34;rdx&#34;</span><span class="p">,</span> <span class="s">&#34;rcx&#34;</span><span class="p">,</span> <span class="s">&#34;r10&#34;</span><span class="p">,</span> <span class="s">&#34;r8&#34;</span><span class="p">,</span> <span class="s">&#34;r9&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">loop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">LOOP</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ips</span> <span class="o">=</span> <span class="n">inst</span> <span class="o">/</span> <span class="p">((</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.2lfG instructions/s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ips</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装<code>perf</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ sudo apt install linux-tools-common
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> jungle: 
</span></span><span class="line"><span class="cl">Reading package lists... Done
</span></span><span class="line"><span class="cl">Building dependency tree... Done
</span></span><span class="line"><span class="cl">Reading state information... Done
</span></span><span class="line"><span class="cl">The following NEW packages will be installed:
</span></span><span class="line"><span class="cl">  linux-tools-common
</span></span><span class="line"><span class="cl"><span class="m">0</span> upgraded, <span class="m">1</span> newly installed, <span class="m">0</span> to remove and <span class="m">48</span> not upgraded.
</span></span><span class="line"><span class="cl">Need to get <span class="m">295</span> kB of archives.
</span></span><span class="line"><span class="cl">After this operation, <span class="m">812</span> kB of additional disk space will be used.
</span></span><span class="line"><span class="cl">Get:1 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 linux-tools-common all 5.15.0-69.76 <span class="o">[</span><span class="m">295</span> kB<span class="o">]</span>
</span></span><span class="line"><span class="cl">Fetched <span class="m">295</span> kB in 0s <span class="o">(</span><span class="m">4448</span> kB/s<span class="o">)</span>           
</span></span><span class="line"><span class="cl">debconf: unable to initialize frontend: Dialog
</span></span><span class="line"><span class="cl">debconf: <span class="o">(</span>Dialog frontend requires a screen at least <span class="m">13</span> lines tall and <span class="m">31</span> columns wide.<span class="o">)</span>
</span></span><span class="line"><span class="cl">debconf: falling back to frontend: Readline
</span></span><span class="line"><span class="cl">Selecting previously unselected package linux-tools-common.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Reading database ... <span class="m">81634</span> files and directories currently installed.<span class="o">)</span>
</span></span><span class="line"><span class="cl">Preparing to unpack .../linux-tools-common_5.15.0-69.76_all.deb ...
</span></span><span class="line"><span class="cl">Unpacking linux-tools-common <span class="o">(</span>5.15.0-69.76<span class="o">)</span> ...
</span></span><span class="line"><span class="cl">Setting up linux-tools-common <span class="o">(</span>5.15.0-69.76<span class="o">)</span> ...
</span></span><span class="line"><span class="cl">Processing triggers <span class="k">for</span> man-db <span class="o">(</span>2.10.2-1<span class="o">)</span> ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实际中的性能优化">实际中的性能优化</h3>
<ul>
<li>
<p>你们遇到的大部分情况</p>
<ul>
<li>
<p>二八定律：80% 的时间消耗在非常集中的几处代码</p>
</li>
<li>
<p><code>L1 (pmm)</code>: 小内存分配时的 <code>lock contention</code></p>
<ul>
<li><code>profiler</code> 直接帮你解决问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>工业界遇到的大部分情况
<ul>
<li>木桶效应：每个部分都已经 tune 到局部最优了
<ul>
<li>剩下的部分要么 profiler 信息不完整，要么就不好解决</li>
<li>(工程师整天都对着 profiler 看得头都大了)</li>
<li><a href="https://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/fulltext" target="_blank" rel="noopener noreffer">The flame graph（火焰图）</a> (CACM'16)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="model-checkerverifier">Model Checker/Verifier</h2>
<h3 id="model-checker-的威力大家已经知道了">Model Checker 的威力大家已经知道了</h3>
<ul>
<li>
<p>150 行代码的 <a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py" target="_blank" rel="noopener noreffer">model-checker.py</a></p>
<ul>
<li>
<p>证完所有《操作系统》课上涉及的并发程序</p>
</li>
<li>
<p>复现 OSTEP 教科书上的并发 bug (条件变量错误唤醒)</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>一些真正的 model checkers</p>
<ul>
<li>
<p><a href="https://lamport.azurewebsites.net/tla/tla.html" target="_blank" rel="noopener noreffer">TLA+</a> by Leslie Lamport;</p>
</li>
<li>
<p><a href="https://ti.arc.nasa.gov/tech/rse/vandv/jpf/" target="_blank" rel="noopener noreffer">Java PathFinder (JFP)</a> 和<a href="http://spinroot.com/" target="_blank" rel="noopener noreffer">SPIN</a></p>
<ul>
<li>它们都喜欢用 Peterson 算法做 tutorial 😁</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="model-checker-不仅是并发">Model Checker: 不仅是并发</h3>
<ul>
<li>任何 “<code>non-deterministic</code>” 的状态机都可以检查</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">u32</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rdrand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">u32</span> <span class="n">y</span> <span class="o">=</span> <span class="n">rdrand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">65</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bug</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// 可能空指针吗？
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>更高效的 <code>Model Checker</code>: “将相似状态合并”
<ul>
<li><a href="https://dl.acm.org/doi/10.5555/1855741.1855756" target="_blank" rel="noopener noreffer">KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs</a> (OSDI'08, Best Paper 🏅)</li>
<li>基于 <code>LLVM bitcode</code> 解释器实现</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>本次课回答的问题
<ul>
<li><strong>Q</strong>: 状态机的视角给了我们什么？</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Take-away messages</p>
<ul>
<li>
<p>编程 (状态机) 就是全世界</p>
</li>
<li>
<p>状态机可以帮我们</p>
<ul>
<li>建立物理世界的公理体系
<ul>
<li>理解调试器、<code>Trace, profiler</code></li>
<li>自动分析程序的执行 (<code>model checker</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Linux x86 Program Start Up or - How the heck do we get to main()?</title>
    <link>https://Jungle430.github.io/posts/operating-system/support2/</link>
    <pubDate>Sat, 04 Mar 2023 15:47:02 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/support2/</guid>
    <description><![CDATA[<h2 id="概述">概述</h2>
<ul>
<li>
<p>文章介绍了X86系统main函数调用前后的一些细节，并阐述了C程序的<b>构造函数</b>和<b>析构函数</b>，<u>以及<code>.init</code>,<code>.fini</code>,<code>init_array</code>和<code>fini_array</code>各section相对于main函数及彼此的执行顺序。遗憾的是这篇文章是基于32位CPU架构来研究的</u></p>
</li>
<li>
<p>文章对$debug$ <code>main</code>函数之前的代码有一定的帮助效果</p>
</li>
<li>
<p>主要介绍了X86 ELF文件的动态加载过程</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-1.png" title="/img/Operating System/support2-1.png" data-thumbnail="/img/Operating System/support2-1.png" data-sub-html="<h2>总体流程图</h2>">
        
    </a><figcaption class="image-caption">总体流程图</figcaption>
    </figure>
<h2 id="调用过程分析">调用过程分析</h2>
<h3 id="main函数的调用">main函数的调用</h3>
<ul>
<li>先写一个最简单的C程序prog1.c</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译一下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -ggdb -o prog1 prog1.c
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：<code>-ggdb</code>的选项作用：生成<code>gdb</code>专用的调试信息，会有一些<code>gdb</code>专用的扩展</p>
</blockquote>
<ul>
<li>然后我们用objdump做一下反汇编</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">objdump -d prog1 &gt; prog1.asm
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="从我们终端敲回车到程序被载入执行的过程中发生了什么">从我们终端敲回车到程序被载入执行的过程中发生了什么？</h4>
<ul>
<li>当我们从终端输入要运行的程序或者是从有关的<code>gui</code>界面点击相关的button的时候，<b>shell</b>或者<b>gui</b>就会调用<code>execve()</code>。这里不是我们重点关心的地方，简单来说，execve()会设立一个栈，然后将参数<code>argc</code>，<code>argv</code>和<code>envp</code>压入栈中。文件描述符0，1，2（stdin, stdout和stderr）由之前的shell设置，加载器会帮我们完成有关重定位的许多工作，当所有搞定之后，控制权会传递给<code>_start()</code></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-2.png" title="/img/Operating System/support2-2.png" data-thumbnail="/img/Operating System/support2-2.png" data-sub-html="<h2>shell输入man execve之后的函数声明和所在位置</h2>">
        
    </a><figcaption class="image-caption">shell输入<code>man execve</code>之后的函数声明和所在位置</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-4.png" title="/img/Operating System/support2-4.png" data-thumbnail="/img/Operating System/support2-4.png" data-sub-html="<h2>evnp</h2>">
        
    </a><figcaption class="image-caption"><code>evnp</code></figcaption>
    </figure>
<h4 id="_start">_start()</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">080482e0 &lt;_start&gt;:
</span></span><span class="line"><span class="cl">80482e0:       31 ed                   xor    %ebp,%ebp
</span></span><span class="line"><span class="cl">80482e2:       5e                      pop    %esi
</span></span><span class="line"><span class="cl">80482e3:       89 e1                   mov    %esp,%ecx
</span></span><span class="line"><span class="cl">80482e5:       83 e4 f0                and    $0xfffffff0,%esp
</span></span><span class="line"><span class="cl">80482e8:       50                      push   %eax
</span></span><span class="line"><span class="cl">80482e9:       54                      push   %esp
</span></span><span class="line"><span class="cl">80482ea:       52                      push   %edx
</span></span><span class="line"><span class="cl">80482eb:       68 00 84 04 08          push   $0x8048400
</span></span><span class="line"><span class="cl">80482f0:       68 a0 83 04 08          push   $0x80483a0
</span></span><span class="line"><span class="cl">80482f5:       51                      push   %ecx
</span></span><span class="line"><span class="cl">80482f6:       56                      push   %esi
</span></span><span class="line"><span class="cl">80482f7:       68 94 83 04 08          push   $0x8048394
</span></span><span class="line"><span class="cl">80482fc:       e8 c3 ff ff ff          call   80482c4 &lt;__libc_start_main@plt&gt;
</span></span><span class="line"><span class="cl">8048301:       f4                      hlt
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>任何值<code>xor</code>自身得到的结果都是0。所以<code>xor %ebp,%ebp</code>语句会把<code>%ebp</code>设置为0。ABI（Application Binary Interface specification）推荐这么做，目的是为了标记最外层函数的页帧（frame）</li>
<li>接下来，从栈中弹出栈顶的值保存到<code>%esi</code>。在最开始的时候我们把<code>argc</code>，<code>argv</code>和<code>envp</code>放到了栈里，所以现在的<code>pop</code>语句会把<code>argc</code>放到<code>%esi</code>中</li>
<li>这里只是临时保存一下，稍后我们会把它再次压回栈中</li>
<li>因为我们弹出了<code>argc</code>，所以<code>%ebp</code>现在指向的是<code>argv</code>。<code>mov</code>指令把<code>argv</code>放到了<code>%ecx</code>中，但是并没有移动栈指针</li>
<li><u>然后，将栈指针和一个可以清除后四位的掩码做<code>and</code>操作。根据当前栈指针的位置不同，栈指针将会向下移动0到15个字节。这么做，保证了任何情况下，栈指针都是16字节的偶数倍对齐的。对齐的目的是保证栈上所有的变量都能够被内存和cache快速的访问</u></li>
<li><u>要求这么做的是SSE，就是指令都能在单精度浮点数组上工作的那个<b>（扩展指令集）</b></u></li>
<li>例子：某次运行时，<code>_start</code>函数刚被调用的时候，<code>%esp</code>处于<code>0xbffff770</code>。在我们从栈上弹出<code>argc</code>后，<code>%esp</code>指向<code>0xbffff774</code>。它向高地址移动了（栈向下增长）。当对栈指针执行了<code>and</code>操作后，栈指针回到了<code>0xbffff770</code></li>
</ul>
<h4 id="__libc_start_main">__libc_start_main</h4>
<ul>
<li>现在，我们把<code>__libc_start_main</code>函数的参数压入栈中。第一个参数<code>%eax</code>被压入栈中，里面保存了无效信息，原因是稍后会有七个参数将被压入栈中，但是为了保证16字节对齐，所以需要第八个参数。这个值也并不会被用到。<code>__libc_start_main</code>是在链接的时候从glibc复制过来的。在glibc的代码中，它位于<code>csu/libc-start.c</code>文件里。<code>__libc_start_main</code>的定义如下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">__libc_start_main</span><span class="p">(</span>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">main</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span> <span class="n">ubp_av</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">init</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">rtld_fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span> <span class="n">stack_end</span><span class="p">));</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/support2-3.jpg" title="/img/Operating System/support2-3.jpg" data-thumbnail="/img/Operating System/support2-3.jpg" data-sub-html="<h2>参数说明</h2>">
        
    </a><figcaption class="image-caption">参数说明</figcaption>
    </figure>
<ul>
<li>__libc_csu_fini函数也是从glibc被链接进我们代码的，它的源代码位于csu/elf-init.c中</li>
</ul>
<h4 id="环境变量哪里去了">环境变量哪里去了？</h4>
<ul>
<li>
<p>我们并没有获取envp（栈里指向我们环境变量的指针）？它并不是<code>__libc_start_main</code>函数的参数。但是我们知道main函数的原型其实是<code>int main(int argc, char** argv, char** envp)</code>。所以，到底怎么回事？</p>
</li>
<li>
<p>其实，<code>__libc_start_main</code>函数会调用<code>__libc_init_first</code>，这个函数会使用内部信息去找到环境变量（实际上环境变量就位于<code>argv</code>的终止字符null的后面），然后设置一个全局变量<code>__environ</code>，这个全局变量可以被<code>__libc_start_main</code>函数内部任何地方使用，包括调用main函数时。当<code>envp</code>建立了之后，<code>__libc_start_main</code>函数会使用相同的小技巧，越过envp数组之后的<code>NULL</code>字符，获取另一个向量——ELF辅助向量（加载器使用它给进程传递一些信息）</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__libc_init_first</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">arg0</span><span class="p">,</span> <span class="p">...)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arg0</span><span class="p">,</span> <span class="o">**</span><span class="n">envp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="n">argc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">__environ</span> <span class="o">=</span> <span class="n">envp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">__libc_init</span> <span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行程序前，设置环境变量<code>LD_SHOW_AUXV=1</code>,可以查看里面的内容</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nv">LD_SHOW_AUXV</span><span class="o">=</span><span class="m">1</span> ./prog1
</span></span><span class="line"><span class="cl">AT_SYSINFO:      0xe62414
</span></span><span class="line"><span class="cl">AT_SYSINFO_EHDR: 0xe62000
</span></span><span class="line"><span class="cl">AT_HWCAP:    fpu vme de pse tsc msr pae mce cx8 apic
</span></span><span class="line"><span class="cl">             mtrr pge mca cmov pat pse36 clflush dts
</span></span><span class="line"><span class="cl">             acpi mmx fxsr sse sse2 ss ht tm pbe
</span></span><span class="line"><span class="cl">AT_PAGESZ:       <span class="m">4096</span>
</span></span><span class="line"><span class="cl">AT_CLKTCK:       <span class="m">100</span>
</span></span><span class="line"><span class="cl">AT_PHDR:         0x8048034
</span></span><span class="line"><span class="cl">AT_PHENT:        <span class="m">32</span>
</span></span><span class="line"><span class="cl">AT_PHNUM:        <span class="m">8</span>
</span></span><span class="line"><span class="cl">AT_BASE:         0x686000
</span></span><span class="line"><span class="cl">AT_FLAGS:        0x0
</span></span><span class="line"><span class="cl">AT_ENTRY:        0x80482e0
</span></span><span class="line"><span class="cl">AT_UID:          <span class="m">1002</span>
</span></span><span class="line"><span class="cl">AT_EUID:         <span class="m">1002</span>
</span></span><span class="line"><span class="cl">AT_GID:          <span class="m">1000</span>
</span></span><span class="line"><span class="cl">AT_EGID:         <span class="m">1000</span>
</span></span><span class="line"><span class="cl">AT_SECURE:       <span class="m">0</span>
</span></span><span class="line"><span class="cl">AT_RANDOM:       0xbff09acb
</span></span><span class="line"><span class="cl">AT_EXECFN:       ./prog1
</span></span><span class="line"><span class="cl">AT_PLATFORM:     i686
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>各种各样的信息。<code>AT_ENTRY</code>是<code>_start</code>的地址，还有我们的UID、有效UID和GID</p>
</li>
<li>
<p><b>__libc_start_main功能总结</b></p>
<ul>
<li>处理关于setuid、setgid程序的安全问题</li>
<li>启动线程</li>
<li>把<code>fini</code>函数和<code>rtld_fini</code>函数作为参数传递给<code>at_exit</code>调用，使它们在<code>at_exit</code>里被调用，从而完成用户程序和加载器的调用结束之后的清理工作</li>
<li>调用其<code>init</code>参数</li>
<li>调用<code>main</code>函数，并把<code>argc</code>和<code>argv</code>参数、环境变量传递给它</li>
<li>调用<code>exit</code>函数，并将main函数的返回值传递给它</li>
</ul>
</li>
</ul>
<h4 id="__libc_csu_init">__libc_csu_init</h4>
<ul>
<li><code>__libc_start_main</code>函数的<code>init</code>参数被设置成了<code>__libc_csu_init</code>函数，它也是被链接进我们代码的。它来源于glibc源代码中的csu/elf-init.c。其C代码如下（原代码只不过多了一些#ifdef）：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__libc_csu_init</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_init</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">__init_array_end</span> <span class="o">-</span> <span class="n">__init_array_start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="o">*</span><span class="n">__init_array_start</span> <span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>功能：<b>用户应用程序的构造函数</b></p>
</li>
<li>
<p><code>__libc_csu_init</code>函数相当重要，因为它是我们<b>可执行程序的构造函数</b></p>
<ul>
<li>？？？这不是C++，哪里来的构造函数？？？ $\Longrightarrow$ 构造函数和析构函数的概念并非属于C++，它诞生早于C++</li>
<li>对于任意的可执行程序都可以有一个C函数的<b>构造函数</b><code>__libc_csu_init</code>和C函数的<b>析构函数</b><code>__libc_csu_fini</code>。<u>在构造函数内部，可执行程序会找到全局C函数组成的构造函数集，并且调用它们</u>。（任何一个C程序都是可以有构造函数集的） $\Longrightarrow$ <u>the executable will look for global C level constructors and call any that it finds. It&rsquo;s possible for a C program to also have these</u>（原文）</li>
</ul>
</li>
<li>
<p><code>__libc_csu_init</code>函数的反汇编代码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">080483a0 &lt;__libc_csu_init&gt;:
</span></span><span class="line"><span class="cl"> 80483a0:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 80483a1:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 80483a3:       57                      push   %edi
</span></span><span class="line"><span class="cl"> 80483a4:       56                      push   %esi
</span></span><span class="line"><span class="cl"> 80483a5:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 80483a6:       e8 5a 00 00 00          call   8048405 &lt;__i686.get_pc_thunk.bx&gt;
</span></span><span class="line"><span class="cl"> 80483ab:       81 c3 49 1c 00 00       add    $0x1c49,%ebx
</span></span><span class="line"><span class="cl"> 80483b1:       83 ec 1c                sub    $0x1c,%esp
</span></span><span class="line"><span class="cl"> 80483b4:       e8 bb fe ff ff          call   8048274 &lt;_init&gt;
</span></span><span class="line"><span class="cl"> 80483b9:       8d bb 20 ff ff ff       lea    -0xe0(%ebx),%edi
</span></span><span class="line"><span class="cl"> 80483bf:       8d 83 20 ff ff ff       lea    -0xe0(%ebx),%eax
</span></span><span class="line"><span class="cl"> 80483c5:       29 c7                   sub    %eax,%edi
</span></span><span class="line"><span class="cl"> 80483c7:       c1 ff 02                sar    $0x2,%edi
</span></span><span class="line"><span class="cl"> 80483ca:       85 ff                   test   %edi,%edi
</span></span><span class="line"><span class="cl"> 80483cc:       74 24                   je     80483f2 &lt;__libc_csu_init+0x52&gt;
</span></span><span class="line"><span class="cl"> 80483ce:       31 f6                   xor    %esi,%esi
</span></span><span class="line"><span class="cl"> 80483d0:       8b 45 10                mov    0x10(%ebp),%eax
</span></span><span class="line"><span class="cl"> 80483d3:       89 44 24 08             mov    %eax,0x8(%esp)
</span></span><span class="line"><span class="cl"> 80483d7:       8b 45 0c                mov    0xc(%ebp),%eax
</span></span><span class="line"><span class="cl"> 80483da:       89 44 24 04             mov    %eax,0x4(%esp)
</span></span><span class="line"><span class="cl"> 80483de:       8b 45 08                mov    0x8(%ebp),%eax
</span></span><span class="line"><span class="cl"> 80483e1:       89 04 24                mov    %eax,(%esp)
</span></span><span class="line"><span class="cl"> 80483e4:       ff 94 b3 20 ff ff ff    call   *-0xe0(%ebx,%esi,4)
</span></span><span class="line"><span class="cl"> 80483eb:       83 c6 01                add    $0x1,%esi
</span></span><span class="line"><span class="cl"> 80483ee:       39 fe                   cmp    %edi,%esi
</span></span><span class="line"><span class="cl"> 80483f0:       72 de                   jb     80483d0 &lt;__libc_csu_init+0x30&gt;
</span></span><span class="line"><span class="cl"> 80483f2:       83 c4 1c                add    $0x1c,%esp
</span></span><span class="line"><span class="cl"> 80483f5:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 80483f6:       5e                      pop    %esi
</span></span><span class="line"><span class="cl"> 80483f7:       5f                      pop    %edi
</span></span><span class="line"><span class="cl"> 80483f8:       5d                      pop    %ebp
</span></span><span class="line"><span class="cl"> 80483f9:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="这个函数都做了什么">这个函数都做了什么？</h5>
<h6 id="get_pc_truck函数">get_pc_truck函数</h6>
<ul>
<li>该函数是给位置无关码使用的。设置它们可以让位置无关码正常工作。为了让它们工作，基址寄存器（%ebp）需要知道<code>GLOBAL_OFFSET_TABLE</code>。其部分代码如下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">push %ebx
</span></span><span class="line"><span class="cl">call __get_pc_thunk_bx
</span></span><span class="line"><span class="cl">add  $_GLOBAL_OFFSET_TABLE_,%ebx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">__get_pc_thunk_bx:
</span></span><span class="line"><span class="cl">movel (%esp),%ebx
</span></span><span class="line"><span class="cl">return
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>过程分析</p>
<ul>
<li>
<p>调用<code>__get_pc_thunk_bx</code>时，像所有其他函数调用一样，将下一条指令的地址压入栈中（计组：保存上一级程序的<b>PC</b>）。这样，当函数返回时，就会继续执行下条指令</p>
</li>
<li>
<p>在<code>__get_pc_thunk_bx</code>中，我们将返回地址从栈中复制到<code>%ebx</code>中。当返回的时候，下条指令会把<code>_GLOBAL_OFFSET_TABLE_</code>加到<code>%ebx</code>上去（前3句）</p>
</li>
<li>
<p>其中<code>_GLOBAL_OFFSET_TABLE_</code>代表了当前地址和位置无关码使用的<code>GOT(global offset table)</code>的差值</p>
</li>
<li>
<p>在<code>GOT</code>中保存了我们想访问的变量的指针的集合，<b>并且我们只需要知道数据在这个表中的偏移量就行</b></p>
</li>
<li>
<p>加载器会为我们修改这个表里面的地址。对于函数来讲，也有一个类似的表（PLT）</p>
</li>
<li>
<p><u>汇编里面这么编写实在是太烦人了，但是，在C或者C++中，你可以将-pic参数传递给编译器，它将会自动帮你完成这个工作</u><b>（你知道你不用关心这个事情就可以了（md就怕自己再™️钻牛角尖））</b></p>
</li>
</ul>
</li>
<li>
<p>和64位有关的区别</p>
</li>
</ul>
<blockquote>
<p><em>上述·get_pc_truck·函数的主要目的其实是获取变量对应的GOT，以通过它获取变量真正的值。之所以这么写，是因为在32位系统里，没有类似于rip的寄存器，因此并不能直接获取当前指令的地址，而在64位系统里就不用这种小技巧了</em></p>
<ul>
<li>
<p>有关阅读</p>
<ul>
<li>
<p><a href="https://blog.csdn.net/mw_nice/article/details/100022610" target="_blank" rel="noopener noreffer">《Linux中的GOT和PLT到底是个啥？》</a> （原来的博客寄了，在CSDN找到了转载）</p>
</li>
<li>
<p><a href="https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html" target="_blank" rel="noopener noreffer">《PLT and GOT - the key to code sharing and dynamic libraries》</a> （英文原文）</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h6 id="剩下的循环在干什么">剩下的循环在干什么？</h6>
<ul>
<li>现在我们只要记住：<b>翻译的不好，这里建议看原文</b></li>
</ul>
<blockquote>
<p>For now, just remember that it calls any C level initializers for our program.</p>
</blockquote>
<p>中文翻译版：</p>
<blockquote>
<p><b>它调用了用户程序中所有用C代码编写的<code>initializers</code></b></p>
</blockquote>
<ul>
<li>中文这个版本容易让人看跑了，这个C代码不一定是自己编写的，只要是<b>C level</b>级别的<b>initializers</b>（后面有预处理，链接，中译容易让人看跑）</li>
</ul>
<h4 id="_init函数分析">_init函数分析</h4>
<h5 id="源码">源码</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">08048274 &lt;_init&gt;:
</span></span><span class="line"><span class="cl"> 8048274:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 8048275:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 8048277:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048278:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 804827b:       e8 00 00 00 00          call   8048280 &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 8048280:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 8048281:       81 c3 74 1d 00 00       add    $0x1d74,%ebx        (.got.plt)
</span></span><span class="line"><span class="cl"> 8048287:       8b 93 fc ff ff ff       mov    -0x4(%ebx),%edx
</span></span><span class="line"><span class="cl"> 804828d:       85 d2                   test   %edx,%edx
</span></span><span class="line"><span class="cl"> 804828f:       74 05                   je     8048296 &lt;_init+0x22&gt;
</span></span><span class="line"><span class="cl"> 8048291:       e8 1e 00 00 00          call   80482b4 &lt;__gmon_start__@plt&gt;
</span></span><span class="line"><span class="cl"> 8048296:       e8 d5 00 00 00          call   8048370 &lt;frame_dummy&gt;
</span></span><span class="line"><span class="cl"> 804829b:       e8 70 01 00 00          call   8048410 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"> 80482a0:       58                      pop    %eax
</span></span><span class="line"><span class="cl"> 80482a1:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 80482a2:       c9                      leave
</span></span><span class="line"><span class="cl"> 80482a3:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="调用">调用</h5>
<ul>
<li>当加载器将控制权交给<code>_start</code>函数之后，<code>_start</code>函数将会调用<code>__libc_start_main</code>函数，<code>__libc_start_main</code>函数会调用<code>__libc_csu_init</code>函数, <code>__libc_csu_init</code>函数会调用<code>_init</code>函数</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>End in 2023-03-08 0:44</p>
<p>这种真🐔8️⃣👨的文章真是看点就看不下去了，明天概率论，先睡</p>
<p>某<a href="https://daonan233.github.io" target="_blank" rel="noopener noreffer">55</a>今天玩了5h ⚪，晚上卸载之后🎠自己是<b>S</b>🅱️，只能说是dinner行为了吧</p>
</div>
        </div>
    </div>
<h5 id="_init函数起始于常规的c函数调用"><code>_init</code>函数起始于常规的C函数调用</h5>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-08 10:04</p>
<p>睡醒了，感觉看了能有一半多了，今天再看点</p>
</div>
        </div>
    </div>
<ul>
<li>
<p>如果想要详细了解C函数调用规范，请阅读<a href="http://dbp-consulting.com/tutorials/debugging/basicAsmDebuggingGDB.html" target="_blank" rel="noopener noreffer">《Basic Assembler Debugging with GDB》</a></p>
</li>
<li>
<p>大致过程</p>
<ul>
<li>调用者的基址寄存器（<code>%ebp</code>）会被保存到栈里(8048274)</li>
<li>当前函数的基址寄存器（<code>%ebp</code>）会<b>指向栈顶</b>(8048275)</li>
<li>然后，<b>保留4个字节空间</b>(8048278) $\Longrightarrow$ <u>更好的解释是push之后<code>%esp</code>要sub $0x4 来保证栈指针仍然指向栈顶（栈向下增长）</u></li>
<li>这个过程和调用<code>get_pc_trunk</code>非常像</li>
</ul>
</li>
<li>
<p>要大致了解一下stack和function调用的关系，阅读文章<a href="https://blog.csdn.net/max_ii_min/article/details/116047509?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167824270516800182771276%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167824270516800182771276&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-116047509-null-null.142%5ev73%5ewechat,201%5ev4%5eadd_ask,239%5ev2%5einsert_chatgpt&amp;utm_term=esp%E5%AF%84%E5%AD%98%E5%99%A8&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreffer">《汇编-栈帧-寄存器esp, ebp》</a></p>
</li>
<li>
<p>如果你仔细看的话，发现调用的是下一条指令的地址？？？啥操作？？？</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 804827b:       e8 00 00 00 00          call   8048280 &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 8048280:       5b                      pop    %ebx
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>给人感觉这就是在顺序执行，不过你要用函数调用的压栈出栈来干什么？
<ul>
<li>$\Longrightarrow$ <b>当前的地址被压入了栈中。然后通过弹出栈操作，又把它放到了<code>%ebx</code>中，之后就可以用它来设置访问全局访问表了(.got.plt)</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 8048277:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048278:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 804827b:       e8 00 00 00 00          call   8048280 &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 8048280:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 8048281:       81 c3 74 1d 00 00       add    $0x1d74,%ebx        (.got.plt)
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="gmon_start函数分析">gmon_start函数分析</h4>
<h5 id="生成profilehttpsenwikipediaorgwikiprofiling_computer_programming文件">生成<a href="https://en.wikipedia.org/wiki/Profiling_%28computer_programming%29" target="_blank" rel="noopener noreffer">profile</a>文件</h5>
<ul>
<li><code>gmon_start</code>函数。如果它是空的，我们跳过它，不调用它。否则，调用它来设置profiling。该函数调用一个例程开始profiling，并且调用<code>at_exit</code>去调用另一个程序运行,并且在运行结束的时候生成gmon.out</li>
</ul>
<blockquote>
<p><em>为了优化软件中频繁调用的部分，从而提高程序整体执行的效率，我们可以在使用gcc编译的时候加上</em> <code>-pg</code><em>标志。这样在程序运行结束的时候会生成一个记录程序运行状态的文件叫做</em><code>gmon.out</code><em>。然后，我们可以使用一个名为</em><code>gprof</code><em>的GNU profiler工具来分析该文件从而获得程序各部分的运行时间，来反映其运行性能</em></p>
<p>相关文章：<a href="https://developer.ibm.com/" target="_blank" rel="noopener noreffer">《Home IBM Developer》</a></p>
</blockquote>
<h4 id="frame_dummy函数分析">frame_dummy函数分析</h4>
<ul>
<li><u>无论那种情况（前面函数的执行情况）</u>(原文是In either case)，下一步我们将调用<code>frame_dummy</code>函数</li>
<li><code>frame_dummy</code>函数的目的是调用<code>__register_frame_info</code>函数，但是，调用<code>frame_dummy</code>是为了给上述函数设置参数。这么做的目的是为了在出错时设置<code>unwinding stack frames</code> $\Longrightarrow$ 不是本次重点，想了解请阅读<a href="https://stackoverflow.com/questions/2331316/what-is-stack-unwinding" target="_blank" rel="noopener noreffer">《What is stack unwinding?》</a></li>
</ul>
<h4 id="_do_global_ctors_aux-longrightarrow-finally-were-getting-constructive"><code>_do_global_ctors_aux</code> $\Longrightarrow$ Finally we&rsquo;re getting constructive!</h4>
<ul>
<li>如果在调用main函数之前，你的程序出了问题，你很可能需要看看这个函数。当然，这里存放了全局C++对象的构造函数，但是，这里也能存放其他东西。</li>
</ul>
<h5 id="example">Example</h5>
<ul>
<li>我们把prog1.c修改为prog2.c</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">a_constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>void __attribute__ ((constructor)) a_constructor()</code>：它告诉GCC：链接器应该在<code>__do_global_ctors_aux</code>使用的表里创建一个指针指向这里</p>
</li>
<li>
<p><code>__FUNCTION__</code>被编译器替换成了当前函数的名字</p>
</li>
<li>
<p>运行</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./prog2
</span></span><span class="line"><span class="cl">a_constructor
</span></span><span class="line"><span class="cl">main
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>反编译看一下<code>_init</code>的汇编（自己的Linux上面编不出来的可以看一下<a href="https://stackoverflow.com/questions/27900834/do-global-ctors-aux-not-shown-in-objdump" target="_blank" rel="noopener noreffer">《__do_global_ctors_aux not shown in objdump》</a>，不过看文章就行了）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">08048290 &lt;_init&gt;:
</span></span><span class="line"><span class="cl"> 8048290:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 8048291:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 8048293:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048294:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 8048297:       e8 00 00 00 00          call   804829c &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 804829c:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 804829d:       81 c3 58 1d 00 00       add    $0x1d58,%ebx
</span></span><span class="line"><span class="cl"> 80482a3:       8b 93 fc ff ff ff       mov    -0x4(%ebx),%edx
</span></span><span class="line"><span class="cl"> 80482a9:       85 d2                   test   %edx,%edx
</span></span><span class="line"><span class="cl"> 80482ab:       74 05                   je     80482b2 &lt;_init+0x22&gt;
</span></span><span class="line"><span class="cl"> 80482ad:       e8 1e 00 00 00          call   80482d0 &lt;__gmon_start__@plt&gt;
</span></span><span class="line"><span class="cl"> 80482b2:       e8 d9 00 00 00          call   8048390 &lt;frame_dummy&gt;
</span></span><span class="line"><span class="cl"> 80482b7:       e8 94 01 00 00          call   8048450 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"> 80482bc:       58                      pop    %eax
</span></span><span class="line"><span class="cl"> 80482bd:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 80482be:       c9                      leave
</span></span><span class="line"><span class="cl"> 80482bf:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们可以看到，上述的地址和prog1的地址略微有所不同。<u>这些有差异的地址似乎相对于prog1移动了28个字节</u>。<b>这里，有两个函数：<code>&quot;a_constructor&quot;</code>（加上结束符一共14个字节）、<code>&quot;main&quot;</code>（加上结束符一共5个字节）和两个格式化字符串<code>&quot;%s\n&quot;</code>（2*4个字节，加上一个1字节的换行符和终止符），所以14 + 5 + 4 + 4 = 27？ 似乎还差一个</b>。不管怎样，这只是个猜想，我就不仔细研究了。然后我们就要跳入到<code>__do_global_ctors_aux</code>函数中去，看看到底发生了什么。</li>
</ul>
<h5 id="源码-1">源码</h5>
<ul>
<li>位于GCC源码中的gcc/crtstuff.c里</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__do_global_ctors_aux</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">func_ptr</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">__CTOR_END__</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="p">(</span><span class="n">func_ptr</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">p</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如上所示，p的值被初始化成<code>__CTOR_END__</code>减去一个字节。这是一种指针算法
<ul>
<li><b>如果指针指向一个函数，在这种情况下，-1表示向上移动一个指针或者说4个字节</b>。<u>We&rsquo;ll see that in the assembler as well. While the pointer doesn&rsquo;t have a value of -1 (cast to a pointer), we&rsquo;ll call the function we&rsquo;re pointing at, and then back the pointer up again</u></li>
<li>这个指针数组起始于-1，并且包含若干个函数指针</li>
</ul>
</li>
</ul>
<h5 id="对应的汇编">对应的汇编</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">08048450 &lt;__do_global_ctors_aux&gt;:
</span></span><span class="line"><span class="cl"> 8048450:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 8048451:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 8048453:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048454:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 8048457:       a1 14 9f 04 08          mov    0x8049f14,%eax
</span></span><span class="line"><span class="cl"> 804845c:       83 f8 ff                cmp    $0xffffffff,%eax
</span></span><span class="line"><span class="cl"> 804845f:       74 13                   je     8048474 &lt;__do_global_ctors_aux+0x24&gt;
</span></span><span class="line"><span class="cl"> 8048461:       bb 14 9f 04 08          mov    $0x8049f14,%ebx
</span></span><span class="line"><span class="cl"> 8048466:       66 90                   xchg   %ax,%ax
</span></span><span class="line"><span class="cl"> 8048468:       83 eb 04                sub    $0x4,%ebx
</span></span><span class="line"><span class="cl"> 804846b:       ff d0                   call   *%eax
</span></span><span class="line"><span class="cl"> 804846d:       8b 03                   mov    (%ebx),%eax
</span></span><span class="line"><span class="cl"> 804846f:       83 f8 ff                cmp    $0xffffffff,%eax
</span></span><span class="line"><span class="cl"> 8048472:       75 f4                   jne    8048468 &lt;__do_global_ctors_aux+0x18&gt;
</span></span><span class="line"><span class="cl"> 8048474:       83 c4 04                add    $0x4,%esp
</span></span><span class="line"><span class="cl"> 8048477:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 8048478:       5d                      pop    %ebp
</span></span><span class="line"><span class="cl"> 8048479:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="函数最开始的部分">函数最开始的部分</h5>
<ul>
<li>函数最开始的部分依然遵从了C函数正常的调用惯例（保存调用者的栈基址寄存器，设置当前函数的栈基址寄存器），本函数中还增加了一点：额外把<code>%ebx</code>保存到了栈中，因为这个函数后面会使用到它。同时，我们也为（C代码中的）指针p保留了空间。你可能注意到了，即使我们在栈上为其开辟了空间，但是从未使用这部分空间。<b>取而代之的是，<code>p</code>将会保存到<code>%ebx</code>中，<code>*p</code>会保存到<code>%eax</code>中</b>。$\Longrightarrow$ 注意看前面_init的汇编，函数执行完栈里面弹出来的东西，在本函数的汇编里面没找到 （ⓜ️D，真TM难找）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 80482b7:       e8 94 01 00 00          call   8048450 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"> 80482bc:       58                      pop    %eax
</span></span><span class="line"><span class="cl"> 80482bd:       5b                      pop    %ebx
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="循环之前的设置">循环之前的设置</h5>
<ul>
<li>看起来编译器做了一些优化，编译器并没有直接“加载<code>__CTOR_END__</code>，然后将其值减去1，再查找它指向的内容”，而是直接加载<code>*(__CTOR_END__ - 1)</code>，这是一个立即数<code>0x8049f14</code>（注意，<code>$0x8049f14</code>意思是一个立即数，而不带<code>$</code>，只写<code>0x8049f14</code>的意思是这个地址指向的内容）。这个数里面的内容被直接放到了%eax中，然后立刻比较%eax和-1，如果相等，则跳转到地址0x8048474，回收栈，弹出我们保存在栈里的内容，函数调用结束，返回。</li>
<li>假设在函数表中至少有一个值，立即数<code>0x8049f14</code>被存放到<code>%ebx</code>，也就是函数指针<code>p</code>，然后执行指令<code>xchg %ax,%ax</code>，这是什么鬼？$\Downarrow$</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 8048461:       bb 14 9f 04 08          mov    $0x8049f14,%ebx
</span></span><span class="line"><span class="cl"> 8048466:       66 90                   xchg   %ax,%ax
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b>原来这是X86 16或者32位里的一个nop（No Operation）语句。它什么也不做，只是占据了一个指令周期，起一个占位符作用而已。在这种情况下，使循环开始于<code>8048468</code>，而不是<code>8048466</code>。<u>这么做的好处是使循环开始的地方以4字节对齐，这样整个循环将会极大可能的被保存到一个cache line里，而不会被分成两段，从而起到加速执行的作用</u></b> （这段感觉编译器好🐮🅱️啊）</li>
<li>接下来，将<code>%ebx</code>减去4，从而为下一次循环做好准备，调用<code>%eax</code>里保存的地址对应的函数，然后将下一个函数指针移至<code>%eax</code>中，并且和-1比较，如果不等于-1，再次调回到上述循环</li>
</ul>
<h5 id="and-finally-the-epilogue">And finally the epilogue</h5>
<p>Otherwise we fall through into our function epilogue and return to <strong>_init</strong>, which immediately falls through into its epilogue and returns to <strong><strong>libc_csu_init</strong></strong>. Bet you forgot all about him. There&rsquo;s still a loop to deal with there but first&ndash;</p>
<h5 id="使用gdb检测prog2">使用gdb检测prog2</h5>
<ul>
<li><b>GDB总是显示你将要执行的下一行或者下一条指令</b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ !gdb
</span></span><span class="line"><span class="cl">gdb prog2
</span></span><span class="line"><span class="cl">Reading symbols from /home/patrick/src/asm/prog2...done.
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set</span> disassemble-next-line on
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> b *0x80482b7
</span></span><span class="line"><span class="cl">Breakpoint <span class="m">1</span> at 0x80482b7
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行调试器，打开<code>disassemble-next-line</code>，这样它就会总是显示下一条将要执行的指令的汇编代码，然后我们在<code>_init</code>函数将要调用<code>__do_global_ctors_aux</code>函数的地方设置一个断点</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> r
</span></span><span class="line"><span class="cl">Starting program: /home/patrick/src/asm/prog2 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Breakpoint 1, 0x080482b7 in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482b7 &lt;_init+39&gt;:    e8 <span class="m">94</span> <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> call   0x8048450 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x08048450 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048450 &lt;__do_global_ctors_aux+0&gt;:     <span class="m">55</span> push   %ebp
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>输入<code>r</code>继续运行程序，到达断点处。再输入<code>si</code>单步执行指令，现在我们进入了<code>__do_global_ctors_aux</code>函数内部。后面你会看到若干次我并没输入任何指令，但是GDB却继续执行，这是因为我只是按了回车而已，GDB默认会重复上条指令。所以，如果我按下回车，GDB将会按照输入<code>si</code>继续执行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span>
</span></span><span class="line"><span class="cl">0x08048451 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048451 &lt;__do_global_ctors_aux+1&gt;:     <span class="m">89</span> e5  mov    %esp,%ebp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048453 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048453 &lt;__do_global_ctors_aux+3&gt;:     <span class="m">53</span> push   %ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048454 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048454 &lt;__do_global_ctors_aux+4&gt;:     <span class="m">83</span> ec <span class="m">04</span>   sub    <span class="nv">$0</span>x4,%esp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048457 in __do_global_ctors_aux <span class="o">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>好的，现在我们已经执行完程序最开始的部分，接下来将要执行真正的代码了。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048457 &lt;__do_global_ctors_aux+7&gt;:     a1 <span class="m">14</span> 9f <span class="m">04</span> <span class="m">08</span> mov    0x8049f14,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x0804845c in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804845c &lt;__do_global_ctors_aux+12&gt;:    <span class="m">83</span> f8 ff   cmp    <span class="nv">$0</span>xffffffff,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> p/x <span class="nv">$eax</span>
</span></span><span class="line"><span class="cl"><span class="nv">$1</span> <span class="o">=</span> 0x80483b4
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我想知道加载完指针之后会是什么样，所以输入了<code>p/x $eax</code>，意思是以十六进制的形式打印寄存器<code>%eax</code>的内容。它不等于-1，所以我们假定程序将继续执行循环。现在由于我的最后一条指令是print指令，所以我不能按回车继续执行了，下次我就得输入<code>si</code>了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x0804845f in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804845f &lt;__do_global_ctors_aux+15&gt;:    <span class="m">74</span> <span class="m">13</span>  je     0x8048474 &lt;__do_global_ctors_aux+36&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048461 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048461 &lt;__do_global_ctors_aux+17&gt;:    bb <span class="m">14</span> 9f <span class="m">04</span> <span class="m">08</span> mov    <span class="nv">$0</span>x8049f14,%ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048466 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048466 &lt;__do_global_ctors_aux+22&gt;:    <span class="m">66</span> <span class="m">90</span>  xchg   %ax,%ax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048468 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048468 &lt;__do_global_ctors_aux+24&gt;:    <span class="m">83</span> eb <span class="m">04</span>   sub    <span class="nv">$0</span>x4,%ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x0804846b in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804846b &lt;__do_global_ctors_aux+27&gt;:    ff d0  call   *%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">a_constructor <span class="o">()</span> at prog2.c:3
</span></span><span class="line"><span class="cl"><span class="m">3</span>   void __attribute__ <span class="o">((</span>constructor<span class="o">))</span> a_constructor<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080483b4 &lt;a_constructor+0&gt;:     <span class="m">55</span> push   %ebp
</span></span><span class="line"><span class="cl">   0x080483b5 &lt;a_constructor+1&gt;:     <span class="m">89</span> e5  mov    %esp,%ebp
</span></span><span class="line"><span class="cl">   0x080483b7 &lt;a_constructor+3&gt;:     <span class="m">83</span> ec <span class="m">18</span>   sub    <span class="nv">$0</span>x18,%esp
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>这部分代码很有意思。我们一步步调用来看看。现在我们已经进入了我们自己写的函数<code>a_constructor</code>。因为GDB是能看到我们的源代码的，所以它在下一行给出了我们源码。又因为我打开了<code>disassemble-next-line</code>，所以它也会给出对应的汇编代码。这个例子中输出了函数最开始的部分，对应了函数的声明，所以我们得到了三行汇编。有意思吧？现在，我输入<code>n</code>命令，这个时候我们写的<code>prinf</code>就会被调用了。第一个n跳过了程序最开始的部分，第二个n执行prinf，第三个n执行了函数的结尾部分。如果你想知道为什么你需要在函数最开始和结束部分做些处理的话，现在，你使用GDB的单步调试应该能知道答案了吧。</p>
</li>
<li>
<p>之前，我们已经把<code>a_constructor</code>字符串的地址作为<code>printf</code>的参数保存到了栈里，因为编译器足够的智能，发现实际上<code>puts</code>函数才是我们想要的，所以它调用了<code>puts</code>函数。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(gdb) n
</span></span><span class="line"><span class="cl">4       printf(&#34;%s\n&#34;, __FUNCTION__);
</span></span><span class="line"><span class="cl">=&gt; 0x080483ba &lt;a_constructor+6&gt;:     c7 04 24 a5 84 04 08   movl   $0x80484a5,(%esp)
</span></span><span class="line"><span class="cl">   0x080483c1 &lt;a_constructor+13&gt;:    e8 2a ff ff ff call   0x80482f0 &lt;puts@plt&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>因为我们正在运行中来调试程序，所以我们看到了a_constructor打印出了上面的内容。后括号}对应了函数的结尾部分</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> n
</span></span><span class="line"><span class="cl">a_constructor
</span></span><span class="line"><span class="cl"><span class="m">5</span>   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080483c6 &lt;a_constructor+18&gt;:    c9 leave  
</span></span><span class="line"><span class="cl">   0x080483c7 &lt;a_constructor+19&gt;:    c3 ret 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>有关<code>leave</code>指令实际操作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> movl %ebp, %esp
</span></span><span class="line"><span class="cl"> popl %ebp
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>继续执行，我们就退出了函数，并返回了调用函数。这里我又不得不输入<code>si</code>了：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> n
</span></span><span class="line"><span class="cl">0x0804846d in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804846d &lt;__do_global_ctors_aux+29&gt;:    8b <span class="m">03</span>  mov    <span class="o">(</span>%ebx<span class="o">)</span>,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x0804846f in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804846f &lt;__do_global_ctors_aux+31&gt;:    <span class="m">83</span> f8 ff   cmp    <span class="nv">$0</span>xffffffff,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048472 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048472 &lt;__do_global_ctors_aux+34&gt;:    <span class="m">75</span> f4  jne    0x8048468 &lt;__do_global_ctors_aux+24&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> p/x <span class="nv">$eax</span>
</span></span><span class="line"><span class="cl"><span class="nv">$2</span> <span class="o">=</span> 0xffffffff
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我比较好奇，并且再次看了一下：这次，我们的函数指针指向了-1，所以，程序退出了循环</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x08048474 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048474 &lt;__do_global_ctors_aux+36&gt;:    <span class="m">83</span> c4 <span class="m">04</span>   add    <span class="nv">$0</span>x4,%esp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048477 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048477 &lt;__do_global_ctors_aux+39&gt;:    5b pop    %ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048478 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048478 &lt;__do_global_ctors_aux+40&gt;:    5d pop    %ebp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048479 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048479 &lt;__do_global_ctors_aux+41&gt;:    c3 ret    
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482bc in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482bc &lt;_init+44&gt;:    <span class="m">58</span> pop    %eax
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们现在退回到了<code>_init</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482bd in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482bd &lt;_init+45&gt;:    5b pop    %ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482be in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482be &lt;_init+46&gt;:    c9 leave  
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482bf in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482bf &lt;_init+47&gt;:    c3 ret    
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080483f9 in __libc_csu_init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080483f9 &lt;__libc_csu_init+25&gt;:  8d bb 1c ff ff ff  lea    -0xe4<span class="o">(</span>%ebx<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> q
</span></span><span class="line"><span class="cl">A debugging session is active.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Inferior <span class="m">1</span> <span class="o">[</span>process 17368<span class="o">]</span> will be killed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Quit anyway? <span class="o">(</span>y or n<span class="o">)</span> y
</span></span><span class="line"><span class="cl">$
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="回到__libc_csu_init__">回到<code>__libc_csu_init__</code></h4>
<ul>
<li>源码</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__libc_csu_init</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_init</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">__init_array_end</span> <span class="o">-</span> <span class="n">__init_array_start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="o">*</span><span class="n">__init_array_start</span> <span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="这是另一个函数的循环调用">这是另一个函数的循环调用</h5>
<ul>
<li><code>__init__</code>数组里面是什么呢？你肯定不会想到。你也可以在这个阶段自定义代码。这时刚刚从运行我们自定义的构造函数的<code>_init</code>函数返回，这意味着，在这个数组里面的内容将会在构造函数完成之后运行。你能通过某种方式告诉编译器你想在这个阶段运行某个你自定义的函数。这个函数也会收到和main函数相同的参数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.init_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">init</span><span class="p">)</span> <span class="o">*</span><span class="n">__init</span> <span class="o">=</span> <span class="n">init</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="程序将返回__libc_start_main__">程序将返回<code>__libc_start_main__</code></h4>
<ul>
<li>它调用了我们的main函数，然后把main函数的返回值传递给exit()函数</li>
</ul>
<h5 id="exit函数运行了更多的循环">exit()函数运行了更多的循环</h5>
<ul>
<li>exit()函数按照注册顺序依次运行了在at_exit()中注册的函数。然后会运行另外一个循环，这次的循环是在<code>__fini_</code>数组中定义的。在运行完这些函数之后，就会调用析构函数。</li>
</ul>
<h3 id="这个程序把上面所有的过程联系了起来">这个程序，把上面所有的过程联系了起来</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">preinit</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fini</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.init_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">init</span><span class="p">)</span> <span class="o">*</span><span class="n">__init</span> <span class="o">=</span> <span class="n">init</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.preinit_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">preinit</span><span class="p">)</span> <span class="o">*</span><span class="n">__preinit</span> <span class="o">=</span> <span class="n">preinit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.fini_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">fini</span><span class="p">)</span> <span class="o">*</span><span class="n">__fini</span> <span class="o">=</span> <span class="n">fini</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>  <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="n">destructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">my_atexit</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">my_atexit2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">atexit</span><span class="p">(</span><span class="n">my_atexit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">atexit</span><span class="p">(</span><span class="n">my_atexit2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译并运行这个函数（这里我将其命名为hooks.c），输出如下：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./hooks
</span></span><span class="line"><span class="cl">preinit
</span></span><span class="line"><span class="cl">constructor
</span></span><span class="line"><span class="cl">init
</span></span><span class="line"><span class="cl">my_atexit2
</span></span><span class="line"><span class="cl">my_atexit
</span></span><span class="line"><span class="cl">fini
</span></span><span class="line"><span class="cl">destructor
</span></span><span class="line"><span class="cl">$
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回顾">回顾</h2>
<ul>
<li>还是这张图</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-1.png" title="/img/Operating System/support2-1.png" data-thumbnail="/img/Operating System/support2-1.png" data-sub-html="<h2>总体流程图</h2>">
        
    </a><figcaption class="image-caption">总体流程图</figcaption>
    </figure>
<h2 id="总结">总结</h2>
<ul>
<li>汇编真TM难分析</li>
<li>由于是32位的老Linux，所以没能在自己的虚拟机上面复现</li>
<li>涉及编译和链接的过程，应该去补<a href="https://luomuxiaoxiao.com/?p=137" target="_blank" rel="noopener noreffer">《计算机原理系列之三 ——– 如何编译目标文件》</a>这篇文章</li>
</ul>
<h2 id="相关参考资料">相关参考资料</h2>
<ul>
<li>参考文章
<ul>
<li>
<p><a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html" target="_blank" rel="noopener noreffer">《Linux x86 Program Start Up or - How the heck do we get to main()? by Patrick Horgan》</a></p>
</li>
<li>
<p><a href="https://luomuxiaoxiao.com/?p=516" target="_blank" rel="noopener noreffer">《Linux X86 程序启动 – main函数是如何被执行的？——落木萧萧的博客》</a>（已与作者沟通，同意部分转载）</p>
</li>
<li>
<p><a href="https://www.gnu.org/software/hurd/glibc/startup.html" target="_blank" rel="noopener noreffer">《How libc startup in a process works》</a></p>
</li>
</ul>
</li>
</ul>
]]></description>
</item>
</channel>
</rss>
