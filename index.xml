<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/</link>
        <description>Welcome to Jungle&#39;s blog.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>junglece430@gmail.com (Jungle)</managingEditor>
            <webMaster>junglece430@gmail.com (Jungle)</webMaster><lastBuildDate>Mon, 11 Mar 2024 14:26:44 &#43;0800</lastBuildDate>
            <atom:link href="https://Jungle430.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>LRU and LRU-K</title>
    <link>https://Jungle430.github.io/posts/cmu-15-445-database-systems/lru_and_lru-k/</link>
    <pubDate>Mon, 11 Mar 2024 14:26:44 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/cmu-15-445-database-systems/lru_and_lru-k/</guid>
    <description><![CDATA[<h1 id="lru-and-lru-k">LRU and LRU-k</h1>
<ul>
<li>注：本文章为<a href="https://15445.courses.cs.cmu.edu/spring2024" target="_blank" rel="noopener noreffer">CMU15445-2024-spring</a> project1-task1的部分讲解，为了遵守<a href="https://www.cs.cmu.edu/~pavlo/" target="_blank" rel="noopener noreffer">Andy Pavlo</a>对于学术的要求，<strong>有关实验中的代码一律不予公开</strong>，只会讲解思路</li>
</ul>
<h2 id="实验要求">实验要求</h2>
<blockquote>
<p>This component is responsible for tracking page usage in the buffer pool. You will implement a new class called <code>LRUKReplacer</code> in <code>src/include/buffer/lru_k_replacer.h</code> and its corresponding implementation file in <code>src/buffer/lru_k_replacer.cpp</code>. Note that <code>LRUKReplacer</code> is a stand-alone class and is not related to any of the other <code>Replacer</code> classes. You are expected to implement only the LRU-K replacement policy. You don&rsquo;t have to implement LRU or a clock replacement policy, even if there is a corresponding file for it.</p>
<p>The LRU-K algorithm evicts a frame whose backward k-distance is maximum of all frames in the replacer. Backward k-distance is computed as the difference in time between current timestamp and the timestamp of kth previous access. A frame with fewer than k historical accesses is given +inf as its backward k-distance. <strong>When multiple frames have +inf backward k-distance, the replacer evicts the frame with the earliest overall timestamp (i.e., the frame whose least-recent recorded access is the overall least recent access).</strong></p>
<p>The maximum size for the <code>LRUKReplacer</code> is the same as the size of the buffer pool since it contains placeholders for all of the frames in the <code>BufferPoolManager</code>. However, at any given moment, not all the frames in the replacer are considered to be evictable. The size of <code>LRUKReplacer</code> is represented by the number of <em>evictable</em> frames. The <code>LRUKReplacer</code> is initialized to have no frames in it. Then, only when a frame is marked as evictable, replacer&rsquo;s size will increase.</p>
<p>You will need to implement the <em>LRU-K</em> policy discussed in this course. You will need to implement the following methods as defined in the header file (<code>src/include/buffer/lru_k_replacer.h</code>) and in the source file (<code>src/buffer/lru_k_replacer.cpp</code>):</p>
<ul>
<li><code>Evict(frame_id_t* frame_id)</code> : Evict the frame with largest backward k-distance compared to all other <strong>evictable</strong> frames being tracked by the <code>Replacer</code>. Store the frame id in the output parameter and return <code>True</code>. If there are no evictable frames return <code>False</code>.</li>
<li><code>RecordAccess(frame_id_t frame_id)</code> : Record that given frame id is accessed at current timestamp. This method should be called after a page is pinned in the <code>BufferPoolManager</code>.</li>
<li><code>Remove(frame_id_t frame_id)</code> : Clear all access history associated with a frame. This method should be called only when a page is deleted in the <code>BufferPoolManager</code>.</li>
<li><code>SetEvictable(frame_id_t frame_id, bool set_evictable)</code> : This method controls whether a frame is evictable or not. It also controls <code>LRUKReplacer</code>&rsquo;s size. You&rsquo;ll know when to call this function when you implement the <code>BufferPoolManager</code>. To be specific, when pin count of a page reaches 0, its corresponding frame is marked evictable and replacer&rsquo;s size is incremented.</li>
<li><code>Size()</code> : This method returns the number of evictable frames that are currently in the <code>LRUKReplacer</code>.</li>
</ul>
<p>The implementation details are up to you. You are allowed to use built-in STL containers. You may assume that you will not run out of memory, but you must make sure that your implementation is thread-safe.</p>
</blockquote>
<ul>
<li>本文不会考虑thread-safe的问题，主要是为了讲解两种算法的模型</li>
</ul>
<h2 id="内容分析">内容分析</h2>
<ul>
<li>这个实验的主要内容是为了实现一个<code>BUFFER POOL</code>，用于将存储数据的页暂时存储在内存中，但是一台机器的内容始终都是有限的，一旦到达阈值，我们就要踢出去一些页（从内容中移除，刷到磁盘上面去），那么怎么踢呢？本实验提供给我们的算法是LRU-K算法</li>
</ul>
<h2 id="lru">LRU</h2>
<ul>
<li>
<p>学过OS/计算机组成的朋友一定对这个算法不陌生，以往对于cache中数据的处理中LRU就是常用的一个手法，但是我们该如何实现呢？这也就是<a href="https://leetcode.cn/problems/lru-cache/description/" target="_blank" rel="noopener noreffer">leetcode-146</a>，首先选取数据结构上的模型</p>
</li>
<li>
<p>首先存储数据标准或者整个数据的数据结构肯定是一个列表，但是这个列表我们是选数组还是链表呢？<u>在LRU算法中，常常会发生的事情是之前用的数据在没有被踢出cache之前会再次被使用，而且我们踢数据通常就是在列表的末尾踢掉的，如果这个数据再次被使用，应该将其移动到列表头部</u>，那对于移动数据均摊下来时间复杂度是$O(n)$的数组近乎是一场效率上的灾难，所以这个时候删除和插入数据的时间复杂度仅有$O(1)$的链表就成了首选</p>
</li>
<li>
<p>但是我们选了链表之后又有一个问题，对于get(key) -&gt; value这样的操作，时间复杂度会升高到$O(n)$，我们还是不能容忍这样的效率，所以我们可以再用一部分空间来换取时间：加上一张&lt;key, pointer of node&gt;的哈希表，这样通过key可以直接定位到链表中的节点，时间复杂度就降到了O(1)</p>
</li>
<li>
<p>C++库的选取：因为15445要用C++，所以本题也为C++实现，这里面会遇到一个选择：list是使用STL提供好的还是手搓？我先使用的STL中的list，然后哈希表中的value存储的是list的迭代器，但是这样会出现一个隐式的bug：STL的list存在迭代器失效问题，而这个东西又是在一定条件下出现的，很难预测，所以这里手搓了一个双向链表，哈希表中的value直接换成链表中node的地址就可以了</p>
</li>
</ul>
<h2 id="lc-146实现">lc-146实现</h2>
<ul>
<li>节点node</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">selfDS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">_doubleLinkedListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">K</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">V</span> <span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">_doubleLinkedListNode</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="nf">_doubleLinkedListNode</span><span class="p">(</span><span class="n">K</span> <span class="n">key</span><span class="p">,</span> <span class="n">V</span> <span class="n">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="n">key</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">value</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="n">prev</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getKey</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getValue</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">setValue</span><span class="p">(</span><span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">remove</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">addAfter</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_doubleLinkedListNode</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">addAfter</span><span class="p">(</span><span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getNext</span><span class="p">()</span> <span class="k">const</span> <span class="o">-&gt;</span> <span class="n">_doubleLinkedListNode</span> <span class="o">*</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">setNext</span><span class="p">(</span><span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getPrev</span><span class="p">()</span> <span class="k">const</span> <span class="o">-&gt;</span> <span class="n">_doubleLinkedListNode</span> <span class="o">*</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">setPrev</span><span class="p">(</span><span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">~</span><span class="n">_doubleLinkedListNode</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// namespace selfDS
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>LRU模板实现</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// k-v store, by LRU algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;cstddef&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unordered_map&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;doubleLinkedlistNode.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LRU</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">_tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">capacity</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*&gt;</span> <span class="n">_map</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="n">LRU</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">capacity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="n">capacity</span><span class="p">(</span><span class="n">capacity</span><span class="p">),</span> <span class="n">length</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">_map</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*&gt;</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span><span class="p">(</span><span class="n">K</span><span class="p">(),</span> <span class="n">V</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span> <span class="o">=</span> <span class="k">new</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span><span class="p">(</span><span class="n">K</span><span class="p">(),</span> <span class="n">V</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">setNext</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="o">-&gt;</span><span class="n">setPrev</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="na">[[nodiscard]]</span> <span class="k">auto</span> <span class="n">get</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">remove</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">addAfter</span><span class="p">(</span><span class="n">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="p">(</span><span class="n">pointer</span><span class="o">-&gt;</span><span class="n">getValue</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">put</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">setValue</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">remove</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">addAfter</span><span class="p">(</span><span class="n">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">==</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="o">-&gt;</span><span class="n">getPrev</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">remove</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">pointer</span><span class="o">-&gt;</span><span class="n">getKey</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">delete</span> <span class="n">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">-&gt;</span><span class="n">length</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">addAfter</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">getNext</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">length</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">~</span><span class="n">LRU</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">getNext</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">getNext</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">delete</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">x</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>题解直接将模板实例化就可以了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LRUCache</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">LRU</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">lru</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="n">LRUCache</span><span class="p">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="p">)</span> <span class="o">:</span> <span class="n">lru</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lru</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="n">value_or</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lru</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="lru-k">LRU-K</h2>
<ul>
<li>
<p>从上文看，LRU算法对于cache数据的管理已经很好了，但是这里面为什么又要引入LRU-K算法呢？</p>
</li>
<li>
<p>LRU算法存在的问题是，当存在大量的一次性操作时，会把历史的缓存冲刷掉，而新进入cache的数据有可能之后不会再访问了，被冲刷掉的数据是之前保留下来的比较“有用”的数据，这就是<strong>缓存污染</strong>问题</p>
</li>
<li>
<p>LRU-K的思路是，永远最先驱逐访问次数小于K次的page。网上的很多讲解是直接维护两个链表，一个叫做history list，另一个叫buffer list。新加入的数据总会先进入history list，当访问次数等于指定的次数K次时，就会从history list删除，并移动到buffer list的头部</p>
</li>
<li>
<p>Buffer list服从LRU算法，History List可以服从任意替换算法，在实验手册中，要求驱逐最早进入history list的page，采用的是FIFO策略</p>
</li>
<li>
<p>以上就是LRU和LRU-K算法的解释</p>
</li>
</ul>
<h2 id="补充">补充</h2>
<ul>
<li>由于该版的实验<strong>page中有是否可以移除的标志位</strong>，如果为false表明该页无法被移除，所以说移除page的算法需要在原有的LRU-K算法的基础上面改进，按照优先级别先从History List的头向后扫描，如果有可以移除的page就直接移除，如果说History List中的页都无法移除，那么就需要从Buffer List的尾部向前扫描，发现可以移除的page就直接移除</li>
<li>这种情况的改变将删除操作的时间复杂度从$O(1)$上升到了$O(n)$，但是因为理想的模型和实际并不相符，实际中有一些page就是规定不应该被移除，所以为了和实际相符只能损失一小部分效率（毕竟主存和磁盘的容量比很小）</li>
</ul>
]]></description>
</item>
<item>
    <title>Learning docker</title>
    <link>https://Jungle430.github.io/posts/docker/learning_docker/</link>
    <pubDate>Thu, 14 Sep 2023 17:54:38 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/docker/learning_docker/</guid>
    <description><![CDATA[<h1 id="learning-docker">Learning Docker</h1>
<h2 id="背景概要">背景概要</h2>
<ul>
<li>$2005 \Rightarrow 2015$：<code>Cloud</code>（云技术）时代，为<code>Container</code>打下基础，带来土壤</li>
<li>$2015 \Rightarrow\ Now$：<code>Container</code>（容器）时代，最出名的代表就是<code>Docker</code></li>
</ul>
<h2 id="container的概念"><code>Container</code>的概念</h2>
<ul>
<li>简述：复制了一遍你的运行环境，别人拿过来能直接跑对应的程序，不用再折腾配环境这种司马事情了</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="windows"><code>Windows</code></h3>
<ul>
<li>
<p><a href="https://www.docker.com" target="_blank" rel="noopener noreffer">Docker官网</a>，下载桌面版</p>
</li>
<li>
<p>注意安装前开启<code>BIOS</code>虚拟化</p>
</li>
<li>
<p>如果开启<code>wsl2</code>能省去很多事情（</p>
</li>
<li>
<p>最终验证：命令行运行</p>
</li>
</ul>
<h3 id="linux"><code>Linux</code></h3>
<ul>
<li><a href="get.docker.com" rel="">get.docker.com</a>
<ul>
<li>下载后跑脚本即可</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -fsSL get.docker.com -o get-docker.sh
</span></span><span class="line"><span class="cl">sudo ./get-docker.sh
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>最终验证：命令行运行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl start docker
</span></span><span class="line"><span class="cl">docker version
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="创建与操作容器">创建与操作容器</h2>
<ul>
<li>镜像(<code>image</code>)：包含<code>OS</code>和应用的对象，类似虚拟机的模板（装系统用的那种，比如系统盘！），只能读</li>
<li>容器(<code>container</code>)：和镜像几乎一样，但是比镜像多了一层<code>Read-Write Layer</code>，这样就可以写了</li>
</ul>
<hr>
<h3 id="创建容器">创建容器</h3>
<ul>
<li>
<p>先检测<code>Client</code>和<code>Server</code>是否都启动<code>docker version</code>（<code>docker</code>桌面版要挂着）</p>
</li>
<li>
<p>创建命令<code>docker container run &lt;image name&gt;</code>(容器里面是对应的<code>image name</code>)</p>
</li>
<li>
<p>例子</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 建nginx的镜像，并运行</span>
</span></span><span class="line"><span class="cl">docker container run nginx
</span></span><span class="line"><span class="cl"><span class="c1"># 建ubuntu的镜像，并运行</span>
</span></span><span class="line"><span class="cl">docker container run ubuntu
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Docker Hub</code>：官方镜像社区，里面有大量制作好的镜像（创建容器就是上上面先拉取镜像，然后制作成镜像装在<code>Docker</code>里面）</li>
</ul>
<hr>
<h3 id="查看正在运行的容器">查看正在运行的容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>              <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">8</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Up</span> <span class="n">About</span> <span class="n">a</span> <span class="n">minute</span>             <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">11</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">5</span> <span class="n">seconds</span>                  <span class="n">rros_lab</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看所有容器">查看所有容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ps </span><span class="n">-a</span>
</span></span><span class="line"><span class="cl"><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>             <span class="n">CREATED</span>        <span class="n">STATUS</span>                         <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">e64ddbdaadc8</span>   <span class="nb">rust-oslab</span><span class="err">:</span><span class="n">latest</span>     <span class="s2">&#34;/bin/sh -c bash&#34;</span>   <span class="n">9</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Exited</span> <span class="p">(</span><span class="n">0</span><span class="p">)</span> <span class="n">About</span> <span class="n">an</span> <span class="n">hour</span> <span class="n">ago</span>             <span class="nb">rust-oslab</span><span class="p">-</span><span class="n">1</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">9</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">43</span> <span class="n">seconds</span> <span class="n">ago</span>              <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">12</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">42</span> <span class="n">seconds</span> <span class="n">ago</span>              <span class="n">rros_lab</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 等价命令</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls </span><span class="n">-a</span>
</span></span><span class="line"><span class="cl"><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>             <span class="n">CREATED</span>        <span class="n">STATUS</span>                       <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">e64ddbdaadc8</span>   <span class="nb">rust-oslab</span><span class="err">:</span><span class="n">latest</span>     <span class="s2">&#34;/bin/sh -c bash&#34;</span>   <span class="n">9</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Exited</span> <span class="p">(</span><span class="n">0</span><span class="p">)</span> <span class="n">30</span> <span class="n">seconds</span> <span class="n">ago</span>              <span class="nb">rust-oslab</span><span class="p">-</span><span class="n">1</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">10</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">7</span> <span class="n">minutes</span> <span class="n">ago</span>             <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">12</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">7</span> <span class="n">minutes</span> <span class="n">ago</span>             <span class="n">rros_lab</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="启动容器">启动容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="p">&lt;</span><span class="n">image</span> <span class="n">name</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="停止正在运行的容器">停止正在运行的容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">stop</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span> <span class="c"># id写前缀就行，一般前缀不会冲突</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删除容器">删除容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="nb">rm </span><span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span> <span class="c"># id写前缀就行，一般前缀不会冲突</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>上面的命令可以省略<code>container</code>不过为了强调<code>container</code>平时不做删除（与<code>image</code>区分）</li>
</ul>
<hr>
<h3 id="多容器操作">多容器操作</h3>
<ul>
<li>一次停掉多个容器的思路
<ul>
<li>查看所有容器的<code>id</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ps </span><span class="n">-a</span> <span class="n">-q</span>
</span></span><span class="line"><span class="cl"><span class="n">660040021c4d</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后利用指令组合</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="n">stop</span> <span class="p">$(</span><span class="n">docker</span> <span class="n">container</span> <span class="nb">ps </span><span class="n">-a</span> <span class="n">-q</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">660040021c4d</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><b>命令组合的思路可以用到很多<code>docker</code>需要批量处理的情况下</b></p>
</li>
<li>
<p><b>删除正在运行的容器会报错！</b></p>
<ul>
<li>强制删除：<code>docker container rm &lt;id&gt; -f</code></li>
</ul>
</li>
</ul>
<h2 id="端口映射与主被动模式">端口映射与主/被动模式</h2>
<h3 id="端口映射">端口映射</h3>
<ul>
<li>目的：让容器能过在外网访问到</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-p</span> <span class="p">&lt;</span><span class="s2">&#34;服务器的端口&#34;</span><span class="p">&gt;</span><span class="err">:</span><span class="p">&lt;</span><span class="s2">&#34;容器的端口&#34;</span><span class="p">&gt;</span> <span class="n">nginx</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-p</span> <span class="n">80</span><span class="err">:</span><span class="n">80</span> <span class="n">nginx</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>检测是否启动
<ul>
<li>浏览器中访问<code>127.0.0.1:80</code></li>
</ul>
</li>
</ul>
<hr>
<h3 id="主动模式默认">主动模式（默认）</h3>
<ul>
<li>
<p>相当于命令行里面的子进程，会打印日志信息</p>
</li>
<li>
<p>容易被误操作停掉（关掉命令行或者不小心<code>Ctrl + c</code>）</p>
</li>
<li>
<p>调试时使用</p>
</li>
</ul>
<h3 id="被动模式后台运行">被动模式（后台运行）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-d</span> <span class="n">-p</span> <span class="n">80</span><span class="err">:</span><span class="n">80</span> <span class="n">nginx</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>不再打印日志</p>
</li>
<li>
<p>不会因为关掉命令行而终止</p>
</li>
<li>
<p>使用<code>docker container ls</code>就能查看到</p>
</li>
</ul>
<h3 id="转换成主动模式">转换成主动模式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">attach</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="detached模式下查看日志的方法"><code>detached</code>模式下查看日志的方法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-d</span> <span class="n">-p</span> <span class="n">80</span><span class="err">:</span><span class="n">80</span> <span class="n">nginx</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">logs</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c"># id写镜像名字也行</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">logs</span> <span class="p">&lt;</span><span class="n">image</span> <span class="n">name</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>跟踪日志（变成终端的子进程，不会自动停止，<code>Ctrl + C</code>终止）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">logs</span> <span class="o">-f</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="交互模式">交互模式</h2>
<ul>
<li>先启动容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>     <span class="n">COMMAND</span>   <span class="n">CREATED</span>   <span class="n">STATUS</span>    <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">start </span><span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>         <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">21</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">3</span> <span class="n">seconds</span>             <span class="n">rros_lab1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>进入容器终端</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker attach &lt;container name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Learning%20Docker/docker%20attach.png" title="/img/Learning Docker/docker attach.png" data-thumbnail="/img/Learning Docker/docker attach.png" data-sub-html="<h2>``</h2>">
        
    </a><figcaption class="image-caption">``</figcaption>
    </figure>
<ul>
<li><code>exit</code>退出后容器也会关闭</li>
</ul>
<hr>
<h3 id="如何exit后不关闭容器">如何<code>exit</code>后不关闭容器</h3>
<ul>
<li>使用<code>detached</code>模式</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it &lt;container name&gt; &lt;shell&gt;（通常用sh或者bash）
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>          <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">22</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">52</span> <span class="n">seconds</span>             <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">exec</span> <span class="n">-it</span> <span class="n">rros_lab1</span> <span class="n">bash</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span><span class="nv">@9ed70676585e</span><span class="err">:</span><span class="p">/</span><span class="n">data</span><span class="p">/</span><span class="nb">bupt-rtos</span><span class="c"># ls</span>
</span></span><span class="line"><span class="cl"><span class="n">20210704_ojeda_rust_support</span><span class="p">.</span><span class="n">mbx</span>  <span class="n">arm64_ramdisk</span>  <span class="n">rros</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span><span class="nv">@9ed70676585e</span><span class="err">:</span><span class="p">/</span><span class="n">data</span><span class="p">/</span><span class="nb">bupt-rtos</span><span class="c"># exit</span>
</span></span><span class="line"><span class="cl"><span class="n">exit</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>              <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">22</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">About</span> <span class="n">a</span> <span class="n">minute</span>             <span class="n">rros_lab1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="镜像获取image-registry">镜像获取/<code>Image Registry</code></h2>
<h3 id="获取镜像的三个途径">获取镜像的三个途径</h3>
<ul>
<li>
<p><code>pull from registry</code></p>
<ul>
<li>常见<code>registry</code>：<a href="https://hub.docker.com" target="_blank" rel="noopener noreffer">Docker Hub</a>，<a href="https://quay.io" target="_blank" rel="noopener noreffer">quay.io</a></li>
</ul>
</li>
<li>
<p><code>Dockerfile (online)</code></p>
</li>
<li>
<p>自有文件导入<code>(offline)</code></p>
</li>
<li>
<p>使用官方认证的镜像：安全</p>
</li>
</ul>
<hr>
<h3 id="镜像的拉取和删除">镜像的拉取和删除</h3>
<ul>
<li>拉取：官网找命令</li>
</ul>
<figure><a class="lightgallery" href="/img/Learning%20Docker/docker%20pull.png" title="/img/Learning Docker/docker pull.png" data-thumbnail="/img/Learning Docker/docker pull.png" data-sub-html="<h2>``</h2>">
        
    </a><figcaption class="image-caption">``</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull wordpress
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>新版本可以加上<code>image</code>前缀（强调，和<code>container</code>作区分）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image pull wordpress
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>实际效果（默认最新版，如果要其他版本去<code>tag</code>里面找对应版本的命令）</li>
</ul>
<figure><a class="lightgallery" href="/img/Learning%20Docker/docker%20pull%20busybox.png" title="/img/Learning Docker/docker pull busybox.png" data-thumbnail="/img/Learning Docker/docker pull busybox.png" data-sub-html="<h2>``</h2>">
        
    </a><figcaption class="image-caption">``</figcaption>
    </figure>
<h3 id="查看现有镜像">查看现有镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image ls
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看镜像详细信息">查看镜像详细信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image inspect &lt;image id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>关注对应的<code>OS</code>和架构</li>
</ul>
<hr>
<h3 id="删除镜像">删除镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image rm &lt;id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="image的导入导出"><code>image</code>的导入/导出</h3>
<ul>
<li>
<p><code>image</code>导出</p>
</li>
<li>
<p>在要保存的位置执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">save</span> <span class="p">&lt;</span><span class="n">image</span> <span class="n">name</span><span class="p">&gt;</span><span class="err">:</span><span class="p">&lt;</span><span class="n">tag</span><span class="p">&gt;</span> <span class="n">-o</span> <span class="p">&lt;</span><span class="n">new</span> <span class="n">image</span> <span class="n">name</span><span class="p">&gt;.</span><span class="n">image</span>
</span></span><span class="line"><span class="cl"><span class="c"># example</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">save</span> <span class="n">busybox</span><span class="err">:</span><span class="n">latest</span> <span class="n">-o</span> <span class="n">mybusybox</span><span class="p">.</span><span class="n">image</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>image</code>导入</p>
</li>
<li>
<p>也是在对应镜像的位置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">load</span> <span class="n">-i</span> <span class="p">&lt;</span><span class="n">load</span> <span class="n">image</span> <span class="n">name</span><span class="p">&gt;.</span><span class="n">image</span>
</span></span><span class="line"><span class="cl"><span class="c"># 例子</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">load</span> <span class="n">-i</span> <span class="p">.\</span><span class="n">mybusybox</span><span class="p">.</span><span class="n">image</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="dockerfile"><code>Dockerfile</code></h2>
<ul>
<li><code>Dockerfile</code>：使用组合映像命令的文本文档，用于<code>DIY</code>自己的<code>image</code></li>
</ul>
<hr>
<ul>
<li>例子<code>ubuntu</code>执行<code>python</code>程序</li>
<li><code>hello.py</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello, my first docker!&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Dockerfile</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span>  apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ADD</span> hello.py /<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;python3&#34;</span><span class="p">,</span><span class="s2">&#34;hello.py&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>FROM</code>：引入系统</p>
</li>
<li>
<p><code>RUN</code>：安装环境（<code>build</code>的时候执行）</p>
</li>
<li>
<p><code>ADD</code>：将本机文件加入到<code>image</code>中，默认加入到<code>image</code>的根目录</p>
</li>
<li>
<p><code>CMD</code>：相当于使用<code>shell</code>命令(<code>build</code>后执行)</p>
</li>
</ul>
<hr>
<h3 id="构建dockerfile">构建<code>Dockerfile</code></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image build -t &lt;image name&gt;:&lt;tag<span class="o">(</span>若忽略则默认latest<span class="o">)</span>&gt; &lt;image path<span class="o">(</span>通常用<span class="s2">&#34;.&#34;</span>，本地目录<span class="o">)</span>&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>
<p>将镜像上传到<code>Docker Hub</code>上面</p>
<ul>
<li>规则：<code>&lt;Hub name&gt;/&lt;image name&gt;</code></li>
</ul>
</li>
<li>
<p>更改名字使其能够上传</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image tag &lt;old name&gt; &lt;new name&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># example</span>
</span></span><span class="line"><span class="cl">docker image tag myimage username/myimage
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>通过<code>id/name</code>上传</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker login <span class="c1"># 输入用户名和密码登录</span>
</span></span><span class="line"><span class="cl">docker image push username/myimage
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="from语法"><code>FROM</code>语法</h4>
<ul>
<li>
<p>引入基础镜像</p>
</li>
<li>
<p>三个基本原则</p>
<ul>
<li>
<p>官方镜像优于非官方镜像（安全性）</p>
</li>
<li>
<p>固定版本的<code>Tag</code>，而不是每次都使用<code>latest</code>（稳定）</p>
</li>
<li>
<p>功能满足的情况下使用体积小的镜像（让自己的镜像变得简洁）</p>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="run命令"><code>RUN</code>命令</h4>
<ul>
<li>
<p>接<code>shell</code>命令</p>
</li>
<li>
<p>坑</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get install -y wget<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> tar zxf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> rm -rf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>不建议这么写：每个<code>RUN</code>都会生成一个新的“层”，打包的体积会变大</p>
<ul>
<li><code>rm -rf</code>的命令也会无效：上面的文件已经嵌入到上一层里面了</li>
</ul>
</li>
<li>
<p>正确写法：改成<code>&amp;&amp; \</code>的组合</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>变成了只有一层，体积会变小</li>
</ul>
<hr>
<h4 id="文件操作">文件操作</h4>
<ul>
<li>
<p><code>COPY</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">COPY</span> index.js /app/index.js<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>将当前目录下的<code>index.js</code>文件拷贝到镜像中的<code>/app/index.js</code>（镜像中没有对应文件会自动创建）</li>
</ul>
</li>
<li>
<p><code>ADD</code></p>
<ul>
<li>基本效果和<code>COPY</code>相同，但是会自动解压缩</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">ADD</span> index.tar /app/<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行后会发现容器<code>/app/</code>文件夹里面就是<code>index.tar</code>里面被压缩文件的内容</li>
</ul>
</li>
<li>
<p><code>WORKDIR</code></p>
<ul>
<li>切换目录</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:20.04</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> hello.py hello.py<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>和上面效果相同，最后文件都在<code>/app</code>这个目录下</li>
<li>相当于<code>cd</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>变量声明（类似宏定义，使得代码更简介）</p>
</li>
<li>
<p>例子</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="env"><code>ENV</code></h4>
<ul>
<li><code>ENV key=value</code>（中间不要加空格，有坑）</li>
<li>使用<code>value</code>：<code>${key}$</code></li>
<li>效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VERSION</span><span class="o">=</span><span class="m">2</span>.0.1<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>/ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="arg"><code>ARG</code></h4>
<ul>
<li>语法和<code>ENV</code>一样
<ul>
<li>和<code>ENV</code>不同的地方
<ul>
<li><b><code>ENV</code>声明的变量会带入镜像内部</b>（比如<code>Linux</code>的<code>env</code>命令，或者直接<code>echo $key</code>也能打出来），而<code>ARG</code>不会</li>
<li><code>ARG</code>可以动态添加</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image build -f Dockfile -t &lt;image&gt;:&lt;tag&gt; --build-arg <span class="nv">VERSION</span><span class="o">=</span>2.0.0 .
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="cmd"><code>CMD</code></h4>
<ul>
<li>
<p>三个基本原则</p>
<ul>
<li>容器启动时默认执行的命令
<ul>
<li>如果没有，对应拉取的官方镜像会有默认的<code>CMD</code>，比如<code>ubuntu</code>会自带<code>CMD[&quot;bash&quot;]</code></li>
</ul>
</li>
<li>如果启动容器所用的命令是<code>docker container run {commandline}</code>
<ul>
<li>比如<code>docker container run -it &lt;image name&gt; &lt;command&gt; =&gt; docker container run -it ipinfo-base ipinfo version</code>：对于容器<code>ipinfo-base</code>容器的默认<code>CMD</code>就是<code>ipinfo version</code></li>
</ul>
</li>
<li>一个<code>Dockerfile</code>定义了多个<code>CMD</code>命令，只会执行最后一个</li>
</ul>
</li>
<li>
<p>两种写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">CMD</span> <span class="p">[</span> <span class="s2">&#34;python3&#34;</span><span class="p">,</span><span class="s2">&#34;hello.py&#34;</span> <span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> python3 hello.py<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>清除<b>不再使用</b>的容器</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker system prune -f
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>清除<b>不再使用</b>的镜像</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image prune -a
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="entrypoint"><code>ENTRYPOINT</code></h4>
<ul>
<li>
<p>和<code>CMD</code>功能相似</p>
</li>
<li>
<p>区别</p>
<ul>
<li><code>CMD</code>会被命令行启动模式后面接的命令覆盖掉，而<code>ENTRYPOINT</code>不会，<b>一定会被执行</b></li>
<li><code>CMD</code>和<code>ENTRYPOINT</code>可以联合使用</li>
</ul>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:21.04</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;echo&#34;</span><span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>命令行<code>docker container run -rm -it demo-both &quot;hello world&quot;</code>执行效果<code>=&gt; hello world</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>数据持久化：<code>VOLUME</code>
<ul>
<li>数据库，日志等如何存到本地？</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">VERSION</span><span class="o">=</span><span class="m">2</span>.0.1<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>/ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span> <span class="p">[</span> <span class="s2">&#34;/data&#34;</span> <span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>保留镜像下面的<code>/data</code>目录，没有会自动创建</p>
</li>
<li>
<p>保存在本地的持久化数据使用<code>docker volume</code>系列的命令查看</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker volume ls
</span></span><span class="line"><span class="cl"><span class="c1"># -----</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -----</span>
</span></span><span class="line"><span class="cl">docker volume inspect &lt;VOLUME NAME&gt;<span class="o">(</span>注意不能简写<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Mountpoint</code>就是本地存储的位置</li>
</ul>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run -d -v &lt;VOLUME NAME&gt;/&lt;VOLUME PATH IN DOCKERFILE&gt; &lt;container name&gt;
</span></span><span class="line"><span class="cl">docker volume inspect &lt;container name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这个时候<code>VOLUME NAME</code>和<code>Mountpoint</code>就是你自己刚才指定的名字了，不会是一串大段的加密码了</li>
<li>这个既可以让容器的数据保存的主机，反过来，如果主机对应的目录下面有文件，再次运行新的容器的时候，该容器可以复用主机对应部分的数据</li>
</ul>
<hr>
<ul>
<li><code>Bind Mount</code>自定义
<ul>
<li><code>Windows</code>实现数据持久化</li>
<li>用容器运行本机的程序，本机无需再需要安装环境</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run -it -v <span class="si">${</span><span class="nv">pwd</span><span class="si">}</span>:/app node sh
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>本机修改数据的时候会同步到容器中，相当于完全绑定</li>
</ul>
<hr>
<ul>
<li>网络端口映射</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run -d -p 80:80 &lt;container name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>-p &lt;主机端口&gt;:&lt;容器端口&gt;</code>：映射</p>
</li>
<li>
<p>查看容器的端口</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container inspect --format <span class="s1">&#39;{{.Config.ExposedPorts}}&#39;</span> &lt;container id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>主要关注<code>Config.ExposedPorts</code>下面的内容</li>
</ul>
<h2 id="docker-compose"><code>Docker-compose</code></h2>
<ul>
<li>
<p>相当于<code>shell</code>脚本，集成了命令</p>
</li>
<li>
<p>两个部分</p>
<ul>
<li>配置<code>yml</code>文件</li>
<li>运行文件的命令</li>
</ul>
</li>
<li>
<p>检测环境</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose --version
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="yml文件的基本语法"><code>yml</code>文件的基本语法</h3>
<ul>
<li><code>docker-compose.yml</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.8&#34;</span><span class="w"> </span><span class="c"># docker-compose的版本号</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 容器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">servicename</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名字，这个名字也是内部 bridge网络可以使用的 DNS name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="c"># 镜像的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，如果设置，则会覆盖默认镜像里的 CMD命令</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker run里的 --env</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于docker run里的 -v</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker run里的 --network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker run里的 -p</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">servicename2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker volume create</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker network create</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>实践</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker container run -d -p 80:80 wordpress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">my-wordpress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">Jungle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">wordpress:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">80</span><span class="p">:</span><span class="m">80</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>version</code>：有关信息</p>
<ul>
<li><a href="https://docs.docker.com/compose/features-uses" target="_blank" rel="noopener noreffer">https://docs.docker.com/compose/features-uses</a></li>
<li><a href="https://docs.docker.com/compose/migrate" target="_blank" rel="noopener noreffer">https://docs.docker.com/compose/migrate</a></li>
</ul>
</li>
<li>
<p>执行<code>compose</code>命令（在同级目录）</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker compose up <span class="c1"># 主动，占用命令行</span>
</span></span><span class="line"><span class="cl">docker compose up -d <span class="c1"># 被动，后台开启</span>
</span></span><span class="line"><span class="cl">docker compose stop <span class="c1"># 停止对应的容器</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>compose</code>镜像的构建和拉取</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker container run -d -p 80:80 wordpress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">my-wordpress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">Jungle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">rust-oslab:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">80</span><span class="p">:</span><span class="m">80</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>只拉取镜像，不启动容器，下次<code>docker compose up</code>的时候会很快</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker compose pull
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="网络配置">网络配置</h2>
<ul>
<li>
<p>主要信息在配置文件里面的<code>Networks</code>部分</p>
</li>
<li>
<p>内网地址：<code>IPAddress</code></p>
</li>
<li>
<p>网关：<code>Gateway</code>：通常是主机地址</p>
</li>
<li>
<p>使用容器集群的时候要进行网络配置</p>
<ul>
<li>
<p>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network ls
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>三种模式</p>
<ul>
<li><code>bridge</code>：桥接模式（网桥），为每一个容器分配和设置一个<code>ip</code>地址，并将容器连接到<code>docker0</code>上面（<code>linux</code>下使用<code>ip addr</code>查看）</li>
<li><code>host</code>：使用主机的网络地址，容器自己没有<code>ip</code>和网关，全部依赖宿主</li>
<li><code>container</code>：使用其他网络配置好了的容器的网络</li>
<li><code>null</code>：不对网络进行任何配置，也可以自定义</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -it --name bbox01 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>创建<code>host</code>类型的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -it --name nginx1 --network host nginx
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>创建<code>null</code>类型的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -it --name bbox2 --network none busybox
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>container</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 启动一个新的容器</span>
</span></span><span class="line"><span class="cl">docker run -it --name bbox01 busybox
</span></span><span class="line"><span class="cl"><span class="c1"># container 模式</span>
</span></span><span class="line"><span class="cl">docker run -it --name bbox02 --network container:bbox1 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果<code>container</code>对应的容器关闭，<b>或者关闭之后开启</b>，<code>container</code>的容器的网都会断开</li>
</ul>
]]></description>
</item>
<item>
    <title>Go 1.19 排序算法</title>
    <link>https://Jungle430.github.io/posts/go/pdqsort/</link>
    <pubDate>Sun, 04 Jun 2023 19:46:20 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/pdqsort/</guid>
    <description><![CDATA[<h1 id="go-119-排序算法-pdqsort">Go 1.19 排序算法-$pdqsort$</h1>
<h2 id="三种经典排序算法的对比">三种经典排序算法的对比</h2>
<ul>
<li>所有短元素和元素有序的情况下，<strong>插入排序性能最好</strong></li>
<li>在大部分情况下，快速排序都有较好的<strong>综合性能</strong></li>
<li>几乎在任何情况下，堆排序都表现的<strong>比较稳定</strong></li>
</ul>
<hr>
<ul>
<li>能否结合上面三种排序算法的优点，设计出一个排序算法使得</li>
</ul>
<p>$$
\begin{align}
&amp;Best \Longrightarrow O(n)\newline
&amp;Avg \Longrightarrow O(n\log n)\newline
&amp;Worst \Longrightarrow O(n\log n)\newline
\end{align}
$$</p>
<h2 id="pdqsort">pdqsort</h2>
<ul>
<li>简介</li>
</ul>
<blockquote>
<ul>
<li>
<p>$pdqsort(pattern-defeating-quicksort)$</p>
</li>
<li>
<p>是一种<em>不稳定</em>的<strong>混合</strong>排序算法，它的不同版本被应用在<code>C++ Boost,Rust</code>以及<code>Go</code>1.19中。它对常见的序列类型做了特殊的优化，使得<strong>在不同条件下都拥有不错的性能</strong></p>
</li>
</ul>
</blockquote>
<ul>
<li>复习不稳定:$96_a,96_b \rightarrow^{sort} 96_b,96_a$</li>
</ul>
<h3 id="version-1">version 1</h3>
<ul>
<li>
<p>结合三种排序的优点</p>
<ul>
<li>短序列使用插入排序</li>
<li>其他情况使用快排</li>
<li>如果快速排序表现不佳，则使用<strong>堆排序</strong>保证$Worst$情况下仍有$O(n\log n)$的复杂度</li>
</ul>
</li>
<li>
<p>Q&amp;A</p>
<ul>
<li>短序列的具体长度是多少？
<ul>
<li>12~32，不同语言和场景下会有不同，<strong>在泛型版本中根据测试选定为24</strong></li>
</ul>
</li>
<li>怎么得知快排表现不佳，切换到堆排序?
<ul>
<li>当<strong>最终</strong>的$pivot$的位置离序列两端很接近时$(&lt; \frac{length}{8})$（其实就是分的太少），判定其表现不佳，当这种情况达到$limit(bits.Len(length))$时，切换到堆排序</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image1.png" title="/img/Go/pdqsort/image1.png" data-thumbnail="/img/Go/pdqsort/image1.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>改进：<code>choose pivot</code>尽量能够选中中位数，改进<code>choose pivot</code></li>
</ul>
<h3 id="version-2">version 2</h3>
<ul>
<li>
<p><code>version1</code>中选择<code>pivot</code>的方式是选择首个元素，算法简单但是效率低</p>
</li>
<li>
<p>遍历数组，寻找真正的中位数 $\Longrightarrow$ 遍历代价太高</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>平衡</p>
<ul>
<li>寻找<code>pivot</code>所需要的开销</li>
<li><code>pivot</code>带来的性能优化</li>
</ul>
</li>
<li>
<p>解决方案</p>
<ul>
<li>寻找近似中位数</li>
</ul>
</li>
<li>
<p>根据不同的长度选择<code>pivot</code>策略</p>
<ul>
<li>短序列$(\le 8)$：选择固定元素</li>
<li>中序列$(\le 50)$：采样选用三个元素，<a href="https://brilliant.org/wiki/median-finding-algorithm/#citation-1" target="_blank" rel="noopener noreffer"><code>median of three</code></a></li>
<li>长度列$(&gt;50)$：采样九个元素，<a href="https://www.johndcook.com/blog/2009/06/23/tukey-median-ninther/" target="_blank" rel="noopener noreffer"><code>median of medians</code></a></li>
</ul>
</li>
<li>
<p><u><code>pivot</code>的采样方式可以让我们“感知”当前序列的状态</u></p>
<ul>
<li>采样都为逆序 $\Longrightarrow$ 猜测当前序列可能为<strong>逆序</strong> $\Longrightarrow$ <code>reverse(array)</code></li>
<li>采样都为顺序 $\Longrightarrow$ 猜测当前序列可能为<strong>顺序</strong> $\Longrightarrow$ <code>insertsort(array)</code>
<ul>
<li>注：这里面的插入排序实际使用的是<code>partiallnsertionSort</code>，即有限制次数的插入排序，来限制其最坏情况</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image2.png" title="/img/Go/pdqsort/image2.png" data-thumbnail="/img/Go/pdqsort/image2.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>改进
<ul>
<li>优化了<code>pivot</code>的选择策略（近似中位数）</li>
<li>根据采样来感知序列状态，适当使用其他方法来提高收益(<code>reverse</code>和<code>partiallnsertionSort</code>)</li>
</ul>
</li>
</ul>
<h3 id="final-version">final version</h3>
<ul>
<li>
<p>还有什么情况没有被考虑到，可以被优化？</p>
<ul>
<li><strong>重复度较高</strong></li>
</ul>
</li>
<li>
<p>可以在选择<code>pivot</code>的时候“感知”重复度？</p>
<ul>
<li>不是很好，因为采样不是很多，很难拿到相同的元素</li>
</ul>
</li>
<li>
<p>解决方案</p>
<ul>
<li><u>如果两次<code>partion</code>生成的<code>pivot</code>相同，即对<code>partition</code>进行了无效分割，此时认为<code>piovt</code>的值为重复元素</u>（比上面的方法有更高的采样率）</li>
</ul>
</li>
<li>
<p>优化-重复元素较多的情况(<code>partitionEqual</code>)</p>
<ul>
<li>当检测到此时的<code>pivot</code>和上次相同时 (发生在<code>leftSubArray</code>) ，使用<code>partitionEqual</code>将重复元素排列在一起，减少重复元素对于<code>pivot</code>选择的干扰</li>
</ul>
</li>
<li>
<p>优化-当<code>pivot</code>选择策略表现不佳时，随机交换元素</p>
<ul>
<li>避免一些极端情况使得<code>QuickSort</code>总是表现不佳，以及一些黑客攻击情况（随机交换来增加不确定性）</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image3.png" title="/img/Go/pdqsort/image3.png" data-thumbnail="/img/Go/pdqsort/image3.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>最终效果</li>
</ul>
<p>$$
\begin{align}
&amp;Best \Longrightarrow O(n)\newline
&amp;Avg \Longrightarrow O(n\log n)\newline
&amp;Worst \Longrightarrow O(n\log n)\newline
\end{align}
$$</p>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>高性能的排序算法是如何设计的?</p>
<ul>
<li>根据不同情况选择不同策略，取长补短</li>
</ul>
</li>
<li>
<p>生产环境中使用的的排序算法和课本上的排序算法有什么区别?</p>
<ul>
<li>理论算法注重理论性能，例如时间、空间复杂度等。生产环境中的算法需要面对不同的实践场景，更加注重实践性能</li>
</ul>
</li>
<li>
<p>Go 语言($\le 1.18$)的排序算法是快速排序么?</p>
<ul>
<li>实际一直是<strong>混合排序算法，主体是快速排序</strong>。$Go \le 1.18 $时的算法也是基于快速排序，和<code>pdgsort</code>的区别在于<code>fallback</code>时机、<code>pivot </code>选择策略、是否有针对不同<code>pattern</code>优化等</li>
</ul>
</li>
<li>
<p>附<code>Go 1.20</code>$pdqsort$源码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// pdqsort sorts data[a:b].
</span></span></span><span class="line"><span class="cl"><span class="c1">// The algorithm based on pattern-defeating quicksort(pdqsort), but without the optimizations from BlockQuicksort.
</span></span></span><span class="line"><span class="cl"><span class="c1">// pdqsort paper: https://arxiv.org/pdf/2106.05123.pdf
</span></span></span><span class="line"><span class="cl"><span class="c1">// C++ implementation: https://github.com/orlp/pdqsort
</span></span></span><span class="line"><span class="cl"><span class="c1">// Rust implementation: https://docs.rs/pdqsort/latest/pdqsort/
</span></span></span><span class="line"><span class="cl"><span class="c1">// limit is the number of allowed bad (very unbalanced) pivots before falling back to heapsort.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span> <span class="nx">Interface</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">limit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">const</span> <span class="nx">maxInsertion</span> <span class="p">=</span> <span class="mi">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wasBalanced</span>    <span class="p">=</span> <span class="kc">true</span> <span class="c1">// whether the last partitioning was reasonably balanced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">wasPartitioned</span> <span class="p">=</span> <span class="kc">true</span> <span class="c1">// whether the slice was already partitioned
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">length</span> <span class="o">:=</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">length</span> <span class="o">&lt;=</span> <span class="nx">maxInsertion</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">insertionSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Fall back to heapsort if too many bad choices were made.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">limit</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">heapSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If the last partitioning was imbalanced, we need to breaking patterns.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">wasBalanced</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">breakPatterns</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">limit</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">pivot</span><span class="p">,</span> <span class="nx">hint</span> <span class="o">:=</span> <span class="nf">choosePivot</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">hint</span> <span class="o">==</span> <span class="nx">decreasingHint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">reverseRange</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// The chosen pivot was pivot-a elements after the start of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// After reversing it is pivot-a elements before the end of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// The idea came from Rust&#39;s implementation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">pivot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nx">pivot</span> <span class="o">-</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">hint</span> <span class="p">=</span> <span class="nx">increasingHint</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// The slice is likely already sorted.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">wasBalanced</span> <span class="o">&amp;&amp;</span> <span class="nx">wasPartitioned</span> <span class="o">&amp;&amp;</span> <span class="nx">hint</span> <span class="o">==</span> <span class="nx">increasingHint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nf">partialInsertionSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Probably the slice contains many duplicate elements, partition the slice into
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// elements equal to and elements greater than the pivot.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">data</span><span class="p">.</span><span class="nf">Less</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">mid</span> <span class="o">:=</span> <span class="nf">partitionEqual</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">a</span> <span class="p">=</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">mid</span><span class="p">,</span> <span class="nx">alreadyPartitioned</span> <span class="o">:=</span> <span class="nf">partition</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wasPartitioned</span> <span class="p">=</span> <span class="nx">alreadyPartitioned</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">leftLen</span><span class="p">,</span> <span class="nx">rightLen</span> <span class="o">:=</span> <span class="nx">mid</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="o">-</span><span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="nx">balanceThreshold</span> <span class="o">:=</span> <span class="nx">length</span> <span class="o">/</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">leftLen</span> <span class="p">&lt;</span> <span class="nx">rightLen</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wasBalanced</span> <span class="p">=</span> <span class="nx">leftLen</span> <span class="o">&gt;=</span> <span class="nx">balanceThreshold</span>
</span></span><span class="line"><span class="cl">			<span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">mid</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">a</span> <span class="p">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wasBalanced</span> <span class="p">=</span> <span class="nx">rightLen</span> <span class="o">&gt;=</span> <span class="nx">balanceThreshold</span>
</span></span><span class="line"><span class="cl">			<span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span> <span class="p">=</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>github</code>上面的提交:https://github.com/golang/go/issues/50154</p>
</li>
<li>
<p><a href="https://arxiv.org/pdf/2106.05123.pdf" target="_blank" rel="noopener noreffer">Pattern-defeating Quicksort</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/5HqfRGqPyAhFt0krPgMHOQ" target="_blank" rel="noopener noreffer">公众号文章</a></p>
</li>
</ul>
<hr>
<ul>
<li><code>Go</code>的源码还是不错的，起码不至于像<code>C++</code>那样群魔乱舞，考完试抽时间看看</li>
</ul>
]]></description>
</item>
<item>
    <title>消息队列</title>
    <link>https://Jungle430.github.io/posts/go/message-queue/</link>
    <pubDate>Sat, 03 Jun 2023 16:04:20 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/message-queue/</guid>
    <description><![CDATA[<h1 id="消息队列">消息队列</h1>
<h2 id="走进消息队列">走进消息队列</h2>
<h3 id="场景">场景</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image1.png" title="/img/Go/message-queue/image1.png" data-thumbnail="/img/Go/message-queue/image1.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例一：有一天晚上我们上完课，回到宿舍，想着新出的游戏机，但又摸了摸钱包，太贵了买不起，这个时候你突然想到，今天抖音直播搞活动，瞬间你掏出了手机打开抖音搜索，找到直播间以后，你打开了心心念念的游戏机详情页，看到价格只要500。
<ul>
<li>这个时候我们分析一下，就我们上面这几步操作，在我们的程序背后，做了什么事情。</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image2.png" title="/img/Go/message-queue/image2.png" data-thumbnail="/img/Go/message-queue/image2.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例二：服务能力有限（到点上车，无数用户在对面狂点手机+黄牛的脚本）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image3.png" title="/img/Go/message-queue/image3.png" data-thumbnail="/img/Go/message-queue/image3.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例三：链路耗时长尾（下单之后一直在转圈圈）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image4.png" title="/img/Go/message-queue/image4.png" data-thumbnail="/img/Go/message-queue/image4.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>案例四：日志存储</p>
<ul>
<li>如果完事之后发现本地日志丢掉了怎么办？</li>
</ul>
</li>
<li>
<p>面对上面的四个场景，我们有什么解决办法吗？</p>
</li>
</ul>
<h3 id="解决问题">解决问题</h3>
<ul>
<li>案例一
<ul>
<li>解决方案：解耦</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image5.png" title="/img/Go/message-queue/image5.png" data-thumbnail="/img/Go/message-queue/image5.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>类似生产者消费者模型（或者是<code>go</code>的<code>channel</code>），即使数据库方面宕机但是消息仍然被保存下来，部分请求还是可以被处理掉</p>
</li>
<li>
<p>案例二</p>
<ul>
<li>解决方案：削峰</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image6.png" title="/img/Go/message-queue/image6.png" data-thumbnail="/img/Go/message-queue/image6.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>加了一层缓冲机制</p>
</li>
<li>
<p>案例三</p>
<ul>
<li>解决方案：异步</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image7.png" title="/img/Go/message-queue/image7.png" data-thumbnail="/img/Go/message-queue/image7.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>前两个请求处理完成之后用户会马上得到响应，不再干等着，耗时的通知商家响应方是商家，所以慢一点问题不太大</p>
</li>
<li>
<p>三个过程从原来的<strong>单线程顺序处理</strong>变成<strong>多线程异步处理</strong></p>
</li>
<li>
<p>案例四</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image8.png" title="/img/Go/message-queue/image8.png" data-thumbnail="/img/Go/message-queue/image8.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h2 id="什么是消息队列">什么是消息队列？</h2>
<blockquote>
<p>消息队列(MQ)，指保存<strong>消息</strong>的一个<strong>容器</strong>，本质是个<strong>队列</strong>。但是这个队列需要满足<strong>高吞吐，高并发，并且高可用</strong></p>
</blockquote>
<div class="mermaid" id="id-1"></div>
<h3 id="业界消息队列对比">业界消息队列对比</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image9.png" title="/img/Go/message-queue/image9.png" data-thumbnail="/img/Go/message-queue/image9.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h3 id="消息队列kafka">消息队列<code>Kafka</code></h3>
<ul>
<li>使用场景：离线的消息处理当中（日志信息，<code>Metrics</code>数据，用户行为 $\Longrightarrow$ 搜索，点赞，评论，收藏）</li>
</ul>
<h4 id="如何使用kafka">如何使用<code>Kafka</code></h4>
<div class="mermaid" id="id-2"></div>
<ul>
<li>基本概念
<ul>
<li><code>Topic</code>：逻辑队列，不同的<code>Topic</code>可以建立不同的<code>Topic</code></li>
<li><code>Cluster</code>：物理集群，每个集群中可以建立多个不同的<code>Topic</code></li>
<li><code>Producer</code>：生产者，负责将业务消息发送到<code>Topic</code>中</li>
<li><code>Consumer</code>：消费者，负责消费<code>Topic</code>中的消息</li>
<li><code>ConsumerGroup</code>：消费者组，不同组<code>Consumer</code>互不干涉</li>
<li>同一个<code>Topic</code>中的<code>Partion</code>可以并发处理，提高吞吐量</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image10.png" title="/img/Go/message-queue/image10.png" data-thumbnail="/img/Go/message-queue/image10.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li>Offset</li>
</ul>
<blockquote>
<p><strong>Offset</strong>:消息在Partion内的相对位置信息，可以理解为唯一ID，<strong>在partion内部是严格递增的</strong></p>
</blockquote>
<hr>
<ul>
<li>Replica</li>
</ul>
<blockquote>
<p>每个分片有多个<strong>Replica</strong>，<strong>Leader Replica</strong>将会从$LSR$中选出</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Go/message-queue/image11.png" title="/img/Go/message-queue/image11.png" data-thumbnail="/img/Go/message-queue/image11.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>Leader:对外进行读写</p>
</li>
<li>
<p>Foller:不断将数据从Leader上面拉取下来，努力和Leader保持一个一致的状态，如果和Leader差距过大会被踢出ISR（参考Replica3）</p>
</li>
<li>
<p>ISR的作用：如果ISR里面的leader对应的机器发生了宕机等故障，<strong>ISR会从里面的Foller中选择一个让其重新成为Leader</strong>，保证服务器继续运行，保证了<strong>高可用性</strong></p>
</li>
</ul>
<hr>
<ul>
<li>数据复制</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image12.png" title="/img/Go/message-queue/image12.png" data-thumbnail="/img/Go/message-queue/image12.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>其中有一个Broker同时也扮演了Controller的角色。Controller是整个集群的大脑，负责对副本和Broker的分配</li>
</ul>
<hr>
<ul>
<li><code>Kafka</code>架构</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image13.png" title="/img/Go/message-queue/image13.png" data-thumbnail="/img/Go/message-queue/image13.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h4 id="消息的处理流程">消息的处理流程</h4>
<div class="mermaid" id="id-3"></div>
<h5 id="发送消息">发送消息</h5>
<ul>
<li>如果发送一条消息，等待其成功后再发送下一条消息会有什么问题？</li>
</ul>
<div class="mermaid" id="id-4"></div>
<hr>
<ul>
<li>批量发送消息可以增加吞吐量，<strong>但是如果网络带宽不够怎么办</strong>？</li>
</ul>
<div class="mermaid" id="id-5"></div>
<ul>
<li>解决方法：进行压缩，减少消息大小，目前支持的有:Snappy,Gzip,LZ4,ZSTD压缩算法</li>
</ul>
<div class="mermaid" id="id-6"></div>
<h5 id="存储消息">存储消息</h5>
<div class="mermaid" id="id-7"></div>
<ul>
<li>
<p>如何存储到磁盘？</p>
</li>
<li>
<p><code>Borker</code>的文件结构</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image14.png" title="/img/Go/message-queue/image14.png" data-thumbnail="/img/Go/message-queue/image14.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>磁盘结构：由于寻道成本比较高，所以<u>顺序写入可以减少寻道带来的时间成本</u></li>
</ul>
<hr>
<ul>
<li><code>Broker</code>-顺序写</li>
</ul>
<div class="mermaid" id="id-8"></div>
<ul>
<li>采用顺序写的方式进行写入（磁盘末尾追加，减少动磁头的次数），以提高写入效率</li>
</ul>
<hr>
<ul>
<li>
<p><code>Broker</code>-如何找到消息</p>
</li>
<li>
<p><code>Consumer </code>通过发送<code>FetchRequest</code>请求消息数据，<code>Broker </code>会将指定<code>Offset</code>处的消息，按照时间窗口和消息大小窗口发送给<code> Consumer</code>，<u>寻找数据这个细节是如何做到的呢?</u></p>
</li>
</ul>
<div class="mermaid" id="id-9"></div>
<ul>
<li>
<p>例子：寻找<code>offer=28</code></p>
<ul>
<li>
<p><b>二分法</b>查找小于目标<code>offer</code>的最大文件</p>
</li>
<li>
<p>接着通过偏移量去对应的地址里面继续查找</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image15.png" title="/img/Go/message-queue/image15.png" data-thumbnail="/img/Go/message-queue/image15.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li><code>Broker</code>-时间戳索引文件
<ul>
<li>二分法找到<strong>小于目标时间戳的最大索引位置</strong>，再通过<code>offset</code>的方式找到最终数据</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image16.png" title="/img/Go/message-queue/image16.png" data-thumbnail="/img/Go/message-queue/image16.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
]]></description>
</item>
<item>
    <title>Go Module与测试</title>
    <link>https://Jungle430.github.io/posts/go/module_and_test/</link>
    <pubDate>Sun, 14 May 2023 21:51:22 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/module_and_test/</guid>
    <description><![CDATA[<h1 id="go-module">Go Module</h1>
<h2 id="简介">简介</h2>
<ul>
<li>通过<code>go.mod</code>文件管理依赖包版本</li>
<li>通过<code>go get/go mod</code>指令工具管理依赖包</li>
<li>终极目标
<ul>
<li>定义版本规则和管理项目依赖关系</li>
</ul>
</li>
</ul>
<h2 id="依赖管理三要素">依赖管理三要素</h2>
<ol>
<li>配置文件，描述依赖 <code>go.mod</code>(类比<code>cargo</code>)</li>
<li>中心仓库管理依赖库 <code>Proxy</code>(类比<a href="https://crates.io" target="_blank" rel="noopener noreffer"><strong>crates.io</strong></a>)</li>
<li>本地工具 <code>go get/mod</code></li>
</ol>
<h2 id="配置gomod">配置go.mod</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">module</span> <span class="nx">example</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">app</span> <span class="nx">依赖管理的基本单元</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">有的时候大项目里面的小项目就得则么写</span><span class="err">，</span><span class="nx">类比c</span><span class="o">++</span><span class="nx">中src下面的CMakeList</span><span class="p">.</span><span class="nx">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">或者一个大包</span><span class="err">，</span><span class="nx">但是别人只想用里面的小包</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">go</span> <span class="mf">1.16</span> <span class="nx">原生库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">require</span><span class="p">(</span> <span class="nx">单元依赖</span>
</span></span><span class="line"><span class="cl">  <span class="nx">example</span><span class="o">/</span><span class="nx">lib1</span> <span class="nx">v1</span><span class="mf">.0.2</span>
</span></span><span class="line"><span class="cl">  <span class="nx">example</span><span class="o">/</span><span class="nx">lib2</span> <span class="nx">v1</span><span class="mf">.0.0</span> <span class="c1">//indirect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">example</span><span class="o">/</span><span class="nx">lib6</span> <span class="nx">v3</span><span class="mf">.2.0</span><span class="o">+</span><span class="nx">incompatible</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="依赖配置-version">依赖配置-version</h2>
<ul>
<li>
<p>语义化版本</p>
<ul>
<li><code>${MAJOR}.${MINOR}.${PATCH}</code>
<ul>
<li>MAJOR:大版本，不同的MAJOR间认为是代码不兼容的</li>
<li>MINOR:新增函数或功能，需要保持MAJOR下的兼容性</li>
<li>PATCH:部分<code>bug</code>的修复</li>
</ul>
</li>
<li>V1.3.0</li>
<li>V2.3.0</li>
</ul>
</li>
<li>
<p>基于<code>commit</code>伪版本</p>
<ul>
<li>vX.0.0-yyyymmddhhmmss-abcdefg1234
<ul>
<li>版本前缀-时间戳-哈希码前缀</li>
<li>v0.0.0-20220401081311-c38fb921298</li>
<li>v1.0.0-20201130134442-10cb123792679c6c</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>indirtect</strong></p>
</li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>A -&gt; B:直接依赖</p>
</li>
<li>
<p>A -&gt; C:间接依赖，使用<strong>indirtect</strong>进行标识</p>
</li>
<li>
<p><strong>incompatible</strong></p>
<ul>
<li>对于没有<code>go.mod</code>文件而且主版本2+的依赖，会+incompatible</li>
</ul>
</li>
<li>
<p>最低兼容算法</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/Module_and_test.jpg" title="/img/Go/Module_and_test.jpg" data-thumbnail="/img/Go/Module_and_test.jpg" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h2 id="依赖分发-回源">依赖分发-回源</h2>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>问题</p>
<ul>
<li>无法保证构建的稳定性和依赖的可用性</li>
<li>增加第三方压力</li>
</ul>
</li>
<li>
<p>解决方法<strong>Proxy</strong></p>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<ul>
<li>(类比<a href="https://crates.io" target="_blank" rel="noopener noreffer"><strong>crates.io</strong></a>)，自己构建大仓库保证稳定性</li>
</ul>
<p><code>GOPROXY=&quot;https://proxy1.cn, https://proxy2.cn, direct&quot;</code>(direct表示源站)</p>
<div class="mermaid" id="id-4"></div>
<ul>
<li>我的配置:<code>GOPROXY=https://proxy.golang.com.cn,direct</code></li>
</ul>
<h2 id="工具-go-get">工具-go get</h2>
<ul>
<li>go get example.org/pkg
<ul>
<li>@update 默认</li>
<li>@none 删除依赖</li>
<li>@v1.1.2 <code>tag</code>版本，语义版本</li>
<li>@23dfdd5 特定的<code>commit</code></li>
<li>@master 分支最新的<code>commit</code></li>
</ul>
</li>
</ul>
<h2 id="工具-go-mod">工具-go mod</h2>
<ul>
<li>go mod
<ul>
<li>init 初始化，创建go.mod文件</li>
<li>download 下载模块到本地缓存</li>
<li>tidy 增加需要的依赖，删除不需要的依赖</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<ol>
<li>go.mod</li>
<li>Proxy</li>
<li>go get/mod</li>
</ol>
<h2 id="测试">测试</h2>
<h2 id="单元测试流程">单元测试流程</h2>
<div class="mermaid" id="id-5"></div>
<ul>
<li>测试单元
<ul>
<li>函数</li>
<li>模块</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<h2 id="规则">规则</h2>
<ul>
<li>
<p>所有测试文件以<code>_test.go</code>结尾(如<code>publish_post_test.go</code>)</p>
</li>
<li>
<p><code>func TestXxx(*testing.T)</code>(如<code>func TestPublishPost(t *testing.T)</code>)</p>
</li>
<li>
<p>初始化逻辑放到TestMain中</p>
</li>
<li>
<p>例子<code>publish_post.go</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">HelloTom</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>publish_post_test.go</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">output</span> <span class="o">:=</span> <span class="nf">HelloTom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">exceptOutput</span> <span class="o">:=</span> <span class="s">&#34;Tom&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">output</span> <span class="o">!=</span> <span class="nx">exceptOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="nx">exceptOutput</span><span class="p">,</span> <span class="nx">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>(校对部分建议使用开源的assert包)</p>
<ul>
<li>执行效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span>
</span></span><span class="line"><span class="cl">--- FAIL: TestMain <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="cl">    publish_post_test.go:9: Expect Tom, but output Jerry
</span></span><span class="line"><span class="cl">FAIL
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> status <span class="m">1</span>
</span></span><span class="line"><span class="cl">FAIL    learing_go      0.261s
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="覆盖率">覆盖率</h2>
<ul>
<li>
<p>覆盖度，越高代码的正确性越好</p>
</li>
<li>
<p>示例</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">HelloTom</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="nx">score</span> <span class="kt">int16</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">60</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">output</span> <span class="o">:=</span> <span class="nf">HelloTom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">exceptOutput</span> <span class="o">:=</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">output</span> <span class="o">!=</span> <span class="nx">exceptOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="nx">exceptOutput</span><span class="p">,</span> <span class="nx">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="nx">isPass</span> <span class="o">:=</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="mi">70</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">isPass</span> <span class="o">!=</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">isPass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span> --cover
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">coverage: 27.3% of statements
</span></span><span class="line"><span class="cl">ok      learing_go      0.260s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果加上修改</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="nx">score</span> <span class="kt">int16</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span> .<span class="se">\p</span>ublish_post_test.go .<span class="se">\p</span>ublish_post.go --cover
</span></span><span class="line"><span class="cl">ok      command-line-arguments  0.254s  coverage: 100.0% of statements
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="单元测试-依赖">单元测试-依赖</h2>
<div class="mermaid" id="id-6"></div>
<div class="mermaid" id="id-7"></div>
<ul>
<li>
<p>幂等：每次运行结果一样（应该涉及了并发的问题，暴力测试）</p>
</li>
<li>
<p>稳定：任何时间，任何函数进行独立运行</p>
</li>
<li>
<p>Mock</p>
<ul>
<li><a href="https://github.com/bouk/monkey" target="_blank" rel="noopener noreffer">monkey</a></li>
</ul>
</li>
</ul>
<h2 id="基准测试">基准测试</h2>
<ul>
<li>
<p>优化分析代码</p>
</li>
<li>
<p>内置</p>
</li>
<li>
<p>示例</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;math/rand&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">ServerIndex</span> <span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">InitServerIndex</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">ServerIndex</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Select</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nx">ServerIndex</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkSelect</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nf">InitServerIndex</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">ResetTimer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Select</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkSelectParallel</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nf">InitServerIndex</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">ResetTimer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">RunParallel</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">PB</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="nf">Select</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Running tool: D:<span class="se">\G</span>o<span class="se">\b</span>in<span class="se">\g</span>o.exe <span class="nb">test</span> -benchmem -run<span class="o">=</span>^$ -bench ^BenchmarkSelect$ learing_go
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">goos: windows
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: learing_go
</span></span><span class="line"><span class="cl">cpu: AMD Ryzen <span class="m">9</span> 5900HX with Radeon Graphics        
</span></span><span class="line"><span class="cl">BenchmarkSelect-16     <span class="m">175706265</span>          6.498 ns/op        <span class="m">0</span> B/op        <span class="m">0</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok   learing_go 2.053s
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Running tool: D:<span class="se">\G</span>o<span class="se">\b</span>in<span class="se">\g</span>o.exe <span class="nb">test</span> -benchmem -run<span class="o">=</span>^$ -bench ^BenchmarkSelectParallel$ learing_go
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">goos: windows
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: learing_go
</span></span><span class="line"><span class="cl">cpu: AMD Ryzen <span class="m">9</span> 5900HX with Radeon Graphics        
</span></span><span class="line"><span class="cl">BenchmarkSelectParallel-16     <span class="m">30002550</span>         38.89 ns/op        <span class="m">0</span> B/op        <span class="m">0</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok   learing_go 1.409s
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Operating System Chapter12 进程的地址空间</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter12/</link>
    <pubDate>Fri, 05 May 2023 13:35:01 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter12/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<ul>
<li>
<p>复习</p>
<ul>
<li>
<p>操作系统：加载第一个 <code>init</code> 程序，随后变为 “异常处理程序”</p>
</li>
<li>
<p><code>init</code>: fork, execve, exit 和其他系统调用创造整个操作系统世界</p>
</li>
</ul>
</li>
<li>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 进程的地址空间是如何创建、如何更改的？</li>
</ul>
</li>
<li>
<p>本次课主要内容</p>
<ul>
<li>进程的地址空间和管理 (<code>mmap</code>)</li>
</ul>
</li>
</ul>
<h2 id="进程的地址空间">进程的地址空间</h2>
<h3 id="进程的地址空间-1">进程的地址空间</h3>
<ul>
<li>
<p><code>char *p</code> 可以和 <code>intptr_t</code> 互相转换</p>
<ul>
<li>可以指向 “任何地方”</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">main</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="mh">0x12345678l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">main</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// p = (void *)(0x12345678l);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%x</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span> <span class="c1">//=&gt;fa1e0ff3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>反汇编</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">0000000000001149 &lt;main&gt;:
</span></span><span class="line"><span class="cl">    1149:       f3 0f 1e fa             endbr64 
</span></span><span class="line"><span class="cl">    114d:       55                      push   %rbp
</span></span><span class="line"><span class="cl">    114e:       48 89 e5                mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">    1151:       48 83 ec 10             sub    $0x10,%rsp
</span></span><span class="line"><span class="cl">    1155:       48 8d 05 ed ff ff ff    lea    -0x13(%rip),%rax        # 1149 &lt;main&gt;
</span></span><span class="line"><span class="cl">    115c:       48 89 45 f8             mov    %rax,-0x8(%rbp)
</span></span><span class="line"><span class="cl">    1160:       48 8b 45 f8             mov    -0x8(%rbp),%rax
</span></span><span class="line"><span class="cl">    1164:       8b 00                   mov    (%rax),%eax
</span></span><span class="line"><span class="cl">    1166:       89 c6                   mov    %eax,%esi
</span></span><span class="line"><span class="cl">    1168:       48 8d 05 95 0e 00 00    lea    0xe95(%rip),%rax        # 2004 &lt;_IO_stdin_used+0x4&gt;
</span></span><span class="line"><span class="cl">    116f:       48 89 c7                mov    %rax,%rdi
</span></span><span class="line"><span class="cl">    1172:       b8 00 00 00 00          mov    $0x0,%eax
</span></span><span class="line"><span class="cl">    1177:       e8 d4 fe ff ff          call   1050 &lt;printf@plt&gt;
</span></span><span class="line"><span class="cl">    117c:       b8 00 00 00 00          mov    $0x0,%eax
</span></span><span class="line"><span class="cl">    1181:       c9                      leave  
</span></span><span class="line"><span class="cl">    1182:       c3  
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>正好对应<code>endbr64</code>（注意小端口输出顺序）</p>
</li>
<li>
<p>合法的地址 (可读或可写)</p>
<ul>
<li>
<p>代码 (<code>main</code>, <code>%rip</code> 会从此处取出待执行的指令)，只读</p>
</li>
<li>
<p>数据 (<code>static int x</code>)，读写</p>
</li>
<li>
<p>堆栈 (<code>int y</code>)，读写</p>
</li>
<li>
<p>运行时分配的内存 (???)，读写</p>
</li>
<li>
<p>动态链接库 (???)</p>
</li>
</ul>
</li>
<li>
<p>非法的地址</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// p = (void *)main;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="mh">0x12345678l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%x</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span> <span class="c1">//=&gt;zsh: segmentation fault
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>NULL</code>，导致 segmentation fault</li>
</ul>
</li>
<li>
<p>它们停留在概念中，但实际呢？</p>
</li>
</ul>
<h3 id="查看进程的地址空间">查看进程的地址空间</h3>
<ul>
<li>
<p>pmap (1) - report memory of a process</p>
<ul>
<li>
<p>Claim: pmap 是通过访问 procfs (<code>/proc/</code>) 实现的</p>
</li>
<li>
<p>如何验证这一点？</p>
</li>
</ul>
</li>
<li>
<p>查看进程的地址空间</p>
<ul>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a> (静态链接)</p>
</li>
<li>
<p>最小的 Hello World (静态/动态链接)</p>
<ul>
<li>
<p>进程的地址空间：若干连续的 “段”</p>
</li>
<li>
<p>“段” 的内存可以访问</p>
</li>
<li>
<p>不在段内/违反权限的内存访问 触发 <code>SIGSEGV</code></p>
<ul>
<li><code>gdb</code> 可以 “越权访问”，但不能访问 “不存在” 的地址</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#include &lt;sys/syscall.h&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.globl _start
</span></span><span class="line"><span class="cl">_start:
</span></span><span class="line"><span class="cl">  movq $SYS_write, %rax   // write(
</span></span><span class="line"><span class="cl">  movq $1,         %rdi   //   fd=1,
</span></span><span class="line"><span class="cl">  movq $st,        %rsi   //   buf=st,
</span></span><span class="line"><span class="cl">  movq $(ed - st), %rdx   //   count=ed-st
</span></span><span class="line"><span class="cl">  syscall                 // );
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  movq $SYS_exit,  %rax   // exit(
</span></span><span class="line"><span class="cl">  movq $1,         %rdi   //   status=1
</span></span><span class="line"><span class="cl">  syscall                 // );
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">st:
</span></span><span class="line"><span class="cl">  .ascii &#34;\033[01;31mHello, OS World\033[0m\n&#34;
</span></span><span class="line"><span class="cl">ed:
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter12<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./minimal
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./minimal&#34;</span>, <span class="o">[</span><span class="s2">&#34;./minimal&#34;</span><span class="o">]</span>, 0x7fffdfe108e0 /* <span class="m">41</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;\33[01;31mHello, OS World\33[0m\n&#34;</span>, 28Hello, OS World
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">28</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>1<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter12-1.png" title="/img/Operating System/chapter12-1.png" data-thumbnail="/img/Operating System/chapter12-1.png" data-sub-html="<h2>查看进程号</h2>">
        
    </a><figcaption class="image-caption"><code>查看进程号</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-2.png" title="/img/Operating System/chapter12-2.png" data-thumbnail="/img/Operating System/chapter12-2.png" data-sub-html="<h2>使用pmap查看一个进程所有的地址空间</h2>">
        
    </a><figcaption class="image-caption"><code>使用pmap查看一个进程所有的地址空间</code></figcaption>
    </figure>
<ul>
<li>可以看到由许多“段”组成的</li>
<li>仔细看可以发现第一段的段地址和<code>starti</code>首地址的联系</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-3.png" title="/img/Operating System/chapter12-3.png" data-thumbnail="/img/Operating System/chapter12-3.png" data-sub-html="<h2>layout src</h2>">
        
    </a><figcaption class="image-caption"><code>layout src</code></figcaption>
    </figure>
<ul>
<li><code>pmap</code>干了啥？</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter12<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace pmap <span class="m">1431</span>
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;/usr/bin/pmap&#34;</span>, <span class="o">[</span><span class="s2">&#34;pmap&#34;</span>, <span class="s2">&#34;1431&#34;</span><span class="o">]</span>, 0x7ffe115f8938 /* <span class="m">41</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d0cc7da000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffc6ce9b2d0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca614a000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>46367, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 46367, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca613e000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libprocps.so.8&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>80080, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 225320, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6106000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca610a000, 40960, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x4000<span class="o">)</span> <span class="o">=</span> 0x7f4ca610a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca6114000, 16384, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xe000<span class="o">)</span> <span class="o">=</span> 0x7f4ca6114000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca6118000, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x11000<span class="o">)</span> <span class="o">=</span> 0x7f4ca6118000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca611b000, 139304, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca611b000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0P\237\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0&#34;</span>..., 48, 848<span class="o">)</span> <span class="o">=</span> <span class="m">48</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\24\0\0\0\3\0\0\0GNU\0i8\235HZ\227\223\333\350s\360\352,\223\340.&#34;</span>..., 68, 896<span class="o">)</span> <span class="o">=</span> <span class="m">68</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>2216304, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 2260560, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ede000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5f06000, 1658880, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x28000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5f06000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca609b000, 360448, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1bd000<span class="o">)</span> <span class="o">=</span> 0x7f4ca609b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca60f3000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x214000<span class="o">)</span> <span class="o">=</span> 0x7f4ca60f3000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca60f9000, 52816, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca60f9000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libsystemd.so.0&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>807936, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 812384, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e17000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5e2a000, 700416, PROT_NONE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5e2a000, 520192, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x13000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e2a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ea9000, 176128, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x92000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ea9000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ed5000, 32768, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xbd000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ed5000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5edd000, 1376, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5edd000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/liblzma.so.5&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>170456, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 172296, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5dec000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5def000, 110592, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x3000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5def000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5e0a000, 45056, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1e000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e0a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5e15000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x28000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e15000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libzstd.so.1&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>841808, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 843832, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d1d000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5d27000, 729088, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xa000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d27000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5dd9000, 69632, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xbc000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5dd9000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5dea000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xcc000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5dea000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/liblz4.so.1&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>125152, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d1b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 127072, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cfb000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5cfd000, 114688, PROT_NONE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cfd000, 102400, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x2000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cfd000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5d16000, 8192, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1b000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d16000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5d19000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1d000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d19000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libcap.so.2&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>39024, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 41016, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf0000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cf3000, 16384, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x3000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf3000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cf7000, 8192, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x7000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf7000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cf9000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x8000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf9000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libgcrypt.so.20&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>1296312, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1299576, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5bb2000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5bc1000, 1200128, PROT_NONE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5bc1000, 942080, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xf000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5bc1000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ca7000, 253952, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xf5000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ca7000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ce6000, 36864, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x133000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ce6000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cef000, 1144, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cef000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libgpg-error.so.0&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>149760, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 151992, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b8c000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5b90000, 90112, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x4000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b90000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ba6000, 40960, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1a000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ba6000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5bb0000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x23000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5bb0000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b8a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b87000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7f4ca5b877c0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7f4ca5b87a90<span class="o">)</span>         <span class="o">=</span> <span class="m">1646</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7f4ca5b87aa0, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7f4ca5b88160, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca60f3000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5bb0000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5ce6000, 12288, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5cf9000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5d19000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5dea000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5e15000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5ed5000, 28672, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca6118000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55d0cbbd6000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca6184000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f4ca613e000, 46367<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xc0\x5f\x86\x25\xbb\x1a\x8a\xe5&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d0cc7da000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55d0cc7fb000<span class="o">)</span>                     <span class="o">=</span> 0x55d0cc7fb000
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, CAP_MAC_OVERRIDE<span class="o">)</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x30 /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, CAP_CHECKPOINT_RESTORE<span class="o">)</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x2c /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x2a /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x29 /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/auxv&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0400, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;!\0\0\0\0\0\0\0\0\200\364l\374\177\0\0003\0\0\0\0\0\0\0\360\6\0\0\0\0\0\0&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">336</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/sys/kernel/osrelease&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0444, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;5.15.90.1-microsoft-standard-WSL&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">34</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/sys/devices/system/cpu/online&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;0-15\n&#34;</span>, 1024<span class="o">)</span>                 <span class="o">=</span> <span class="m">5</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/auxv&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0400, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;!\0\0\0\0\0\0\0\0\200\364l\374\177\0\0003\0\0\0\0\0\0\0\360\6\0\0\0\0\0\0&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">336</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/locale-archive&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>6213280, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 6213280, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca559a000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/locale.alias&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>2996, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;# Locale name alias data base.\n#&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">2996</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, 4096<span class="o">)</span>                       <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_IDENTIFICATION&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_IDENTIFICATION&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>258, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 258, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6183000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>27002, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 27002, PROT_READ, MAP_SHARED, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6143000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">futex<span class="o">(</span>0x7f4ca60f8a6c, FUTEX_WAKE_PRIVATE, 2147483647<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_MEASUREMENT&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MEASUREMENT&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>23, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 23, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6142000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_TELEPHONE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_TELEPHONE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>47, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 47, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6141000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_ADDRESS&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_ADDRESS&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>127, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 127, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6140000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_NAME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_NAME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>62, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 62, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca613f000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_PAPER&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_PAPER&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>34, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 34, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca613e000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_MESSAGES&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MESSAGES&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFDIR<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>4096, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MESSAGES/SYS_LC_MESSAGES&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>48, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 48, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5599000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_MONETARY&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MONETARY&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>270, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 270, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5598000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_COLLATE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_COLLATE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>1406, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1406, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5597000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_TIME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_TIME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>3360, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 3360, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5596000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_NUMERIC&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_NUMERIC&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>50, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 50, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5595000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_CTYPE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_CTYPE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>353616, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 353616, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca553e000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/C.UTF-8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/C.utf8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/C/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale-langpack/C.UTF-8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale-langpack/C.utf8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale-langpack/C/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/maps&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">dup3<span class="o">(</span>3, 0, 0<span class="o">)</span>                           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">shmget<span class="o">(</span>IPC_PRIVATE, 42, IPC_CREAT<span class="p">|</span>0666<span class="o">)</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">shmat<span class="o">(</span>1, NULL, SHM_RDONLY<span class="o">)</span>              <span class="o">=</span> 0x7f4ca553d000
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>0, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0444, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>0, <span class="s2">&#34;55d0cbbce000-55d0cbbd0000 r--p 0&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">1024</span>
</span></span><span class="line"><span class="cl">shmdt<span class="o">(</span>0x7f4ca553d000<span class="o">)</span>                   <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">shmctl<span class="o">(</span>1, IPC_RMID, NULL<span class="o">)</span>               <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/task&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFDIR<span class="p">|</span>0555, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 135168, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca551d000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 135168, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca54fc000
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFDIR<span class="p">|</span>0555, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431/stat&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;1431 (minimal) t 1398 1431 339 3&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">272</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431/cmdline&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;/mnt/d/work for vscode/chapter12&#34;</span>..., 2047<span class="o">)</span> <span class="o">=</span> <span class="m">41</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0x4<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;1431:   /mnt/d/work for vscode/c&#34;</span>..., 491431:   /mnt/d/work <span class="k">for</span> vscode/chapter12/minimal
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">49</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431/maps&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0444, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;00400000-00401000 r--p 00000000 &#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">469</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;0000000000400000      4K r---- m&#34;</span>..., <span class="m">390000000000400000</span>      4K r---- minimal
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">39</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;0000000000401000      4K r-x-- m&#34;</span>..., <span class="m">390000000000401000</span>      4K r-x-- minimal
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">39</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;00007ffff7ff9000     16K r----  &#34;</span>..., 4200007ffff7ff9000     16K r----   <span class="o">[</span> anon <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;00007ffff7ffd000      8K r-x--  &#34;</span>..., 4200007ffff7ffd000      8K r-x--   <span class="o">[</span> anon <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;00007ffffffdd000    136K rw---  &#34;</span>..., 4300007ffffffdd000    136K rw---   <span class="o">[</span> stack <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">43</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, 1024<span class="o">)</span>                       <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34; total              168K\n&#34;</span>, <span class="m">25</span> total              168K
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">25</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>1<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>2<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">lseek<span class="o">(</span>0, -412, SEEK_CUR<span class="o">)</span>                <span class="o">=</span> <span class="m">612</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>关键信息<code>openat(AT_FDCWD, &quot;/proc/1431/maps&quot;, O_RDONLY) = 3</code></p>
</li>
<li>
<p>???</p>
</li>
<li>
<p><code>cat</code>一下看看里面是啥</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter12<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cat /proc/1431/maps 
</span></span><span class="line"><span class="cl">00400000-00401000 r--p <span class="m">00000000</span> 00:4a <span class="m">3377699720805767</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/minimal
</span></span><span class="line"><span class="cl">00401000-00402000 r-xp <span class="m">00001000</span> 00:4a <span class="m">3377699720805767</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/minimal
</span></span><span class="line"><span class="cl">7ffff7ff9000-7ffff7ffd000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7ffd000-7ffff7fff000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffffffdd000-7ffffffff000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用<code>man 5 proc</code>多阅读</li>
</ul>
<h3 id="操作系统提供查看进程地址空间的机制">操作系统提供查看进程地址空间的机制</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -static deom.c -o deom
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>查看<code>maps</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /proc/2017/maps
</span></span><span class="line"><span class="cl">00400000-00401000 r--p <span class="m">00000000</span> 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">00401000-00498000 r-xp <span class="m">00001000</span> 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">00498000-004c1000 r--p <span class="m">00098000</span> 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">004c1000-004c8000 rw-p 000c0000 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">004c8000-004cd000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                                  <span class="o">[</span>heap<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7ff9000-7ffff7ffd000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7ffd000-7ffff7fff000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffffffdd000-7ffffffff000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>readelf</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ readelf deom -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Elf file <span class="nb">type</span> is EXEC <span class="o">(</span>Executable file<span class="o">)</span>
</span></span><span class="line"><span class="cl">Entry point 0x401620
</span></span><span class="line"><span class="cl">There are <span class="m">10</span> program headers, starting at offset <span class="m">64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Program Headers:
</span></span><span class="line"><span class="cl">  Type           Offset             VirtAddr           PhysAddr
</span></span><span class="line"><span class="cl">                 FileSiz            MemSiz              Flags  Align
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
</span></span><span class="line"><span class="cl">                 0x0000000000000528 0x0000000000000528  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000001000 0x0000000000401000 0x0000000000401000
</span></span><span class="line"><span class="cl">                 0x00000000000964bd 0x00000000000964bd  R E    0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000098000 0x0000000000498000 0x0000000000498000
</span></span><span class="line"><span class="cl">                 0x0000000000028476 0x0000000000028476  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x00000000000c07b0 0x00000000004c17b0 0x00000000004c17b0
</span></span><span class="line"><span class="cl">                 0x0000000000005ae0 0x000000000000b490  RW     0x1000
</span></span><span class="line"><span class="cl">  NOTE           0x0000000000000270 0x0000000000400270 0x0000000000400270
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  NOTE           0x00000000000002a0 0x00000000004002a0 0x00000000004002a0
</span></span><span class="line"><span class="cl">                 0x0000000000000044 0x0000000000000044  R      0x4
</span></span><span class="line"><span class="cl">  TLS            0x00000000000c07b0 0x00000000004c17b0 0x00000000004c17b0
</span></span><span class="line"><span class="cl">                 0x0000000000000020 0x0000000000000068  R      0x8
</span></span><span class="line"><span class="cl">  GNU_PROPERTY   0x0000000000000270 0x0000000000400270 0x0000000000400270
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
</span></span><span class="line"><span class="cl">                 0x0000000000000000 0x0000000000000000  RW     0x10
</span></span><span class="line"><span class="cl">  GNU_RELRO      0x00000000000c07b0 0x00000000004c17b0 0x00000000004c17b0
</span></span><span class="line"><span class="cl">                 0x0000000000003850 0x0000000000003850  R      0x1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Section to Segment mapping:
</span></span><span class="line"><span class="cl">  Segment Sections...
</span></span><span class="line"><span class="cl">   <span class="m">00</span>     .note.gnu.property .note.gnu.build-id .note.ABI-tag .rela.plt 
</span></span><span class="line"><span class="cl">   <span class="m">01</span>     .init .plt .text __libc_freeres_fn .fini 
</span></span><span class="line"><span class="cl">   <span class="m">02</span>     .rodata .stapsdt.base .eh_frame .gcc_except_table 
</span></span><span class="line"><span class="cl">   <span class="m">03</span>     .tdata .init_array .fini_array .data.rel.ro .got .got.plt .data __libc_subfreeres __libc_IO_vtables __libc_atexit .bss __libc_freeres_ptrs 
</span></span><span class="line"><span class="cl">   <span class="m">04</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">05</span>     .note.gnu.build-id .note.ABI-tag 
</span></span><span class="line"><span class="cl">   <span class="m">06</span>     .tdata .tbss 
</span></span><span class="line"><span class="cl">   <span class="m">07</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">08</span>     
</span></span><span class="line"><span class="cl">   <span class="m">09</span>     .tdata .init_array .fini_array .data.rel.ro .got 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>动态链接</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /proc/2319/maps 
</span></span><span class="line"><span class="cl">555555554000-555555555000 r--p <span class="m">00000000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">555555555000-555555556000 r-xp <span class="m">00001000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">555555556000-555555557000 r--p <span class="m">00002000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">555555557000-555555559000 rw-p <span class="m">00002000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">7ffff7fbd000-7ffff7fc1000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7fc1000-7ffff7fc3000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7fc3000-7ffff7fc5000 r--p <span class="m">00000000</span> 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffff7fc5000-7ffff7fef000 r-xp <span class="m">00002000</span> 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffff7fef000-7ffff7ffa000 r--p 0002c000 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffff7ffb000-7ffff7fff000 rw-p <span class="m">00037000</span> 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffffffdd000-7ffffffff000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>                                                                                
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>多了链接库的数据</li>
</ul>
<p>RTFM: <code>/proc/[pid]/maps</code> (man 5 proc)</p>
<ul>
<li>
<p>进程地址空间中的每一段</p>
<ul>
<li>地址 (范围) 和权限 (rwxsp)</li>
<li>对应的文件: offset, dev, inode, pathname
<ul>
<li>TFM 里有更详细的解释</li>
</ul>
</li>
</ul>
</li>
<li>
<p>和 readelf (-l) 里的信息互相验证</p>
<ul>
<li>课后习题：定义一些代码/数据，观察变化</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">address           perms offset   dev   inode      pathname
</span></span><span class="line"><span class="cl">00400000-00401000 r--p  <span class="m">00000000</span> fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">00401000-00495000 r-xp  <span class="m">00001000</span> fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">00495000-004bc000 r--p  <span class="m">00095000</span> fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">004bd000-004c3000 rw-p  000bc000 fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">004c3000-004c4000 rw-p  <span class="m">00000000</span> 00:00 <span class="m">0</span>          <span class="o">[</span>heap<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="更完整的地址空间映象">更完整的地址空间映象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="m">0000555555554000</span> r--p     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555555000</span> r-xp     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555556000</span> r--p     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555557000</span> r--p     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555558000</span> rw-p     a.out
</span></span><span class="line"><span class="cl">00007ffff7dc1000 r--p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7de3000 r-xp     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7f5b000 r--p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7fa9000 r--p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7fad000 rw-p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7faf000 rw-p     <span class="o">(</span>这是什么？<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffff7fcb000 r--p     <span class="o">[</span>vvar<span class="o">]</span> <span class="o">(</span>这又是什么？<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffff7fce000 r-xp     <span class="o">[</span>vdso<span class="o">]</span> <span class="o">(</span>这叒是什么？<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffff7fcf000 r--p     <span class="o">(</span>省略相似的 ld-2.31.so<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffffffde000 rw-p     <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">ffffffffff600000 --xp     <span class="o">[</span>vsyscall<span class="o">]</span> <span class="o">(</span>这叕是什么？<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>是不是 bss? 给我们的代码加一个大数组试试！</li>
</ul>
<h3 id="rtfm-5-proc-我们发现的宝藏">RTFM (5 proc): 我们发现的宝藏</h3>
<blockquote>
<p>vdso (7): Virtual system calls: 只读的系统调用也许可以不陷入内核执行。</p>
</blockquote>
<ul>
<li><b>无需陷入内核的系统调用</b>
<ul>
<li>例子: time (2)
<ul>
<li>直接调试 <a href="https://jyywiki.cn/pages/OS/2022/demos/vdso.c" target="_blank" rel="noopener noreffer">vdso.c</a></li>
<li>时间：内核维护秒级的时间 (所有进程映射同一个页面)</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="nf">gettime</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">timeval</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">// trapless system call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">+</span> <span class="n">t</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">/</span> <span class="mf">1000000.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Time stamp: %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span> <span class="c1">// trapless system call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">double</span> <span class="n">st</span> <span class="o">=</span> <span class="n">gettime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">gettime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Time: %.6lfs</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>例子: gettimeofday (2)
<ul>
<li><a href="https://elixir.bootlin.com/linux/latest/source/lib/vdso/gettimeofday.c#L49" target="_blank" rel="noopener noreffer">RTFSC</a> (非常聪明的实现)</li>
</ul>
</li>
<li>更多的例子：RTFM
<ul>
<li>计算机系统里没有魔法！我们理解了进程地址空间的<font color="red">全部</font>！</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-4.png" title="/img/Operating System/chapter12-4.png" data-thumbnail="/img/Operating System/chapter12-4.png" data-sub-html="<h2>time address</h2>">
        
    </a><figcaption class="image-caption"><code>time address</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-5.png" title="/img/Operating System/chapter12-5.png" data-thumbnail="/img/Operating System/chapter12-5.png" data-sub-html="<h2>vdso</h2>">
        
    </a><figcaption class="image-caption"><code>vdso</code></figcaption>
    </figure>
<ul>
<li>$time\ address \in vdso$，而<code>vdso</code>没有在<code>libc</code>这个位置上面</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-6.jpg" title="/img/Operating System/chapter12-6.jpg" data-thumbnail="/img/Operating System/chapter12-6.jpg" data-sub-html="<h2>实现方式</h2>">
        
    </a><figcaption class="image-caption"><code>实现方式</code></figcaption>
    </figure>
<ul>
<li>源码</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifdef CONFIG_TIME_NS
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="n">__always_inline</span> <span class="kt">int</span> <span class="nf">do_hres_timens</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vdns</span><span class="p">,</span> <span class="n">clockid_t</span> <span class="n">clk</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					  <span class="k">struct</span> <span class="n">__kernel_timespec</span> <span class="o">*</span><span class="n">ts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="k">struct</span> <span class="n">timens_offset</span> <span class="o">*</span><span class="n">offs</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vdns</span><span class="o">-&gt;</span><span class="n">offset</span><span class="p">[</span><span class="n">clk</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_timestamp</span> <span class="o">*</span><span class="n">vdso_ts</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">u64</span> <span class="n">cycles</span><span class="p">,</span> <span class="n">last</span><span class="p">,</span> <span class="n">ns</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">u32</span> <span class="n">seq</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">s64</span> <span class="n">sec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">vd</span> <span class="o">=</span> <span class="n">vdns</span> <span class="o">-</span> <span class="p">(</span><span class="n">clk</span> <span class="o">==</span> <span class="n">CLOCK_MONOTONIC_RAW</span> <span class="o">?</span> <span class="nl">CS_RAW</span> <span class="p">:</span> <span class="n">CS_HRES_COARSE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">vd</span> <span class="o">=</span> <span class="n">__arch_get_timens_vdso_data</span><span class="p">(</span><span class="n">vd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">clk</span> <span class="o">!=</span> <span class="n">CLOCK_MONOTONIC_RAW</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">vd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vd</span><span class="p">[</span><span class="n">CS_HRES_COARSE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span>
</span></span><span class="line"><span class="cl">		<span class="n">vd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vd</span><span class="p">[</span><span class="n">CS_RAW</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">vdso_ts</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vd</span><span class="o">-&gt;</span><span class="n">basetime</span><span class="p">[</span><span class="n">clk</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">seq</span> <span class="o">=</span> <span class="n">vdso_read_begin</span><span class="p">(</span><span class="n">vd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">vdso_clocksource_ok</span><span class="p">(</span><span class="n">vd</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">cycles</span> <span class="o">=</span> <span class="n">__arch_get_hw_counter</span><span class="p">(</span><span class="n">vd</span><span class="o">-&gt;</span><span class="n">clock_mode</span><span class="p">,</span> <span class="n">vd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">vdso_cycles_ok</span><span class="p">(</span><span class="n">cycles</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ns</span> <span class="o">=</span> <span class="n">vdso_ts</span><span class="o">-&gt;</span><span class="n">nsec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">last</span> <span class="o">=</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">cycle_last</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ns</span> <span class="o">+=</span> <span class="n">vdso_calc_delta</span><span class="p">(</span><span class="n">cycles</span><span class="p">,</span> <span class="n">last</span><span class="p">,</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">mask</span><span class="p">,</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">mult</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">ns</span> <span class="o">=</span> <span class="n">vdso_shift_ns</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">shift</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">sec</span> <span class="o">=</span> <span class="n">vdso_ts</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">vdso_read_retry</span><span class="p">(</span><span class="n">vd</span><span class="p">,</span> <span class="n">seq</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/* Add the namespace offset */</span>
</span></span><span class="line"><span class="cl">	<span class="n">sec</span> <span class="o">+=</span> <span class="n">offs</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">ns</span> <span class="o">+=</span> <span class="n">offs</span><span class="o">-&gt;</span><span class="n">nsec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Do this outside the loop: a race inside the loop could result
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * in __iter_div_u64_rem() being extremely slow.
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="n">ts</span><span class="o">-&gt;</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">sec</span> <span class="o">+</span> <span class="n">__iter_div_u64_rem</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">NSEC_PER_SEC</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ns</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">ts</span><span class="o">-&gt;</span><span class="n">tv_nsec</span> <span class="o">=</span> <span class="n">ns</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="n">__always_inline</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="nf">__arch_get_timens_vdso_data</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="n">__always_inline</span> <span class="kt">int</span> <span class="nf">do_hres_timens</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vdns</span><span class="p">,</span> <span class="n">clockid_t</span> <span class="n">clk</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					  <span class="k">struct</span> <span class="n">__kernel_timespec</span> <span class="o">*</span><span class="n">ts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="小知识-系统调用的实现">(小知识) 系统调用的实现</h3>
<blockquote>
<p>“执行系统调用时，进程陷入内核态执行”——不，不是的。</p>
</blockquote>
<ul>
<li>
<p>系统调用就是一组接口的约定，谁说一定要 <code>int</code> 指令？</p>
<ul>
<li>光一条指令就要保存 ss, rsp, cs, rip, rflags (40 字节) 到内存</li>
</ul>
</li>
<li>
<p>SYSCALL — Fast System Call</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">RCX    &lt;- RIP; (* 下条指令执行的地址 *)
</span></span><span class="line"><span class="cl">RIP    &lt;- IA32_LSTAR;
</span></span><span class="line"><span class="cl">R11    &lt;- RFLAGS;
</span></span><span class="line"><span class="cl">RFLAGS &lt;- RFLAGS &amp; ~(IA32_FMASK);
</span></span><span class="line"><span class="cl">CPL    &lt;- 0; (* 进入 Ring 0 执行 *)
</span></span><span class="line"><span class="cl">CS.Selector &lt;- IA32_STAR[47:32] &amp; 0xFFFC
</span></span><span class="line"><span class="cl">SS.Selector &lt;- IA32_STAR[47:32] + 8;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="小知识-系统调用的实现-contd">(小知识) 系统调用的实现 (cont&rsquo;d)</h3>
<ul>
<li>
<p>能不能让其他系统调用也 <code>trap</code> 进入内核？</p>
<ul>
<li>疯狂的事情也许真的是能实现的 (这算是魔法吗？)
<ul>
<li><a href="https://www.usenix.org/conference/osdi10/flexsc-flexible-system-call-scheduling-exception-less-system-calls" target="_blank" rel="noopener noreffer">FlexSC: Flexible system call scheduling with exception-less system calls</a> (OSDI'10).</li>
</ul>
</li>
</ul>
</li>
<li>
<p>使用共享内存和内核通信！</p>
<ul>
<li>
<p>内核线程在 spinning 等待系统调用的到来</p>
</li>
<li>
<p>收到系统调用请求后立即开始执行</p>
</li>
<li>
<p>进程 spin 等待系统调用完成</p>
</li>
<li>
<p>如果系统调用很多，可以打包处理</p>
</li>
</ul>
</li>
</ul>
<h2 id="进程的地址空间管理">进程的地址空间管理</h2>
<h3 id="execve-之后">Execve 之后……</h3>
<ul>
<li>
<p>进程只有少量内存映射</p>
<ul>
<li>
<p>静态链接：代码、数据、堆栈、堆区</p>
</li>
<li>
<p>动态链接：代码、数据、堆栈、堆区、INTERP (ld.so)</p>
</li>
</ul>
</li>
<li>
<p>地址空间里剩下的部分是怎么创建的？</p>
<ul>
<li>
<p>libc.so 都没有啊……</p>
</li>
<li>
<p>创建了以后，我们还能修改它吗？</p>
<ul>
<li>肯定是能的：动态链接库可以动态加载 (M4)
<ul>
<li><b>当然是通过系统调用了</b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-7.png" title="/img/Operating System/chapter12-7.png" data-thumbnail="/img/Operating System/chapter12-7.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-8.png" title="/img/Operating System/chapter12-8.png" data-thumbnail="/img/Operating System/chapter12-8.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>没有进入<code>main</code>的时候，看不到<code>libc</code></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-9.png" title="/img/Operating System/chapter12-9.png" data-thumbnail="/img/Operating System/chapter12-9.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-10.png" title="/img/Operating System/chapter12-10.png" data-thumbnail="/img/Operating System/chapter12-10.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>执行到<code>main</code>的时候，<code>libc</code>被加载进来了</li>
</ul>
<h3 id="进程的地址空间-contd">进程的地址空间 (cont&rsquo;d)</h3>
<ul>
<li>
<p>进程的地址空间 = 内存里若干连续的 “段”</p>
<ul>
<li>每一段是可访问 (读/写/执行) 的内存
<ul>
<li><b>可能映射到某个文件和/或在进程间共享</b></li>
</ul>
</li>
</ul>
</li>
<li>
<p>管理进程地址空间的系统调用</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 映射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="o">*</span><span class="nf">mmap</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prot</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">off_t</span> <span class="n">offset</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">munmap</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 修改映射权限
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">mprotect</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prot</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>RTFM
<ul>
<li>说人话：<b><font color="red">状态上增加/删除/修改一段可访问的内存</font></b></li>
<li>也就是上面的示例，内存改变全靠<code>mmap</code></li>
</ul>
</li>
</ul>
<h3 id="把文件映射到进程地址空间">把文件映射到进程地址空间？</h3>
<ul>
<li>
<p>它们的确好像没有什么区别</p>
<ul>
<li>
<p>文件 = 字节序列</p>
</li>
<li>
<p>内存 = 字节序列</p>
</li>
<li>
<p>操作系统允许映射好像挺合理的……</p>
<ul>
<li>带来了很大的方便
<ul>
<li><b><code>ELF loader </code>用<code>mmap</code>非常容易实现</b>
<ul>
<li><b>解析出要加载哪部分到内存，直接<code>mmap</code>就完了</b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ readelf -l deom
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Elf file <span class="nb">type</span> is DYN <span class="o">(</span>Position-Independent Executable file<span class="o">)</span>
</span></span><span class="line"><span class="cl">Entry point 0x1040
</span></span><span class="line"><span class="cl">There are <span class="m">13</span> program headers, starting at offset <span class="m">64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Program Headers:
</span></span><span class="line"><span class="cl">  Type           Offset             VirtAddr           PhysAddr
</span></span><span class="line"><span class="cl">                 FileSiz            MemSiz              Flags  Align
</span></span><span class="line"><span class="cl">  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
</span></span><span class="line"><span class="cl">                 0x00000000000002d8 0x00000000000002d8  R      0x8
</span></span><span class="line"><span class="cl">  INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318
</span></span><span class="line"><span class="cl">                 0x000000000000001c 0x000000000000001c  R      0x1
</span></span><span class="line"><span class="cl">      <span class="o">[</span>Requesting program interpreter: /lib64/ld-linux-x86-64.so.2<span class="o">]</span>
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
</span></span><span class="line"><span class="cl">                 0x00000000000005f0 0x00000000000005f0  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000
</span></span><span class="line"><span class="cl">                 0x0000000000000145 0x0000000000000145  R E    0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000
</span></span><span class="line"><span class="cl">                 0x00000000000000c4 0x00000000000000c4  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000002df0 0x0000000000003df0 0x0000000000003df0
</span></span><span class="line"><span class="cl">                 0x0000000000000220 0x0000000000000228  RW     0x1000
</span></span><span class="line"><span class="cl">  DYNAMIC        0x0000000000002e00 0x0000000000003e00 0x0000000000003e00
</span></span><span class="line"><span class="cl">                 0x00000000000001c0 0x00000000000001c0  RW     0x8
</span></span><span class="line"><span class="cl">  NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  NOTE           0x0000000000000368 0x0000000000000368 0x0000000000000368
</span></span><span class="line"><span class="cl">                 0x0000000000000044 0x0000000000000044  R      0x4
</span></span><span class="line"><span class="cl">  GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  GNU_EH_FRAME   0x0000000000002004 0x0000000000002004 0x0000000000002004
</span></span><span class="line"><span class="cl">                 0x000000000000002c 0x000000000000002c  R      0x4
</span></span><span class="line"><span class="cl">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
</span></span><span class="line"><span class="cl">                 0x0000000000000000 0x0000000000000000  RW     0x10
</span></span><span class="line"><span class="cl">  GNU_RELRO      0x0000000000002df0 0x0000000000003df0 0x0000000000003df0
</span></span><span class="line"><span class="cl">                 0x0000000000000210 0x0000000000000210  R      0x1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Section to Segment mapping:
</span></span><span class="line"><span class="cl">  Segment Sections...
</span></span><span class="line"><span class="cl">   <span class="m">00</span>     
</span></span><span class="line"><span class="cl">   <span class="m">01</span>     .interp 
</span></span><span class="line"><span class="cl">   <span class="m">02</span>     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn 
</span></span><span class="line"><span class="cl">   <span class="m">03</span>     .init .plt .plt.got .text .fini 
</span></span><span class="line"><span class="cl">   <span class="m">04</span>     .rodata .eh_frame_hdr .eh_frame 
</span></span><span class="line"><span class="cl">   <span class="m">05</span>     .init_array .fini_array .dynamic .got .data .bss 
</span></span><span class="line"><span class="cl">   <span class="m">06</span>     .dynamic 
</span></span><span class="line"><span class="cl">   <span class="m">07</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">08</span>     .note.gnu.build-id .note.ABI-tag 
</span></span><span class="line"><span class="cl">   <span class="m">09</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">10</span>     .eh_frame_hdr 
</span></span><span class="line"><span class="cl">   <span class="m">11</span>     
</span></span><span class="line"><span class="cl">   <span class="m">12</span>     .init_array .fini_array .dynamic .got 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>readelf</code>告诉系统该进程载入的时候要把什么东西加载到哪里，<code>OS</code>通过<code>mmap</code>进行加载</li>
</ul>
<h3 id="使用-memory-mapping">使用 Memory Mapping</h3>
<p>Example 1:</p>
<ul>
<li>用 mmap 申请大量内存空间(<a href="https://jyywiki.cn/pages/OS/2022/demos/mmap-alloc.c" target="_blank" rel="noopener noreffer">mmap-alloc.c</a>)
<ul>
<li>瞬间完成</li>
<li>不妨<code>strace/gdb</code>看一下</li>
<li><code>libc</code> 的 <code>malloc/free</code> 在初始空间用完后使用 <code>sbrk/mmap</code> 申请空间</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define GiB * (1024LL * 1024 * 1024)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">volatile</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">3</span> <span class="n">GiB</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_ANONYMOUS</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;mmap: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="n">uintptr_t</span><span class="p">)</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">((</span><span class="n">intptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">perror</span><span class="p">(</span><span class="s">&#34;cannot map&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span> <span class="n">GiB</span><span class="p">)</span> <span class="o">=</span> <span class="mi">114</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">2</span> <span class="n">GiB</span><span class="p">)</span> <span class="o">=</span> <span class="mi">514</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Read get: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span> <span class="n">GiB</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Read get: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">2</span> <span class="n">GiB</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">time</span> ./mmap-alloc
</span></span><span class="line"><span class="cl">mmap: 7f091f6c8000
</span></span><span class="line"><span class="cl">Read get: <span class="m">114</span>
</span></span><span class="line"><span class="cl">Read get: <span class="m">514</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0.01s
</span></span><span class="line"><span class="cl">user    0.00s
</span></span><span class="line"><span class="cl">sys     0.00s
</span></span><span class="line"><span class="cl">cpu     47%
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace -T ./mmap-alloc
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./mmap-alloc&#34;</span>, <span class="o">[</span><span class="s2">&#34;./mmap-alloc&#34;</span><span class="o">]</span>, 0x7ffdbcd061d8 /* <span class="m">41</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.005476&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7fff0b4c4fc0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span> &lt;0.000046&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x1fcd000 &lt;0.000034&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1fcddc0<span class="o">)</span>                          <span class="o">=</span> 0x1fcddc0 &lt;0.000031&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x1fcd3c0<span class="o">)</span>      <span class="o">=</span> <span class="m">0</span> &lt;0.000027&gt;
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x1fcd690<span class="o">)</span>              <span class="o">=</span> <span class="m">4689</span> &lt;0.000037&gt;
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x1fcd6a0, 24<span class="o">)</span>          <span class="o">=</span> <span class="m">0</span> &lt;0.000027&gt;
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x1fcdd60, 0x20, 0, 0x53053053<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span> &lt;0.000024&gt;
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000026&gt;
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000038&gt;
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter12&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">43</span> &lt;0.000143&gt;
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x2d\xdd\xc2\x27\x6a\x77\x7d\x7f&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span> &lt;0.000028&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1feedc0<span class="o">)</span>                          <span class="o">=</span> 0x1feedc0 &lt;0.000043&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1fef000<span class="o">)</span>                          <span class="o">=</span> 0x1fef000 &lt;0.000047&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span> &lt;0.000043&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 3221225472, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f1dcee47000 &lt;0.000041&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0x4<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000048&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;mmap: 7f1dcee47000\n&#34;</span>, 19mmap: 7f1dcee47000
</span></span><span class="line"><span class="cl"><span class="o">)</span>    <span class="o">=</span> <span class="m">19</span> &lt;0.000067&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;Read get: 114\n&#34;</span>, 14Read get: <span class="m">114</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>         <span class="o">=</span> <span class="m">14</span> &lt;0.000050&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;Read get: 514\n&#34;</span>, 14Read get: <span class="m">514</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>         <span class="o">=</span> <span class="m">14</span> &lt;0.000046&gt;
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>mmap</code>只花了0.000041s！</li>
</ul>
<p>Example 2:</p>
<ul>
<li>用 mmap 映射整个磁盘(<a href="https://jyywiki.cn/pages/OS/2022/demos/mmap-disk.py" target="_blank" rel="noopener noreffer">mmap-disk.py</a>)
<ul>
<li>瞬间完成</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mmap</span><span class="o">,</span> <span class="nn">hexdump</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/dev/sda&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">mm</span> <span class="o">=</span> <span class="n">mmap</span><span class="o">.</span><span class="n">mmap</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">prot</span><span class="o">=</span><span class="n">mmap</span><span class="o">.</span><span class="n">PROT_READ</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">128</span> <span class="o">&lt;&lt;</span> <span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">hexdump</span><span class="o">.</span><span class="n">hexdump</span><span class="p">(</span><span class="n">mm</span><span class="p">[:</span><span class="mi">512</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="memory-mapped-file-一致性">Memory-Mapped File: 一致性</h3>
<ul>
<li>但我们好像带来了一些问题……
<ul>
<li>如果把页面映射到文件
<ul>
<li>修改什么时候生效？
<ul>
<li>立即生效：那会造成巨大量的磁盘 I/O</li>
<li>unmap (进程终止) 时生效：好像又太迟了……</li>
</ul>
</li>
<li>若干个映射到同一个文件的进程？
<ul>
<li>共享一份内存？</li>
<li>各自有本地的副本？</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>请查阅手册，看看操作系统是如何规定这些操作的行为的</p>
<ul>
<li>
<p>例如阅读 <code>msync (2)</code></p>
</li>
<li>
<p>这才是操作系统真正的复杂性</p>
</li>
</ul>
</li>
</ul>
<h2 id="地址空间的隔离">地址空间的隔离</h2>
<h3 id="地址空间实现进程隔离">地址空间：实现进程隔离</h3>
<ul>
<li>
<p>每个 <code>*ptr</code> 都只能访问本进程 (状态机) 的内存</p>
<ul>
<li>
<p>除非 mmap 显示指定、映射共享文件或共享内存多线程</p>
</li>
<li>
<p>实现了操作系统最重要的功能：进程之间的隔离</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>任何一个程序都不能因为 <code>bug</code> 或恶意行为侵犯其他程序执行</p>
<ul>
<li>
<p>“连方法都没有”</p>
</li>
<li>
<p>吗……？</p>
</li>
</ul>
</li>
</ul>
<h3 id="电子游戏的上一个黄金时代">电子游戏的上一个黄金时代</h3>
<ul>
<li>电子竞技的先行者：“即时战略游戏” (Real-Time Strategy)
<ul>
<li><a href="https://www.bilibili.com/video/BV1Yq4y1G7bQ" target="_blank" rel="noopener noreffer">Command and Conquer</a> (Westwood), Starcraft (<del>Microsoft</del>), &hellip;
<ul>
<li>如果我们想 “侵犯” 游戏的执行……呢？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="前互联网时代的神器-1-金山游侠">前互联网时代的神器 (1): 金山游侠</h3>
<ul>
<li>
<p><font color="red">在进程的内存中找到代表 “金钱”、“生命” 的重要属性并且改掉</font></p>
</li>
<li>
<p>只要有访问其他进程内存和在程序上 “悬浮显示” 的 API 即可</p>
<ul>
<li>
<p>想象成是另一个进程内存的 “调试器”</p>
</li>
<li>
<p>在 Linux 中可以轻松拥有：<a href="https://jyywiki.cn/pages/OS/2022/demos/dosbox-hack.c" target="_blank" rel="noopener noreffer">dosbox-hack.c</a></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LENGTH(arr)  (sizeof(arr) / sizeof(arr[0]))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">found</span><span class="p">[</span><span class="mi">4096</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="n">reset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">scan</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uintptr_t</span> <span class="n">start</span><span class="p">,</span> <span class="n">kb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">perm</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span> <span class="o">=</span> <span class="n">popen</span><span class="p">(</span><span class="s">&#34;pmap -x $(pidof dosbox) | tail -n +3&#34;</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">);</span> <span class="n">assert</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">reset</span><span class="p">)</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&#34;%lx&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">start</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">intptr_t</span><span class="p">)</span><span class="n">start</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&#34;%ld%*ld%*ld%s%*[^</span><span class="se">\n</span><span class="s">]s&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kb</span><span class="p">,</span> <span class="n">perm</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">perm</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;w&#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">uintptr_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">kb</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">mem</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span> <span class="n">assert</span><span class="p">(</span><span class="n">mem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">)</span> <span class="o">!=</span> <span class="p">(</span><span class="n">off_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">mem</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">uint16_t</span> <span class="n">v</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">mem</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">reset</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">==</span> <span class="n">v</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">found</span><span class="p">))</span> <span class="n">found</span><span class="p">[</span><span class="n">n</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	  <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">start</span> <span class="o">+</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">v</span> <span class="o">!=</span> <span class="n">val</span><span class="p">)</span> <span class="n">found</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">mem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">reset</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;There are %d match(es).</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">overwrite</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span><span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">found</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">SEEK_SET</span><span class="p">)</span> <span class="o">!=</span> <span class="p">(</span><span class="n">off_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">val</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d value(s) written.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span> <span class="o">=</span> <span class="n">popen</span><span class="p">(</span><span class="s">&#34;pidof dosbox&#34;</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pid</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&#34;/proc/%d/mem&#34;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span> <span class="n">assert</span><span class="p">(</span><span class="n">fd</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">reset</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">stdin</span><span class="p">);</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(DOSBox %d) &#34;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;q&#39;</span><span class="o">:</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;s&#39;</span><span class="o">:</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">val</span><span class="p">);</span> <span class="n">scan</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;w&#39;</span><span class="o">:</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">val</span><span class="p">);</span> <span class="n">overwrite</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;r&#39;</span><span class="o">:</span> <span class="n">reset</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Search results reset.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="前互联网时代的神器-2-按键精灵">前互联网时代的神器 (2): 按键精灵</h3>
<ul>
<li>
<p><font color="red">大量重复固定的任务 (例如 2 秒 17 枪)</font></p>
</li>
<li>
<p>这个简单，就是给进程发送键盘/鼠标事件</p>
<ul>
<li>
<p>做个驱动；或者</p>
</li>
<li>
<p>利用操作系统/窗口管理器提供的 API</p>
</li>
<li>
<p><a href="https://github.com/jordansissel/xdotool" target="_blank" rel="noopener noreffer">xdotool</a> (我们用这玩意测试 vscode 的插件)</p>
</li>
<li>
<p><a href="https://www.kernel.org/doc/html/latest/input/input.html" target="_blank" rel="noopener noreffer">evdev</a> (我们用这玩意显示按键；仅课堂展示有效)</p>
</li>
</ul>
</li>
</ul>
<h3 id="前互联网时代的神器-3-变速齿轮">前互联网时代的神器 (3): 变速齿轮</h3>
<ul>
<li>
<p><font color="red">调整游戏的逻辑更新速度</font></p>
<ul>
<li>比如<a href="https://baike.baidu.com/item/%e5%8f%b0%e6%b9%be%e5%a4%a9%e5%a0%82%e9%b8%9f%e8%b5%84%e8%ae%af%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8/8443017" target="_blank" rel="noopener noreffer">某神秘公司</a>慢到难以忍受的跑图和战斗</li>
</ul>
</li>
<li>
<p>本质是 “欺骗” 进程的时钟</p>
<ul>
<li>
<p>源头：闹钟、睡眠、<code>gettimeofday</code></p>
</li>
<li>
<p>拦截它们需要稍稍更复杂的技术</p>
</li>
</ul>
</li>
</ul>
<h3 id="更强大的游戏外挂">更强大的游戏外挂？</h3>
<ul>
<li>
<p>游戏也是程序，也是状态机</p>
<ul>
<li>
<p>通过 API 调用 (和系统调用) 最终取得状态、修改状态</p>
</li>
<li>
<p>想象成是一个 “为这个游戏专门设计的 gdb”</p>
</li>
</ul>
</li>
</ul>
<h3 id="代码注入-hooking">代码注入 (Hooking)</h3>
<ul>
<li>
<p>我们可以改内存，也可以改代码！</p>
</li>
<li>
<p>The Light Side</p>
<ul>
<li>
<p>“软件热补丁” <a href="https://jyywiki.cn/pages/OS/2022/demos/dsu.c" target="_blank" rel="noopener noreffer">dsu.c</a> (mprotect)</p>
</li>
<li>
<p><a href="https://dl.acm.org/doi/10.1145/1519065.1519085" target="_blank" rel="noopener noreffer">Ksplice: Automatic rebootless Kernel updates</a> (EuroSys'09)</p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span>     <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;In old function %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo_new</span><span class="p">()</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;In new function %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 48 b8 ff ff ff ff ff ff ff ff    movabs $0xffffffffffffffff,%rax
</span></span></span><span class="line"><span class="cl"><span class="c1">// ff e0                            jmpq   *%rax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">DSU</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">new</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cp">#define ROUNDDOWN(ptr) ((void *)(((uintptr_t)ptr) &amp; ~0xfff))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">size_t</span>    <span class="n">pg_size</span> <span class="o">=</span> <span class="n">sysconf</span><span class="p">(</span><span class="n">_SC_PAGESIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">pg_boundary</span> <span class="o">=</span> <span class="n">ROUNDDOWN</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span>         <span class="n">flags</span> <span class="o">=</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Dynamically updating... &#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mprotect</span><span class="p">(</span><span class="n">pg_boundary</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pg_size</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">memcpy</span><span class="p">(</span><span class="n">old</span> <span class="o">+</span>  <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;</span><span class="se">\x48\xb8</span><span class="s">&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">memcpy</span><span class="p">(</span><span class="n">old</span> <span class="o">+</span>  <span class="mi">2</span><span class="p">,</span>       <span class="o">&amp;</span><span class="n">new</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">memcpy</span><span class="p">(</span><span class="n">old</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="s">&#34;</span><span class="se">\xff\xe0</span><span class="s">&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">mprotect</span><span class="p">(</span><span class="n">pg_boundary</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pg_size</span><span class="p">,</span> <span class="n">flags</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">PROT_WRITE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Done&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">DSU</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">foo_new</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./dsu
</span></span><span class="line"><span class="cl">In old <span class="k">function</span> foo
</span></span><span class="line"><span class="cl">Dynamically updating... DoneIn new <span class="k">function</span> foo_new
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>原理同变速齿轮，修改代码，让代码跳转到自己写的部分去</p>
</li>
<li>
<p>详细版本<a href="https://zhuanlan.zhihu.com/p/425845057" target="_blank" rel="noopener noreffer">《软件动态更新技术》</a></p>
</li>
<li>
<p>The Dark Side</p>
<ul>
<li>
<p>对于外挂，代码可以<code>静态/动态/vtable/DLL...</code>注入</p>
</li>
<li>
<p><code>render(objects)</code> → <code>render_hacked(objects)</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="游戏外挂攻与防">游戏外挂：攻与防</h3>
<ul>
<li>
<p>控制/数据流完整性</p>
<ul>
<li>
<p>保护进程的完整性</p>
<ul>
<li>独立的进程/驱动做完整性验证</li>
</ul>
</li>
<li>
<p>保护隐私数据不被其他进程读写</p>
<ul>
<li>拦截向本进程的 <code>ReadProcessMemory</code> 和 <code>WriteProcessMemory</code>，发现后立即拒绝执行</li>
</ul>
</li>
<li>
<p>例子</p>
<ul>
<li><a href="https://irdeto.com/denuvo/anti-cheat/" target="_blank" rel="noopener noreffer">Denuvo Anti-Cheat</a>, <a href="https://dev.epicgames.com/docs/services/en-US/GameServices/AntiCheat/UsingAntiCheat/index.html" target="_blank" rel="noopener noreffer">Epic Anti-Cheat Interface</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>其他解决方法</p>
<ul>
<li>
<p><code>AI</code> 监控/社会工程学：如果你强得不正常，当然要盯上你</p>
</li>
<li>
<p>云/沙盒 (<code>Enclave</code>) 渲染：“计算不再信任操作系统”</p>
</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<h3 id="总结-1">总结</h3>
<ul>
<li>本次课回答的问题
<ul>
<li><strong>Q</strong>: 进程的地址空间是如何创建、如何更改的？</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Take-away messages</p>
<ul>
<li>
<p>进程的地址空间</p>
<ul>
<li>能文件关联的、带有访问权限的连续内存段
<ul>
<li>a.out, ld.so, libc.so, heap, stack, vdso</li>
</ul>
</li>
</ul>
</li>
<li>
<p>进程地址空间的管理 API</p>
<ul>
<li>mmap</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter11 操作系统上的进程</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter11/</link>
    <pubDate>Wed, 03 May 2023 15:41:15 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter11/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<ul>
<li>
<p>复习</p>
<ul>
<li>操作系统内核的启动：<code>CPU Reset</code> → <code>Firmware</code> → <code>Boot loader</code> → <code>Kernel _start()</code> → &hellip;</li>
</ul>
</li>
<li>
<p>本次课回答的问题</p>
<ul>
<li>
<p><code>Q1</code>: 操作系统启动后到底做了什么？</p>
</li>
<li>
<p><code>Q2</code>: 操作系统如何管理程序 (进程)？</p>
</li>
</ul>
</li>
<li>
<p>本次课主要内容</p>
<ul>
<li>
<p>虚拟化：操作系统上的进程</p>
</li>
<li>
<p>进程管理 <code>API</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="操作系统启动后到底做了什么">操作系统启动后到底做了什么？</h2>
<h3 id="从系统启动到第一个进程">从系统启动到第一个进程</h3>
<ul>
<li>回顾 <a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a> 的加载过程</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;am.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib-macros.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define MAX_CPU 8
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">union</span> <span class="n">task</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="n">task</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span>      <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Context</span>    <span class="o">*</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint8_t</span> <span class="n">stack</span><span class="p">[</span><span class="mi">8192</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Task</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="o">*</span><span class="n">currents</span><span class="p">[</span><span class="n">MAX_CPU</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define current currents[cpu_current()]
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// user-defined tasks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span>   <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span> <span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Thread-%s on CPU #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="k">volatile</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="n">tasks</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;A&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;B&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;D&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;E&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>操作系统会加载 “第一个程序”
<ul>
<li><code>RTFSC</code> (<code>latest Linux Kernel</code>)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/sbin/init&#34;</span><span class="p">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">      <span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/etc/init&#34;</span><span class="p">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">      <span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/bin/init&#34;</span><span class="p">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">      <span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/bin/sh&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">panic</span><span class="p">(</span><span class="s">&#34;No working init found.  Try passing init= option to kernel. &#34;</span>
</span></span><span class="line"><span class="cl">	      <span class="s">&#34;See Linux Documentation/admin-guide/init.rst for guidance.&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>$\uparrow$如果没有指定启动选项 <code>init=</code>，按照 “默认列表” 尝试一遍，如果都不行，内核就拒绝启动(<code>panic</code>的部分)</li>
<li><b>从此以后，<code>Linux Kernel</code> 就进入后台，成为 “中断/异常处理程序”</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ pstree             
</span></span><span class="line"><span class="cl">init<span class="o">(</span>Ubuntu-22.─┬─SessionLeader───Relay<span class="o">(</span>55<span class="o">)</span>───sh───sh───sh───node─┬─node─┬─zsh───pstree
</span></span><span class="line"><span class="cl">                │                                                 │      └─11*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 ├─node─┬─clangd.main───9*<span class="o">[{</span>clangd.main<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 │      ├─node───6*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 │      ├─node───7*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 │      └─11*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 ├─node───12*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 └─10*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                ├─SessionLeader───Relay<span class="o">(</span>486<span class="o">)</span>───node───6*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                ├─SessionLeader───Relay<span class="o">(</span>495<span class="o">)</span>───node───6*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                ├─init───<span class="o">{</span>init<span class="o">}</span>
</span></span><span class="line"><span class="cl">                └─<span class="o">{</span>init<span class="o">(</span>Ubuntu-22.<span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>$\uparrow$上面是<code>wsl</code>的，和真机启动方式不太一样</li>
<li>找了一台<code>Ubuntu</code>虚拟机，这回一样了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemd─┬─ModemManager───2*<span class="o">[{</span>ModemManager<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─NetworkManager───2*<span class="o">[{</span>NetworkManager<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─ToDesk_Service───13*<span class="o">[{</span>ToDesk_Service<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─VGAuthService
</span></span><span class="line"><span class="cl">        ├─accounts-daemon───2*<span class="o">[{</span>accounts-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─acpid
</span></span><span class="line"><span class="cl">        ├─anacron
</span></span><span class="line"><span class="cl">        ├─avahi-daemon───avahi-daemon
</span></span><span class="line"><span class="cl">        ├─bluetoothd
</span></span><span class="line"><span class="cl">        ├─colord───2*<span class="o">[{</span>colord<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─cron
</span></span><span class="line"><span class="cl">        ├─cups-browsed───2*<span class="o">[{</span>cups-browsed<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─cupsd
</span></span><span class="line"><span class="cl">        ├─dbus-daemon
</span></span><span class="line"><span class="cl">        ├─dockerd─┬─containerd───7*<span class="o">[{</span>containerd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         └─8*<span class="o">[{</span>dockerd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─fwupd───4*<span class="o">[{</span>fwupd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─gdm3─┬─gdm-session-wor─┬─gdm-wayland-ses─┬─gnome-session-b───2*<span class="o">[{</span>gnome-session-b<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │      │                 │                 └─2*<span class="o">[{</span>gdm-wayland-ses<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │      │                 └─2*<span class="o">[{</span>gdm-session-wor<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │      └─2*<span class="o">[{</span>gdm3<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─geoclue───2*<span class="o">[{</span>geoclue<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─gnome-keyring-d───3*<span class="o">[{</span>gnome-keyring-d<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─irqbalance───<span class="o">{</span>irqbalance<span class="o">}</span>
</span></span><span class="line"><span class="cl">        ├─2*<span class="o">[</span>kerneloops<span class="o">]</span>
</span></span><span class="line"><span class="cl">        ├─networkd-dispat
</span></span><span class="line"><span class="cl">        ├─packagekitd───2*<span class="o">[{</span>packagekitd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─polkitd───2*<span class="o">[{</span>polkitd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─power-profiles-───2*<span class="o">[{</span>power-profiles-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─rsyslogd───3*<span class="o">[{</span>rsyslogd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─rtkit-daemon───2*<span class="o">[{</span>rtkit-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─snapd───12*<span class="o">[{</span>snapd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─switcheroo-cont───2*<span class="o">[{</span>switcheroo-cont<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─systemd─┬─<span class="o">(</span>sd-pam<span class="o">)</span>
</span></span><span class="line"><span class="cl">        │         ├─at-spi2-registr───2*<span class="o">[{</span>at-spi2-registr<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─dbus-daemon
</span></span><span class="line"><span class="cl">        │         ├─dconf-service───2*<span class="o">[{</span>dconf-service<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─evolution-addre───5*<span class="o">[{</span>evolution-addre<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─evolution-calen───8*<span class="o">[{</span>evolution-calen<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─evolution-sourc───3*<span class="o">[{</span>evolution-sourc<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─2*<span class="o">[</span>gjs───4*<span class="o">[{</span>gjs<span class="o">}]]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-session-b─┬─at-spi-bus-laun─┬─dbus-daemon
</span></span><span class="line"><span class="cl">        │         │                 │                 └─3*<span class="o">[{</span>at-spi-bus-laun<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 ├─evolution-alarm───5*<span class="o">[{</span>evolution-alarm<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 ├─gsd-disk-utilit───2*<span class="o">[{</span>gsd-disk-utilit<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 ├─update-notifier───3*<span class="o">[{</span>update-notifier<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 └─3*<span class="o">[{</span>gnome-session-b<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-session-c───<span class="o">{</span>gnome-session-c<span class="o">}</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-shell─┬─Xwayland
</span></span><span class="line"><span class="cl">        │         │             ├─gjs───5*<span class="o">[{</span>gjs<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │             └─9*<span class="o">[{</span>gnome-shell<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-shell-cal───5*<span class="o">[{</span>gnome-shell-cal<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-terminal-─┬─bash───pstree
</span></span><span class="line"><span class="cl">        │         │                 └─3*<span class="o">[{</span>gnome-terminal-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─goa-daemon───3*<span class="o">[{</span>goa-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─goa-identity-se───2*<span class="o">[{</span>goa-identity-se<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-a11y-settin───3*<span class="o">[{</span>gsd-a11y-settin<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-color───3*<span class="o">[{</span>gsd-color<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-datetime───3*<span class="o">[{</span>gsd-datetime<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-housekeepin───3*<span class="o">[{</span>gsd-housekeepin<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-keyboard───3*<span class="o">[{</span>gsd-keyboard<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-media-keys───3*<span class="o">[{</span>gsd-media-keys<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-power───3*<span class="o">[{</span>gsd-power<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-print-notif───2*<span class="o">[{</span>gsd-print-notif<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-printer───2*<span class="o">[{</span>gsd-printer<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-rfkill───2*<span class="o">[{</span>gsd-rfkill<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-screensaver───2*<span class="o">[{</span>gsd-screensaver<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-sharing───3*<span class="o">[{</span>gsd-sharing<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-smartcard───3*<span class="o">[{</span>gsd-smartcard<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-sound───3*<span class="o">[{</span>gsd-sound<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-wacom───3*<span class="o">[{</span>gsd-wacom<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-xsettings───3*<span class="o">[{</span>gsd-xsettings<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-afc-volume───3*<span class="o">[{</span>gvfs-afc-volume<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-goa-volume───2*<span class="o">[{</span>gvfs-goa-volume<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-gphoto2-vo───2*<span class="o">[{</span>gvfs-gphoto2-vo<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-mtp-volume───2*<span class="o">[{</span>gvfs-mtp-volume<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-udisks2-vo───3*<span class="o">[{</span>gvfs-udisks2-vo<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfsd─┬─gvfsd-trash───2*<span class="o">[{</span>gvfsd-trash<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │       └─2*<span class="o">[{</span>gvfsd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfsd-fuse───5*<span class="o">[{</span>gvfsd-fuse<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfsd-metadata───2*<span class="o">[{</span>gvfsd-metadata<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─ibus-portal───2*<span class="o">[{</span>ibus-portal<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─ibus-x11───2*<span class="o">[{</span>ibus-x11<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─pipewire───<span class="o">{</span>pipewire<span class="o">}</span>
</span></span><span class="line"><span class="cl">        │         ├─pipewire-media-───<span class="o">{</span>pipewire-media-<span class="o">}</span>
</span></span><span class="line"><span class="cl">        │         ├─pulseaudio───3*<span class="o">[{</span>pulseaudio<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─sh───ibus-daemon─┬─ibus-engine-lib───3*<span class="o">[{</span>ibus-engine-lib<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                  ├─ibus-extension-───3*<span class="o">[{</span>ibus-extension-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                  ├─ibus-memconf───2*<span class="o">[{</span>ibus-memconf<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                  └─2*<span class="o">[{</span>ibus-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─snap-store───6*<span class="o">[{</span>snap-store<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─snapd-desktop-i───snapd-desktop-i───3*<span class="o">[{</span>snapd-desktop-i<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─tracker-miner-f───5*<span class="o">[{</span>tracker-miner-f<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─vmtoolsd───3*<span class="o">[{</span>vmtoolsd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─xdg-desktop-por───5*<span class="o">[{</span>xdg-desktop-por<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─2*<span class="o">[</span>xdg-desktop-por───3*<span class="o">[{</span>xdg-desktop-por<span class="o">}]]</span>
</span></span><span class="line"><span class="cl">        │         ├─xdg-document-po─┬─fusermount3
</span></span><span class="line"><span class="cl">        │         │                 └─5*<span class="o">[{</span>xdg-document-po<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         └─xdg-permission-───2*<span class="o">[{</span>xdg-permission-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─systemd-journal
</span></span><span class="line"><span class="cl">        ├─systemd-logind
</span></span><span class="line"><span class="cl">        ├─systemd-oomd
</span></span><span class="line"><span class="cl">        ├─systemd-resolve
</span></span><span class="line"><span class="cl">        ├─systemd-timesyn───<span class="o">{</span>systemd-timesyn<span class="o">}</span>
</span></span><span class="line"><span class="cl">        ├─systemd-udevd
</span></span><span class="line"><span class="cl">        ├─udisksd───4*<span class="o">[{</span>udisksd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─unattended-upgr───<span class="o">{</span>unattended-upgr<span class="o">}</span>
</span></span><span class="line"><span class="cl">        ├─upowerd───2*<span class="o">[{</span>upowerd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─vmtoolsd───3*<span class="o">[{</span>vmtoolsd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─vmware-vmblock-───2*<span class="o">[{</span>vmware-vmblock-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        └─wpa_supplicant
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b>操作系统只创建树根上面的进程，剩下所有的进程都是由树根上的进程创建的</b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls /sbin/init -l
</span></span><span class="line"><span class="cl">lrwxrwxrwx <span class="m">1</span> root root <span class="m">20</span> Sep <span class="m">10</span>  <span class="m">2022</span> /sbin/init -&gt; /lib/systemd/systemd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls /etc/init.d -l
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">3740</span> Feb <span class="m">23</span>  <span class="m">2022</span> apparmor
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2915</span> May <span class="m">10</span>  <span class="m">2022</span> apport
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1175</span> Dec <span class="m">26</span>  <span class="m">2021</span> binfmt-support
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1232</span> Nov <span class="m">23</span>  <span class="m">2021</span> console-setup.sh
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">3062</span> Mar <span class="m">18</span>  <span class="m">2021</span> cron
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">3152</span> Jun <span class="m">28</span>  <span class="m">2021</span> dbus
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1748</span> Feb <span class="m">21</span>  <span class="m">2022</span> hwclock.sh
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2638</span> Oct <span class="m">30</span>  <span class="m">2021</span> irqbalance
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1479</span> Jul <span class="m">24</span>  <span class="m">2021</span> keyboard-setup.sh
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2044</span> Jan  <span class="m">8</span>  <span class="m">2021</span> kmod
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1386</span> Feb <span class="m">23</span>  <span class="m">2022</span> plymouth
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root  <span class="m">760</span> Feb <span class="m">23</span>  <span class="m">2022</span> plymouth-log
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root  <span class="m">959</span> Feb <span class="m">25</span>  <span class="m">2022</span> procps
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">4417</span> Oct <span class="m">12</span>  <span class="m">2022</span> rsync
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1222</span> Feb <span class="m">18</span>  <span class="m">2021</span> screen-cleanup
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">6871</span> Mar  <span class="m">8</span>  <span class="m">2022</span> udev
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2083</span> Sep <span class="m">19</span>  <span class="m">2021</span> ufw
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1391</span> Feb <span class="m">19</span>  <span class="m">2021</span> unattended-upgrades
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1306</span> Feb <span class="m">21</span>  <span class="m">2022</span> uuidd
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2762</span> Oct <span class="m">19</span>  <span class="m">2021</span> x11-common
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls /bin/sh -l
</span></span><span class="line"><span class="cl">lrwxrwxrwx <span class="m">1</span> root root <span class="m">4</span> Feb <span class="m">11</span> 05:35 /bin/sh -&gt; dash
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>程序：状态机</p>
<ul>
<li>
<p>C 代码视角：语句</p>
</li>
<li>
<p>汇编/机器代码视角：指令</p>
</li>
<li>
<p>与操作系统交互的方式：<code>syscall</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="定制最小的-linux">定制最小的 Linux</h3>
<ul>
<li>
<p>没有存储设备，只有包含两个文件的 “<code>initramfs</code>”</p>
</li>
<li>
<p><a href="https://box.nju.edu.cn/f/3f67e092e1ba441187d9/?dl=1" target="_blank" rel="noopener noreffer">linux-minimal.zip</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ tree .
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">│   └── busybox <span class="o">(</span>可以在我们的Linux里直接执行<span class="o">)</span>
</span></span><span class="line"><span class="cl">└── init
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>加上 <code>vmlinuz</code> (内核镜像) 就可以在 <code>QEMU</code> 里启动了</li>
</ul>
<hr>
<ul>
<li>
<p>可以直接在文件系统中添加静态链接的二进制文件</p>
<ul>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a></p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/logisim.c" target="_blank" rel="noopener noreffer">logisim.c</a></p>
</li>
</ul>
</li>
<li>
<p><code>Makefile</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">initramfs</span> <span class="n">run</span> <span class="n">clean</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">$(</span><span class="nv">shell</span> <span class="nv">mkdir</span> -<span class="nv">p</span> <span class="nv">build</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">initramfs</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@cd initramfs <span class="o">&amp;&amp;</span> find . -print0 <span class="p">|</span> cpio --null -ov --format<span class="o">=</span>newc <span class="p">|</span> gzip -9 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  &gt; ../build/initramfs.cpio.gz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">run</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@qemu-system-x86_64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -nographic <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -serial mon:stdio <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -m <span class="m">128</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -kernel vmlinuz <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -initrd build/initramfs.cpio.gz <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -append <span class="s2">&#34;console=ttyS0 quiet acpi=off&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">clean</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@rm -rf build
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装<code>qemu</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt-get install qemu
</span></span><span class="line"><span class="cl">sudo apt-get install qemu-system
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make run
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>进入<code>qemu</code> $\rightarrow$ <code>Ctrl a; c</code></p>
</li>
<li>
<p>查看状态</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sh: can<span class="s1">&#39;t access tty; job control turned off
</span></span></span><span class="line"><span class="cl"><span class="s1">/ # QEMU 6.2.0 monitor - type &#39;</span>help<span class="err">&#39;</span> <span class="k">for</span> more information
</span></span><span class="line"><span class="cl"><span class="o">(</span>qemu<span class="o">)</span> info registers 
</span></span><span class="line"><span class="cl"><span class="nv">RAX</span><span class="o">=</span>0001a94000000000 <span class="nv">RBX</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">RCX</span><span class="o">=</span><span class="m">0000000000000001</span> <span class="nv">RDX</span><span class="o">=</span>0000000000000ca2
</span></span><span class="line"><span class="cl"><span class="nv">RSI</span><span class="o">=</span><span class="m">0000000000000087</span> <span class="nv">RDI</span><span class="o">=</span><span class="m">0000000000000087</span> <span class="nv">RBP</span><span class="o">=</span>ffffffffa3c03e28 <span class="nv">RSP</span><span class="o">=</span>ffffffffa3c03e08
</span></span><span class="line"><span class="cl"><span class="nv">R8</span> <span class="o">=</span>ffff88a5c781df80 <span class="nv">R9</span> <span class="o">=</span><span class="m">0000000000000200</span> <span class="nv">R10</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">R11</span><span class="o">=</span><span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">R12</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">R13</span><span class="o">=</span>ffffffffa3c13780 <span class="nv">R14</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">R15</span><span class="o">=</span><span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">RIP</span><span class="o">=</span>ffffffffa30d564e <span class="nv">RFL</span><span class="o">=</span><span class="m">00000246</span> <span class="o">[</span>---Z-P-<span class="o">]</span> <span class="nv">CPL</span><span class="o">=</span><span class="m">0</span> <span class="nv">II</span><span class="o">=</span><span class="m">0</span> <span class="nv">A20</span><span class="o">=</span><span class="m">1</span> <span class="nv">SMM</span><span class="o">=</span><span class="m">0</span> <span class="nv">HLT</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nv">ES</span> <span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">CS</span> <span class="o">=</span><span class="m">0010</span> <span class="m">0000000000000000</span> ffffffff 00af9b00 <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> CS64 <span class="o">[</span>-RA<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">SS</span> <span class="o">=</span><span class="m">0018</span> <span class="m">0000000000000000</span> ffffffff 00cf9300 <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> DS   <span class="o">[</span>-WA<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">DS</span> <span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FS</span> <span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">GS</span> <span class="o">=</span><span class="m">0000</span> ffff88a5c7800000 <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">LDT</span><span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00008200</span> <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> LDT
</span></span><span class="line"><span class="cl"><span class="nv">TR</span> <span class="o">=</span><span class="m">0040</span> fffffe0000003000 0000206f <span class="m">00008900</span> <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> TSS64-avl
</span></span><span class="line"><span class="cl"><span class="nv">GDT</span><span class="o">=</span>     fffffe0000001000 0000007f
</span></span><span class="line"><span class="cl"><span class="nv">IDT</span><span class="o">=</span>     fffffe0000000000 00000fff
</span></span><span class="line"><span class="cl"><span class="nv">CR0</span><span class="o">=</span><span class="m">80050033</span> <span class="nv">CR2</span><span class="o">=</span>0000000000e22c18 <span class="nv">CR3</span><span class="o">=</span>0000000003ca8000 <span class="nv">CR4</span><span class="o">=</span>000006f0
</span></span><span class="line"><span class="cl"><span class="nv">DR0</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">DR1</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">DR2</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">DR3</span><span class="o">=</span><span class="m">0000000000000000</span> 
</span></span><span class="line"><span class="cl"><span class="nv">DR6</span><span class="o">=</span>00000000ffff0ff0 <span class="nv">DR7</span><span class="o">=</span><span class="m">0000000000000400</span>
</span></span><span class="line"><span class="cl"><span class="nv">EFER</span><span class="o">=</span>0000000000000d01
</span></span><span class="line"><span class="cl"><span class="nv">FCW</span><span class="o">=</span>037f <span class="nv">FSW</span><span class="o">=</span><span class="m">0000</span> <span class="o">[</span><span class="nv">ST</span><span class="o">=</span>0<span class="o">]</span> <span class="nv">FTW</span><span class="o">=</span><span class="m">00</span> <span class="nv">MXCSR</span><span class="o">=</span>00001f80
</span></span><span class="line"><span class="cl"><span class="nv">FPR0</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR1</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FPR2</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR3</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FPR4</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR5</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FPR6</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR7</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM00</span><span class="o">=</span>0000000000e20450 <span class="m">0000000000000400</span> <span class="nv">XMM01</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM02</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM03</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM04</span><span class="o">=</span>ffffffffffffffff ffffffff00000000 <span class="nv">XMM05</span><span class="o">=</span><span class="m">0000000048094038</span> <span class="m">3028201810080072</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM06</span><span class="o">=</span>0000000000ff0000 000000ff00000000 <span class="nv">XMM07</span><span class="o">=</span><span class="m">0000000400000004</span> <span class="m">0000000400000004</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM08</span><span class="o">=</span>00000000008d93e0 00000000008d93e0 <span class="nv">XMM09</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM10</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM11</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM12</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM13</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM14</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM15</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="变魔术时间到">变魔术时间到</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">c1</span><span class="o">=</span><span class="s2">&#34;arch ash base64 cat chattr chgrp chmod chown conspy cp cpio cttyhack date dd df dmesg dnsdomainname dumpkmap echo ed egrep false fatattr fdflush fgrep fsync getopt grep gunzip gzip hostname hush ionice iostat ipcalc kbd_mode kill link linux32 linux64 ln login ls lsattr lzop makemime mkdir mknod mktemp more mount mountpoint mpstat mt mv netstat nice nuke pidof ping ping6 pipe_progress printenv ps pwd reformime resume rev rm rmdir rpm run-parts scriptreplay sed setarch setpriv setserial sh sleep stat stty su sync tar touch true umount uname usleep vi watch zcat&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">c2</span><span class="o">=</span><span class="s2">&#34;[ [[ awk basename bc beep blkdiscard bunzip2 bzcat bzip2 cal chpst chrt chvt cksum clear cmp comm crontab cryptpw cut dc deallocvt diff dirname dos2unix dpkg dpkg-deb du dumpleases eject env envdir envuidgid expand expr factor fallocate fgconsole find flock fold free ftpget ftpput fuser groups hd head hexdump hexedit hostid id install ipcrm ipcs killall last less logger logname lpq lpr lsof lspci lsscsi lsusb lzcat lzma man md5sum mesg microcom mkfifo mkpasswd nc nl nmeter nohup nproc nsenter nslookup od openvt passwd paste patch pgrep pkill pmap printf pscan&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">c3</span><span class="o">=</span><span class="s2">&#34;pstree pwdx readlink realpath renice reset resize rpm2cpio runsv runsvdir rx script seq setfattr setkeycodes setsid setuidgid sha1sum sha256sum sha3sum sha512sum showkey shred shuf smemcap softlimit sort split ssl_client strings sum sv svc svok tac tail taskset tcpsvd tee telnet test tftp time timeout top tr traceroute traceroute6 truncate ts tty ttysize udhcpc6 udpsvd unexpand uniq unix2dos unlink unlzma unshare unxz unzip uptime users uudecode uuencode vlock volname w wall wc wget which who whoami whois xargs xxd xz xzcat yes&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> cmd in <span class="nv">$c1</span> <span class="nv">$c2</span> <span class="nv">$c3</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  /bin/busybox ln -s /bin/busybox /bin/<span class="nv">$cmd</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">mkdir -p /proc <span class="o">&amp;&amp;</span> mount -t proc  none /proc
</span></span><span class="line"><span class="cl">mkdir -p /sys  <span class="o">&amp;&amp;</span> mount -t sysfs none /sys
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PS1</span><span class="o">=</span><span class="s1">&#39;(linux) &#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>试试 <code>adb shell</code> (<a href="https://landley.net/toybox/" target="_blank" rel="noopener noreffer">toybox</a>)</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter11-1.png" title="/img/Operating System/chapter11-1.png" data-thumbnail="/img/Operating System/chapter11-1.png" data-sub-html="<h2>创建链接，创建目录，挂载了一些内核的文件系统，将操作系统一些内部状态暴露给应用程序 -&gt; 变成linux</h2>">
        
    </a><figcaption class="image-caption"><code>创建链接，创建目录，挂载了一些内核的文件系统，将操作系统一些内部状态暴露给应用程序 -&gt; 变成linux</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter11-2.png" title="/img/Operating System/chapter11-2.png" data-thumbnail="/img/Operating System/chapter11-2.png" data-sub-html="<h2>命令也可以用</h2>">
        
    </a><figcaption class="image-caption"><code>命令也可以用</code></figcaption>
    </figure>
<ul>
<li>过程</li>
</ul>
<div class="mermaid" id="id-1"></div>
<h3 id="例子noilinux-lite">例子：NOILinux-lite</h3>
<ul>
<li>
<p>2021 年，<code>CCF</code> 以迅雷不及掩耳盗铃之势发布了 <code>NOILinux 2.0</code></p>
<ul>
<li>
<p><code>Ubuntu 20.04 Desktop (x86-64 only)</code></p>
</li>
<li>
<p>真就不管那些 <code>32-bit</code> 的老爷机和老爷系统的死活了？</p>
</li>
</ul>
</li>
<li>
<p>和刚才的 “最小” 系统但本质一样</p>
<ul>
<li>
<p>有更多设备 (磁盘、网卡等)</p>
</li>
<li>
<p><code>initramfs</code> 里挂载了磁盘</p>
</li>
<li>
<p>磁盘里安装了最少的编译运行环境 (<code>g++, ...</code>) 和一个<code>Web</code>服务</p>
</li>
<li>
<p><code>switch_root</code> (<code>pivot_root</code> 系统调用) 完成 “启动”</p>
</li>
</ul>
</li>
</ul>
<h3 id="小结应用程序视角的操作系统">小结：应用程序视角的操作系统</h3>
<ul>
<li><code>Linux</code> 操作系统启动流程
<ul>
<li><code>CPU Reset</code> → <code>Firmware</code> → <code>Loader</code> →<code> Kernel _start()</code> → 第一个程序 <code>/bin/init</code> → 程序 (状态机) 执行 + 系统调用</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>操作系统为 (所有) 程序提供 <code>API</code></p>
<ul>
<li>
<p>进程 (状态机) 管理</p>
<ul>
<li><b><font color="red"><code>fork, execve, exit</code> - 状态机的创建/改变/删除 ← 今天的主题</font></b></li>
</ul>
</li>
<li>
<p>存储（内存） (地址空间) 管理</p>
<ul>
<li><code>mmap</code> - 虚拟地址空间管理</li>
</ul>
</li>
<li>
<p>文件 (数据对象) 管理</p>
<ul>
<li><code>open, close, read, write</code> - 文件访问管理
<ul>
<li><code>mkdir, link, unlink</code> - 目录管理</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="fork">fork()</h2>
<h3 id="操作系统状态机的管理者">操作系统：状态机的管理者</h3>
<ul>
<li>
<p>C 程序 = 状态机</p>
<ul>
<li>
<p>初始状态：<code>main(argc, argv)</code></p>
</li>
<li>
<p>程序可以直接在处理器上执行</p>
</li>
</ul>
</li>
<li>
<p><font color="red">虚拟化：操作系统在物理内存中保存多个状态机（管理好多个状态机，每一次都可以选择一个状态机执行一步）</font></p>
</li>
<li>
<p>通过<b>虚拟内存</b>实现<b>每次 “拿出来一个执行”</b></p>
</li>
<li>
<p><b>中断后进入操作系统代码，“换一个执行”</b></p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p><font color="red"><b>除了fork的返回值<code>pid</code>，剩下的都一样，并且互相独立（第一个进程的指针访问不了第二个进程的内存）</b></font></p>
</li>
<li>
<p><b>之后进入并发状态，执行那个由操作系统决定</b></p>
</li>
</ul>
<h3 id="状态机管理创建状态机">状态机管理：创建状态机</h3>
<blockquote>
<p>如果要创建状态机，我们应该提供什么样的<code> API</code>？</p>
</blockquote>
<ul>
<li>
<p><code>UNIX</code> 的答案: <code>fork</code></p>
<ul>
<li>做一份状态机完整的复制 (内存、寄存器现场)</li>
</ul>
</li>
<li>
<p><code>int fork();</code></p>
<ul>
<li>
<p>立即复制状态机 (完整的内存)</p>
</li>
<li>
<p>新创建进程返回 0</p>
</li>
<li>
<p>执行 <code>fork</code> 的进程返回子进程的进程号</p>
</li>
</ul>
</li>
</ul>
<h3 id="fork-bomb">Fork Bomb</h3>
<ul>
<li>
<p>模拟状态机需要资源</p>
<ul>
<li>
<p>只要不停地创建进程，系统还是会挂掉的</p>
</li>
<li>
<p><code>Don't try it (or try it in docker)</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="代码解析-fork-bomb">代码解析: Fork Bomb</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">:<span class="o">(){</span> :<span class="p">|</span>:<span class="p">&amp;</span><span class="o">}</span><span class="p">;</span>:   <span class="c1"># 刚才的一行版本</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">:<span class="o">()</span> <span class="o">{</span>         <span class="c1"># 格式化一下</span>
</span></span><span class="line"><span class="cl">  : <span class="p">|</span> : <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span><span class="p">;</span> :
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fork<span class="o">()</span> <span class="o">{</span>      <span class="c1"># bash: 允许冒号作为标识符……</span>
</span></span><span class="line"><span class="cl">  fork <span class="p">|</span> fork <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span><span class="p">;</span> fork
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>具体过程</li>
</ul>
<div class="mermaid" id="id-3"></div>
<h3 id="这次你们记住-fork-了">这次你们记住 Fork 了！</h3>
<ul>
<li>因为状态机是复制的，因此总能找到 “父子关系”
<ul>
<li>因此有了进程树 (<code>pstree</code>)</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemd-+-accounts-daemon---2*<span class="o">[{</span>accounts-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-agetty
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-atd
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-automount---2*<span class="o">[{</span>automount<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-avahi-daemon---avahi-daemon
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-cron
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-dbus-daemon
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-irqbalance---<span class="o">{</span>irqbalance<span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-lxcfs---7*<span class="o">[{</span>lxcfs<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="理解-fork-习题-1">理解 fork: 习题 (1)</h3>
<ul>
<li>试着拿出一张纸，写出以下程序的输出结果
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/fork-demo.c" target="_blank" rel="noopener noreffer">fork-demo.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid1</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid2</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid3</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello World from (%d, %d, %d)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">pid1</span><span class="p">,</span> <span class="n">pid2</span><span class="p">,</span> <span class="n">pid3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>参考原来的<code>OS</code>作业</li>
</ul>
<blockquote>
<p>Including the initial parent process, how many processes are created by the program shown in Figure 3.31?</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* fork a child process */</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* fork another child process */</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* and fork another */</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><div class="mermaid" id="id-4"></div>
$$
1+3+3+1=8
$$</p>
<h3 id="理解-fork-习题-2">理解 fork: 习题 (2)</h3>
<p>问以下程序的输出结果</p>
<ul>
<li>一个更好的版本: <a href="https://jyywiki.cn/pages/OS/2022/demos/fork-printf.c" target="_blank" rel="noopener noreffer">fork-printf.c</a>
<ul>
<li>用状态机的视角再试一次</li>
<li>试一试：<code>./a.out</code> v.s. <code>./a.out | cat</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/wait.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf        
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="m">8</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>why ?</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> cat
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>???</code></li>
</ul>
<blockquote>
<ul>
<li>计算机系统里没有魔法。机器永远是对的。</li>
</ul>
</blockquote>
<ul>
<li>先看一个例子<code>demo.c</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc demo.c -o demo   
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./demo
</span></span><span class="line"><span class="cl">zsh: segmentation fault  ./demo
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>没有输出<code>Hello</code></p>
</li>
<li>
<p>改一下</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc demo.c -o demo
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./demo            
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">zsh: segmentation fault  ./demo
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>联系之前的学校的实验</li>
</ul>
<p><code>main.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/wait.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Error!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">execl</span><span class="p">(</span><span class="s">&#34;child&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;c&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>child.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;b&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<ul>
<li>缓冲区问题</li>
</ul>
<p>在调用<code>fork()</code>前先<code>printf(&quot;a&quot;)</code>，在<code>fork()</code>后的子进程里<code>printf(&quot;b&quot;)</code>，这样结果按理来说是打印<code>&quot;ab&quot;</code>，但是运行出来反而是<code>&quot;ba&quot;</code>。 这个问题的原因是<code>c</code>语言的输出缓冲，<b>在调用<code>printf()</code>函数时，数据先被存放在缓冲区中，待缓冲区满了或者遇到了换行符<code>&quot;\n&quot;</code>时才会输出到屏幕上。</b><code>printf(&quot;a&quot;)</code>语句输出字符<code>&quot;a&quot;</code>，但由于缓冲区未满，字符<code>&quot;a&quot;</code>并没有被立即输出。<b>当程序调用<code>fork()</code>函数创建子进程时，子进程也继承了父进程的缓冲区，这时缓冲区中的数据包括字符&quot;a&quot;也被复制到了子进程的缓冲区中。</b>接着，在子进程中，<code>printf(&quot;b&quot;)</code>语句输出字符<code>&quot;b&quot;</code>，由于子进程的缓冲区已经满了，因此字符<code>&quot;a&quot;</code>和字符<code>&quot;b&quot;</code>都被输出到屏幕上，此时的输出结果是<code>&quot;ba&quot;</code>。</p>
<p>解决的方法是在<code>printf(&quot;a&quot;)</code>语句后加上<code>fflush(stdout)</code>语句，强制将缓冲区的数据输出到屏幕上，这样输出的结果就是<code>&quot;ab&quot;</code>。</p>
</blockquote>
<div class="mermaid" id="id-5"></div>
<ul>
<li>
<p><code>linebuffer</code>：遇到<code>\n</code>通过系统调用将缓冲区的内容输出</p>
</li>
<li>
<p><code>fullbuffer</code>：到达设定容量后才会将缓冲区的内容输出</p>
</li>
</ul>
<hr>
<ul>
<li>下面来分析</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> cat
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span></code></pre></td></tr></table>
</div>
</div><div class="mermaid" id="id-6"></div>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter11-3.jpg" title="/img/Operating System/chapter11-3.jpg" data-thumbnail="/img/Operating System/chapter11-3.jpg" data-sub-html="<h2>树状图</h2>">
        
    </a><figcaption class="image-caption"><code>树状图</code></figcaption>
    </figure>
<ul>
<li>另一种解决方案：<code>setbuf(stdout,NULL);</code>强行将标准输出流设置为不缓冲</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/wait.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> cat             
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">                                                                                                                                                   
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="m">6</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="理解-fork-习题-3">理解 fork: 习题 (3)</h3>
<ul>
<li>
<p>多线程程序的某个线程执行 <code>fork()</code>，应该发生什么？</p>
<ul>
<li>这是个很有趣的问题：创造 <code>fork</code> 时创始人并没有考虑线程</li>
</ul>
</li>
<li>
<p>我们可能作出以下设计：</p>
<ul>
<li>
<p>仅有执行 <code>fork</code> 的线程被复制，其他线程 “卡死”</p>
</li>
<li>
<p>仅有执行 <code>fork</code> 的线程被复制，其他线程退出</p>
</li>
<li>
<p>所有的线程都被复制并继续执行</p>
<ul>
<li>这三种设计分别会带来什么问题？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="execve">execve()</h2>
<h3 id="状态机管理替换状态机">状态机管理：替换状态机</h3>
<blockquote>
<p>光有 <code>fork</code> 还不够，怎么 “执行别的程序”？</p>
</blockquote>
<ul>
<li><code>UNIX</code> 的答案: <code>execve</code>
<ul>
<li><b>将当前运行的状态机<font color="red">重置</font>成成另一个程序的初始状态</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">execve</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">envp</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>执行名为 <code>filename</code> 的程序</p>
</li>
<li>
<p>允许对新状态机设置参数 <code>argv</code> (v) 和环境变量 <code>envp</code> (e)，数组形式，以空指针<code>NULL</code>来结尾</p>
<ul>
<li>刚好对应了 <code>main()</code> 的参数！</li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/execve-demo.c" target="_blank" rel="noopener noreffer">execve-demo.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;/bin/bash&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;env&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">envp</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;HELLO=WORLD&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">execve</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./execve-demo
</span></span><span class="line"><span class="cl"><span class="nv">PWD</span><span class="o">=</span>/mnt/d/work <span class="k">for</span> vscode/chapter11
</span></span><span class="line"><span class="cl"><span class="nv">HELLO</span><span class="o">=</span>WORLD
</span></span><span class="line"><span class="cl"><span class="nv">SHLVL</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="nv">_</span><span class="o">=</span>/usr/bin/env
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>printf</code>没有被执行（原来的状态机没有了）</li>
<li>参照</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ bash -c ls
</span></span><span class="line"><span class="cl">demo  demo.c  execve-demo  execve-demo.c  fork-demo  fork-demo.c  fork-printf  fork-printf.c  l.zip  linux-minimal  thread-os.c
</span></span><span class="line"><span class="cl">                                                                                                                                                   
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ bash -c env
</span></span><span class="line"><span class="cl"><span class="nv">SHELL</span><span class="o">=</span>/usr/bin/zsh
</span></span><span class="line"><span class="cl"><span class="nv">USER_ZDOTDIR</span><span class="o">=</span>/home/jungle
</span></span><span class="line"><span class="cl"><span class="nv">COLORTERM</span><span class="o">=</span>truecolor
</span></span><span class="line"><span class="cl"><span class="nv">WSL2_GUI_APPS_ENABLED</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nv">TERM_PROGRAM_VERSION</span><span class="o">=</span>1.78.0
</span></span><span class="line"><span class="cl"><span class="nv">WSL_DISTRO_NAME</span><span class="o">=</span>Ubuntu-22.04
</span></span><span class="line"><span class="cl"><span class="nv">LESS_TERMCAP_se</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">LESS_TERMCAP_so</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">NAME</span><span class="o">=</span>LAPTOP-A7S3TAA4
</span></span><span class="line"><span class="cl"><span class="nv">PWD</span><span class="o">=</span>/mnt/d/work <span class="k">for</span> vscode/chapter11
</span></span><span class="line"><span class="cl"><span class="nv">LOGNAME</span><span class="o">=</span>jungle
</span></span><span class="line"><span class="cl"><span class="nv">_</span><span class="o">=</span>/usr/bin/env
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="环境变量">环境变量</h3>
<p>“应用程序执行的环境”</p>
<ul>
<li>
<p>使用<code>env</code>命令查看</p>
<ul>
<li><code>PATH</code>: 可执行文件搜索路径</li>
<li><code>PWD</code>: 当前路径</li>
<li><code>HOME</code>: home 目录</li>
<li><code>DISPLAY</code>: 图形输出</li>
<li><code>PS1</code>: shell 的提示符</li>
</ul>
</li>
<li>
<dl>
<dt><code>export</code></dt>
<dd>
<p>告诉 shell 在创建子进程时设置环境变量</p>
</dd>
</dl>
<ul>
<li>小技巧：<code>export ARCH=x86_64-qemu</code> 或 <code>export ARCH=native</code></li>
<li>上学期的 <code>AM_HOME</code> 终于破案了（这是南大的，邮专上学期还在写数据结构）</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ <span class="nb">export</span> <span class="nv">HELLO</span><span class="o">=</span>WORLD
</span></span><span class="line"><span class="cl">                                                                                                                                                   
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ env <span class="p">|</span> grep HELLO
</span></span><span class="line"><span class="cl"><span class="nv">HELLO</span><span class="o">=</span>WORLD
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter11-4.png" title="/img/Operating System/chapter11-4.png" data-thumbnail="/img/Operating System/chapter11-4.png" data-sub-html="<h2>第一个调用总是execve()</h2>">
        
    </a><figcaption class="image-caption"><code>第一个调用总是execve()</code></figcaption>
    </figure>
<ul>
<li>
<p>参考<a href="https://jungle430.github.io/posts/operating-system/support2/#%E4%BB%8E%E6%88%91%E4%BB%AC%E7%BB%88%E7%AB%AF%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%88%B0%E7%A8%8B%E5%BA%8F%E8%A2%AB%E8%BD%BD%E5%85%A5%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreffer">《Linux x86 Program Start Up or - How the heck do we get to main()?》</a></p>
</li>
<li>
<p>执行<code>execve(bash)</code>的调用</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f373bcba000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f373bc74000, 46367<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;/bin/bash&#34;</span>, <span class="o">[</span><span class="s2">&#34;/bin/bash&#34;</span>, <span class="s2">&#34;-c&#34;</span>, <span class="s2">&#34;env&#34;</span><span class="o">]</span>, 0x7fffa5c787c0 /* <span class="m">1</span> var */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x559dfe4ca000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffe8ef996f0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f476f6f0000
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>最终输出的<code>syscall</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;PWD=/mnt/d/work for vscode/chapt&#34;</span>..., <span class="nv">37PWD</span><span class="o">=</span>/mnt/d/work <span class="k">for</span> vscode/chapter11
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">37</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;HELLO=WORLD\n&#34;</span>, <span class="nv">12HELLO</span><span class="o">=</span>WORLD
</span></span><span class="line"><span class="cl"><span class="o">)</span>           <span class="o">=</span> <span class="m">12</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;SHLVL=0\n&#34;</span>, <span class="nv">8SHLVL</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>                <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;_=/usr/bin/env\n&#34;</span>, <span class="nv">15_</span><span class="o">=</span>/usr/bin/env
</span></span><span class="line"><span class="cl"><span class="o">)</span>        <span class="o">=</span> <span class="m">15</span>
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="环境变量path">环境变量：<code>PATH</code></h3>
<ul>
<li>可执行文件搜索路径
<ul>
<li>还记得 <code>gcc</code> 的 <code>strace</code> 结果吗？</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/local/sbin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/local/bin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/sbin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/bin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这个搜索顺序恰好是 <code>PATH</code> 里指定的顺序</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;&#34;</span> /usr/bin/gcc a.c
</span></span><span class="line"><span class="cl">gcc: error trying to <span class="nb">exec</span> <span class="s1">&#39;as&#39;</span>: execvp: No such file or directory
</span></span><span class="line"><span class="cl">$ <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/usr/bin/&#34;</span> gcc a.c
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b><font color="red"><code>fork</code>是状态机的复制，<code>execve</code>是状态机的重置，环境变量就是重置状态机的参数</font></b></li>
</ul>
<h2 id="_exit">_exit()</h2>
<h3 id="状态机管理终止状态机">状态机管理：终止状态机</h3>
<blockquote>
<p>有了<code> fork</code>, <code>execve</code> 我们就能自由执行任何程序了，最后只缺一个销毁状态机的函数！</p>
</blockquote>
<ul>
<li><code>UNIX</code> 的答案: <code>_exit</code>
<ul>
<li>立即摧毁状态机</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">_exit</span><span class="p">(</span><span class="kt">int</span> <span class="n">status</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>销毁当前状态机，并允许有一个返回值</p>
</li>
<li>
<p>子进程终止会通知父进程 (后续课程解释)</p>
</li>
<li>
<p>这个简单……</p>
<ul>
<li>但问题来了：多线程程序怎么办？</li>
</ul>
</li>
</ul>
<h3 id="结束程序执行的三种方法">结束程序执行的三种方法</h3>
<ul>
<li>
<p><code>exit</code> 的几种写法 (它们是<font color="red">不同</font>)</p>
<ul>
<li>
<p><code>exit(0)</code> $\rightarrow$ <code>stdlib.h</code> 中声明的<code>libc</code>函数</p>
<ul>
<li>会调用 <code>atexit</code></li>
</ul>
</li>
<li>
<p><code>_exit(0)</code> - glibc 的 syscall wrapper</p>
<ul>
<li>执行 “<code>exit_group</code>” 系统调用终止整个进程 (所有线程)
<ul>
<li>细心的同学已经在 strace 中发现了</li>
</ul>
</li>
<li>不会调用 <code>atexit</code></li>
</ul>
</li>
<li>
<p><code>syscall(SYS_exit, 0)</code></p>
<ul>
<li>执行 “<code>exit</code>” 系统调用终止当前线程</li>
<li>不会调用 <code>atexit</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="不妨试一试">不妨试一试</h3>
<ul>
<li>结束当前进程执行的四种方式
<ul>
<li><code>return</code>, <code>exit</code>, <code>_exit</code>, <code>syscall</code></li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/exit-demo.c" target="_blank" rel="noopener noreffer">exit-demo.c</a>
<ul>
<li>用<code>strace</code>观察程序的执行</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Goodbye, Cruel OS World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">atexit</span><span class="p">(</span><span class="n">func</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;exit&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;_exit&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;__exit&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">syscall</span><span class="p">(</span><span class="n">SYS_exit</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./exit-demo
</span></span><span class="line"><span class="cl">Goodbye, Cruel OS World!
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./exit-demo <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">Goodbye, Cruel OS World!
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用<code>static</code>编译，省去链接过程，便于查看<code>strace</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./exit-demo
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./exit-demo&#34;</span><span class="o">]</span>, 0x7ffdaa2866a0 /* <span class="m">42</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffd390434e0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x9b6000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x9b6dc0<span class="o">)</span>                           <span class="o">=</span> 0x9b6dc0
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x9b63c0<span class="o">)</span>       <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x9b6690<span class="o">)</span>               <span class="o">=</span> <span class="m">8090</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x9b66a0, 24<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x9b6d60, 0x20, 0, 0x53053053<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter11&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xfc\x1b\x9a\x3b\x0c\x0d\xf6\x62&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x9d7dc0<span class="o">)</span>                           <span class="o">=</span> 0x9d7dc0
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x9d8000<span class="o">)</span>                           <span class="o">=</span> 0x9d8000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0x7<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;Goodbye, Cruel OS World!\n&#34;</span>, 25Goodbye, Cruel OS World!
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">25</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>1<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./exit-demo _exit
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="s2">&#34;_exit&#34;</span><span class="o">]</span>, 0x7ffdcbeb2108 /* <span class="m">42</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7fff2fcb4900<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x1346000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1346dc0<span class="o">)</span>                          <span class="o">=</span> 0x1346dc0
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x13463c0<span class="o">)</span>      <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x1346690<span class="o">)</span>              <span class="o">=</span> <span class="m">8124</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x13466a0, 24<span class="o">)</span>          <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x1346d60, 0x20, 0, 0x53053053<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter11&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x1f\x9d\x12\x25\xe1\x65\xc9\x7b&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1367dc0<span class="o">)</span>                          <span class="o">=</span> 0x1367dc0
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1368000<span class="o">)</span>                          <span class="o">=</span> 0x1368000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./exit-demo _exit   
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>没有<code>Goodbye</code>了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./exit-demo __exit
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="s2">&#34;__exit&#34;</span><span class="o">]</span>, 0x7ffeca752f48 /* <span class="m">42</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffe37ad6940<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x15df000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x15dfdc0<span class="o">)</span>                          <span class="o">=</span> 0x15dfdc0
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x15df3c0<span class="o">)</span>      <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x15df690<span class="o">)</span>              <span class="o">=</span> <span class="m">8256</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x15df6a0, 24<span class="o">)</span>          <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x15dfd60, 0x20, 0, 0x53053053<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter11&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xed\x64\xb4\xdb\x93\xb2\x77\xd0&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1600dc0<span class="o">)</span>                          <span class="o">=</span> 0x1600dc0
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1601000<span class="o">)</span>                          <span class="o">=</span> 0x1601000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>0<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>exit</code>只关闭一个线程，<code>_exit</code> $\rightarrow^{Syscall}$ <code>exit_group</code>会把整个所有的线程都删掉</li>
<li><code>linux</code>默认用的<code>_exit</code>，安全</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>本次课回答的问题</p>
<ul>
<li>
<p><strong>Q1</strong>: 操作系统启动后到底做了什么？</p>
</li>
<li>
<p><strong>Q2</strong>: 操作系统如何管理程序 (进程)？</p>
</li>
</ul>
</li>
<li>
<p>Take-away messages</p>
<ul>
<li>
<p>对 “操作系统” 的完整理解</p>
</li>
<li>
<p>CPU Reset → Firmware → Loader → Kernel <code>_start()</code> → 执行第一个程序 <code>/bin/init</code> → 中断/异常处理程序</p>
</li>
<li>
<p>一个最小的 Linux 系统的例子</p>
</li>
</ul>
</li>
<li>
<p>进程管理 API</p>
<ul>
<li>fork, execve, exit: 状态机的复制、重置、销毁</li>
<li>理论上就可以实现 “各种功能” 了！</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>操作系统——内存管理</title>
    <link>https://Jungle430.github.io/posts/operating-system/support3/</link>
    <pubDate>Fri, 28 Apr 2023 17:34:50 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/support3/</guid>
    <description><![CDATA[<h1 id="内存管理">内存管理</h1>
<h2 id="导读">导读</h2>
<ul>
<li>
<p>物理内存是操作系统需要管理的一个重要资源，让运行在一台机器上的多个应用程序不用“争抢”，都能随时得到想要的任意多的内存，是操作系统的想要达到的理想目标。<b>提高系统物理内存的动态使用效率，通过隔离应用的物理内存空间保证应用间的安全性，把“有限”物理内存变成“无限”虚拟内存，是操作系统的一系列重要的目标，</b>本章展现了操作系统为实现“理想”而要扩展的一系列功能</p>
<ul>
<li>通过动态内存分配，<b>提高了应用程序对内存的动态使用效率</b></li>
<li>通过页表的<b>虚实内存映射机制</b>，简化了编译器对应用的地址空间设置</li>
<li>通过页表的虚实内存映射机制，加强了应用之间，应用与内核之间的内存隔离，增强了系统安全</li>
<li>通过页表的虚实内存映射机制，可以实现空分复用（提出，但没有实现）</li>
</ul>
</li>
<li>
<p>上一章，我们分别实现了多道程序和分时多任务系统，它们的核心机制都是任务切换。由于多道程序和分时多任务系统的设计初衷不同，它们在任务切换的时机和策略也不同。有趣的一点是，任务切换机制对于应用是完全<b>透明(Transparent)</b>的，<b><font color="red">应用可以不对内核实现该机制的策略做任何假定（除非要进行某些针对性优化），甚至可以完全不知道这机制的存在</font></b></p>
</li>
<li>
<p><font color="red"><b>在大多数应用（也就是应用开发者）的视角中，它们会独占一整个 CPU 和特定（连续或不连续）的内存空间（平时写程序还真是这样）</b></font></p>
</li>
<li>
<p>当然，通过上一章的学习，我们知道<u>在现代操作系统中，出于公平性的考虑，我们极少会让独占<code>CPU</code>这种情况发生</u></p>
</li>
<li>
<p>所以应用自认为的独占<code>CPU</code>只是内核想让应用看到的一种<b>幻象(Illusion)</b>，而<code>CPU</code>计算资源被<b>时分复用(TDM, Time-Division Multiplexing)</b>的实质被内核通过恰当的抽象隐藏了起来，<b>对应用不可见</b></p>
</li>
<li>
<p>与之相对，我们目前还没有对内存管理功能进行进一步拓展，仅仅是把程序放到某处的物理内存中</p>
<ul>
<li>在内存访问方面，所有的应用都直接通过物理地址访问物理内存，这使得应用开发者需要了解繁琐的物理地址空间布局，访问内存也很不方便</li>
</ul>
</li>
<li>
<p>在上一章中，出于任务切换的需要，所有的应用都在初始化阶段被加载到内存中并同时驻留下去直到它们全部运行结束。而且，所有的应用都直接通过物理地址访问物理内存。这会带来以下问题：</p>
<ul>
<li>
<p><b>首先，内核提供给应用的内存访问接口不够透明，也不好用</b></p>
<ul>
<li>由于应用直接访问物理内存，这需要它在构建的时候就清楚所运行计算机的物理内存空间布局，还需规划自己需要被加载到哪个地址运行</li>
<li>为了避免冲突可能还需要应用的开发者们对此进行协商，这显然是一件在今天看来不够通用且极端麻烦的事情</li>
</ul>
</li>
<li>
<p><b>其次，内核并没有对应用的访存行为进行任何保护措施，每个应用都有计算机系统中整个物理内存的读写权力</b></p>
<ul>
<li>
<p>即使应用被限制在 U 特权级下运行，它还是能够造成很多麻烦：<b>比如它可以读写其他应用的数据来窃取信息或者破坏其它应用的正常运行（很危险！）</b></p>
</li>
<li>
<p>甚至它还可以修改内核的代码段来替换掉原本的 <code>trap_handler</code> 函数，来挟持内核执行恶意代码。总之，这造成系统既不安全、也不稳定</p>
</li>
</ul>
</li>
<li>
<p><b>再次，目前应用的内存使用空间在其运行前已经限定死了，内核不能灵活地给应用程序提供的运行时动态可用内存空间</b></p>
<ul>
<li><b>比如一个应用结束后，这个应用所占的空间就被释放了，但这块空间无法动态地给其它还在运行的应用使用</b></li>
</ul>
</li>
</ul>
</li>
<li>
<p>因此，为了简化应用开发，防止应用胡作非为，本章将更好地管理物理内存，并提供给应用一个抽象出来的更加透明易用、也更加安全的访存接口，这就是基于分页机制的虚拟内存</p>
<ul>
<li>
<p><b>站在应用程序运行的角度看，就是存在一个从“0”地址开始的非常大的可读/可写/可执行的地址空间(<code>Address Space</code>)</b></p>
</li>
<li>
<p>站在操作系统的角度看，每个应用被局限在分配给它的物理内存空间中运行，<b>无法读写其它应用和操作系统所在的内存空间</b></p>
</li>
</ul>
</li>
<li>
<p>实现地址空间的第一步就是实现分页机制，建立好虚拟内存和物理内存的页映射关系。此过程需要硬件支持，硬件细节与具体CPU相关，涉及地址映射机制等，相对比较复杂。总体而言，我们需要思考如下问题</p>
<ul>
<li>
<p>硬件中物理内存的范围是什么？</p>
</li>
<li>
<p>哪些物理内存空间需要建立页映射关系？</p>
</li>
<li>
<p>如何建立页表使能分页机制？</p>
</li>
<li>
<p>如何确保<code>OS</code>能够在分页机制使能前后的不同时间段中都能正常寻址和执行代码？</p>
</li>
<li>
<p>页目录表（一级）的起始地址设置在哪里？</p>
</li>
<li>
<p>二级/三级等页表的起始地址设置在哪里，需要多大空间？</p>
</li>
<li>
<p>如何设置页目录表项/页表项的内容？</p>
</li>
<li>
<p>如果要让每个任务有自己的地址空间，那每个任务是否要有自己的页表？</p>
</li>
<li>
<p>代表应用程序的任务和操作系统需要有各自的页表吗？</p>
</li>
<li>
<p>在有了页表之后，任务和操作系统之间应该如何传递数据？</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>虚拟内存（<code>Virtual memory</code>）技术概念首次由德国的柏林工业大学（<code>Technische Universität Berlin</code>）博士生 <code>Fritz-Rudolf Güntsch</code> 提出</li>
<li>在他的博士论文中设想了一台计算机，其内存地址空间大小为$ 10^5 $个字，<b>可精确映射到作为二级存储的磁鼓（大小也为$ 10^5 $个字）上</b>，<b><font color="red">应用程序读写的数据的实际位置由硬件和监控器（即操作系统）来管理和控制，并在物理主存(<code>RAM</code>)和辅存(二级存储)之间按需搬移数据</font></b></li>
<li><b><font color="red">即主存中只放置应用程序最近访问的数据，而应用程序最近不访问的数据会搬移到辅存中，在应用程序需要时再搬回内存中</font></b></li>
<li><b>这个搬移过程对应用程序是透明的</b></li>
<li>虚拟内存的设想在 1959 年变成了现实。英国曼彻斯特大学的<code>Tom Kilburn</code>教授领导的团队于 1959 年展示了他们设计的<code>Atlas</code>计算机和<code>Atlas Supervisor</code>操作系统，开创了在今天仍然普遍使用的操作系统技术：<b>分页（<code>paging</code>）技术和虚拟内存（<code>virtual memory</code>，当时称为 <code>one-level storage system</code>）。他们的核心思想中的根本性创新是区分了“地址（<code>address</code>）”和“内存位置（<code>memory location</code>）”</b>。并因此创造了三项发明：
<ul>
<li><b>地址转换：硬件自动将处理器生成的每个地址转换为其当前内存位置</b></li>
<li><b>按需分页（<code>demand paging</code>）：由硬件地址转换触发缺页中断后，由操作系统将缺失的数据页移动到主存储器中，并形成正确的地址转换映射</b></li>
<li><b>页面置换算法：检查最无用（<code>least useful</code>）的页，并将其移回二级存储中，这样可以让经常访问的数据驻留在主存中</b></li>
</ul>
</li>
<li>计算机科学家对<code>Atlas Supervisor</code>操作系统给予高度的评价。<code>Brinch Hansen</code> 认为它是操作系统史上最重大的突破。<code>Simon Lavington</code> 认为它是第一个可识别的现代操作系统</li>
</ul>
</blockquote>
<h2 id="内存管理主要做了什么">内存管理主要做了什么？</h2>
<ul>
<li>
<p><b>内存的分配与回收</b> ：对进程所需的内存进行分配和释放，<code>malloc</code> 函数：申请内存，<code>free</code> 函数：释放内存</p>
</li>
<li>
<p><b>地址转换</b> ：将程序中的虚拟地址转换成内存中的物理地址</p>
</li>
<li>
<p><b>内存扩充</b> ：当系统没有足够的内存时，利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存</p>
</li>
<li>
<p><b>内存映射</b> ： 将一个文件直接映射到进程的进程空间中，<b>这样可以通过内存指针用读写内存的办法直接存取文件内容</b>，速度更快</p>
</li>
<li>
<p><b>内存优化</b> ： 通过调整内存分配策略和回收算法来优化内存使用效率</p>
</li>
<li>
<p><b>内存安全</b> ： 保证进程之间使用内存互不干扰，避免一些恶意程序通过修改内存来破坏系统的安全性</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<h3 id="什么是内存碎片">什么是内存碎片？</h3>
<ul>
<li>
<p>内存碎片是由内存的申请和释放产生的，通常分为下面两种</p>
<ul>
<li>
<p><b>内部内存碎片(<code>Internal Memory Fragmentation</code>，简称为内部碎片)</b></p>
<ul>
<li><u>已经分配给进程使用但未被使用的内存</u></li>
<li>导致内部内存碎片的主要原因是，<u>当采用固定比例比如2的幂次方进行内存分配时，<b>进程所分配的内存可能会比其实际所需要的大</b></u>
<ul>
<li>举个例子，一个进程只需要 65 字节的内存，但为其分配了$ 128（2^7） $大小的内存，那 63 字节的内存就成为了内部内存碎片</li>
</ul>
</li>
</ul>
</li>
<li>
<p><b>外部内存碎片(<code>External Memory Fragmentation</code>，简称为外部碎片)</b></p>
<ul>
<li>
<p>由于未分配的连续内存区域太小，以至于不能满足任意进程所需要的内存分配请求，这些小片段且不连续的内存空间被称为外部碎片</p>
</li>
<li>
<p>也就是说，外部内存碎片指的是那些并为分配给进程但又不能使用的内存。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/support3-1.png" title="/img/Operating System/support3-1.png" data-thumbnail="/img/Operating System/support3-1.png">
        
    </a>
<h3 id="常见的内存管理方式有那些">常见的内存管理方式有那些？</h3>
<ul>
<li>内存管理方式可以简单分为下面两种
<ul>
<li><b>连续内存管理</b> ： 为一个用户程序分配一个连续的内存空间，<u>内存利用率一般不高</u></li>
<li><b>非连续内存管理</b> ： 允许一个程序使用的内存分布在离散或者说不相邻的内存中，<u>相对更加灵活一些</u></li>
</ul>
</li>
</ul>
<h4 id="连续内存管理">连续内存管理</h4>
<ul>
<li>
<p><b>块式管理</b>是早期计算机操作系统的一种连续内存管理方式，存在严重的内存碎片问题</p>
</li>
<li>
<p><b>块式管理会将内存分为几个固定大小的块，<font color="red">每个块中只包含一个进程</font></b>。如果程序运行需要内存的话，操作系统就分配给它一块，<b>如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了</b></p>
<ul>
<li>这些在每个块中未被利用的空间，我们称之为<b>内部内存碎片</b></li>
</ul>
</li>
<li>
<p>除了内部内存碎片之外，由于两个内存块之间可能还会有外部内存碎片，这些不连续的外部内存碎片由于太小了无法再进行分配</p>
</li>
<li>
<p>在<code>Linux</code>系统中，连续内存管理采用了 <strong>伙伴系统（<code>Buddy System</code>）算法</strong> 来实现，这是一种经典的连续内存分配算法，<b>可以有效解决外部内存碎片的问题</b></p>
<ul>
<li>
<p>伙伴系统的主要思想是将内存按 2 的幂次划分（每一块内存大小都是 2 的幂次比如$ 2^6=64 KB$）。并将相邻的内存块组合成一对伙伴（注意：<strong>必须是相邻的才是伙伴</strong>）</p>
</li>
<li>
<p><b>当进行内存分配时，伙伴系统会尝试找到大小最合适的内存块。</b>如果找到的内存块过大，就将其一分为二，分成两个大小相等的伙伴块。如果还是大的话，就继续切分，直到到达合适的大小为止</p>
</li>
<li>
<p><b>假设两块相邻的内存块都被释放，系统会将这两个内存块合并，</b>进而形成一个更大的内存块，以便后续的内存分配。这样就可以减少内存碎片的问题，提高内存利用率</p>
</li>
</ul>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/support3-2.png" title="/img/Operating System/support3-2.png" data-thumbnail="/img/Operating System/support3-2.png">
        
    </a>
<ul>
<li>虽然解决了外部内存碎片的问题，但伙伴系统仍然存在内存利用率不高的问题<b>（内部内存碎片）</b>
<ul>
<li>这主要是因为伙伴系统只能分配大小为$2^n$的内存块，因此<b>当需要分配的内存大小不是$2^n$的整数倍时，会浪费一定的内存空间</b></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-3.png" title="/img/Operating System/support3-3.png" data-thumbnail="/img/Operating System/support3-3.png" data-sub-html="<h2>如果要分配 65 大小的内存快，依然需要分配$2^7=128$大小的内存块</h2>">
        
    </a><figcaption class="image-caption">如果要分配 65 大小的内存快，依然需要分配$2^7=128$大小的内存块</figcaption>
    </figure>
<ul>
<li>对于内部内存碎片的问题，<code>Linux</code>采用<b><code>SLAB</code></b>进行解决（非重点）</li>
</ul>
<h4 id="非连续内存管理">非连续内存管理</h4>
<ul>
<li>
<p>非连续内存管理存在下面 3 种方式：</p>
<ul>
<li>
<p><b>段式管理</b> ： 以段(—段连续的物理内存)的形式管理/分配物理内存</p>
<ul>
<li>应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有<b>主程序段<code>MAIN</code>、子程序段<code>X</code>、数据段<code>D</code>及栈段<code>S</code>等</b></li>
</ul>
</li>
<li>
<p><b>页式管理</b> ： <b>把物理内存分为连续等长的物理页</b>，应用程序的虚拟地址空间划也被分为连续等长的虚拟页，现代操作系统广泛使用的一种内存管理方式</p>
</li>
<li>
<p><b>段页式管理机制</b> ： <b>结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页</b></p>
</li>
</ul>
</li>
</ul>
<h4 id="虚拟内存">虚拟内存</h4>
<ul>
<li><strong>虚拟内存(<code>Virtual Memory</code>)</strong> 是计算机系统内存管理非常重要的一个技术，<u>本质上来说它只是逻辑存在的，是一个假想出来的内存空间，主要作用是作为进程访问主存（物理内存）的桥梁并简化内存管理</u></li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>总结来说，虚拟内存主要提供了下面这些能力</p>
<ul>
<li>
<p><b>隔离进程</b>：<font color="red"><b>物理内存通过虚拟地址空间访问，虚拟地址空间与进程一一对应。</b></font></p>
<ul>
<li>每个进程都认为自己拥有了整个物理内存，<u>进程之间彼此隔离，一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存</u></li>
</ul>
</li>
<li>
<p><b>提升物理内存利用率</b> ： 有了虚拟地址空间后，操作系统只需要将进程当前正在使用的部分数据或指令加载入物理内存</p>
</li>
<li>
<p><b>简化内存管理</b> ： 进程都有一个一致且私有的虚拟地址空间，程序员不用和真正的物理内存打交道，而是借助虚拟地址空间访问物理内存，从而简化了内存管理</p>
</li>
<li>
<p><b>多个进程共享物理内存</b> ： 进程在运行过程中，会加载许多操作系统的动态库。<u>这些库对于每个进程而言都是公用的，它们在内存中实际只会加载一份。这部分称为共享内存。</u></p>
</li>
<li>
<p><b>提高内存使用的安全性</b> ： 控制进程对物理内存的访问，隔壁不同进程的访问权限，提高系统的安全性</p>
</li>
<li>
<p><b>提供更大的可使用内存空间</b> ： 可以让程序拥有超过系统物理内存大小的可用内存空间。<u>这是因为当物理内存不够用时，可以用磁盘充当，将物理内存页（通常大小为$4KB$）保存到磁盘文件（会影响读写速度），数据或代码页会根据需要在物理内存与磁盘之间移动</u></p>
</li>
</ul>
</li>
</ul>
<h5 id="没有虚拟内存有什么问题">没有虚拟内存有什么问题？</h5>
<ul>
<li>
<p>如果没有虚拟内存的话，程序直接访问和操作的都是物理内存，看似少了一层中介，但多了很多问题</p>
</li>
<li>
<p>例子</p>
<ul>
<li><b>用户程序可以访问任意物理内存，可能会不小心操作到系统运行必需的内存，进而造成操作系统崩溃，严重影响系统的安全</b></li>
<li>同时运行多个程序容易崩溃。比如你想同时运行一个微信和一个 QQ 音乐，微信在运行的时候给内存地址<code>1xxx</code>赋值后，QQ 音乐也同样给内存地址<code>1xxx</code>赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就可能会造成微信这个程序会崩溃</li>
<li><b>程序运行过程中使用的所有数据或指令都要载入物理内存</b>，根据局部性原理，其中很大一部分可能都不会用到，白白占用了宝贵的物理内存资源</li>
<li>…</li>
</ul>
</li>
</ul>
<h4 id="什么是虚拟地址和物理地址">什么是虚拟地址和物理地址？</h4>
<ul>
<li>
<p><b>物理地址（<code>Physical Address</code>）</b> 是真正的物理内存中地址，更具体点来说是内存地址寄存器中的地址。<font color="red">程序中访问的内存地址不是物理地址，而是<b>虚拟地址（<code>Virtual Address</code>）</b></font></p>
</li>
<li>
<p>也就是说，我们编程开发的时候实际就是在和虚拟地址打交道。<b>比如在C语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的<font color="red">虚拟地址</font></b></p>
</li>
<li>
<p>操作系统一般通过 CPU 芯片中的一个重要组件<b>MMU(<code>Memory Management Unit</code>，内存管理单元)</b>将虚拟地址转换为物理地址，这个过程被称为<b>地址翻译/地址转换（<code>Address Translation</code>）</b></p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>通过<code>MMU</code>将虚拟地址转换为物理地址后，再通过总线传到物理内存设备，进而完成相应的物理内存读写请求</p>
</li>
<li>
<p><code>MMU </code>将虚拟地址翻译为物理地址的主要机制有两种: <b>分段机制</b> 和 <b>分页机制</b></p>
</li>
</ul>
<h4 id="什么是虚拟地址空间和物理地址空间">什么是虚拟地址空间和物理地址空间？</h4>
<ul>
<li>虚拟地址空间是虚拟地址的集合，是虚拟内存的范围。<b>每一个进程都有一个一致且私有的虚拟地址空间</b></li>
<li>物理地址空间是物理地址的集合，是物理内存的范围</li>
</ul>
<h4 id="虚拟地址与物理内存地址是如何映射的">虚拟地址与物理内存地址是如何映射的？</h4>
<ul>
<li><code>MMU </code>将虚拟地址翻译为物理地址的主要机制有 3 种:</li>
</ul>
<ol>
<li>分段机制</li>
<li>分页机制</li>
<li>段页机制</li>
</ol>
<ul>
<li>其中，<font color="red"><b>现代操作系统广泛采用分页机制，需要重点关注！</b></font></li>
</ul>
<h4 id="分段机制">分段机制</h4>
<ul>
<li>
<p><strong>分段机制（<code>Segmentation</code>）</strong> 以段(—段 <strong>连续</strong> 的物理内存)的形式管理/分配物理内存</p>
</li>
<li>
<p>应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段<code> MAIN</code>、子程序段<code> X</code>、数据段<code>D</code>及栈段<code>S</code>等</p>
</li>
</ul>
<h5 id="段表有什么用地址翻译过程是怎样的">段表有什么用？地址翻译过程是怎样的？</h5>
<ul>
<li>
<p>分段管理通过 <strong>段表（<code>Segment Table</code>）</strong> 映射虚拟地址和物理地址</p>
</li>
<li>
<p>分段机制下的虚拟地址由两部分组成</p>
<ul>
<li><strong>段号</strong> ：<font color="red">标识着该虚拟地址属于整个虚拟地址空间中的哪一个段</font></li>
<li><strong>段内偏移量</strong> ：<font color="red">相对于该段起始地址的偏移量</font></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>具体的地址翻译过程如下
<ul>
<li><code>MMU</code>首先解析得到虚拟地址中的<b>段号</b></li>
<li>通过段号去该应用程序的段表中取出对应的段信息（找到对应的段表项）</li>
<li>从段信息中取出该段的<b>起始地址（物理地址）</b>加上虚拟地址中的<b>段内偏移量</b>得到<b>最终的物理地址</b></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-4.png" title="/img/Operating System/support3-4.png" data-thumbnail="/img/Operating System/support3-4.png" data-sub-html="<h2>流程图</h2>">
        
    </a><figcaption class="image-caption">流程图</figcaption>
    </figure>
<ul>
<li><u>段表中还存有诸如段长(可用于检查虚拟地址是否超出合法范围)、段类型（该段的类型，例如代码段、数据段等）等信息</u></li>
</ul>
<hr>
<ul>
<li><b>通过段号一定要找到对应的段表项吗？得到最终的物理地址后对应的物理内存一定存在吗</b></li>
<li>不一定。段表项可能并不存在
<ul>
<li><b>段表项被删除</b> ：软件错误、软件恶意行为等情况可能会导致段表项被删除</li>
<li><b>段表项还未创建</b> ：如果系统内存不足或者无法分配到连续的物理内存块就会导致段表项无法被创建</li>
</ul>
</li>
</ul>
<h5 id="分段机制为什么会导致内存外部碎片">分段机制为什么会导致内存外部碎片？</h5>
<ul>
<li>分段机制容易出现外部内存碎片，<b>即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)</b>。从而造成物理内存资源利用率的降低</li>
</ul>
<hr>
<ul>
<li>
<p>举个例子：假设可用物理内存为 <code>5G</code> 的系统使用分段机制分配内存。现在有 4 个进程，每个进程的内存占用情况如下</p>
<ul>
<li>
<p>进程 1：0~1G（第 1 段）</p>
</li>
<li>
<p>进程 2：1~3G（第 2 段）</p>
</li>
<li>
<p>进程 3：3~4.5G（第 3 段）</p>
</li>
<li>
<p>进程 4：4.5~5G（第 4 段）</p>
</li>
</ul>
</li>
<li>
<p>此时，我们关闭了进程 1 和进程 4，则第 1 段和第 4 段的内存会被释放，空闲物理内存还有 1.5G。由于这 1.5G 物理内存并不是连续的，导致没办法将空闲的物理内存分配给一个需要 1.5G 物理内存的进程</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-5.png" title="/img/Operating System/support3-5.png" data-thumbnail="/img/Operating System/support3-5.png" data-sub-html="<h2>内存浪费</h2>">
        
    </a><figcaption class="image-caption">内存浪费</figcaption>
    </figure>
<h4 id="分页机制">分页机制</h4>
<ul>
<li>
<p><strong>分页机制（<code>Paging</code>）</strong> 把主存（物理内存）分为连续等长的物理页，应用程序的虚拟地址空间划也被分为连续等长的虚拟页。<b>现代操作系统广泛采用分页机制</b></p>
</li>
<li>
<p><font color="red"><b>注意：这里的页是连续等长的，不同于分段机制下不同长度的段</b></font></p>
</li>
</ul>
<hr>
<ul>
<li>
<p>在分页机制下，应用程序虚拟地址空间中的任意虚拟页可以被映射到物理内存中的任意物理页上，因此可以实现物理内存资源的离散分配</p>
</li>
<li>
<p>分页机制按照固定页大小分配物理内存，使得物理内存资源易于管理，可有效避免分段机制中外部内存碎片的问题</p>
</li>
</ul>
<h5 id="页表有什么用地址翻译过程是怎样的">页表有什么用？地址翻译过程是怎样的？</h5>
<ul>
<li>分页管理通过 <strong>页表（<code>Page Table</code>）</strong> 映射虚拟地址和物理地址。我这里画了一张基于单级页表进行地址翻译的示意图</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-6.png" title="/img/Operating System/support3-6.png" data-thumbnail="/img/Operating System/support3-6.png" data-sub-html="<h2>页表</h2>">
        
    </a><figcaption class="image-caption">页表</figcaption>
    </figure>
<ul>
<li>
<p>在分页机制下，每个应用程序都会有一个对应的页表</p>
</li>
<li>
<p>分页机制下的虚拟地址由两部分组成：</p>
<ul>
<li><strong>页号</strong> ：通过虚拟页号可以从页表中取出对应的物理页号</li>
<li><strong>页内偏移量</strong> ：<font color="red">物理页起始地址+页内偏移量=物理内存地址</font></li>
</ul>
</li>
<li>
<p><font color="red"><b>具体的地址翻译过程如下：</b></font></p>
<ul>
<li><code>MMU </code>首先解析得到虚拟地址中的虚拟页号</li>
<li>通过虚拟页号去<b>该应用程序的页表</b>中取出<b>对应的物理页号</b>（找到对应的页表项）</li>
<li>用该物理页号对应的物理页起始地址（物理地址）加上虚拟地址中的页内偏移量得到最终的物理地址</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>页表中还存有诸如访问标志（标识该页面有没有被访问过）、页类型（该段的类型，例如代码段、数据段等）等信息</p>
</li>
<li>
<p><strong>通过虚拟页号一定要找到对应的物理页号吗？找到了物理页号得到最终的物理地址后对应的物理页一定存在吗？</strong></p>
<ul>
<li>不一定！可能会存在 <strong>页缺失</strong> 。也就是说，物理内存中没有对应的物理页或者物理内存中有对应的物理页但虚拟页还未和物理页建立映射（对应的页表项不存在）。</li>
</ul>
</li>
</ul>
<h5 id="单级页表有什么问题为什么需要多级页表">单级页表有什么问题？为什么需要多级页表？</h5>
<ul>
<li>
<p>以 32 位的环境为例，虚拟地址空间范围共有 $2^{32}（4G）$。假设 一个页的大小是 $2^{12}（4KB）$，那页表项共有 $\frac{4G}{4K} = 2^{20}$个，每个页表项为一个地址，占用 4 字节，$2^{20} \times \frac{2^2}{1024\times1024}= 4MB$（页内地址用12位，页号用20位）。<b><font color="red">也就是说一个程序啥都不干，页表大小就得占用$4M$（页表开太小导致了地址位数太多了）</font></b></p>
</li>
<li>
<p>系统运行的应用程序多起来的话，页表的开销还是非常大的。而且，绝大部分应用程序可能只能用到页表中的几项，其他的白白浪费了</p>
</li>
<li>
<p>总结</p>
<ul>
<li><font color="red">页表必须连续存放，因此当页表很大的时候，需要占用很多个连续的页框</font></li>
<li>没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面</li>
</ul>
</li>
<li>
<p>为了解决这个问题，操作系统引入了<b>多级页表，多级页表对应多个页表，每个页表也前一个页表相关联。</b>32 位系统一般为二级页表，64 位系统一般为四级页表。</p>
<ul>
<li>这里以二级页表为例进行介绍：二级列表分为一级页表和二级页表</li>
<li>一级页表共有 1024 个页表项，一级页表又关联二级页表，二级页表同样共有 1024 个页表项</li>
<li><b>二级页表中的一级页表项是一对多的关系</b>，二级页表按需加载（只会用到很少一部分二级页表），进而节省空间占用</li>
</ul>
</li>
<li>
<p><b>多级页表属于时间换空间的典型场景，利用增加页表查询的次数减少页表占用的空间</b></p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-7.png" title="/img/Operating System/support3-7.png" data-thumbnail="/img/Operating System/support3-7.png" data-sub-html="<h2>页表</h2>">
        
    </a><figcaption class="image-caption">页表</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-8.jpg" title="/img/Operating System/support3-8.jpg" data-thumbnail="/img/Operating System/support3-8.jpg" data-sub-html="<h2>二级页表</h2>">
        
    </a><figcaption class="image-caption">二级页表</figcaption>
    </figure>
<p>（和多级<code>cache</code>做对比，比较相似，增加访问次数来减内存，<b>多级页表通过二次切割页表不让大段的页表留在内存里面，用的时候从辅存里面调就行，这也就是节省内存的原理，也是借鉴了多级<code>cache</code>的局部性原理</b>）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-9.png" title="/img/Operating System/support3-9.png" data-thumbnail="/img/Operating System/support3-9.png" data-sub-html="<h2>多级页表计算</h2>">
        
    </a><figcaption class="image-caption">多级页表计算</figcaption>
    </figure>
<h5 id="tlb-有什么用使用-tlb-之后的地址翻译流程是怎样的"><code>TLB</code> 有什么用？使用 <code>TLB</code> 之后的地址翻译流程是怎样的？</h5>
<ul>
<li>
<p>为了提高虚拟地址到物理地址的转换速度，操作系统在 <strong>页表方案</strong> 基础之上引入了 <strong>转址旁路缓存(<code>Translation Lookasjde Buffer</code>，<code>TLB</code>，也被称为<code>快表</code>)</strong></p>
</li>
<li>
<p>在主流的 <code>Arch64</code> 和 <code>x86-64</code> 体系结构下，<code>TLB</code> 属于 (<code>Memory Management Unit</code>，内存管理单元) 内部的单元，本质上就是一块高速缓存（<code>Cache</code>）</p>
</li>
<li>
<p>使用<code>TLB</code>之后的地址翻译流程是这样的：</p>
<ol>
<li>
<p>用虚拟地址中的虚拟页号作为 <code>key </code>去 <code>TLB</code> 中查询；</p>
</li>
<li>
<p>如果能查到对应的物理页的话，就不用再查询页表了，这种情况称为 <code>TLB</code> 命中（<code>TLB hit</code>)。</p>
</li>
<li>
<p>如果不能查到对应的物理页的话，还是需要去查询主存中的页表，同时将页表中的该映射表项添加到 <code>TLB </code>中，这种情况称为 <code>TLB</code> 未命中（<code>TLB miss</code>)。</p>
</li>
<li>
<p>当 <code>TLB</code> 填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</p>
</li>
</ol>
</li>
</ul>
<p>（和<code>cache</code>一样）</p>
<ul>
<li>
<p>由于页表也在主存中，因此在没有 <code>TLB</code> 之前，每次读写内存数据时 <code>CPU</code> 要访问两次主存。有了 <code>TLB</code> 之后，对于存在于 <code>TLB</code> 中的页表数据只需要访问一次主存即可。</p>
</li>
<li>
<p><code>TLB</code> 的设计思想非常简单，但命中率往往非常高，效果很好。这就是因为被频繁访问的页就是其中的很小一部分。</p>
</li>
<li>
<p>快表和我们平时经常在开发系统中使用的缓存（比如 <code>Redis</code>）很像</p>
</li>
</ul>
<h5 id="换页机制有什么用">换页机制有什么用？</h5>
<ul>
<li>
<p>换页机制的思想是当物理内存不够用的时候，操作系统选择将一些物理页的内容放到磁盘上去，等要用到的时候再将它们读取到物理内存中。也就是说，换页机制利用磁盘这种较低廉的存储设备扩展的物理内存。</p>
</li>
<li>
<p>这也就解释了一个日常使用电脑常见的问题：为什么操作系统中所有进程运行所需的物理内存即使比真实的物理内存要大一些，这些进程也是可以正常运行的，只是运行速度会变慢。</p>
</li>
<li>
<p>这同样是一种<b>时间换空间</b>的策略，你用<code>CPU</code>的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的物理内存空间来支持程序的运行。</p>
</li>
</ul>
<h5 id="什么是页缺失">什么是页缺失？</h5>
<blockquote>
<p>页缺失（<code>Page Fault</code>，又名硬错误、硬中断、分页错误、寻页缺失、缺页中断、页故障等）指的是当软件试图访问已映射在虚拟地址空间中，但是目前并未被加载在物理内存中的一个分页时，由 <code>MMU</code> 所发出的中断</p>
</blockquote>
<ul>
<li>
<p>常见的页缺失有下面这两种：</p>
<ul>
<li>
<p><strong>硬性页缺失（<code>Hard Page Fault</code>）</strong> ：物理内存中没有对应的物理页。于是，<code>Page Fault Handler</code> 会指示 <code>CPU</code> 从已经打开的磁盘文件中读取相应的内容到物理内存（把之前在磁盘的页表给调回到内存里面来），而后交由 <code>MMU</code> 建立相应的虚拟页和物理页的映射关系。</p>
</li>
<li>
<p><strong>软性页缺失（<code>Soft Page Fault</code>）</strong>：物理内存中有对应的物理页，但虚拟页还未和物理页建立映射。于是，<code>Page Fault Handler </code>会指示 <code>MMU</code> 建立相应的虚拟页和物理页的映射关系。</p>
</li>
</ul>
</li>
<li>
<p>发生上面这两种缺页错误的时候，应用程序访问的是有效的物理内存，只是出现了物理页缺失或者虚拟页和物理页的映射关系未建立的问题。如果应用程序访问的是无效的物理内存的话，还会出现 <strong>无效缺页错误（<code>Invalid Page Fault</code>）</strong></p>
<h5 id="常见的页面置换算法有哪些">常见的页面置换算法有哪些？</h5>
</li>
</ul>
<ol>
<li>
<p><strong>最佳页面置换算法（<code>OPT，Optimal</code>）</strong> ：优先选择淘汰的页面是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若干页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现，只是理论最优的页面置换算法，可以作为衡量其他置换算法优劣的标准。</p>
</li>
<li>
<p><strong>先进先出页面置换算法（<code>FIFO，First In First Out</code>）</strong> : 最简单的一种页面置换算法，总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。该算法易于实现和理解，一般只需要通过一个 <code>FIFO</code> 队列即可需求。不过，它的性能并不是很好。</p>
</li>
<li>
<p><strong>最近最久未使用页面置换算法（<code>LRU ，Least Recently Used</code>）</strong> ：<code>LRU</code> 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 <code>T</code>，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。<code>LRU</code> 算法是根据各页之前的访问情况来实现，因此是易于实现的。<code>OPT</code> 算法是根据各页未来的访问情况来实现，因此是不可实现的。</p>
</li>
<li>
<p><strong>最少使用页面置换算法（<code>LFU，Least Frequently Used</code>）</strong> : 和 <code>LRU</code> 算法比较像，不过该置换算法选择的是之前一段时间内使用最少的页面作为淘汰页。</p>
</li>
<li>
<p><strong>时钟页面置换算法（<code>Clock</code>）</strong> ：可以认为是一种最近未使用算法，即逐出的页面都是最近没有使用的那个。</p>
</li>
</ol>
<hr>
<p><code>LRU </code>算法是实际使用中应用的比较多，也被认为是最接近 <code>OPT</code> 的页面置换算法。</p>
<p>不过，需要注意的是，实际应用中这些算法会被做一些改进，就比如 <code>InnoDB Buffer Pool（ InnoDB</code> 缓冲池，<code>MySQL</code> 数据库中用于管理缓存页面的机制）就改进了传统的 <code>LRU</code> 算法，使用了一种称为&quot;<code>Adaptive LRU</code>&ldquo;的算法（同时结合了<code>LRU</code>和<code>LFU</code>算法的思想）</p>
<h4 id="分页机制和分段机制有哪些共同点和区别">分页机制和分段机制有哪些共同点和区别？</h4>
<ul>
<li>
<p><strong>共同点</strong> ：</p>
<ul>
<li>
<p>都是非连续内存管理的方式</p>
</li>
<li>
<p>都采用了地址映射的方法，将虚拟地址映射到物理地址，以实现对内存的管理和保护</p>
</li>
</ul>
</li>
<li>
<p><strong>区别</strong></p>
<ul>
<li>
<p>分页机制以页面为单位进行内存管理，而分段机制以段为单位进行内存管理。页的大小是固定的，由操作系统决定，通常为 2 的幂次方。而段的大小不固定，取决于我们当前运行的程序</p>
</li>
<li>
<p>页是物理单位，即操作系统将物理内存划分成固定大小的页面，每个页面的大小通常是 2 的幂次方，例如 <code>4KB</code>、<code>8KB</code> 等等。而段则是逻辑单位，是为了满足程序对内存空间的逻辑需求而设计的，通常根据程序中数据和代码的逻辑结构来划分</p>
</li>
<li>
<p><b>分段机制容易出现外部内存碎片</b>，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。分页机制解决了外部内存碎片的问题，但仍然可能会出现内部内存碎片</p>
</li>
<li>
<p>分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息</p>
</li>
<li>
<p>分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息</p>
</li>
</ul>
</li>
</ul>
<h4 id="段页机制">段页机制</h4>
<ul>
<li>
<p>结合了段式管理和页式管理的一种内存管理机制，<b><font color="red">把物理内存先分成若干段，每个段又继续分成若干大小相等的页。</font></b></p>
</li>
<li>
<p>在段页式机制下，地址翻译的过程分为两个步骤：</p>
<ol>
<li>
<p>段式地址映射。</p>
</li>
<li>
<p>页式地址映射。</p>
</li>
</ol>
</li>
</ul>
<h4 id="哈希页表">哈希页表</h4>
<ul>
<li>
<p>哈希页表（<code>Hashed Page Table</code>）是一种用于操作系统虚拟内存管理中的数据结构，用于实现虚拟地址到物理地址的映射。它将虚拟地址空间分割成一系列大小相等的页（<code>Page</code>），每个页都对应着一个物理地址页帧（<code>Page Frame</code>）</p>
</li>
<li>
<p>哈希页表的核心是一个哈希表，每个表项对应着一个虚拟地址页。每个表项包含了该页的页号和页表项（<code>Page Table Entry</code>），页表项中包含了页帧号和一些附加信息</p>
</li>
<li>
<p>哈希页表使用哈希函数将虚拟地址映射到哈希表的一个表项中。如果哈希冲突，即两个不同的虚拟地址映射到了同一个表项中，那么通常使用链表来解决冲突。具体地，哈希表的每个表项中不仅仅存储了一个页表项，还可以存储一个链表的头指针，当发生哈希冲突时，就将新的页表项插入到链表的尾部</p>
</li>
<li>
<p>通过哈希页表，操作系统可以快速地将虚拟地址映射到对应的物理地址，从而实现了虚拟内存管理的基本功能。而哈希页表的设计也充分考虑了哈希冲突的情况，通过链表解决了冲突问题，使得哈希表的性能得到了进一步的提升</p>
</li>
</ul>
<hr>
<ul>
<li>有关链表和哈希冲突（类比<code>Hash table</code>里面的链表处理手法）
<ul>
<li>在哈希表中，哈希函数将键映射到哈希表中的一个索引位置，但是不同的键可能映射到相同的索引位置，这就是哈希冲突</li>
<li>解决哈希冲突的一种方法是使用链表。具体地说，当发生哈希冲突时，将新键添加到与索引位置相对应的链表的末尾。如果发生另一个哈希冲突，就将新键添加到链表的末尾</li>
<li>当需要查找一个键时，首先将该键传递给哈希函数，然后找到相应的索引位置。然后，遍历位于该位置上的链表，以查找具有相同键的节点。如果找到了该键，就返回节点的值；否则，就返回“不存在该键”</li>
<li>因此，通过使用链表，可以在哈希表中存储具有相同哈希值的键，并且可以在需要查找具有相同哈希值的键时找到它们</li>
</ul>
</li>
</ul>
<h4 id="反向页表">反向页表</h4>
<ul>
<li>
<p>另一种减小页表大小的方法</p>
</li>
<li>
<p>由于多级页表是树形结构，虚拟空间膨胀会很快，对于大地址空间，多级页表仍会变得非常繁琐。 为了克服这个指数爆炸的效应，我们从虚拟的逻辑空间中走出来，着眼于有限的物理空间，<b>以物理地址空间为抓手建立索引。这就是页寄存器和反置页表的思路</b></p>
</li>
<li>
<p>在这种情况下，如果页面本身相对于页表项很大的话，页表的内存开销就不足为惧了</p>
</li>
<li>
<p>具体的实现方法是，让每一个物理帧都和一个页寄存器相关联。页寄存器包含如下的标志位</p>
<ul>
<li>使用位（<code>residence bit</code>）：此帧是否被进程占用</li>
<li>占用页号（<code>occupier</code>）：对应的页号<code>p</code></li>
<li>保护位（<code>protection bits</code>）</li>
</ul>
</li>
<li>
<p><b>这种方法的好处在于</b></p>
<ul>
<li>
<p><b>大大减省页表占用内存</b></p>
</li>
<li>
<p><b>页表大小与逻辑地址空间相比往往很小</b></p>
</li>
</ul>
</li>
<li>
<p><b>缺点在于其反转了逻辑，要能够依据帧号找页号（建立联系），同时在用页号查找时就相对困难</b></p>
<ul>
<li>如上的联系通过哈希的方法建立，对逻辑地址进行哈希，随后就可以在页寄存器反向建立的查找表中进行小范围查找</li>
<li>这里还可以引入快表。尽管快表功耗大</li>
<li>如果有冲突需要遍历冲突项</li>
</ul>
</li>
<li>
<p>反置页表是在页寄存器的基础上引入<code>PID</code>（进程标识）一同哈希，随后与反置页表中指定哈希值处对应验证，如果不一样就说明有冲突，继续遍历冲突项。如果<code>PID</code>和虚拟基址都相同，则找到了对应的页表。多余的开销来自于<code>hash</code>冲突。总体仍然是一个很好的思路</p>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Operating System Chapter10 状态机模型的应用</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</link>
    <pubDate>Tue, 28 Mar 2023 13:10:52 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>状态机：理论
<ul>
<li>数字电路：<a href="https://jyywiki.cn/pages/OS/2022/demos/logisim.c" target="_blank" rel="noopener noreffer">logisim.c</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/seven-seg.py" target="_blank" rel="noopener noreffer">seven-seg.py</a></li>
<li>Model checker: 理解并发程序执行的新方法</li>
</ul>
</li>
<li>状态机：实践
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a></li>
</ul>
</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 状态机模型如此有用，还能更有用一点吗？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>终于做完了铺垫，是时候让你感受到 “真正的力量” 了
<ul>
<li>都是没用的内容，当我口胡就行了</li>
</ul>
</li>
</ul>
<h2 id="状态机理解我们的世界">状态机：理解我们的世界</h2>
<h3 id="哲--学探讨">哲 ♂ 学探讨</h3>
<ul>
<li>
<p>我们的物理世界是 “确定规则” 的状态机吗？</p>
<ul>
<li>
<p>宏观物理世界近似于 deterministic 的状态机 (经典力学)</p>
</li>
<li>
<p>微观世界可能是 non-deterministic 的 (量子力学)</p>
</li>
</ul>
</li>
</ul>
<p>把物理世界建模成基本粒子的运动</p>
<ul>
<li><a href="https://playgameoflife.com/" target="_blank" rel="noopener noreffer">Conway&rsquo;s game of life</a> $\Longrightarrow$ <b>Turing Complete</b></li>
</ul>
<h3 id="哲--学探讨-contd">哲 ♂ 学探讨 (cont&rsquo;d)</h3>
<p>可以在这个模型上严肃地定义很多概念：预测未来、时间旅行……</p>
<ul>
<li>成为你理解物理 (和计算机) 世界的参考</li>
</ul>
<hr>
<ul>
<li>例子
<ul>
<li>Cellular automata 不支持 “时间旅行”
<ul>
<li>怎么添加一个公理使它可以支持？
<ul>
<li>平行宇宙</li>
<li>如果世界线需要合并？可以<a href="https://www.scientificamerican.com/article/time-travel-simulation-resolves-grandfather-paradox/" target="_blank" rel="noopener noreffer">收敛于某个分布</a></li>
</ul>
</li>
</ul>
</li>
<li>Cellular automata 不支持 “预测外来”
<ul>
<li>能否添加一个 syscall 使它支持？
<ul>
<li><a href="https://www.scottaaronson.com/papers/philos.pdf" target="_blank" rel="noopener noreffer">Why philosophers should care about computational complexity, Ch. 10</a> (<b>jyy 强烈推荐，解释部分在10th-section</b>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="状态机模型理解编译器和现代-cpu">状态机模型：理解编译器和现代 CPU</h3>
<ul>
<li>编译器：源代码$S$(状态机) → 二进制代码$C$(状态机)</li>
</ul>
<p>$$
C=compile(S)
$$</p>
<ul>
<li>
<p>编译 (优化) 的正确性 (Soundness):</p>
<ul>
<li><font color="red"><em>S</em> 与 <em>C</em> 的可观测行为严格一致</font> （二进制落实到硬件也是如此，严格一致不是句句对应，而是状态机一致，比如一个时钟周期内执行两条指令 $\Longrightarrow$ <font color="red">instruction-level parallelism</font>）
<ul>
<li>system calls; volatile variable loads/stores; termination</li>
</ul>
</li>
</ul>
</li>
<li>
<p>超标量 (superscalar)/乱序执行处理器</p>
<ul>
<li>
<p>允许在状态机上 “跳跃”</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/ilp-demo.c" target="_blank" rel="noopener noreffer">ilp-demo.c</a></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOOP 1000000000ul
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rax;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rsi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rcx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r10;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r8;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r9;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">:::</span><span class="s">&#34;rax&#34;</span><span class="p">,</span> <span class="s">&#34;rdi&#34;</span><span class="p">,</span> <span class="s">&#34;rsi&#34;</span><span class="p">,</span> <span class="s">&#34;rdx&#34;</span><span class="p">,</span> <span class="s">&#34;rcx&#34;</span><span class="p">,</span> <span class="s">&#34;r10&#34;</span><span class="p">,</span> <span class="s">&#34;r8&#34;</span><span class="p">,</span> <span class="s">&#34;r9&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">loop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">LOOP</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ips</span> <span class="o">=</span> <span class="n">inst</span> <span class="o">/</span> <span class="p">((</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.2lfG instructions/s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ips</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在优化下执行的效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ screenfetch            
</span></span><span class="line"><span class="cl">..............                                  
</span></span><span class="line"><span class="cl">            ..,<span class="p">;</span>:ccc,.                           kali@kali
</span></span><span class="line"><span class="cl">          ......<span class="s1">&#39;&#39;&#39;;lxO.                         OS: Kali Linux 
</span></span></span><span class="line"><span class="cl"><span class="s1">.....&#39;&#39;&#39;&#39;..........,:ld;                         Kernel: x86_64 Linux 6.0.0-kali3-amd64
</span></span></span><span class="line"><span class="cl"><span class="s1">           .&#39;</span><span class="p">;;;</span>:::<span class="p">;</span>,,.x,                        Uptime: 49m
</span></span><span class="line"><span class="cl">      ..<span class="s1">&#39;&#39;&#39;.            0Xxoc:,.  ...            Packages: 2707
</span></span></span><span class="line"><span class="cl"><span class="s1">  ....                ,ONkc;,;cokOdc&#39;</span>,.          Shell: zsh 5.9
</span></span><span class="line"><span class="cl"> .                   OMo           <span class="s1">&#39;:ddo.        Resolution: 1714x874
</span></span></span><span class="line"><span class="cl"><span class="s1">                    dMc               :OO;       DE: Xfce
</span></span></span><span class="line"><span class="cl"><span class="s1">                    0M.                 .:o.     WM: Xfwm4
</span></span></span><span class="line"><span class="cl"><span class="s1">                    ;Wd                          WM Theme: Kali-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                     ;XO,                        GTK Theme: Kali-Dark [GTK2]
</span></span></span><span class="line"><span class="cl"><span class="s1">                       ,d0Odlc;,..               Icon Theme: Flat-Remix-Blue-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                           ..&#39;</span>,<span class="p">;</span>:cdOOd::,.       Font: Cantarell <span class="m">11</span>
</span></span><span class="line"><span class="cl">                                    .:d<span class="p">;</span>.<span class="s1">&#39;:;.    Disk: 19G / 80G (26%)
</span></span></span><span class="line"><span class="cl"><span class="s1">                                       &#39;</span>d,  .<span class="s1">&#39;   CPU: AMD Ryzen 9 5900HX with Radeon Graphics @ 4x 3.294GHz
</span></span></span><span class="line"><span class="cl"><span class="s1">                                         ;l   .. GPU: VMware SVGA II Adapter
</span></span></span><span class="line"><span class="cl"><span class="s1">                                          .o     RAM: 1501MiB / 1972MiB
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            c   
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            .&#39;</span>  
</span></span><span class="line"><span class="cl">                                             .  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo   
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo                      
</span></span><span class="line"><span class="cl">19.06G instructions/s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.38G instructions/s
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.19G instructions/s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>优化过后，<b>每一个时钟周期可以执行远远超过一条指令</b></li>
</ul>
<h2 id="查看状态机执行">查看状态机执行</h2>
<h3 id="trace-和调试器">Trace 和调试器</h3>
<ul>
<li>
<p>程序执行 = 状态机执行</p>
<ul>
<li>我们能不能 “hack” 进这个状态机
<ul>
<li>观察状态机的执行
<ul>
<li>strace/gdb</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>甚至记录和<font color="red">改变</font>状态机的执行</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./ilp-demo 
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffe10420e10 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b2c000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b16000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4935000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb495b000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7f9eb495b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4ab0000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4ab0000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b03000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b03000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b09000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b09000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4932000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7f9eb4932740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7f9eb4932a10<span class="o">)</span>         <span class="o">=</span> <span class="m">5644</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7f9eb4932a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7f9eb4933060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b03000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55de2e4dc000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b5e000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f9eb4b16000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>1796473<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>514062681<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x2a\x03\xa3\xe2\x7d\xa4\x84\x07&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55de2e503000<span class="o">)</span>                     <span class="o">=</span> 0x55de2e503000
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.52G instructions/s\n&#34;</span>, 2219.52G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>strace</code>调试最小的Hello OS，可以清楚地看到系统调用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./minimal
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./minimal&#34;</span>, <span class="o">[</span><span class="s2">&#34;./minimal&#34;</span><span class="o">]</span>, 0x7ffefc958480 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;\33[01;31mHello, OS World\33[0m\n&#34;</span>, 28Hello, OS World
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">28</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>1<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>-T看每一个系统调用花费的时间</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace -T ./ilp-demo
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffdfd498e18 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000258&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000005&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c980a000 &lt;0.000113&gt;
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97f4000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9613000 &lt;0.000084&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c9639000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7fb9c9639000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c978e000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7fb9c978e000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e1000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e1000 &lt;0.000060&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e7000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e7000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9610000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7fb9c9610740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7fb9c9610a10<span class="o">)</span>         <span class="o">=</span> <span class="m">8876</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7fb9c9610a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span> &lt;0.000097&gt;
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7fb9c9611060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000109&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c97e1000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000079&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55a0fcb07000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c983c000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7fb9c97f4000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span> &lt;0.000094&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>876239<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000075&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>511881481<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000199&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000090&gt;
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x6e\x63\x59\xe8\xb3\xfe\x8a\x8d&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span> &lt;0.000143&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000106&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55a0fd298000<span class="o">)</span>                     <span class="o">=</span> 0x55a0fd298000 &lt;0.000052&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.57G instructions/s\n&#34;</span>, 2219.57G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span> &lt;0.000085&gt;
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter10-1.png" title="/img/Operating System/chapter10-1.png" data-thumbnail="/img/Operating System/chapter10-1.png" data-sub-html="<h2>gdb layout src</h2>">
        
    </a><figcaption class="image-caption"><code>gdb layout src</code></figcaption>
    </figure>
<ul>
<li>注意为了让<code>layout src</code>能够成功显示，编译时需要使用<code>gcc</code>的<code>-g</code>编译选项</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo -g  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gdb ilp-demo                     
</span></span><span class="line"><span class="cl">GNU gdb <span class="o">(</span>Debian 13.1-2<span class="o">)</span> 13.1
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2023</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">License GPLv3+: GNU GPL version <span class="m">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show copying&#34;</span> and <span class="s2">&#34;show warranty&#34;</span> <span class="k">for</span> details.
</span></span><span class="line"><span class="cl">This GDB was configured as <span class="s2">&#34;x86_64-linux-gnu&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show configuration&#34;</span> <span class="k">for</span> configuration details.
</span></span><span class="line"><span class="cl">For bug reporting instructions, please see:
</span></span><span class="line"><span class="cl">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.
</span></span><span class="line"><span class="cl">Find the GDB manual and other documentation resources online at:
</span></span><span class="line"><span class="cl">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">For help, <span class="nb">type</span> <span class="s2">&#34;help&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;apropos word&#34;</span> to search <span class="k">for</span> commands related to <span class="s2">&#34;word&#34;</span>...
</span></span><span class="line"><span class="cl">Reading symbols from ilp-demo...
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> start
</span></span><span class="line"><span class="cl">Temporary breakpoint <span class="m">1</span> at 0x1060: file ilp-demo.c, line 22.
</span></span><span class="line"><span class="cl">Starting program: /home/kali/chapter9/ilp-demo 
</span></span><span class="line"><span class="cl"><span class="o">[</span>Thread debugging using libthread_db enabled<span class="o">]</span>
</span></span><span class="line"><span class="cl">Using host libthread_db library <span class="s2">&#34;/lib/x86_64-linux-gnu/libthread_db.so.1&#34;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Temporary breakpoint 1, main <span class="o">()</span> at ilp-demo.c:22
</span></span><span class="line"><span class="cl"><span class="m">22</span>        clock_t <span class="nv">st</span> <span class="o">=</span> clock<span class="o">()</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> layout src
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="应用-1-time-travel-debugging">应用 (1): Time-Travel Debugging</h3>
<ul>
<li>
<p>程序执行是随时间 “前进” 的$s_0 \rightarrow s_1 \rightarrow s_2 \rightarrow \dots$</p>
</li>
<li>
<p>能否在时间上 “后退”？ (time-travel)</p>
<ul>
<li>经常 gdb 不小心 step 过了，从头再来……</li>
<li>记录所有的$s_i$，就能实现任意的 time-traveling</li>
</ul>
</li>
</ul>
<blockquote>
<p>凉性循环，看一会<code>rust</code></p>
</blockquote>
<ul>
<li>记录所有$s_i$的开销太大（$s_i$由内存+寄存器组成）
<ul>
<li>但<font color="red">一条指令的side-effect通常有限</font></li>
</ul>
</li>
</ul>
<h3 id="应用-1-time-travel-debugging-contd">应用 (1): Time-Travel Debugging (cont&rsquo;d)</h3>
<ul>
<li>
<p>gdb 的隐藏功能 (大家读过 gdb 的手册了吗？)</p>
<ul>
<li>
<p><code>record full</code> - 开始记录</p>
</li>
<li>
<p><code>record stop</code> - 结束记录</p>
</li>
<li>
<p><code>reverse-step</code>/<code>reverse-stepi</code> - “时间旅行调试”</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>例子：调试 <a href="https://jyywiki.cn/pages/OS/2022/demos/rdrand.c" target="_blank" rel="noopener noreffer">rdrand.c</a>
<ul>
<li>Reverse execution 不是万能的
<ul>
<li><b><font color="red">有些复杂的指令 (<code>syscall</code>) 无法保证</font></b> $\Longrightarrow$ <code>record and replay</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;rdrand %0&#34;</span><span class="o">:</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;rdrand returns %016lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>asm volatile (&quot;rdrand %0&quot;: &quot;=r&quot;(val));</code>使用了 <code>GCC</code> 内联汇编（<code>Inline Assembly</code>）的语法，使用 Intel 的 RDRAND 指令生成一个随机数，并将该随机数保存到变量 <code>val</code> 中。</p>
<p>具体来说，<code>%0</code> 表示占位符，用来代表第一个输入或输出操作数，这里是 <code>val</code>。而 <code>=r</code> 则表示将 <code>val</code> 寄存器中的值作为输出值，同时通知编译器该变量会被修改。</p>
<p>因此，该代码使用 RDRAND 生成一个随机数，并将其保存到 <code>val</code> 变量中。最后通过 <code>printf</code> 打印出该随机数。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O1 rdrand.c -g -o rdrand   
</span></span><span class="line"><span class="cl">                                                                                         
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns d8112baa2a77dd3e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns 106671f827a8f49e                                                           
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns 04adc0b810ec0565
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>volatile</code>提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，告诉编译器对该变量不做优化，都会直接从变量内存地址中读取数据，从而可以提供对特殊地址的稳定访问。</p>
<p>如果没有<code>volatile</code>关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。（简洁的说就是：<code>volatile</code>关键词影响编译器编译的结果，用<code>volatile</code>声明的变量表示该变量随时可能发生变化，与该变量有关的运算，不要进行编译优化，以免出错）</p>
</blockquote>
<ul>
<li>更改之后进行<code>gdb</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="k">volatile</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">114514</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;rdrand %0&#34;</span><span class="o">:</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;rdrand returns %016lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>每一次的调试结果都不一样，那我们应该如何复现<code>BUG</code>？
<ul>
<li>打开记录模式</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> record full
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter10-2.png" title="/img/Operating System/chapter10-2.png" data-thumbnail="/img/Operating System/chapter10-2.png" data-sub-html="<h2>on wsl</h2>">
        
    </a><figcaption class="image-caption"><code>on wsl</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-3.png" title="/img/Operating System/chapter10-3.png" data-thumbnail="/img/Operating System/chapter10-3.png" data-sub-html="<h2>layout asm</h2>">
        
    </a><figcaption class="image-caption"><code>layout asm</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-4.png" title="/img/Operating System/chapter10-4.png" data-thumbnail="/img/Operating System/chapter10-4.png" data-sub-html="<h2>rax值相同</h2>">
        
    </a><figcaption class="image-caption"><code>rax值相同</code></figcaption>
    </figure>
<ul>
<li><code>val</code>的值已经改变，如何向上回溯？
<ul>
<li>使用<code>rsi</code>往回执行</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-5.png" title="/img/Operating System/chapter10-5.png" data-thumbnail="/img/Operating System/chapter10-5.png" data-sub-html="<h2>rsi</h2>">
        
    </a><figcaption class="image-caption"><code>rsi</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-6.png" title="/img/Operating System/chapter10-6.png" data-thumbnail="/img/Operating System/chapter10-6.png" data-sub-html="<h2>返回旧值</h2>">
        
    </a><figcaption class="image-caption"><code>返回旧值</code></figcaption>
    </figure>
<h3 id="应用-2-record--replay">应用 (2): Record &amp; Replay</h3>
<ul>
<li>在程序执行时记录信息，结束后重现程序的行为
<ul>
<li>确定的程序不需要任何记录
<ul>
<li>假设$s_0$执行 1,000,000 条确定的指令后得到$s^{`}$
<ul>
<li>那么只要记录$s_0$和1,000,000</li>
<li>就能通过“再执行一次” 推导出$s^{`}$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>记录：[指令数（确定指令） + 结果（非确定指令）] $\times n$</li>
</ul>
<h3 id="应用-2-record--replay-contd">应用 (2): Record &amp; Replay (cont&rsquo;d)</h3>
<ul>
<li>
<p><code>Record &amp; Replay</code>: 只需记录 <code>non-deterministic</code> 的指令的<font color="red">效果</font></p>
</li>
<li>
<p>(单线程) 应用程序</p>
<ul>
<li>syscall, rdrand, rdtsc, &hellip;</li>
<li>rr (Mozilla)
<ul>
<li><a href="https://jyywiki.cn/OS/2022/slides/10.slides" target="_blank" rel="noopener noreffer">To catch a failure: The record-and-replay approach to debugging</a> (CACM'20)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>(单处理器) 操作系统</p>
<ul>
<li>
<p>mmio, in, out, rdrand, rdtsc, 中断, &hellip;</p>
</li>
<li>
<p>QEMU (<code>-icount shift=auto,rr=record,rrfile=replay.bin</code>)</p>
<ul>
<li><a href="https://jyywiki.cn/OS/2022/slides/10.slides" target="_blank" rel="noopener noreffer">ReVirt: Enabling intrusion analysis through virtual-machine logging and replay</a> (OSDI'02, Best Paper 🏅)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="采样状态机执行">采样状态机执行</h2>
<h3 id="关于性能优化">关于性能优化</h3>
<blockquote>
<p>Premature optimization is the root of all evil. (D. E. Knuth)</p>
</blockquote>
<ul>
<li>
<p>那到底怎么样才算 <code>mature</code> 呢？</p>
<ul>
<li>
<p>状态机的执行需要时间；对象需要占用空间</p>
</li>
<li>
<p>需要理解好 “时间花在哪里”、“什么对象占用了空间”</p>
</li>
</ul>
</li>
<li>
<p>我们需要真实执行的<font color="red">性能摘要</font>！</p>
<ul>
<li>
<p>本质的回答：“为了做某件事到底花去了多少资源”</p>
</li>
<li>
<p>简化的回答：“一段时间内资源的消耗情况”</p>
</li>
</ul>
</li>
</ul>
<h3 id="profiler-和性能摘要">Profiler 和性能摘要</h3>
<blockquote>
<p><b>性能摘要需要对程序执行性能影响最小（不能因为这个进程过多影响你检测的程序）</b>，往往不需要 full trace。</p>
</blockquote>
<ul>
<li><b><font color="red">隔一段时间 （比如一毫秒）“暂停” 程序、观察状态机的执行</font></b>
<ul>
<li><b>中断</b>就可以做到</li>
<li>将状态 [<em>s</em>→<em>s</em>′] “记账”
<ul>
<li>执行的语句</li>
<li>函数调用栈</li>
<li>服务的请求</li>
</ul>
</li>
<li>得到统计意义的性能摘要</li>
</ul>
</li>
</ul>
<hr>
<p>例子：Linux Kernel perf (支持硬件 PMU) - <a href="https://jyywiki.cn/pages/OS/2022/demos/ilp-demo.c" target="_blank" rel="noopener noreffer">ilp-demo.c</a></p>
<ul>
<li>perf list, perf stat (-e), perf record, perf report</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOOP 1000000000ul
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;mov $1, %%rax;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rdi;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rsi;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rdx;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rcx;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r10;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r8;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r9;&#34;</span> <span class="o">::</span>
</span></span><span class="line"><span class="cl">                     <span class="o">:</span> <span class="s">&#34;rax&#34;</span><span class="p">,</span> <span class="s">&#34;rdi&#34;</span><span class="p">,</span> <span class="s">&#34;rsi&#34;</span><span class="p">,</span> <span class="s">&#34;rdx&#34;</span><span class="p">,</span> <span class="s">&#34;rcx&#34;</span><span class="p">,</span> <span class="s">&#34;r10&#34;</span><span class="p">,</span> <span class="s">&#34;r8&#34;</span><span class="p">,</span> <span class="s">&#34;r9&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">loop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">LOOP</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ips</span> <span class="o">=</span> <span class="n">inst</span> <span class="o">/</span> <span class="p">((</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.2lfG instructions/s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ips</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装<code>perf</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ sudo apt install linux-tools-common
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> jungle: 
</span></span><span class="line"><span class="cl">Reading package lists... Done
</span></span><span class="line"><span class="cl">Building dependency tree... Done
</span></span><span class="line"><span class="cl">Reading state information... Done
</span></span><span class="line"><span class="cl">The following NEW packages will be installed:
</span></span><span class="line"><span class="cl">  linux-tools-common
</span></span><span class="line"><span class="cl"><span class="m">0</span> upgraded, <span class="m">1</span> newly installed, <span class="m">0</span> to remove and <span class="m">48</span> not upgraded.
</span></span><span class="line"><span class="cl">Need to get <span class="m">295</span> kB of archives.
</span></span><span class="line"><span class="cl">After this operation, <span class="m">812</span> kB of additional disk space will be used.
</span></span><span class="line"><span class="cl">Get:1 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 linux-tools-common all 5.15.0-69.76 <span class="o">[</span><span class="m">295</span> kB<span class="o">]</span>
</span></span><span class="line"><span class="cl">Fetched <span class="m">295</span> kB in 0s <span class="o">(</span><span class="m">4448</span> kB/s<span class="o">)</span>           
</span></span><span class="line"><span class="cl">debconf: unable to initialize frontend: Dialog
</span></span><span class="line"><span class="cl">debconf: <span class="o">(</span>Dialog frontend requires a screen at least <span class="m">13</span> lines tall and <span class="m">31</span> columns wide.<span class="o">)</span>
</span></span><span class="line"><span class="cl">debconf: falling back to frontend: Readline
</span></span><span class="line"><span class="cl">Selecting previously unselected package linux-tools-common.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Reading database ... <span class="m">81634</span> files and directories currently installed.<span class="o">)</span>
</span></span><span class="line"><span class="cl">Preparing to unpack .../linux-tools-common_5.15.0-69.76_all.deb ...
</span></span><span class="line"><span class="cl">Unpacking linux-tools-common <span class="o">(</span>5.15.0-69.76<span class="o">)</span> ...
</span></span><span class="line"><span class="cl">Setting up linux-tools-common <span class="o">(</span>5.15.0-69.76<span class="o">)</span> ...
</span></span><span class="line"><span class="cl">Processing triggers <span class="k">for</span> man-db <span class="o">(</span>2.10.2-1<span class="o">)</span> ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实际中的性能优化">实际中的性能优化</h3>
<ul>
<li>
<p>你们遇到的大部分情况</p>
<ul>
<li>
<p>二八定律：80% 的时间消耗在非常集中的几处代码</p>
</li>
<li>
<p><code>L1 (pmm)</code>: 小内存分配时的 <code>lock contention</code></p>
<ul>
<li><code>profiler</code> 直接帮你解决问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>工业界遇到的大部分情况
<ul>
<li>木桶效应：每个部分都已经 tune 到局部最优了
<ul>
<li>剩下的部分要么 profiler 信息不完整，要么就不好解决</li>
<li>(工程师整天都对着 profiler 看得头都大了)</li>
<li><a href="https://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/fulltext" target="_blank" rel="noopener noreffer">The flame graph（火焰图）</a> (CACM'16)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="model-checkerverifier">Model Checker/Verifier</h2>
<h3 id="model-checker-的威力大家已经知道了">Model Checker 的威力大家已经知道了</h3>
<ul>
<li>
<p>150 行代码的 <a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py" target="_blank" rel="noopener noreffer">model-checker.py</a></p>
<ul>
<li>
<p>证完所有《操作系统》课上涉及的并发程序</p>
</li>
<li>
<p>复现 OSTEP 教科书上的并发 bug (条件变量错误唤醒)</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>一些真正的 model checkers</p>
<ul>
<li>
<p><a href="https://lamport.azurewebsites.net/tla/tla.html" target="_blank" rel="noopener noreffer">TLA+</a> by Leslie Lamport;</p>
</li>
<li>
<p><a href="https://ti.arc.nasa.gov/tech/rse/vandv/jpf/" target="_blank" rel="noopener noreffer">Java PathFinder (JFP)</a> 和<a href="http://spinroot.com/" target="_blank" rel="noopener noreffer">SPIN</a></p>
<ul>
<li>它们都喜欢用 Peterson 算法做 tutorial 😁</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="model-checker-不仅是并发">Model Checker: 不仅是并发</h3>
<ul>
<li>任何 “<code>non-deterministic</code>” 的状态机都可以检查</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">u32</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rdrand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">u32</span> <span class="n">y</span> <span class="o">=</span> <span class="n">rdrand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">65</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bug</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// 可能空指针吗？
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>更高效的 <code>Model Checker</code>: “将相似状态合并”
<ul>
<li><a href="https://dl.acm.org/doi/10.5555/1855741.1855756" target="_blank" rel="noopener noreffer">KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs</a> (OSDI'08, Best Paper 🏅)</li>
<li>基于 <code>LLVM bitcode</code> 解释器实现</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>本次课回答的问题
<ul>
<li><strong>Q</strong>: 状态机的视角给了我们什么？</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Take-away messages</p>
<ul>
<li>
<p>编程 (状态机) 就是全世界</p>
</li>
<li>
<p>状态机可以帮我们</p>
<ul>
<li>建立物理世界的公理体系
<ul>
<li>理解调试器、<code>Trace, profiler</code></li>
<li>自动分析程序的执行 (<code>model checker</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter9 操作系统的状态机模型</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter9/</link>
    <pubDate>Sat, 25 Mar 2023 23:21:44 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter9/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>并发……就这么……讲完了……
<ul>
<li>理解的方式：“玩一玩” 示例代码</li>
</ul>
</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 听说操作系统也是程序。那到底是鸡生蛋还是蛋生鸡？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>软件和硬件的桥梁</li>
<li>操作系统的加载和初始化</li>
<li>AbstractMachine 代码导读</li>
</ul>
<h2 id="自己动手写操作系统">自己动手写操作系统</h2>
<h3 id="时事热评">时事热评</h3>
<p><a href="https://www.bilibili.com/video/BV14T4y1D7y8" target="_blank" rel="noopener noreffer">小学生写了三个月的操作系统是什么样的？</a></p>
<ul>
<li>看到 i386 就知道了嘛</li>
</ul>
<h3 id="本学期的-oslabs">本学期的 OSLabs</h3>
<p>热身实验</p>
<ul>
<li>Lab0 (amgame): 熟悉代码框架</li>
</ul>
<hr>
<p>正经实验</p>
<ul>
<li>
<p>Lab1 (pmm): Physical memory management</p>
<ul>
<li>多处理器 (bare-metal) 上的 kalloc/free</li>
</ul>
</li>
<li>
<p>Lab2 (kmt): Kernel multi-threading</p>
<ul>
<li>中断和异常驱动的上下文 (线程) 切换</li>
</ul>
</li>
<li>
<p>Lab3 (uproc): User processes</p>
<ul>
<li>虚拟地址空间、用户态进程和系统调用</li>
</ul>
</li>
<li>
<p>Lab4 (vfs): Virtual file system</p>
<ul>
<li>devfs, procfs, 简单的文件系统；ELF 加载器</li>
</ul>
</li>
</ul>
<h3 id="大学的真正意义">大学的真正意义</h3>
<blockquote>
<p>将已有的知识和方法重新消化，为大家建立好 “台阶”，在有限的时间里迅速<font color="red">赶上数十年来建立起的学科体系</font></p>
</blockquote>
<hr>
<ul>
<li>
<p>例子：破除 “写操作系统很难”、“写操作系统很牛” 的错误认识</p>
<ul>
<li>
<p>操作系统真的就是个 C 程序</p>
</li>
<li>
<p>你只是需要 “被正确告知” 一些额外的知识</p>
<ul>
<li>然后写代码、吃苦头</li>
<li>从而建立正确的 “专业世界观”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="例子">例子</h3>
<ul>
<li>
<p>“专业世界观” 的例子 (这些都没啥，paper 都发不了)</p>
<ul>
<li>
<p>写 x86 模拟器的时候，不知道哪条指令错了，怎么办？</p>
</li>
<li>
<p>做操作系统实验的时候，如果遇到神秘 CPU Reset，怎么办？</p>
</li>
<li>
<p>做实验做不下去的时候，该实现什么工具？</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>“专业世界观” 的学习方法</p>
<ul>
<li>
<p>经典研究论文 (OSDI, SOSP, ATC, EuroSys, &hellip;)</p>
</li>
<li>
<p>久经考验的经典教学材料 (xv6, OSTEP, CSAPP, &hellip;)</p>
</li>
<li>
<p>海量的开源工具 (GNU 系列, qemu, gdb, &hellip;)</p>
</li>
<li>
<p>第三方资料，慎用 (tutorials, osdev wiki, &hellip;)</p>
</li>
</ul>
</li>
</ul>
<h2 id="硬件和软件的桥梁">硬件和软件的桥梁</h2>
<h3 id="c-程序">C 程序</h3>
<ul>
<li>
<p>我们已经知道如何写一个 “最小” 的 C 程序了：</p>
<ul>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a></p>
</li>
<li>
<p>不需要链接任何库，就能在操作系统上运行</p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_write</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>   <span class="c1">// write(
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="c1">//   fd=1,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span>        <span class="o">%</span><span class="n">rsi</span>   <span class="c1">//   buf=st,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>   <span class="c1">//   count=ed-st
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">syscall</span>                 <span class="c1">// );
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_exit</span><span class="p">,</span>  <span class="o">%</span><span class="n">rax</span>   <span class="c1">// exit(
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="c1">//   status=1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">syscall</span>                 <span class="c1">// );
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>“程序 = 状态机” 没问题</p>
</li>
<li>
<p>带来更多的疑问</p>
<ul>
<li><font color="red">但谁创建的这个状态机？？？</font>
<ul>
<li>当然是操作系统了……呃…… $\Longrightarrow$ 参考<a href="https://jungle430.github.io/posts/operating-system/support2/#%E4%BB%8E%E6%88%91%E4%BB%AC%E7%BB%88%E7%AB%AF%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%88%B0%E7%A8%8B%E5%BA%8F%E8%A2%AB%E8%BD%BD%E5%85%A5%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreffer">从我们终端敲回车到程序被载入执行的过程中发生了什么？</a></li>
</ul>
</li>
<li><font color="red">这个程序可以在没有操作系统的硬件上运行吗？</font>
<ul>
<li>“启动” 状态机是由 “加载器” 完成的</li>
<li>加载器也是一段程序 (状态机)</li>
<li>这个程序由是由谁加载的？</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ file minimal
</span></span><span class="line"><span class="cl">minimal: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bare-metal-与程序员的约定">Bare-metal 与程序员的约定</h3>
<ul>
<li>
<p>计算机硬件运行的时候也是状态机</p>
</li>
<li>
<p>为了让计算机能<font color="red">运行任何我们的程序</font>，一定存在软件/硬件的约定</p>
</li>
</ul>
<hr>
<ul>
<li>
<p><b>CPU reset</b> 后，处理器处于某个<b>确定的状态</b></p>
<ul>
<li><b>PC 指针</b>一般指向一段 <font color="blue">memory-mapped ROM</font>
<ul>
<li>ROM 存储了厂商提供的 firmware (固件)</li>
</ul>
</li>
<li>处理器的大部分特性处于关闭状态
<ul>
<li>缓存、虚拟存储、……</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Firmware (固件，厂商提供的代码)</p>
<ul>
<li>将用户数据加载到内存
<ul>
<li>例如存储介质上的第二级 loader (加载器)</li>
<li>或者直接加载操作系统 (嵌入式系统)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="x86-family-cpu-reset-行为">x86 Family: CPU Reset 行为</h3>
<ul>
<li>
<p>CPU Reset (<a href="https://software.intel.com/en-us/articles/intel-sdm" target="_blank" rel="noopener noreffer">Intel® 64 and IA-32 Architectures Software Developer’s Manual</a>, Volume 3A/3B)</p>
</li>
<li>
<p>寄存器会有初始状态</p>
<ul>
<li>
<p><code>EIP = 0x0000fff0</code></p>
</li>
<li>
<p><code>CR0 = 0x60000010</code></p>
<ul>
<li>16-bit 模式 $\Longrightarrow$ 2010年前的老电脑会兼容老接口和老的操作系统</li>
</ul>
</li>
<li>
<p><code>EFLAGS = 0x00000002</code></p>
</li>
<li>
<p>interrupt disabled（中断关闭）</p>
</li>
</ul>
</li>
<li>
<p>TFM (5,000 页 by 2019)</p>
<ul>
<li>最需要的 Volume 3A 只有 468 页</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-1.png" title="/img/Operating System/chapter9-1.png" data-thumbnail="/img/Operating System/chapter9-1.png" data-sub-html="<h2>friendly manual</h2>">
        
    </a><figcaption class="image-caption"><code>friendly manual</code></figcaption>
    </figure>
<ul>
<li>让<code>qemu</code>模拟器停在第一条指令上，和上面的手册对照，会发现和手册一致</li>
</ul>
<h3 id="cpu-reset-之后发生了什么">CPU Reset 之后：发生了什么？</h3>
<ul>
<li>
<p>《计算机系统基础》：<font color="red">不仅是程序，整个计算机系统也是一个状态机</font></p>
<ul>
<li>
<p>从 PC (<code>CS:IP</code>) 指针处取指令、译码、执行……</p>
</li>
<li>
<p>从 firmware 开始执行</p>
<ul>
<li><code>ffff0</code>(PC初始化的值) 通常是一条向 firmware 跳转的 jmp 指令</li>
</ul>
</li>
</ul>
</li>
<li>
<p>厂商会在<code>ROW</code>里面放好写死的代码（Only-read）</p>
</li>
<li>
<p>Firmware: <a href="https://www.zhihu.com/question/21672895" target="_blank" rel="noopener noreffer">BIOS vs. UEFI</a></p>
<ul>
<li>
<p>都是主板/主板上外插设备的软件抽象</p>
<ul>
<li>支持系统管理程序运行</li>
</ul>
</li>
<li>
<p>Legacy BIOS (Basic I/O System)</p>
</li>
<li>
<p>UEFI (Unified Extensible Firmware Interface)</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-2.png" title="/img/Operating System/chapter9-2.png" data-thumbnail="/img/Operating System/chapter9-2.png" data-sub-html="<h2>BIOS</h2>">
        
    </a><figcaption class="image-caption"><code>BIOS</code></figcaption>
    </figure>
<h3 id="legacy-bios-约定">Legacy BIOS: 约定</h3>
<p><b>Firmware 必须提供机制，将用户数据载入内存</b></p>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>Legacy BIOS 把<b>第一个可引导设备的第一个扇区加载到物理内存的 <code>7c00</code> 位置</b>，这也是我们Fireware和OS之间的第一次，也是唯一一次握手</p>
<ul>
<li>
<p>此时处理器处于 16-bit 模式</p>
</li>
<li>
<p>规定 <code>CS:IP = 0x7c00</code>, <code>(R[CS] &lt;&lt; 4) | R[IP] == 0x7c00</code></p>
<ul>
<li>
<p>可能性1：<code>CS = 0x07c0, IP = 0</code></p>
</li>
<li>
<p>可能性2：<code>CS = 0, IP = 0x7c00</code></p>
</li>
</ul>
</li>
<li>
<p>其他没有任何约束</p>
</li>
</ul>
</li>
<li>
<p>Windows启动模式：老的Windows的A，B盘都是软盘，BIOS先去软盘里面读前512个<code>bytes</code>，看最后两个byte是否为<code>55aa</code>（大端），如果是就加载这块磁盘，否则读下一块，如果都不是就启动失败。读完A/B盘之后引导到C盘，这也是为什么今天的Windows操作系统C盘是系统盘的原因</p>
</li>
<li>
<p>Firmware做的事情（以BIOS为例）</p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<h3 id="能不能看一下代码">能不能看一下代码？</h3>
<blockquote>
<p>Talk is cheap. Show me the code. ——Linus Torvalds</p>
</blockquote>
<ul>
<li>
<p>有没有可能我们真的去看从 CPU Reset 以后每一条指令的执行？</p>
</li>
<li>
<p><font color="red">计算机系统公理：你想到的就一定有人做到</font></p>
</li>
<li>
<p>模拟方案：QEMU</p>
<ul>
<li>传奇黑客、天才程序员 <a href="https://www.zhihu.com/question/28388113" target="_blank" rel="noopener noreffer">Fabrice Bellard</a> 的杰作（其他:ffmpeg)
<ul>
<li><a href="https://www.usenix.org/legacy/publications/library/proceedings/usenix05/tech/freenix/full_papers/bellard/bellard.pdf" target="_blank" rel="noopener noreffer">QEMU, A fast and portable dynamic translator</a> (USENIX ATC'05)</li>
<li>Android Virtual Device, VirtualBox, &hellip; 背后都是 QEMU</li>
</ul>
</li>
</ul>
</li>
<li>
<p>真机方案：JTAG (Joint Test Action Group) debugger</p>
<ul>
<li>一系列 (物理) 调试寄存器，可以实现 gdb 接口 (!!!)</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-3.png" title="/img/Operating System/chapter9-3.png" data-thumbnail="/img/Operating System/chapter9-3.png" data-sub-html="<h2>ffmpeg</h2>">
        
    </a><figcaption class="image-caption"><code>ffmpeg</code></figcaption>
    </figure>
<h3 id="调试-qemu-确认-firmware-的行为">调试 QEMU: 确认 Firmware 的行为</h3>
<blockquote>
<p>亲眼确认 Firmware 到底是不是会加载启动盘第一个扇区到 <code>0x7c00</code> 内存位置！</p>
</blockquote>
<p>调试 QEMU 模拟器</p>
<ul>
<li>
<p>查看 CPU Reset 后的寄存器</p>
<ul>
<li><code>info registers</code></li>
</ul>
</li>
<li>
<p>查看<code>0x7c00</code>内存的加载</p>
<ul>
<li><code>watch *0x7c00</code> - 《计算机系统基础》的良苦用心</li>
<li>查看当前指令 <code>x/i ($cs * 16 + $rip)</code></li>
<li>打印内存 <code>x/16xb 0x7c00</code></li>
</ul>
</li>
<li>
<p>进入<code>0x7c00</code>代码的执行</p>
<ul>
<li><code>b *0x7c00</code>, <code>c</code> (撒花！我们一会再回来)</li>
</ul>
</li>
</ul>
<h3 id="鸡和蛋的问题解决">鸡和蛋的问题解决</h3>
<ul>
<li>
<p>有个原始的鸡：Firmware</p>
<ul>
<li>
<p>代码直接存在于硬件里</p>
</li>
<li>
<p>CPU Reset 后 Firmware 会执行</p>
<ul>
<li>加载 512 字节到内存 (Legacy Boot)
<ul>
<li>然后功成身退</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Firmware 的另一用处</p>
<ul>
<li>放置一些 “绝对安全的代码”
<ul>
<li><a href="https://jyywiki.cn/pages/OS/manuals/BIOS-interrupts.pdf" target="_blank" rel="noopener noreffer">BIOS 中断</a> (Hello World 是如何被打印的)</li>
<li>如果加载失败将错误信息打印出来</li>
<li>ARM Trusted Firmware
<ul>
<li>Boot-Level 1, 2, 3.1, 3.2, 3.3</li>
<li><a href="https://www.denx.de/wiki/U-Boot" target="_blank" rel="noopener noreffer">U-Boot</a>: the universal boot loader</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="小插曲firmware-的病毒-1998">小插曲：Firmware 的病毒 (1998)</h3>
<ul>
<li>
<p>Firmware 通常是只读的 (当然……)</p>
</li>
<li>
<p>Intel 430TX (Pentium) 芯片组允许<font color="red">写入 Flash ROM</font></p>
<ul>
<li>
<p>只要向 Flash BIOS 写入特定序列，Flash ROM 就变为可写</p>
<ul>
<li>留给 firmware 更新的通道</li>
</ul>
</li>
<li>
<p>要得到这个序列其实并不困难</p>
<ul>
<li>似乎文档里就有 🤔 Boom……</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://zh.wikipedia.org/zh-tw/CIH%E7%97%85%E6%AF%92" target="_blank" rel="noopener noreffer">CIH</a> 的作者陈盈豪被逮捕，但并未被定罪</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-4.gif" title="/img/Operating System/chapter9-4.gif" data-thumbnail="/img/Operating System/chapter9-4.gif" data-sub-html="<h2>病毒代码结尾的CIH</h2>">
        
    </a><figcaption class="image-caption">病毒代码结尾的<code>CIH</code></figcaption>
    </figure>
<h3 id="今天的-firmware-uefi">今天的 Firmware: UEFI</h3>
<ul>
<li>
<p>IBM PC 所有设备/BIOS 中断是有 specification 的 (成就了 “兼容机”)</p>
</li>
<li>
<p>今天的 boot loader 面临麻烦得多的硬件：</p>
<ul>
<li>指纹锁、不知名厂商生产网卡上的网络启动、USB 上的蓝牙转接器连接的蓝牙键盘、……</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-5.png" title="/img/Operating System/chapter9-5.png" data-thumbnail="/img/Operating System/chapter9-5.png" data-sub-html="<h2>UEFI</h2>">
        
    </a><figcaption class="image-caption"><code>UEFI</code></figcaption>
    </figure>
<h3 id="uefi-上的操作系统加载">UEFI 上的操作系统加载</h3>
<ul>
<li>
<p>标准化的加载流程</p>
<ul>
<li>
<p>盘必须按 GPT (GUID Partition Table) 方式格式化</p>
</li>
<li>
<p>预留一个 FAT32 分区 (lsblk/fdisk 可以看到)</p>
</li>
<li>
<p>Firmware 加载任意大小的 PE 可执行文件<code>.efi</code></p>
<ul>
<li>
<p>没有 legacy boot 512 字节限制</p>
</li>
<li>
<p>EFI 应用可以返回 firmware</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>更好的程序支持</p>
<ul>
<li>
<p>设备驱动框架</p>
</li>
<li>
<p>更多的功能，例如 Secure Boot，只能启动 “信任” 的操作系统</p>
</li>
</ul>
</li>
</ul>
<h2 id="操作系统的状态机模型">操作系统的状态机模型</h2>
<h3 id="操作系统-的状态机已经启动">“操作系统” 的状态机已经启动</h3>
<ul>
<li>Firmware 和 boot loader 共同完成 “操作系统的加载”
<ul>
<li>初始化全局变量和栈；分配堆区 (<code>heap</code>)</li>
<li>为 <code>main</code> 函数传递参数
<ul>
<li>谁给操作系统传递了参数？</li>
<li>如何实现参数传递？</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>进入 C 代码之后</p>
<ul>
<li>
<p>完全遵循 C 语言的形式语义</p>
</li>
<li>
<p>但有一些行为 “补充” —— AbstractMachine API</p>
</li>
</ul>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<h3 id="操作系统是个-c-程序">操作系统：是个 C 程序</h3>
<ul>
<li>一个迷你 “操作系统” <a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a>
<ul>
<li>make 会得到一个 “磁盘镜像”，好像魔法一样
<ul>
<li>就跟你们第一次用 IDE 的时候按一个键就可以编译运行一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>thread-os.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;am.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib-macros.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define MAX_CPU 8
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">union</span> <span class="n">task</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="n">task</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span>      <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Context</span>    <span class="o">*</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint8_t</span> <span class="n">stack</span><span class="p">[</span><span class="mi">8192</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Task</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="o">*</span><span class="n">currents</span><span class="p">[</span><span class="n">MAX_CPU</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define current currents[cpu_current()]
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// user-defined tasks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span>   <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span> <span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Thread-%s on CPU #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="k">volatile</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="n">tasks</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;A&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;B&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;D&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;E&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="abstractmachine-对-c-程序语义-做出的扩充">AbstractMachine 对 “C 程序语义” 做出的扩充</h3>
<ul>
<li>
<p>TRM + MPE</p>
<ul>
<li>
<p>完全等同于多线程 (处理器相当于线程) - L1/native</p>
</li>
<li>
<p>IOE API: 完全是普通的库函数</p>
<ul>
<li>同一设备的数据竞争 = undefined behavior</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>CTE</p>
<ul>
<li>
<p>允许创建多个执行流 (类比协程) - M2</p>
</li>
<li>
<p>yield 主动切换；会被中断被动打断</p>
</li>
<li>
<p><code>on_interrupt</code> 会拦截到中断事件</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>VME</p>
<ul>
<li>
<p>允许创建一个 “经过地址翻译的执行模式”</p>
</li>
<li>
<p>通过 CTE API 管理</p>
</li>
</ul>
</li>
<li>
<p>有关中断代码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">iset</span><span class="p">(</span><span class="kt">bool</span> <span class="n">enable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">sigset_t</span> <span class="n">__am_intr_sigmask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// NOTE: sigprocmask does not supported in multithreading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">sigprocmask</span><span class="p">(</span><span class="n">enable</span> <span class="o">?</span> <span class="nl">SIG_UNBLOCK</span> <span class="p">:</span> <span class="n">SIG_BLOCK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__am_intr_sigmask</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rtfsc-时间">RTFSC 时间</h2>
<h3 id="0-生成镜像和启动虚拟机">(0) 生成镜像和启动虚拟机</h3>
<blockquote>
<p>如果使用 “土办法”，你很可能被淹没在 Makefile 中</p>
<ul>
<li>读懂 Makefile 需要 STFW, RTFM，大量的精力</li>
<li>虽然花点时间读是值得的，但很可能读了很久都没读到重要的地方</li>
</ul>
</blockquote>
<ul>
<li>
<p>花一点时间想 “应该怎么做”</p>
<ul>
<li>
<p>花几分钟创建一个小工具：“AbstractMachine 构建理解工具”</p>
<ul>
<li>UNIX Philosophy: keep it simple, stupid</li>
<li>everything is a file; write things to work together using text interface</li>
</ul>
</li>
<li>
<p><em>Get out of your comfort zone</em></p>
</li>
</ul>
</li>
</ul>
<p>Abstract-Machine 通过脚本+重定向可以转化为<a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/abstract-machine-Makefile.html" target="_blank" rel="noopener noreffer">HTML代码</a>进行阅读</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿jungle-virtual-machine<span class="o">)</span>-<span class="o">[</span>~/deom1/abstract-machine<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ sudo apt install python3-markdown
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿jungle-virtual-machine<span class="o">)</span>-<span class="o">[</span>~/deom1/abstract-machine<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cat Makefile <span class="p">|</span> sed <span class="s1">&#39;s/^\([^#]\)/    \1/g&#39;</span> <span class="p">|</span> markdown_py &gt; Makefile.html
</span></span></code></pre></td></tr></table>
</div>
</div><p>注：使用了自动化工具<a href="https://python-markdown.github.io" target="_blank" rel="noopener noreffer">python3-markdown</a></p>
<h3 id="0-生成镜像和启动虚拟机-contd">(0) 生成镜像和启动虚拟机 (cont&rsquo;d)</h3>
<ul>
<li>观察 AbstractMachine 程序编译过程的正确方法：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make -nB <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> grep -ve <span class="s1">&#39;^\(\#\|echo\|mkdir\|make\)&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> sed <span class="s2">&#34;s#</span><span class="nv">$AM_HOME</span><span class="s2">#\$AM_HOME#g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> sed <span class="s2">&#34;s#</span><span class="nv">$PWD</span><span class="s2">#.#g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> vim -
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Command line tricks</p>
<ul>
<li><code>make -nB</code> (RTFM)</li>
<li>grep: 文本过滤，省略了一些干扰项
<ul>
<li>echo (提示信息), mkdir (目录建立), make (sub-goals)</li>
</ul>
</li>
<li>sed: 让输出更易读
<ul>
<li>将绝对路径替换成相对路径</li>
</ul>
</li>
<li>vim: 更舒适的编辑/查看体验</li>
</ul>
</li>
<li>
<p>部分<code>make -nB</code>的输出信息</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># Building hello-image [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/deom/build/x86_64-qemu/ <span class="err">&amp;&amp;</span> echo + CC main.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/deom/build/x86_64-qemu/main.o /home/jungle/deom1/deom/main.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/deom/build/x86_64-qemu/ <span class="err">&amp;&amp;</span> echo + CC say.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/deom/build/x86_64-qemu/say.o /home/jungle/deom1/deom/say.c
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/am archive
</span></span><span class="line"><span class="cl"><span class="gh"># Building am-archive [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + AS src/x86/qemu/start64.S
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -MMD -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -m64 -fPIC -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/start64.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/start64.S
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + AS src/x86/qemu/trap64.S
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -MMD -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -m64 -fPIC -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trap64.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/trap64.S
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/trm.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trm.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/trm.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/cte.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/cte.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/cte.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/ioe.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/ioe.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/vme.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/vme.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/vme.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/mpe.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/mpe.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/mpe.c
</span></span><span class="line"><span class="cl">echo + AR &#34;-&gt;&#34; build/am-x86_64-qemu.a
</span></span><span class="line"><span class="cl">ar rcs /home/jungle/deom1/abstract-machine/am/build/am-x86_64-qemu.a /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/start64.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trap64.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trm.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/cte.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/vme.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/mpe.o
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/klib archive
</span></span><span class="line"><span class="cl"><span class="gh"># Building klib-archive [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/stdio.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdio.o /home/jungle/deom1/abstract-machine/klib/src/stdio.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/int64.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/int64.o /home/jungle/deom1/abstract-machine/klib/src/int64.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/string.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/string.o /home/jungle/deom1/abstract-machine/klib/src/string.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/cpp.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/cpp.o /home/jungle/deom1/abstract-machine/klib/src/cpp.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/stdlib.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdlib.o /home/jungle/deom1/abstract-machine/klib/src/stdlib.c
</span></span><span class="line"><span class="cl">echo + AR &#34;-&gt;&#34; build/klib-x86_64-qemu.a
</span></span><span class="line"><span class="cl">ar rcs /home/jungle/deom1/abstract-machine/klib/build/klib-x86_64-qemu.a /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdio.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/int64.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/string.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/cpp.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdlib.o
</span></span><span class="line"><span class="cl">echo + LD &#34;-&gt;&#34; build/hello-x86_64-qemu.elf
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-ld -melf_x86_64 -N -Ttext-segment=0x00100000 -o /home/jungle/deom1/deom/build/hello-x86_64-qemu.elf --start-group /home/jungle/deom1/deom/build/x86_64-qemu/main.o /home/jungle/deom1/deom/build/x86_64-qemu/say.o /home/jungle/deom1/deom/../abstract-machine/am/build/am-x86_64-qemu.a /home/jungle/deom1/deom/../abstract-machine/klib/build/klib-x86_64-qemu.a --end-group
</span></span><span class="line"><span class="cl">echo \# Creating image [x86_64-qemu]
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/am/src/x86/qemu/boot
</span></span><span class="line"><span class="cl">echo + CC start.S main.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -static -m32 -fno-pic -Os -nostdlib -Ttext 0x7c00 -I/home/jungle/deom1/deom/../abstract-machine/am/src -o bootblock.o start.S main.c
</span></span><span class="line"><span class="cl">python3 genboot.py bootblock.o
</span></span><span class="line"><span class="cl">echo + CREATE &#34;-&gt;&#34; build/hello-x86_64-qemu
</span></span><span class="line"><span class="cl">( cat /home/jungle/deom1/deom/../abstract-machine/am/src/x86/qemu/boot/bootblock.o; head -c 1024 /dev/zero; cat /home/jungle/deom1/deom/build/hello-x86_64-qemu.elf ) &gt; /home/jungle/deom1/deom/build/hello-x86_64-qemu
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="0-生成镜像和启动虚拟机-contd-1">(0) 生成镜像和启动虚拟机 (cont&rsquo;d)</h3>
<p>想要看得更清楚一些？</p>
<ul>
<li><code>:%s/ /\r /g</code>
<ul>
<li>每一个命令就像 “一句话”</li>
</ul>
</li>
</ul>
<hr>
<p>编译</p>
<ul>
<li><code>-std=gnu11</code>, <code>m64</code>, <code>-mno-sse</code>, <code>-I</code>, <code>-D</code>, &hellip; (这对你配置 vscode 很重要)</li>
</ul>
<p>链接</p>
<ul>
<li><code>-melf_x86_64</code>, <code>-N</code>, <code>-Ttext-segment=0x00100000</code></li>
<li>链接了需要的库 (<code>am-x86_64-qemu.a</code>, <code>klib-x86_64-qemu.a</code>)</li>
</ul>
<p>彩蛋</p>
<ul>
<li><code>make html</code></li>
</ul>
<h3 id="1-启动加载器-boot-loader">(1) 启动加载器 (Boot Loader)</h3>
<p>512 字节中的代码，假设了镜像格式 (真正的的加载器有很多 stages)</p>
<ul>
<li>16-bit → 32-bit</li>
<li>ELF32/64 的加载器
<ul>
<li>按照约定的磁盘镜像格式加载</li>
</ul>
</li>
</ul>
<p>代码讲解：</p>
<ul>
<li><code>am/src/x86/qemu/boot/start.S</code>和<code>main.c</code>
<ul>
<li>它们都可以调试！</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">elf32</span><span class="o">-&gt;</span><span class="n">e_machine</span> <span class="o">==</span> <span class="n">EM_X86_64</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">((</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">elf64</span><span class="o">-&gt;</span><span class="n">e_entry</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">((</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">elf32</span><span class="o">-&gt;</span><span class="n">e_entry</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 操作系统也是程序，它如何用状态机如何定义？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>一切皆可调试 (包括 firmware)
<ul>
<li>理解操作系统是如何被启动的</li>
<li>学会使用 gdb (必备生存技能)</li>
</ul>
</li>
<li>操作系统也是程序
<ul>
<li>AbstractMachine 扩展了程序的语义，仅此而已</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
</channel>
</rss>
