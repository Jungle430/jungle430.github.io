<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/</link>
        <description>Welcome to Jungle&#39;s blog.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>junglece430@gmail.com (Jungle)</managingEditor>
            <webMaster>junglece430@gmail.com (Jungle)</webMaster><lastBuildDate>Mon, 08 Apr 2024 20:02:45 &#43;0800</lastBuildDate>
            <atom:link href="https://Jungle430.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>CMU 15-445 Lecture #06: Buffer Pools</title>
    <link>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter6/</link>
    <pubDate>Mon, 08 Apr 2024 20:02:45 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter6/</guid>
    <description><![CDATA[<h1 id="cmu-15-445-database-systems">CMU 15-445 Database Systems</h1>
<h2 id="lecture-06-buffer-pools">Lecture #06: Buffer Pools</h2>
<h3 id="introduction">Introduction</h3>
<ul>
<li>DBMS需要负责管理数据在内存和磁盘之间移动，大多数情况下数据不能在磁盘中被处理，而是需要加载到内存中，处理完成后再写回磁盘，这个过程就需要Buffer Pools来进行管理，使得DBMS的其他部分可以像在内存中处理所有数据那样进行操作</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter6-1.png" title="/img/CMU 15-445 Database Systems/chapter6-1.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter6-1.png" data-sub-html="<h2>Buffer Pool模型</h2>">
        
    </a><figcaption class="image-caption">Buffer Pool模型</figcaption>
    </figure>
<ul>
<li>一个DBMS需要考虑下面的两个方面
<ul>
<li><strong>Spatial Control</strong>: refers to where pages are physically written on disk. The goal of spatial control is to keep pages
that are used together often as physically close together as possible on disk to possibly help with prefetching and
other optimizations.(写磁盘的时候把需要经常一起用的页尽量写到磁盘的一块地方，这样下次用也能够一把加载到Buffer Pool里面)</li>
<li><strong>Temporal Control</strong>: is deciding when to read pages into memory and when to write them to disk. Temporal control
aims to minimize the number of stalls from having to read data from disk.(何时写回磁盘，对于一些热点写数据没有必要写一次刷一次盘，完全可以写好多次刷一次磁盘，因为刷盘的代价太大了)</li>
</ul>
</li>
</ul>
<h3 id="locks-vs-latches">Locks vs. Latches</h3>
<ul>
<li>
<p>英语和概念性的问题</p>
</li>
<li>
<p><strong>Locks</strong>: A lock is a higher-level, logical primitive that protects the contents of a database (e.g., tuples, tables, databases)
from other transactions. Database systems can expose to the user which locks are being held as queries are run. Locks
need to be able to roll back changes.(逻辑上面的锁，比如行锁/表锁/库锁，不关心底层实现，用于理论上面的讨论，为了防止死锁，一般这种锁都可以回滚)</p>
</li>
<li>
<p><strong>Latches</strong>: A latch is a low-level protection primitive that the DBMS uses for the critical sections in its internal data
structures (e.g., hash tables, regions of memory). Latches are held for only the duration of the operation being made.
Latches do not need to be able to roll back changes. This is often implemented by simple language primitives like
mutexs and/or conditional variables.(Locks的具体实现，比如数据竞争的区域是哪，用互斥锁还是信号量，悲观锁还是乐观锁)</p>
</li>
</ul>
<h3 id="buffer-pool">Buffer Pool</h3>
<ul>
<li>
<p>It is organized as an array of fixed-size pages. Each array entry is called a frame. 缓存池的本质就是内存里面的一块固定的数组，这个里面的一个元素就叫frame了，但是其实和page是一个东西</p>
</li>
<li>
<p><strong>page directory</strong>:在数据库的磁盘上还维护了一个page directory，这个东西存的就是页id到页在磁盘物理位置的映射，所以说这个如果修改了必须写回到磁盘上，这样DBMS重新启动的时候才能找到，他也通常回一直在内存里面，因为你找页必须要先通过page directory去找页的物理位置</p>
</li>
<li>
<p><strong>Buffer Pool Meta-data</strong>:缓存池必须要存储一些meta-data，从而保证正确性和提高缓存池的效率，常见的一些meta-data</p>
<ul>
<li>
<p><strong>page table</strong>:这个是内存中的一个hash表，它的映射是页面id $\rightarrow$ 这个页在缓存池中的帧位置，因为页在缓存池里面的顺序和磁盘中的顺序往往不一致，所以需要page table来做这个额外的间接层，除了页在缓存池中的位置，page table还维护了其他meta-data，比如一个脏标志（说明这个页是不是脏页），引用计数器（有哪几个事务在用它），这个和page directory的一个大的区别就是他不用记在磁盘上</p>
</li>
<li>
<p><strong>dirty-flag</strong>:这个就是上面page table维护的一个页的meta-data之一，当有线程对buffer pool中的某个页面进行修改的时候这个标志会被设置，这提醒这个页在被踢出buffer pool的时候必须要刷盘</p>
</li>
<li>
<p><strong>Pin/reference counter</strong>:这个也是上面page table维护的一个页的meta-data之一，主要是记录有几个线程正在访问该页，线程必须在访问该页之前增加counter，如果counter &gt; 0，那么该页就无法被驱逐，counter不会管理并发事务那些东西，如果当前缓冲池的所有页都无法被踢，而且已经满了，就会抛出OOM(out-of-memory)的错误</p>
</li>
</ul>
</li>
<li>
<p><strong>Memory Allocation Policies</strong></p>
<ul>
<li>
<p>Memory in the database is allocated for the buffer pool according to two policies</p>
</li>
<li>
<p><strong>Global policies</strong>: 考虑所有事务，来找到分配内存的最佳决策</p>
</li>
<li>
<p><strong>local policies</strong>:做出决策的时候只考虑单个事务，即使他不适合整个工作负载，本地策略将帧分配给特定的事务，而不考虑并发事务的行为。但是，它仍然支持事务之间共享帧</p>
</li>
<li>
<p>Most systems use a combination of both global and local policies.</p>
</li>
</ul>
</li>
</ul>
<h3 id="buffer-pool-optimizations">Buffer Pool Optimizations</h3>
<ul>
<li><strong>Multiple Buffer Pools</strong>
<ul>
<li>DBMS可以开好多个缓冲池，比如按照类型分（索引缓冲池，数据缓冲池），同一类似使用hash再分到不同的区域，这样每个缓冲池都可以选择适合自己的存储策略，同时分成多个缓存池也避免了一个缓冲池频繁的锁竞争问题</li>
<li>Object IDs and hashing are two approaches to mapping desired pages to a buffer pool.
<ul>
<li><strong>Object IDs</strong>:维护一个id到缓存池区域的映射，这样根据页的id就能分配到对应的缓存池中，而且这个映射自己维护，你可以把分配的策略做的更细更智能，代价就是这个映射也是额外的内存开销</li>
<li><strong>hashing</strong>:对页的id做hash来确定到那块缓存池</li>
</ul>
</li>
</ul>
</li>
<li><strong>Pre-fetching</strong>: 根据查询计划来对预取页面进行优化，比如处理第一组页面的时候把第二组页面给预提取到缓冲池中（这个在顺序扫描的时候常用），在索引扫描的时候处理某个叶子页的时候可以把这个叶子页的下一页也预提取到缓冲池中，这都提高了效率（这个下一页都是逻辑上的，不是物理上的）</li>
<li></li>
</ul>
]]></description>
</item>
<item>
    <title>CMU 15-445 Lecture #05: Storage Models &amp; Compression</title>
    <link>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter5/</link>
    <pubDate>Mon, 08 Apr 2024 10:31:51 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter5/</guid>
    <description><![CDATA[<h1 id="cmu-15-445-database-systems">CMU 15-445 Database Systems</h1>
<h2 id="lecture-05-storage-models--compression">Lecture #05: Storage Models &amp; Compression</h2>
<h3 id="database-workloads">DataBase WorkLoads</h3>
<ul>
<li>
<p><strong>On-Line Transaction Processing(OLTP)</strong>:Fast operations that only read/update a small amount of data each time.</p>
<ul>
<li>快速操作，事务简单，读/写数据量很小</li>
<li>通常处理的写操作多于读操作</li>
<li>例子：银行转一次钱</li>
<li>往往意味着高并发，比如支付宝，微信支付</li>
</ul>
</li>
<li>
<p><strong>On-Line Analytical Processing(OLAP):</strong> Complex queries that read of a lot of data to computer aggregates</p>
<ul>
<li>一般是公司要对某一段时间的所有数据进行统计分析的时候使用</li>
<li>事务复杂，且要读大量的数据，从现有的大量数据中分析派生出新的数据</li>
<li>典型代表：数仓，深度学习的数据收集（比如常见的深度学习模型的训练）</li>
</ul>
</li>
<li>
<p><strong>Hybrid(混合) Transaction + Analytical Processing(HTAP):</strong> OLTP+OLAP together on the same database instance</p>
<ul>
<li>希望这个数据库两种事务都能应对（兼顾）</li>
<li>很像之前讲的disk和memory的结合体（</li>
</ul>
</li>
<li>
<p>公司方案:<strong>BIFURCATED ENVIRONMENT</strong>：OLTP和OLAP分别布置</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-1.png" title="/img/CMU 15-445 Database Systems/chapter5-1.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-1.png" data-sub-html="<h2>OLTP负责对用户的事务处理，在流量低的时候将数据整合到数仓里面，分析师再过来操作数仓进行数据分析</h2>">
        
    </a><figcaption class="image-caption">OLTP负责对用户的事务处理，在流量低的时候将数据整合到数仓里面，分析师再过来操作数仓进行数据分析</figcaption>
    </figure>
<ul>
<li>
<p>HTAP或许能避免上面<strong>BIFURCATED ENVIRONMENT</strong>(要准备两套数据库，而且数据还要从这两套系统中来回迁移)的问题，但是也有可能是两头都跑不好</p>
</li>
<li>
<p>行存的模型适合OLTP，列存(DSM)的模型适合OLAP</p>
</li>
<li>
<p>现在很多主流数据库也会加入列存引擎来处理OLAP的事务</p>
</li>
</ul>
<h3 id="storage-models">Storage Models</h3>
<ul>
<li>这部分主要讲数据库的数据在磁盘上面不同的物理布局，对于不同的场景，不同的布局会有不一样的效果</li>
</ul>
<hr>
<ul>
<li>
<p><strong>N-Ary Storage Model (NSM)</strong></p>
<ul>
<li>
<p><u>The DBMS stores (almost) all attributes for a single tuple contiguously in a single page</u>(一个元组里面是所有属性，连续地存储在一个页中)</p>
</li>
<li>
<p>Also known as a “<strong>row store</strong>”（国内叫“行存”）</p>
</li>
<li>
<p>非常适合OLTP的工作负载，读的东西少，但是一直在频繁的写数据，行存的模型对写数据很友好</p>
</li>
<li>
<p>NSM数据库页面大小通常是硬件页面的常数倍(m $\times$ 4KB)：Oracle(4KB),Postgres(8KB),MySQL(16KB)</p>
</li>
</ul>
</li>
<li>
<p><strong>NSM: PHYSICAL ORGANIZATION</strong></p>
<ul>
<li>
<p>无论是定长还是不定长度，这个NSM都是用的之前的slotted page的存储模型，元组就连续的存储在页里面，再加上一个slot array来做标定，header来存储头部必要的一些信息</p>
</li>
<li>
<p>DBMS区分物理元组的唯一标识：<strong>record id</strong>(page#,slot#)，注意这个<strong>record id</strong>是页标识+槽标识构造的，不是数据库主键/唯一键，一定要区分!</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-2.png" title="/img/CMU 15-445 Database Systems/chapter5-2.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-2.png" data-sub-html="<h2>slotted page的物理存储模型</h2>">
        
    </a><figcaption class="image-caption">slotted page的物理存储模型</figcaption>
    </figure>
<ul>
<li><strong>NSM</strong>性能上的缺点
<ul>
<li>进行OLAP的操作的时候会有很多无用的数据，浪费效率</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-3.png" title="/img/CMU 15-445 Database Systems/chapter5-3.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-3.png" data-sub-html="<h2>OLAP往往是所有行的扫描，但是只要其中的几列数据，其他列的数据是无用的，但是DBMS就要为此扫描所有页，大量的I/O造成了效率低下</h2>">
        
    </a><figcaption class="image-caption">OLAP往往是所有行的扫描，但是只要其中的几列数据，其他列的数据是无用的，但是DBMS就要为此扫描所有页，大量的I/O造成了效率低下</figcaption>
    </figure>
<ul>
<li><strong>NSM:SUMMARY</strong>
<ul>
<li><strong>Advantages</strong>
<ul>
<li>Fast inserts, updates, and deletes</li>
<li>Good for queries that need the entire tuple(OLTP)</li>
<li>Can use index-oriented physical storage for clustering</li>
</ul>
</li>
<li><strong>Disadvantages</strong>
<ul>
<li>Not good for scanning large portions of the table and/or a subset of the attributes</li>
<li>Terrible memory locality for OLAP access patterns.(数据分散到了多个页，属性列不是连续的)</li>
<li>Not ideal for compression because of multiple value domains within a single page.(压缩数据靠的是数据的相似性，同一列的数据相似性才高，但是NSM是按行存不同列的数据，每一页数据的相似性很低，很难压缩)</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Decomposition Storage Model (DSM)</strong></p>
<ul>
<li>The DBMS stores a single attribute for all tuples contiguously in a block of data.</li>
<li>Also known as a “<strong>column store</strong>”(国内叫“列存”)</li>
<li>非常适合OLAP的工作负载，大量的读取数据，而且往往都要的是某一列属性</li>
<li>DBMS这个时候主要就负责读写的时候拆分和组合属性</li>
</ul>
</li>
<li>
<p><strong>DSM: PHYSICAL ORGANIZATION</strong></p>
<ul>
<li>
<p>Store attributes and metadata (e.g.nulls) in separate arrays of fixedlength values.(固定长度的属性最好存储，数组完美匹配)</p>
</li>
<li>
<p>唯一标识：偏移量</p>
</li>
<li>
<p>难的是处理变长属性，需要在前面在加上一个id数据来做为标识，这样其实造成了数据冗余（id存了好几次）</p>
</li>
<li>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-6.png" title="/img/CMU 15-445 Database Systems/chapter5-6.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-6.png" data-sub-html="<h2>属性定长和不定长的两种存储方式</h2>">
        
    </a><figcaption class="image-caption">属性定长和不定长的两种存储方式</figcaption>
    </figure>
</li>
<li>
<p>Maintain a separate file per attribute with a dedicated header area for metadata about the entire column.(一个属性一个文件，加上Header来处理元数据)</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-4.png" title="/img/CMU 15-445 Database Systems/chapter5-4.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-4.png" data-sub-html="<h2>DSM的文件结构</h2>">
        
    </a><figcaption class="image-caption">DSM的文件结构</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-5.png" title="/img/CMU 15-445 Database Systems/chapter5-5.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-5.png" data-sub-html="<h2>OLAP下只需要找对应属性的页，不需要像NSM那样全页扫描</h2>">
        
    </a><figcaption class="image-caption">OLAP下只需要找对应属性的页，不需要像NSM那样全页扫描</figcaption>
    </figure>
<ul>
<li>
<p><strong>DSM:SUMMARY</strong></p>
<ul>
<li><strong>Advantages</strong>
<ul>
<li>Reduces the amount wasted I/O per query because the DBMS only reads the data that it needs.</li>
<li>Faster query processing because of increased locality and cached data reuse.（属性上面的局部性 &gt; 行的局部性）</li>
<li>Better data compression (more on this in a few slides).</li>
</ul>
</li>
<li><strong>Disadvantages</strong>
<ul>
<li>Slow for point queries, inserts, updates, and deletes because of tuple splitting/stitching/reorganization.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>OBSERVATION</strong></p>
<ul>
<li>OLAP往往也要面临JOIN这样的操作，但是DSM的存储模型在JOIN上面的操作不是很优秀</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>PAX STORAGE MODEL</strong></p>
<ul>
<li>
<p>Partition Attributes Across (PAX) is a <strong>hybrid storage model</strong> that vertically partitions attributes within a database page.</p>
</li>
<li>
<p>The goal is to get the benefit of <strong>faster processing on columnar storage while retaining</strong> the spatial locality benefits of <strong>row storage</strong>.（保留行存优势地前提下，在列处理上面提速来匹配OLAP操作）</p>
</li>
</ul>
</li>
<li>
<p><strong>PAX: PHYSICAL ORGANIZATION</strong></p>
<ul>
<li>水平地将行划分为组，然后将这组的属性进行列存</li>
<li>每个页的Header里面会标明这个页里面每一组的偏移量
<ul>
<li>如果这个文件不可变，Header就存到页脚</li>
</ul>
</li>
<li>每一组都会有自己的<strong>metadata header</strong>(比如标明那一行那个属性是null，其他有关这个组的信息)</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-7.png" title="/img/CMU 15-445 Database Systems/chapter5-7.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-7.png" data-sub-html="<h2>PAX的物理结构</h2>">
        
    </a><figcaption class="image-caption">PAX的物理结构</figcaption>
    </figure>
<h3 id="database-compression">Database Compression</h3>
<ul>
<li>
<p>When a DBMS uses compression, it is always lossless because people don’t like losing data. Any kind of lossy compression must be performed at the application level.（数据库只能做无损压缩，有损压缩只能在应用程序里面做，数据库是绝对不给做的）</p>
</li>
<li>
<p><strong>COMPRESSION GRANULARITY</strong>（压缩的力度）</p>
</li>
</ul>
<h3 id="naïve-compression">NAÏVE COMPRESSION</h3>
<ul>
<li>
<p><strong>Block-Level</strong>：压缩同一个表里面的元组块</p>
</li>
<li>
<p>使用通用的算法来压缩数据</p>
</li>
<li>
<p>压缩的范围仅限于提供的数据</p>
</li>
<li>
<p>LZO (1996), LZ4 (2011), Snappy (2011),Oracle OZIP (2014), Zstd (2015)</p>
</li>
</ul>
<p>需要考虑的因素</p>
<ul>
<li>计算的开销</li>
<li>压缩和解压的速度</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-8.png" title="/img/CMU 15-445 Database Systems/chapter5-8.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-8.png" data-sub-html="<h2>MySQL INNODB的解压过程，把压缩好的数据读到缓存池再解压</h2>">
        
    </a><figcaption class="image-caption">MySQL INNODB的解压过程，把压缩好的数据读到缓存池再解压</figcaption>
    </figure>
<ul>
<li>这个模式的一个弊端就是每次读写数据的时候都先要做解码，效率很低</li>
<li>另一个思路：能不能不解码，而是对查询的数据使用算法变换，然后操作压缩后的数据</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-9.png" title="/img/CMU 15-445 Database Systems/chapter5-9.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-9.png" data-sub-html="<h2>这个就是上面的想法，把SQL中的数据进行变换，然后直接操作压缩的数据</h2>">
        
    </a><figcaption class="image-caption">这个就是上面的想法，把SQL中的数据进行变换，然后直接操作压缩的数据</figcaption>
    </figure>
<h3 id="columnar-compression">COLUMNAR COMPRESSION</h3>
<ul>
<li>
<p><strong>Column-Level</strong>：压缩属性值的列(DSM-only)，也叫<strong>COLUMNAR COMPRESSION</strong>（柱状压缩）</p>
</li>
<li>
<p><strong>Run-length Encoding</strong></p>
<ul>
<li>将单个列中的相同值改为三元组
<ul>
<li>属性的值</li>
<li>该值在这一列的起始位置</li>
<li>该值的元素个数</li>
</ul>
</li>
<li>适合的情景是该列对属性进行智能排序，这样可以获取最大化压缩的机会</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-10.png" title="/img/CMU 15-445 Database Systems/chapter5-10.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-10.png" data-sub-html="<h2>Run-length Encoding算法演示</h2>">
        
    </a><figcaption class="image-caption">Run-length Encoding算法演示</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-11.png" title="/img/CMU 15-445 Database Systems/chapter5-11.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-11.png" data-sub-html="<h2>如果只有GROUP BY的操作，那么压缩的会更好</h2>">
        
    </a><figcaption class="image-caption">如果只有GROUP BY的操作，那么压缩的会更好</figcaption>
    </figure>
<ul>
<li><strong>Bit-Packing Encoding</strong>
<ul>
<li>如果整数属性的值很小，那么二进制前面的几位就可以不要</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-12.png" title="/img/CMU 15-445 Database Systems/chapter5-12.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-12.png" data-sub-html="<h2>bit packing压缩方案</h2>">
        
    </a><figcaption class="image-caption">bit packing压缩方案</figcaption>
    </figure>
<ul>
<li><strong>PATCHING/MOSTLY ENCODING</strong>
<ul>
<li>当属性中的大多数值小于对应类型的最大值时，使用更小的数据类型来对其进行存储，对于少数数值很大的值仍然使用原来的数据类型来进行存储</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-13.png" title="/img/CMU 15-445 Database Systems/chapter5-13.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-13.png" data-sub-html="<h2>int32-&gt;int8，Header会标定一下那个数据还是用的int32</h2>">
        
    </a><figcaption class="image-caption">int32-&gt;int8，Header会标定一下那个数据还是用的int32</figcaption>
    </figure>
<ul>
<li>
<p><strong>Bit-map Encoding</strong></p>
<ul>
<li>
<p>对于一些属性，它的值就那些（比如枚举）</p>
</li>
<li>
<p>那直接用位运算存几个bit里面就完全够了</p>
</li>
<li>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-14.png" title="/img/CMU 15-445 Database Systems/chapter5-14.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-14.png" data-sub-html="<h2>一共只有Y和N，那直接用两位bit就够了</h2>">
        
    </a><figcaption class="image-caption">一共只有Y和N，那直接用两位bit就够了</figcaption>
    </figure>
</li>
<li>
<p>但是从上面的图上面来看这个模式没有完全压榨二进制位运算的空间（比如只能用01和10，00和11都浪费了），所以在一些情况下压缩不如不压缩</p>
</li>
</ul>
</li>
<li>
<p><strong>Delta Encoding</strong></p>
<ul>
<li>
<p>记录和上一列的差别，不记录实际数据</p>
</li>
<li>
<p>基础值内联到表里面或者单独查询，有这个基础值下面的值都能推断出来了</p>
</li>
<li>
<p>配合<strong>Run-Length-Encoding</strong>压缩效果会更好</p>
</li>
<li>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-15.png" title="/img/CMU 15-445 Database Systems/chapter5-15.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-15.png" data-sub-html="<h2>先Delta Encoding再Run-Length-Encoding</h2>">
        
    </a><figcaption class="image-caption">先Delta Encoding再Run-Length-Encoding</figcaption>
    </figure>
</li>
</ul>
</li>
<li>
<p><strong>DICTIONARY COMPRESSION</strong></p>
<ul>
<li>
<p>Replace frequent values with smaller fixed-length codes and then maintain a mapping (dictionary) from the codes to the original values(搞一个K-V的映射，然后把原来数据的V换成长度更小的K)</p>
</li>
<li>
<p>Most widely used native compression scheme in DBMSs.</p>
</li>
<li>
<p>理想的字典查询是希望在单点查询和范围查询上面都有良好的性能</p>
</li>
<li>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-16.png" title="/img/CMU 15-445 Database Systems/chapter5-16.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-16.png" data-sub-html="<h2>建一个Hash表，然后压缩原表</h2>">
        
    </a><figcaption class="image-caption">建一个Hash表，然后压缩原表</figcaption>
    </figure>
</li>
<li>
<p>字典需要有两个功能</p>
<ul>
<li>Eecode/Locate：给了Key要能编码</li>
<li>Decode/Extract：给了Value能解压成Key</li>
<li><strong>所以即使上面会用Hash这个词，但是这个结构不能靠Hash函数来实现（Hash只能正着算，不能反向算）</strong></li>
</ul>
</li>
<li>
<p>字典还要保序，不能说编完码之后你原表的数据顺序就变了，因为你要考虑范围查找这种东西</p>
</li>
<li>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter5-17.png" title="/img/CMU 15-445 Database Systems/chapter5-17.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter5-17.png" data-sub-html="<h2>如果保序，范围查找对SQL里面的key做一次Hash就可以操作压缩后的数据了</h2>">
        
    </a><figcaption class="image-caption">如果保序，范围查找对SQL里面的key做一次Hash就可以操作压缩后的数据了</figcaption>
    </figure>
</li>
<li>
<p>字典压缩还有一个好处就是如果查询中有DISTINCT这种关键字，那么不需要进行全表扫描，直接去字典里面扫描一遍Value就够了</p>
</li>
<li>
<p>数据结构的选择</p>
<ul>
<li>Array
<ul>
<li>一个数组包含可变长度的字符串，一个数组包含指向映射到前面数组字符串的指针</li>
<li>更新成本很高，只能用在不可变文件中</li>
</ul>
</li>
<li>Hash Table
<ul>
<li>快速，紧凑</li>
<li>无法进行范围查询和前缀查询</li>
</ul>
</li>
<li>B+ Tree
<ul>
<li>比Hash Table要慢，而且占用更多的内存</li>
<li>支持范围查询和前缀查询</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></description>
</item>
<item>
    <title>CMU 15-445 Lecture #04: Database Storage (Part II)</title>
    <link>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter4/</link>
    <pubDate>Mon, 25 Mar 2024 21:32:28 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter4/</guid>
    <description><![CDATA[<h1 id="cmu-15-445-database-systems">CMU 15-445 Database Systems</h1>
<h2 id="lecture-04-database-storage-part-ii">Lecture #04: Database Storage (Part II)</h2>
<h3 id="log-structured-storage">Log-Structured Storage</h3>
<ul>
<li>
<p>Slotted-Page(页+槽)的存储结构遇到的一些问题</p>
<ul>
<li><strong>Fragmentation</strong>:删除元组可能会在页中留下空白</li>
<li><strong>Useless Disk I/O</strong>:更新一组数据，但是你要把这个数据所在的页从磁盘load到内存里面</li>
<li><strong>Random Disk I/O</strong>:如果说你随机更新了很多数据，那么可能需要从磁盘load好多页到内存，时间会变得非常慢</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>另一种解决思路:<strong>Log-Structured Storage</strong></li>
</ul>
<blockquote>
<p>Log-structured Storage is based on the Log-Structured File System (LSFS) by Rosenblum and Ousterhout’92 and Log-structured Merge Trees (LSM Tree) by O’Neil, Cheng</p>
<p>LSM-tree也是数据库里面一个重要的知识点</p>
</blockquote>
<ul>
<li>DBMS不存储元组，而是只存储元组更改的记录，DBMS将新的日志添加到内存缓冲区中，不检查之前记录，然后按照更改数据写回到磁盘里面(这个顺序写盘就能解决上面的<strong>Random Disk I/O</strong>问题)，</li>
<li>这种模式对于写数据库的操作来说速度很快（直接写一个log刷回到盘里面就行了），这个在K-V数据库里面很流行</li>
<li>读记录的时候则需要从最旧的顺序扫描日志文件，从而获取元组的最新内容，为了提高效率，log也会使用索引来加快查找速度</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-1.png" title="/img/CMU 15-445 Database Systems/chapter4-1.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-1.png" data-sub-html="<h2>log&#43;索引</h2>">
        
    </a><figcaption class="image-caption">log+索引</figcaption>
    </figure>
<ul>
<li>
<p><strong>Compaction</strong></p>
</li>
<li>
<p>如果就一直记录日志，那么磁盘肯定有一天会不够写，所以DBMS需要定期压缩日志，压缩后的日志甚至不用按照时间戳排序，而是按照id排序（找的更快）</p>
</li>
<li>
<p>按层压缩（<strong>Level Compaction</strong>）</p>
<ul>
<li>代表:RocksDB(RocksDB第一/二/三层文件)</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-2.png" title="/img/CMU 15-445 Database Systems/chapter4-2.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-2.png" data-sub-html="<h2>Level0的两个文件内部可以压缩，但是如果update A在文件一，delete A在文件二，那这两条数据就没法合并压缩了</h2>">
          
      </a><figcaption class="image-caption">Level0的两个文件内部可以压缩，但是如果update A在文件一，delete A在文件二，那这两条数据就没法合并压缩了</figcaption>
      </figure>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-3.png" title="/img/CMU 15-445 Database Systems/chapter4-3.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-3.png" data-sub-html="<h2>解决方案：直接读取这两个文件中的日志，一起压缩到Level1的一个新文件里面</h2>">
          
      </a><figcaption class="image-caption">解决方案：直接读取这两个文件中的日志，一起压缩到Level1的一个新文件里面</figcaption>
      </figure>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-4.png" title="/img/CMU 15-445 Database Systems/chapter4-4.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-4.png" data-sub-html="<h2>这种情况可以一直递归压缩</h2>">
          
      </a><figcaption class="image-caption">这种情况可以一直递归压缩</figcaption>
      </figure>
<ul>
<li>RocksDB最多能压缩到第七层</li>
<li>读取的时候就从0层开始读，读不到就再读下一层</li>
</ul>
</li>
<li>
<p>通用压缩（<strong>Universal Compaction</strong>）</p>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-5.png" title="/img/CMU 15-445 Database Systems/chapter4-5.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-5.png" data-sub-html="<h2>不用分层，能合并就合并</h2>">
          
      </a><figcaption class="image-caption">不用分层，能合并就合并</figcaption>
      </figure>
</li>
</ul>
<hr>
<ul>
<li><strong>Log-Structured Storage</strong>的利弊
<ul>
<li>快速的顺序写入，对于需要频繁更改的数据库来说效率提示很多</li>
<li>读取可能很慢（要读很多日志）</li>
<li>压缩日志的代价很大</li>
<li>受制于写入放大（一个逻辑写入可能有多个物理写入，比如UPDATE ALL STUDENT age TO age + 1，对于这种语句到它的日志里面要写一堆）</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-6.png" title="/img/CMU 15-445 Database Systems/chapter4-6.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-6.png" data-sub-html="<h2>Log-Structured Storage代表数据库</h2>">
        
    </a><figcaption class="image-caption">Log-Structured Storage代表数据库</figcaption>
    </figure>
<h3 id="index-organized-storage">Index-Organized Storage</h3>
<ul>
<li>加入额外的索引存储，从而提高查找的速度</li>
</ul>
<h3 id="data-representation">Data Representation</h3>
<blockquote>
<p>There are five high level datatypes that can be stored in tuples: <strong>integers, variable-precision numbers, fixedpoint precision numbers, variable length values, and dates/times.</strong></p>
</blockquote>
<ul>
<li>
<p>元组中的数据本质就是字节数组，你要规定如何存储和解释这些字节，从而存储你的信息</p>
<ul>
<li>
<p>字节对齐的问题</p>
<ul>
<li><strong>Padding</strong>:在属性后添加空位，确保元组对其</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-7.png" title="/img/CMU 15-445 Database Systems/chapter4-7.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-7.png" data-sub-html="<h2>属性长度不够，后面填充字节码</h2>">
            
        </a><figcaption class="image-caption">属性长度不够，后面填充字节码</figcaption>
        </figure>
<ul>
<li>
<p><strong>Reordering</strong>:重新排列属性+填充</p>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-8.png" title="/img/CMU 15-445 Database Systems/chapter4-8.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-8.png" data-sub-html="<h2>能凑到一块的先凑起来，然后再填充</h2>">
              
          </a><figcaption class="image-caption">能凑到一块的先凑起来，然后再填充</figcaption>
          </figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>其他数据表示：整数，字符串这俩都很好记录，字符串可能头部需要存储一个长度，但是也不难，这里重点讨论浮点数/高精度和时间的表示</p>
</li>
<li>
<p>浮点数:IEEE-754下面的标准转到十进制是有误差的，这个在金融等需要绝对准确的领域里面是无法忍受的</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-9.png" title="/img/CMU 15-445 Database Systems/chapter4-9.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-9.png" data-sub-html="<h2>0.1 &#43; 0.2 != 0.3</h2>">
        
    </a><figcaption class="image-caption">0.1 + 0.2 != 0.3</figcaption>
    </figure>
<ul>
<li>解决方案：高精度</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-10.png" title="/img/CMU 15-445 Database Systems/chapter4-10.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-10.png" data-sub-html="<h2>pg的高精度</h2>">
        
    </a><figcaption class="image-caption">pg的高精度</figcaption>
    </figure>
<hr>
<ul>
<li>
<p><strong>LARGE VALUES</strong></p>
</li>
<li>
<p>某一段数据很长造成的，比如在存储字符串的地方存了一本电子小说的内容，数据长到比最小的页还长，整个页都没法完整地把这个数据给存储下来</p>
</li>
<li>
<p>解决方案:<strong>Overflow Page</strong>，新开一个“溢出页”，把大的数据存到这个新开的页里面，然后原始页里面存放这个数据的地方去存放这个新开的页的地址</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-11.png" title="/img/CMU 15-445 Database Systems/chapter4-11.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-11.png" data-sub-html="<h2>溢出页和原有页的关系</h2>">
        
    </a><figcaption class="image-caption">溢出页和原有页的关系</figcaption>
    </figure>
<ul>
<li>
<p>如果溢出页还不够：后面再加溢出页（当成拉链法去理解就好）</p>
</li>
<li>
<p><strong>使用数据库尽量避免这样的情况，很损害数据库的性能</strong></p>
<ul>
<li>一种方案是存成文件，然后数据库里面存文件路径，缺点就是这个文件里面数据没有持久性和事务保护</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>Null Data Types</strong></li>
<li>在DBMS里面表示null的方法
<ul>
<li><strong>Null Column Bitmap Header</strong>：在数据的头部集中存储一个bitmap，这个bitmap就表示本条数据里面那些属性是null，这是最常见的方法</li>
<li><strong>Special Values</strong>：用特殊值来标记null，比如给整数标定一个int32min来表示null</li>
<li><strong>Per Attribute Null Flag</strong>：给每个属性前面都加一位来表示这个属性是不是为null，不推荐，因为不节约内存，多这一位的数据可能会造成内存需要填充好几位才能维持字节对齐</li>
</ul>
</li>
</ul>
<h3 id="system-catalogs">System Catalogs</h3>
<ul>
<li>每个数据库都有一个System Catalogs，里面的表存自己的元数据（有什么表，表结构，用户，用户权限，统计信息，日志信息。。。）</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-12.png" title="/img/CMU 15-445 Database Systems/chapter4-12.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-12.png" data-sub-html="<h2>MySQL的information schema</h2>">
        
    </a><figcaption class="image-caption">MySQL的information schema</figcaption>
    </figure>
<ul>
<li>每个数据库里面都有information schema，但是存的东西不一样</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter4-13.png" title="/img/CMU 15-445 Database Systems/chapter4-13.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter4-13.png" data-sub-html="<h2>MySQL的information schema里面的TABLES表，存了这个数据库里面所有表的信息</h2>">
        
    </a><figcaption class="image-caption">MySQL的information schema里面的TABLES表，存了这个数据库里面所有表的信息</figcaption>
    </figure>
]]></description>
</item>
<item>
    <title>CMU 15-445 Lecture #03: Database Storage (Part I)</title>
    <link>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter3/</link>
    <pubDate>Mon, 25 Mar 2024 15:48:05 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter3/</guid>
    <description><![CDATA[<h1 id="cmu-15-445-database-systems">CMU 15-445 Database Systems</h1>
<h2 id="lecture-03-database-storage-part-i">Lecture #03: Database Storage (Part I)</h2>
<h3 id="storage">Storage</h3>
<ul>
<li>
<p>本课程讨论的都是存储在磁盘上的数据库，不考虑后期出现的内存数据库</p>
</li>
<li>
<p>补充计组的知识：设备离CPU越近，存储速度越快，内存越小，价格越贵</p>
</li>
<li>
<p><strong>Volatile Devices</strong></p>
<ul>
<li>断了电就没有数据了</li>
<li>可以通过字节寻址快速随机访问，程序可以随机获取数据</li>
<li>这个地方基本就叫内存</li>
</ul>
</li>
<li>
<p><strong>Non-Volatile Devices</strong></p>
<ul>
<li>断了电也不怕</li>
<li>也是块/页可寻址的，但是如果程序要读取需要先load到内存</li>
<li>更适合顺序访问（加载到内存+局部性原理）</li>
<li>一般叫磁盘，这个课不区分机械盘和SSD</li>
</ul>
</li>
<li>
<p>部分公司后面为了获取两个设备的长处推出了“持久内存”，但是本课程不会讨论，而且从Intel 2022开始逐步停产该系列产品来看，它没有想象中那么好</p>
</li>
<li>
<p>本课程主要是磁盘存储的数据库，我们必须明白一点，磁盘上面的数据必须要先load到内存中才能操作</p>
</li>
</ul>
<h3 id="disk-oriented-dbms-overview">Disk-Oriented DBMS Overview</h3>
<ul>
<li>
<p>数据库全部存储在磁盘上，数据库文件被数据组织成页，<strong>第一页是目录页</strong></p>
</li>
<li>
<p>为了对数据库进行操作，DBMS需要将数据放入内存，<strong>这个时候会使用一个缓冲池来管理在磁盘和内存之间移动的数据</strong></p>
</li>
<li>
<p>例子：以DBMS中的查询为例，执行引擎会让缓冲池请求特定的页面，缓冲池将该页加载到内存，然后返回给执行引擎目前内存中该页的指针，使得执行引擎可以进行下一步的工作</p>
</li>
</ul>
<h3 id="dbms-vs-os">DBMS vs. OS</h3>
<ul>
<li>
<p>DBMS和OS的虚拟内存都涉及到了cache和disk调用的问题，那么是否可以在DBMS中使用mmap呢</p>
<ul>
<li>不可以</li>
<li>mmap一旦出现地址错误会block，这对于DBMS的性能来说是不能接收的</li>
<li>mmap是为OS设计的，对于cache和disk的调用，DBMS其实更应该根据自己的情况来定制化其他方案</li>
</ul>
</li>
<li>
<p>但是我们和disk交互的时候仍然可以使用下面的OS调用，这些是符合我们期望的</p>
</li>
</ul>
<blockquote>
<p>• <strong>madvise</strong>: Tells the OS know when you are planning on reading certain pages.</p>
<p>• <strong>mlock</strong>: Tells the OS to not swap memory ranges out to disk.</p>
<p>• <strong>msync</strong>: Tells the OS to flush memory ranges out to disk.</p>
</blockquote>
<ul>
<li>对于DBMS这种如此吃性能的设施，很多解决方案还是需要手搓定制化，而不是依赖OS的调用</li>
</ul>
<h3 id="file-storage">File Storage</h3>
<ul>
<li>
<p>DBMS将数据库作为文件存储在磁盘上，有些使用文件层次结构，有些使用单个文件（比如SQLite）</p>
</li>
<li>
<p>OS是不知道这些文件存储的是什么，只有DBMS才能读懂和操作它们（有特定的编码）</p>
</li>
<li>
<p>DBMS的存储管理器负责管理数据库的文件。<strong>它将文件表示为页面的集合</strong>，它还跟踪哪些数据被读取和写入到页面，以及这些页面中有多少空闲空间</p>
</li>
</ul>
<h3 id="database-pages">Database Pages</h3>
<ul>
<li>
<p>DBMS会将多个文件组织成固定大小的数据块，这个东西就叫页</p>
</li>
<li>
<p>页面可以包含不同的数据类型，但是大多数系统是不会在页面中混合使用这些类型的</p>
</li>
<li>
<p>有些系统要求页面是自包含的，这意味着读取每个页面所需的所有信息都在页面本身上</p>
</li>
<li>
<p>每个页面都有一个唯一的标识符</p>
</li>
<li>
<p>如果数据库是单个文件，那么页id可以只是文件偏移量。大多数DBMS都有一个间接层，它将页id映射到文件路径和偏移量。系统的上层将要求提供特定的页码。然后，存储管理器必须将该页码转换为文件和偏移量以查找该页</p>
</li>
<li>
<p>大多数的页大小都是固定的，不然难以管理内存（内存碎片）</p>
</li>
<li>
<p>DBMS中的三种页面</p>
<ul>
<li>Hardware page (usually 4 KB).</li>
</ul>
<ol start="2">
<li>
<p>OS page (4 KB).</p>
</li>
<li>
<p>Database page (1-16 KB).</p>
</li>
</ol>
</li>
<li>
<p>硬件页设计的小是为了能够利用硬件的条件原子性写入，但是到了数据库的页就无法保证了，所以需要使用额外的措施保证原子性</p>
</li>
</ul>
<h3 id="database-heap">Database Heap</h3>
<ul>
<li>数据库的页“堆”成一个文件的方式</li>
<li>也要能够有创建页，遍历页，删除页的操作，那么页之间怎么组织？
<ul>
<li>Linked List</li>
<li>Page Directory</li>
</ul>
</li>
</ul>
<h3 id="page-layout">Page Layout</h3>
<ul>
<li>
<p>Every page includes a header that records meta-data about the page’s contents:</p>
<ul>
<li>
<p>Page size.</p>
</li>
<li>
<p>Checksum.</p>
</li>
<li>
<p>DBMS version.</p>
</li>
<li>
<p>Transaction visibility.</p>
</li>
<li>
<p>Self-containment. (Some systems like Oracle require this.)</p>
</li>
</ul>
</li>
<li>
<p>数据的存储方案</p>
<ul>
<li>
<p>Tuple-oriented:按照真实数据一行一行存</p>
<ul>
<li>
<p>如何避免内存碎片化问题：Slotted Page结构，索引在一个区，剩下的空间存储数据</p>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter3-1.png" title="/img/CMU 15-445 Database Systems/chapter3-1.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter3-1.png" data-sub-html="<h2>Slotted Page</h2>">
              
          </a><figcaption class="image-caption">Slotted Page</figcaption>
          </figure>
</li>
<li>
<p>定位：page_id + offset/slot</p>
</li>
</ul>
</li>
<li>
<p>Log-Structured:存操作日志</p>
</li>
</ul>
</li>
</ul>
<h3 id="tuple-layout">Tuple Layout</h3>
<ul>
<li>一组数据存储在磁盘上面就是bytes，需要我们附加其他的信息进行解析</li>
</ul>
<figure><a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter3-2.png" title="/img/CMU 15-445 Database Systems/chapter3-2.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter3-2.png" data-sub-html="<h2>Tuple布局</h2>">
        
    </a><figcaption class="image-caption">Tuple布局</figcaption>
    </figure>
<ul>
<li>
<p><strong>Tuple Header</strong>: Contains meta-data about the tuple.</p>
<ul>
<li>
<p>并发控制信息（为了事务安全）</p>
</li>
<li>
<p>NULL值的Bit映射（解析Tuple需要的信息）</p>
</li>
<li>
<p>注：不需要存结构信息（每一个Header都存一下内存浪费太多了）</p>
</li>
<li>
<p>属性通常按照创建表的时候指定的数据存储</p>
</li>
<li>
<p>大多数DBMS不允许一个元组超过一个页面的大小</p>
</li>
</ul>
</li>
<li>
<p><strong>Unique Identifier</strong></p>
<ul>
<li>最常见的是page_id+offset</li>
<li>应用程序不能直接用这些，只能用主键这类的属性（因为这个东西会因为内存整理而更改，程序员只能和DBMS这部分的管理系统用主键交流，由这个系统进行映射）</li>
</ul>
</li>
<li>
<p><strong>Denormalized Tuple Data</strong>: If two tables are related, the DBMS can “pre-join” them, so the tables end up
on the same page. This makes reads faster since the DBMS only has to load in one page rather than two
separate pages. However, it makes updates more expensive since the DBMS needs more space for each
tuple.</p>
<ul>
<li>两个表如果总是需要JOIN，那我提前给你在内存中连好</li>
<li>理论上可行，现实中会让插入等的复杂度变的很高，目前这种方案已经被废止</li>
</ul>
</li>
</ul>
]]></description>
</item>
<item>
    <title>CMU 15-445 Lecture #02: Modern SQL</title>
    <link>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter2/</link>
    <pubDate>Sun, 24 Mar 2024 22:00:23 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/cmu-15-445-database-systems/chapter2/</guid>
    <description><![CDATA[<h1 id="cmu-15-445-database-systems">CMU 15-445 Database Systems</h1>
<h2 id="lecture-02-modern-sql">Lecture #02: Modern SQL</h2>
<h3 id="关系型数据库sql">关系型数据库|SQL</h3>
<ul>
<li>
<p>在历经上个世纪的探索和总结后，关系型数据库被发明了出来，其使用的语言也规范为了SQL</p>
</li>
<li>
<p>SQL可以分为三类</p>
<ul>
<li>数据操作语言(DML):SELECT,INSERT,UPDATE,DELETE</li>
<li>数据定义语言(DDL):用于定义表，视图等</li>
<li>数据控制语言(DCL):用于访问控制，保证数据库的安全</li>
</ul>
</li>
<li>
<p>SQL也和其他编程语言一样，每隔几年会更新一次，目前规定最低标准是SQL-92</p>
<blockquote>
<p>Some of the major updates released with each new edition of the SQL standard are shown below.</p>
<p>• SQL:1999 Regular expressions, Triggers</p>
<p>• SQL:2003 XML, Windows, Sequences</p>
<p>• SQL:2008 Truncation, Fancy sorting</p>
<p>• SQL:2011 Temporal DBs, Pipelined DML</p>
<p>• SQL:2016 JSON, Polymorphic tables</p>
</blockquote>
</li>
</ul>
<h3 id="joins">Joins</h3>
<ul>
<li>合并一个或多个表中的列生成新表，主要用于需要使用多个表中数据的操作</li>
<li>例子：查学生成绩</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sid</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">16</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">login</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">UNIQUE</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">age</span><span class="w"> </span><span class="nb">SMALLINT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">gpa</span><span class="w"> </span><span class="nb">FLOAT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">course</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cid</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sid</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="p">(</span><span class="n">sid</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">cid</span><span class="w"> </span><span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">course</span><span class="w"> </span><span class="p">(</span><span class="n">cid</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">grade</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Example: Which students got an A in 15-721?</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">grade</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;A&#39;</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;15-721&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">AND</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">sid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">sid</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="aggregates">Aggregates</h3>
<ul>
<li>接受Tuples，对整体进行计算，几乎只能用于SELECT输出列表</li>
</ul>
<blockquote>
<p>• AVG(COL): The average of the values in COL</p>
<p>• MIN(COL): The minimum value in COL</p>
<p>• MAX(COL): The maximum value in COL</p>
<p>• COUNT(COL): The number of tuples in the relation</p>
</blockquote>
<ul>
<li>Example: Get # of students with a ‘@cs’ login.</li>
<li>下面三个查询是等价的(第三个是COUNT里面填入数字统计出来的都是行数)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">login</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%@cs&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="n">login</span><span class="p">)</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">login</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%@cs&#39;</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">login</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%@cs&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以在一个SELECT中使用多个聚合函数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">gpa</span><span class="p">),</span><span class="w"> </span><span class="k">COUNT</span><span class="p">(</span><span class="n">sid</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">login</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%@cs&#39;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>一些聚合函数支持<code>DISTINCT </code>的关键字（比如<code>COUNT, SUM, AVG)</code>），这样在计算的时候就直接去重了（<code>unique</code>）</p>
</li>
<li>
<p>使用聚合函数/分组后除了聚合函数其他的输出都是undefined，尽量不要使用</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">),</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">sid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">sid</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果想让列属性是defined的话，那就必须在<code>GROUP BY</code>中加入该属性（也就是用这个属性分组）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">),</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">sid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">sid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果想要过滤聚合函数的数据，需要使用HAVING</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">avg_gpa</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">sid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">sid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">HAVING</span><span class="w"> </span><span class="n">avg_gpa</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="p">.</span><span class="mi">9</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="o">#</span><span class="w"> </span><span class="err">规范写法</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">),</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">sid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">sid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">cid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">HAVING</span><span class="w"> </span><span class="k">AVG</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">gpa</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">3</span><span class="p">.</span><span class="mi">9</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="string-operations">String Operations</h3>
<ul>
<li>SQL区分字符串大小写，使用单引号</li>
<li><strong>Pattern Matching</strong>: The LIKE keyword is used for string matching in predicates.</li>
</ul>
<blockquote>
<ul>
<li>“%” matches any substrings (including empty).</li>
<li>“_” matches any one character</li>
</ul>
</blockquote>
<ul>
<li><strong>String Functions</strong>:SQL-92 defines string functions. Many database systems implement other functions in
addition to those in the standard. Examples of standard string functions include SUBSTRING(S, B, E) and
UPPER(S).</li>
<li><strong>Concatenation</strong>: Two vertical bars (“||”) will concatenate two or more strings together into a single string.</li>
</ul>
<h3 id="date-and-time">Date and Time</h3>
<ul>
<li>Operations to manipulate DATE and TIME attributes. Can be used in either output or predicates. The specific
syntax for date and time operations varies wildly across systems.</li>
</ul>
<h3 id="output-redirection">Output Redirection</h3>
<ul>
<li>
<p>可以将查询的结果直接存储在另一张表中</p>
</li>
<li>
<p><strong>New Table</strong>: Store the output of the query into a new (permanent) table.</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">cid</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">CourseIds</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>Existing Table</strong>: Store the output of the query into a table that already exists in the database. <u>The target table must have the same number of columns with the same types as the target table, but the names of the columns in the output query do not have to match.</u></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="n">CourseIds</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="k">DISTINCT</span><span class="w"> </span><span class="n">cid</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="output-control">Output Control</h3>
<ul>
<li>排序使用ORDER BY，默认是升序排序ASC，如果使用降序请显示标明DESC</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">sid</span><span class="p">,</span><span class="w"> </span><span class="n">grade</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">cid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;15-721&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">grade</span><span class="w"> </span><span class="k">DESC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以使用多个ORDER BY效果就是先排序A，A相同比较B</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">sid</span><span class="p">,</span><span class="w"> </span><span class="n">grade</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">cid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;15-721&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">grade</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="n">sid</span><span class="w"> </span><span class="k">ASC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在ORDER BY中可以计算/使用函数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">sid</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">cid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;15-721&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="k">UPPER</span><span class="p">(</span><span class="n">grade</span><span class="p">)</span><span class="w"> </span><span class="k">DESC</span><span class="p">,</span><span class="w"> </span><span class="n">sid</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">ASC</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以使用LIMIT限制数据范围</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">sid</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">login</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%@cs&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">10</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">sid</span><span class="p">,</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">WHERE</span><span class="w"> </span><span class="n">login</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%@cs&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">LIMIT</span><span class="w"> </span><span class="mi">20</span><span class="w"> </span><span class="k">OFFSET</span><span class="w"> </span><span class="mi">10</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="nested-queries">Nested Queries</h3>
<ul>
<li>在查询中使用其他查询的结果，<strong>嵌套查询通常很难被优化</strong></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="mi">1</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">one</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">s</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="k">SELECT</span><span class="w"> </span><span class="n">sid</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">e</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">sid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">e</span><span class="p">.</span><span class="n">sid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">student</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">sid</span><span class="w"> </span><span class="k">IN</span><span class="w"> </span><span class="p">(</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="n">sid</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Nested Query Results Expressions:</p>
<p>• ALL: Must satisfy expression for all rows in sub-query.</p>
<p>• ANY: Must satisfy expression for at least one row in sub-query.</p>
<p>• IN: Equivalent to =ANY().</p>
<p>• EXISTS: At least one row is returned</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">course</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">EXISTS</span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="n">course</span><span class="p">.</span><span class="n">cid</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">enrolled</span><span class="p">.</span><span class="n">cid</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="window-functions">Window Functions</h3>
<ul>
<li>解决了分组后非聚合函数数值undefined的问题，保留了原来的列结构</li>
</ul>
<a class="lightgallery" href="/img/CMU%2015-445%20Database%20Systems/chapter2-1.png" title="/img/CMU 15-445 Database Systems/chapter2-1.png" data-thumbnail="/img/CMU 15-445 Database Systems/chapter2-1.png">
        
    </a>
<ol>
<li>
<p>ROW NUMBER: The number of the current row.</p>
</li>
<li>
<p>RANK: The order position of the current row.</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">cid</span><span class="p">,</span><span class="w"> </span><span class="n">sid</span><span class="p">,</span><span class="w"> </span><span class="n">ROW_NUMBER</span><span class="p">()</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="p">(</span><span class="n">PARTITION</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">cid</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">cid</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">ROW_NUMBER</span><span class="p">()</span><span class="w"> </span><span class="n">OVER</span><span class="w"> </span><span class="p">(</span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">cid</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="n">enrolled</span><span class="w"> </span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="n">cid</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>本质上面来说是一种分析函数，将order by之后的组进行二次分析，而不是只能使用聚合函数来获取那些值</li>
</ul>
<h3 id="common-table-expressions">Common Table Expressions</h3>
<ul>
<li>主要是WITH，和Python中的WITH做对比，表示临时变量，这样可以简单的生成临时表用于复杂的操作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">WITH</span><span class="w"> </span><span class="n">cteName</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="mi">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">cteName</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>递归操作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">WITH</span><span class="w"> </span><span class="k">RECURSIVE</span><span class="w"> </span><span class="n">cteSource</span><span class="w"> </span><span class="p">(</span><span class="n">counter</span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">UNION</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="w"> </span><span class="k">SELECT</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">cteSource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    	</span><span class="k">WHERE</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">SELECT</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="n">cteSource</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>LRU and LRU-K</title>
    <link>https://Jungle430.github.io/posts/cmu-15-445-database-systems/lru_and_lru-k/</link>
    <pubDate>Mon, 11 Mar 2024 14:26:44 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/cmu-15-445-database-systems/lru_and_lru-k/</guid>
    <description><![CDATA[<h1 id="lru-and-lru-k">LRU and LRU-k</h1>
<ul>
<li>注：本文章为<a href="https://15445.courses.cs.cmu.edu/spring2024" target="_blank" rel="noopener noreffer">CMU15445-2024-spring</a> project1-task1的部分讲解，为了遵守<a href="https://www.cs.cmu.edu/~pavlo/" target="_blank" rel="noopener noreffer">Andy Pavlo</a>对于学术的要求，<strong>有关实验中的代码一律不予公开</strong>，只会讲解思路</li>
</ul>
<h2 id="实验要求">实验要求</h2>
<blockquote>
<p>This component is responsible for tracking page usage in the buffer pool. You will implement a new class called <code>LRUKReplacer</code> in <code>src/include/buffer/lru_k_replacer.h</code> and its corresponding implementation file in <code>src/buffer/lru_k_replacer.cpp</code>. Note that <code>LRUKReplacer</code> is a stand-alone class and is not related to any of the other <code>Replacer</code> classes. You are expected to implement only the LRU-K replacement policy. You don&rsquo;t have to implement LRU or a clock replacement policy, even if there is a corresponding file for it.</p>
<p>The LRU-K algorithm evicts a frame whose backward k-distance is maximum of all frames in the replacer. Backward k-distance is computed as the difference in time between current timestamp and the timestamp of kth previous access. A frame with fewer than k historical accesses is given +inf as its backward k-distance. <strong>When multiple frames have +inf backward k-distance, the replacer evicts the frame with the earliest overall timestamp (i.e., the frame whose least-recent recorded access is the overall least recent access).</strong></p>
<p>The maximum size for the <code>LRUKReplacer</code> is the same as the size of the buffer pool since it contains placeholders for all of the frames in the <code>BufferPoolManager</code>. However, at any given moment, not all the frames in the replacer are considered to be evictable. The size of <code>LRUKReplacer</code> is represented by the number of <em>evictable</em> frames. The <code>LRUKReplacer</code> is initialized to have no frames in it. Then, only when a frame is marked as evictable, replacer&rsquo;s size will increase.</p>
<p>You will need to implement the <em>LRU-K</em> policy discussed in this course. You will need to implement the following methods as defined in the header file (<code>src/include/buffer/lru_k_replacer.h</code>) and in the source file (<code>src/buffer/lru_k_replacer.cpp</code>):</p>
<ul>
<li><code>Evict(frame_id_t* frame_id)</code> : Evict the frame with largest backward k-distance compared to all other <strong>evictable</strong> frames being tracked by the <code>Replacer</code>. Store the frame id in the output parameter and return <code>True</code>. If there are no evictable frames return <code>False</code>.</li>
<li><code>RecordAccess(frame_id_t frame_id)</code> : Record that given frame id is accessed at current timestamp. This method should be called after a page is pinned in the <code>BufferPoolManager</code>.</li>
<li><code>Remove(frame_id_t frame_id)</code> : Clear all access history associated with a frame. This method should be called only when a page is deleted in the <code>BufferPoolManager</code>.</li>
<li><code>SetEvictable(frame_id_t frame_id, bool set_evictable)</code> : This method controls whether a frame is evictable or not. It also controls <code>LRUKReplacer</code>&rsquo;s size. You&rsquo;ll know when to call this function when you implement the <code>BufferPoolManager</code>. To be specific, when pin count of a page reaches 0, its corresponding frame is marked evictable and replacer&rsquo;s size is incremented.</li>
<li><code>Size()</code> : This method returns the number of evictable frames that are currently in the <code>LRUKReplacer</code>.</li>
</ul>
<p>The implementation details are up to you. You are allowed to use built-in STL containers. You may assume that you will not run out of memory, but you must make sure that your implementation is thread-safe.</p>
</blockquote>
<ul>
<li>本文不会考虑thread-safe的问题，主要是为了讲解两种算法的模型</li>
</ul>
<h2 id="内容分析">内容分析</h2>
<ul>
<li>这个实验的主要内容是为了实现一个<code>BUFFER POOL</code>，用于将存储数据的页暂时存储在内存中，但是一台机器的内容始终都是有限的，一旦到达阈值，我们就要踢出去一些页（从内容中移除，刷到磁盘上面去），那么怎么踢呢？本实验提供给我们的算法是LRU-K算法</li>
</ul>
<h2 id="lru">LRU</h2>
<ul>
<li>
<p>学过OS/计算机组成的朋友一定对这个算法不陌生，以往对于cache中数据的处理中LRU就是常用的一个手法，但是我们该如何实现呢？这也就是<a href="https://leetcode.cn/problems/lru-cache/description/" target="_blank" rel="noopener noreffer">leetcode-146</a>，首先选取数据结构上的模型</p>
</li>
<li>
<p>首先存储数据标准或者整个数据的数据结构肯定是一个列表，但是这个列表我们是选数组还是链表呢？<u>在LRU算法中，常常会发生的事情是之前用的数据在没有被踢出cache之前会再次被使用，而且我们踢数据通常就是在列表的末尾踢掉的，如果这个数据再次被使用，应该将其移动到列表头部</u>，那对于移动数据均摊下来时间复杂度是$O(n)$的数组近乎是一场效率上的灾难，所以这个时候删除和插入数据的时间复杂度仅有$O(1)$的链表就成了首选</p>
</li>
<li>
<p>但是我们选了链表之后又有一个问题，对于get(key) -&gt; value这样的操作，时间复杂度会升高到$O(n)$，我们还是不能容忍这样的效率，所以我们可以再用一部分空间来换取时间：加上一张&lt;key, pointer of node&gt;的哈希表，这样通过key可以直接定位到链表中的节点，时间复杂度就降到了O(1)</p>
</li>
<li>
<p>C++库的选取：因为15445要用C++，所以本题也为C++实现，这里面会遇到一个选择：list是使用STL提供好的还是手搓？我先使用的STL中的list，然后哈希表中的value存储的是list的迭代器，但是这样会出现一个隐式的bug：STL的list存在迭代器失效问题，而这个东西又是在一定条件下出现的，很难预测，所以这里手搓了一个双向链表，哈希表中的value直接换成链表中node的地址就可以了</p>
</li>
</ul>
<h2 id="lc-146实现">lc-146实现</h2>
<ul>
<li>节点node</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">selfDS</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">_doubleLinkedListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">K</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">V</span> <span class="n">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">_doubleLinkedListNode</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="nf">_doubleLinkedListNode</span><span class="p">(</span><span class="n">K</span> <span class="n">key</span><span class="p">,</span> <span class="n">V</span> <span class="n">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="n">key</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">value</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="n">prev</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getKey</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getValue</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">setValue</span><span class="p">(</span><span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">remove</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">addAfter</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="o">*</span><span class="n">newNode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">_doubleLinkedListNode</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">newNode</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">newNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">addAfter</span><span class="p">(</span><span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">node</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getNext</span><span class="p">()</span> <span class="k">const</span> <span class="o">-&gt;</span> <span class="n">_doubleLinkedListNode</span> <span class="o">*</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">setNext</span><span class="p">(</span><span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">getPrev</span><span class="p">()</span> <span class="k">const</span> <span class="o">-&gt;</span> <span class="n">_doubleLinkedListNode</span> <span class="o">*</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">setPrev</span><span class="p">(</span><span class="n">_doubleLinkedListNode</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">~</span><span class="n">_doubleLinkedListNode</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>  <span class="c1">// namespace selfDS
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>LRU模板实现</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// k-v store, by LRU algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;cstddef&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;optional&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unordered_map&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;doubleLinkedlistNode.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">K</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LRU</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">_tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">capacity</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*&gt;</span> <span class="n">_map</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="n">LRU</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">capacity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="o">:</span> <span class="n">capacity</span><span class="p">(</span><span class="n">capacity</span><span class="p">),</span> <span class="n">length</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">_map</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*&gt;</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span> <span class="o">=</span> <span class="k">new</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span><span class="p">(</span><span class="n">K</span><span class="p">(),</span> <span class="n">V</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span> <span class="o">=</span> <span class="k">new</span> <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span><span class="p">(</span><span class="n">K</span><span class="p">(),</span> <span class="n">V</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">setNext</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="o">-&gt;</span><span class="n">setPrev</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="na">[[nodiscard]]</span> <span class="k">auto</span> <span class="n">get</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">V</span><span class="o">&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">remove</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">addAfter</span><span class="p">(</span><span class="n">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="p">(</span><span class="n">pointer</span><span class="o">-&gt;</span><span class="n">getValue</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">auto</span> <span class="nf">put</span><span class="p">(</span><span class="k">const</span> <span class="n">K</span> <span class="o">&amp;</span><span class="n">key</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">void</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">setValue</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">remove</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">addAfter</span><span class="p">(</span><span class="n">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">==</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pointer</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="o">-&gt;</span><span class="n">getPrev</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">pointer</span><span class="o">-&gt;</span><span class="n">remove</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">pointer</span><span class="o">-&gt;</span><span class="n">getKey</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">delete</span> <span class="n">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">this</span><span class="o">-&gt;</span><span class="n">length</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">addAfter</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">_map</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">getNext</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">this</span><span class="o">-&gt;</span><span class="n">length</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="o">~</span><span class="n">LRU</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="o">-&gt;</span><span class="n">getNext</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">selfDS</span><span class="o">::</span><span class="n">_doubleLinkedListNode</span><span class="o">&lt;</span><span class="n">K</span><span class="p">,</span> <span class="n">V</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">getNext</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">delete</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">x</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">_tail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>题解直接将模板实例化就可以了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LRUCache</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">LRU</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">lru</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">explicit</span> <span class="n">LRUCache</span><span class="p">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="p">)</span> <span class="o">:</span> <span class="n">lru</span><span class="p">(</span><span class="n">capacity</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lru</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="n">value_or</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="nf">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lru</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="lru-k">LRU-K</h2>
<ul>
<li>
<p>从上文看，LRU算法对于cache数据的管理已经很好了，但是这里面为什么又要引入LRU-K算法呢？</p>
</li>
<li>
<p>LRU算法存在的问题是，当存在大量的一次性操作时，会把历史的缓存冲刷掉，而新进入cache的数据有可能之后不会再访问了，被冲刷掉的数据是之前保留下来的比较“有用”的数据，这就是<strong>缓存污染</strong>问题</p>
</li>
<li>
<p>LRU-K的思路是，永远最先驱逐访问次数小于K次的page。网上的很多讲解是直接维护两个链表，一个叫做history list，另一个叫buffer list。新加入的数据总会先进入history list，当访问次数等于指定的次数K次时，就会从history list删除，并移动到buffer list的头部</p>
</li>
<li>
<p>Buffer list服从LRU算法，History List可以服从任意替换算法，在实验手册中，要求驱逐最早进入history list的page，采用的是FIFO策略</p>
</li>
<li>
<p>以上就是LRU和LRU-K算法的解释</p>
</li>
</ul>
<h2 id="补充">补充</h2>
<ul>
<li>由于该版的实验<strong>page中有是否可以移除的标志位</strong>，如果为false表明该页无法被移除，所以说移除page的算法需要在原有的LRU-K算法的基础上面改进，按照优先级别先从History List的头向后扫描，如果有可以移除的page就直接移除，如果说History List中的页都无法移除，那么就需要从Buffer List的尾部向前扫描，发现可以移除的page就直接移除</li>
<li>这种情况的改变将删除操作的时间复杂度从$O(1)$上升到了$O(n)$，但是因为理想的模型和实际并不相符，实际中有一些page就是规定不应该被移除，所以为了和实际相符只能损失一小部分效率（毕竟主存和磁盘的容量比很小）</li>
</ul>
]]></description>
</item>
<item>
    <title>Learning docker</title>
    <link>https://Jungle430.github.io/posts/docker/learning_docker/</link>
    <pubDate>Thu, 14 Sep 2023 17:54:38 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/docker/learning_docker/</guid>
    <description><![CDATA[<h1 id="learning-docker">Learning Docker</h1>
<h2 id="背景概要">背景概要</h2>
<ul>
<li>$2005 \Rightarrow 2015$：<code>Cloud</code>（云技术）时代，为<code>Container</code>打下基础，带来土壤</li>
<li>$2015 \Rightarrow\ Now$：<code>Container</code>（容器）时代，最出名的代表就是<code>Docker</code></li>
</ul>
<h2 id="container的概念"><code>Container</code>的概念</h2>
<ul>
<li>简述：复制了一遍你的运行环境，别人拿过来能直接跑对应的程序，不用再折腾配环境这种司马事情了</li>
</ul>
<h2 id="安装">安装</h2>
<h3 id="windows"><code>Windows</code></h3>
<ul>
<li>
<p><a href="https://www.docker.com" target="_blank" rel="noopener noreffer">Docker官网</a>，下载桌面版</p>
</li>
<li>
<p>注意安装前开启<code>BIOS</code>虚拟化</p>
</li>
<li>
<p>如果开启<code>wsl2</code>能省去很多事情（</p>
</li>
<li>
<p>最终验证：命令行运行</p>
</li>
</ul>
<h3 id="linux"><code>Linux</code></h3>
<ul>
<li><a href="get.docker.com" rel="">get.docker.com</a>
<ul>
<li>下载后跑脚本即可</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -fsSL get.docker.com -o get-docker.sh
</span></span><span class="line"><span class="cl">sudo ./get-docker.sh
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>最终验证：命令行运行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl start docker
</span></span><span class="line"><span class="cl">docker version
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="创建与操作容器">创建与操作容器</h2>
<ul>
<li>镜像(<code>image</code>)：包含<code>OS</code>和应用的对象，类似虚拟机的模板（装系统用的那种，比如系统盘！），只能读</li>
<li>容器(<code>container</code>)：和镜像几乎一样，但是比镜像多了一层<code>Read-Write Layer</code>，这样就可以写了</li>
</ul>
<hr>
<h3 id="创建容器">创建容器</h3>
<ul>
<li>
<p>先检测<code>Client</code>和<code>Server</code>是否都启动<code>docker version</code>（<code>docker</code>桌面版要挂着）</p>
</li>
<li>
<p>创建命令<code>docker container run &lt;image name&gt;</code>(容器里面是对应的<code>image name</code>)</p>
</li>
<li>
<p>例子</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 建nginx的镜像，并运行</span>
</span></span><span class="line"><span class="cl">docker container run nginx
</span></span><span class="line"><span class="cl"><span class="c1"># 建ubuntu的镜像，并运行</span>
</span></span><span class="line"><span class="cl">docker container run ubuntu
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Docker Hub</code>：官方镜像社区，里面有大量制作好的镜像（创建容器就是上上面先拉取镜像，然后制作成镜像装在<code>Docker</code>里面）</li>
</ul>
<hr>
<h3 id="查看正在运行的容器">查看正在运行的容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>              <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">8</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Up</span> <span class="n">About</span> <span class="n">a</span> <span class="n">minute</span>             <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">11</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">5</span> <span class="n">seconds</span>                  <span class="n">rros_lab</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看所有容器">查看所有容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ps </span><span class="n">-a</span>
</span></span><span class="line"><span class="cl"><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>             <span class="n">CREATED</span>        <span class="n">STATUS</span>                         <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">e64ddbdaadc8</span>   <span class="nb">rust-oslab</span><span class="err">:</span><span class="n">latest</span>     <span class="s2">&#34;/bin/sh -c bash&#34;</span>   <span class="n">9</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Exited</span> <span class="p">(</span><span class="n">0</span><span class="p">)</span> <span class="n">About</span> <span class="n">an</span> <span class="n">hour</span> <span class="n">ago</span>             <span class="nb">rust-oslab</span><span class="p">-</span><span class="n">1</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">9</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">43</span> <span class="n">seconds</span> <span class="n">ago</span>              <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">12</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">42</span> <span class="n">seconds</span> <span class="n">ago</span>              <span class="n">rros_lab</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 等价命令</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls </span><span class="n">-a</span>
</span></span><span class="line"><span class="cl"><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>             <span class="n">CREATED</span>        <span class="n">STATUS</span>                       <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">e64ddbdaadc8</span>   <span class="nb">rust-oslab</span><span class="err">:</span><span class="n">latest</span>     <span class="s2">&#34;/bin/sh -c bash&#34;</span>   <span class="n">9</span> <span class="n">hours</span> <span class="n">ago</span>    <span class="n">Exited</span> <span class="p">(</span><span class="n">0</span><span class="p">)</span> <span class="n">30</span> <span class="n">seconds</span> <span class="n">ago</span>              <span class="nb">rust-oslab</span><span class="p">-</span><span class="n">1</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">10</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">7</span> <span class="n">minutes</span> <span class="n">ago</span>             <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>         <span class="n">12</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Exited</span> <span class="p">(</span><span class="n">137</span><span class="p">)</span> <span class="n">7</span> <span class="n">minutes</span> <span class="n">ago</span>             <span class="n">rros_lab</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="启动容器">启动容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="p">&lt;</span><span class="n">image</span> <span class="n">name</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="停止正在运行的容器">停止正在运行的容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">stop</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span> <span class="c"># id写前缀就行，一般前缀不会冲突</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删除容器">删除容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="nb">rm </span><span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span> <span class="c"># id写前缀就行，一般前缀不会冲突</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>上面的命令可以省略<code>container</code>不过为了强调<code>container</code>平时不做删除（与<code>image</code>区分）</li>
</ul>
<hr>
<h3 id="多容器操作">多容器操作</h3>
<ul>
<li>一次停掉多个容器的思路
<ul>
<li>查看所有容器的<code>id</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ps </span><span class="n">-a</span> <span class="n">-q</span>
</span></span><span class="line"><span class="cl"><span class="n">660040021c4d</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后利用指令组合</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="n">stop</span> <span class="p">$(</span><span class="n">docker</span> <span class="n">container</span> <span class="nb">ps </span><span class="n">-a</span> <span class="n">-q</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">660040021c4d</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>
</span></span><span class="line"><span class="cl"><span class="n">a99fc6e9cfe3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><b>命令组合的思路可以用到很多<code>docker</code>需要批量处理的情况下</b></p>
</li>
<li>
<p><b>删除正在运行的容器会报错！</b></p>
<ul>
<li>强制删除：<code>docker container rm &lt;id&gt; -f</code></li>
</ul>
</li>
</ul>
<h2 id="端口映射与主被动模式">端口映射与主/被动模式</h2>
<h3 id="端口映射">端口映射</h3>
<ul>
<li>目的：让容器能过在外网访问到</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-p</span> <span class="p">&lt;</span><span class="s2">&#34;服务器的端口&#34;</span><span class="p">&gt;</span><span class="err">:</span><span class="p">&lt;</span><span class="s2">&#34;容器的端口&#34;</span><span class="p">&gt;</span> <span class="n">nginx</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-p</span> <span class="n">80</span><span class="err">:</span><span class="n">80</span> <span class="n">nginx</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>检测是否启动
<ul>
<li>浏览器中访问<code>127.0.0.1:80</code></li>
</ul>
</li>
</ul>
<hr>
<h3 id="主动模式默认">主动模式（默认）</h3>
<ul>
<li>
<p>相当于命令行里面的子进程，会打印日志信息</p>
</li>
<li>
<p>容易被误操作停掉（关掉命令行或者不小心<code>Ctrl + c</code>）</p>
</li>
<li>
<p>调试时使用</p>
</li>
</ul>
<h3 id="被动模式后台运行">被动模式（后台运行）</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-d</span> <span class="n">-p</span> <span class="n">80</span><span class="err">:</span><span class="n">80</span> <span class="n">nginx</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>不再打印日志</p>
</li>
<li>
<p>不会因为关掉命令行而终止</p>
</li>
<li>
<p>使用<code>docker container ls</code>就能查看到</p>
</li>
</ul>
<h3 id="转换成主动模式">转换成主动模式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">attach</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="detached模式下查看日志的方法"><code>detached</code>模式下查看日志的方法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">run</span> <span class="n">-d</span> <span class="n">-p</span> <span class="n">80</span><span class="err">:</span><span class="n">80</span> <span class="n">nginx</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">logs</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c"># id写镜像名字也行</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">logs</span> <span class="p">&lt;</span><span class="n">image</span> <span class="n">name</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>跟踪日志（变成终端的子进程，不会自动停止，<code>Ctrl + C</code>终止）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">container</span> <span class="n">logs</span> <span class="o">-f</span> <span class="p">&lt;</span><span class="n">id</span><span class="p">&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="交互模式">交互模式</h2>
<ul>
<li>先启动容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>     <span class="n">COMMAND</span>   <span class="n">CREATED</span>   <span class="n">STATUS</span>    <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">start </span><span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>         <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">21</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">3</span> <span class="n">seconds</span>             <span class="n">rros_lab1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>进入容器终端</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker attach &lt;container name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Learning%20Docker/docker%20attach.png" title="/img/Learning Docker/docker attach.png" data-thumbnail="/img/Learning Docker/docker attach.png" data-sub-html="<h2>``</h2>">
        
    </a><figcaption class="image-caption">``</figcaption>
    </figure>
<ul>
<li><code>exit</code>退出后容器也会关闭</li>
</ul>
<hr>
<h3 id="如何exit后不关闭容器">如何<code>exit</code>后不关闭容器</h3>
<ul>
<li>使用<code>detached</code>模式</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it &lt;container name&gt; &lt;shell&gt;（通常用sh或者bash）
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>          <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">22</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">52</span> <span class="n">seconds</span>             <span class="n">rros_lab1</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">exec</span> <span class="n">-it</span> <span class="n">rros_lab1</span> <span class="n">bash</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span><span class="nv">@9ed70676585e</span><span class="err">:</span><span class="p">/</span><span class="n">data</span><span class="p">/</span><span class="nb">bupt-rtos</span><span class="c"># ls</span>
</span></span><span class="line"><span class="cl"><span class="n">20210704_ojeda_rust_support</span><span class="p">.</span><span class="n">mbx</span>  <span class="n">arm64_ramdisk</span>  <span class="n">rros</span>
</span></span><span class="line"><span class="cl"><span class="n">root</span><span class="nv">@9ed70676585e</span><span class="err">:</span><span class="p">/</span><span class="n">data</span><span class="p">/</span><span class="nb">bupt-rtos</span><span class="c"># exit</span>
</span></span><span class="line"><span class="cl"><span class="n">exit</span>
</span></span><span class="line"><span class="cl"><span class="nb">PS </span><span class="n">C:</span><span class="p">\</span><span class="n">Users</span><span class="p">\</span><span class="n">ROG</span><span class="p">&gt;</span> <span class="n">docker</span> <span class="n">container</span> <span class="nb">ls
</span></span></span><span class="line"><span class="cl"><span class="nb"></span><span class="n">CONTAINER</span> <span class="n">ID</span>   <span class="n">IMAGE</span>                 <span class="n">COMMAND</span>       <span class="n">CREATED</span>        <span class="n">STATUS</span>              <span class="n">PORTS</span>     <span class="n">NAMES</span>
</span></span><span class="line"><span class="cl"><span class="n">9ed70676585e</span>   <span class="n">l543306408</span><span class="p">/</span><span class="n">rros_lab</span>   <span class="s2">&#34;/bin/bash&#34;</span>   <span class="n">22</span> <span class="n">hours</span> <span class="n">ago</span>   <span class="n">Up</span> <span class="n">About</span> <span class="n">a</span> <span class="n">minute</span>             <span class="n">rros_lab1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="镜像获取image-registry">镜像获取/<code>Image Registry</code></h2>
<h3 id="获取镜像的三个途径">获取镜像的三个途径</h3>
<ul>
<li>
<p><code>pull from registry</code></p>
<ul>
<li>常见<code>registry</code>：<a href="https://hub.docker.com" target="_blank" rel="noopener noreffer">Docker Hub</a>，<a href="https://quay.io" target="_blank" rel="noopener noreffer">quay.io</a></li>
</ul>
</li>
<li>
<p><code>Dockerfile (online)</code></p>
</li>
<li>
<p>自有文件导入<code>(offline)</code></p>
</li>
<li>
<p>使用官方认证的镜像：安全</p>
</li>
</ul>
<hr>
<h3 id="镜像的拉取和删除">镜像的拉取和删除</h3>
<ul>
<li>拉取：官网找命令</li>
</ul>
<figure><a class="lightgallery" href="/img/Learning%20Docker/docker%20pull.png" title="/img/Learning Docker/docker pull.png" data-thumbnail="/img/Learning Docker/docker pull.png" data-sub-html="<h2>``</h2>">
        
    </a><figcaption class="image-caption">``</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker pull wordpress
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>新版本可以加上<code>image</code>前缀（强调，和<code>container</code>作区分）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image pull wordpress
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>实际效果（默认最新版，如果要其他版本去<code>tag</code>里面找对应版本的命令）</li>
</ul>
<figure><a class="lightgallery" href="/img/Learning%20Docker/docker%20pull%20busybox.png" title="/img/Learning Docker/docker pull busybox.png" data-thumbnail="/img/Learning Docker/docker pull busybox.png" data-sub-html="<h2>``</h2>">
        
    </a><figcaption class="image-caption">``</figcaption>
    </figure>
<h3 id="查看现有镜像">查看现有镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image ls
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看镜像详细信息">查看镜像详细信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image inspect &lt;image id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>关注对应的<code>OS</code>和架构</li>
</ul>
<hr>
<h3 id="删除镜像">删除镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image rm &lt;id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="image的导入导出"><code>image</code>的导入/导出</h3>
<ul>
<li>
<p><code>image</code>导出</p>
</li>
<li>
<p>在要保存的位置执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">save</span> <span class="p">&lt;</span><span class="n">image</span> <span class="n">name</span><span class="p">&gt;</span><span class="err">:</span><span class="p">&lt;</span><span class="n">tag</span><span class="p">&gt;</span> <span class="n">-o</span> <span class="p">&lt;</span><span class="n">new</span> <span class="n">image</span> <span class="n">name</span><span class="p">&gt;.</span><span class="n">image</span>
</span></span><span class="line"><span class="cl"><span class="c"># example</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">save</span> <span class="n">busybox</span><span class="err">:</span><span class="n">latest</span> <span class="n">-o</span> <span class="n">mybusybox</span><span class="p">.</span><span class="n">image</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>image</code>导入</p>
</li>
<li>
<p>也是在对应镜像的位置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">load</span> <span class="n">-i</span> <span class="p">&lt;</span><span class="n">load</span> <span class="n">image</span> <span class="n">name</span><span class="p">&gt;.</span><span class="n">image</span>
</span></span><span class="line"><span class="cl"><span class="c"># 例子</span>
</span></span><span class="line"><span class="cl"><span class="n">docker</span> <span class="n">image</span> <span class="n">load</span> <span class="n">-i</span> <span class="p">.\</span><span class="n">mybusybox</span><span class="p">.</span><span class="n">image</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="dockerfile"><code>Dockerfile</code></h2>
<ul>
<li><code>Dockerfile</code>：使用组合映像命令的文本文档，用于<code>DIY</code>自己的<code>image</code></li>
</ul>
<hr>
<ul>
<li>例子<code>ubuntu</code>执行<code>python</code>程序</li>
<li><code>hello.py</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Hello, my first docker!&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Dockerfile</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span>  apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive apt-get install --no-install-recommends -y python3.9 python3-pip python3.9-dev<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ADD</span> hello.py /<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;python3&#34;</span><span class="p">,</span><span class="s2">&#34;hello.py&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>FROM</code>：引入系统</p>
</li>
<li>
<p><code>RUN</code>：安装环境（<code>build</code>的时候执行）</p>
</li>
<li>
<p><code>ADD</code>：将本机文件加入到<code>image</code>中，默认加入到<code>image</code>的根目录</p>
</li>
<li>
<p><code>CMD</code>：相当于使用<code>shell</code>命令(<code>build</code>后执行)</p>
</li>
</ul>
<hr>
<h3 id="构建dockerfile">构建<code>Dockerfile</code></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image build -t &lt;image name&gt;:&lt;tag<span class="o">(</span>若忽略则默认latest<span class="o">)</span>&gt; &lt;image path<span class="o">(</span>通常用<span class="s2">&#34;.&#34;</span>，本地目录<span class="o">)</span>&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>
<p>将镜像上传到<code>Docker Hub</code>上面</p>
<ul>
<li>规则：<code>&lt;Hub name&gt;/&lt;image name&gt;</code></li>
</ul>
</li>
<li>
<p>更改名字使其能够上传</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image tag &lt;old name&gt; &lt;new name&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># example</span>
</span></span><span class="line"><span class="cl">docker image tag myimage username/myimage
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>通过<code>id/name</code>上传</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker login <span class="c1"># 输入用户名和密码登录</span>
</span></span><span class="line"><span class="cl">docker image push username/myimage
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="from语法"><code>FROM</code>语法</h4>
<ul>
<li>
<p>引入基础镜像</p>
</li>
<li>
<p>三个基本原则</p>
<ul>
<li>
<p>官方镜像优于非官方镜像（安全性）</p>
</li>
<li>
<p>固定版本的<code>Tag</code>，而不是每次都使用<code>latest</code>（稳定）</p>
</li>
<li>
<p>功能满足的情况下使用体积小的镜像（让自己的镜像变得简洁）</p>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="run命令"><code>RUN</code>命令</h4>
<ul>
<li>
<p>接<code>shell</code>命令</p>
</li>
<li>
<p>坑</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get install -y wget<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> tar zxf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> rm -rf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>不建议这么写：每个<code>RUN</code>都会生成一个新的“层”，打包的体积会变大</p>
<ul>
<li><code>rm -rf</code>的命令也会无效：上面的文件已经嵌入到上一层里面了</li>
</ul>
</li>
<li>
<p>正确写法：改成<code>&amp;&amp; \</code>的组合</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>变成了只有一层，体积会变小</li>
</ul>
<hr>
<h4 id="文件操作">文件操作</h4>
<ul>
<li>
<p><code>COPY</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">COPY</span> index.js /app/index.js<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>将当前目录下的<code>index.js</code>文件拷贝到镜像中的<code>/app/index.js</code>（镜像中没有对应文件会自动创建）</li>
</ul>
</li>
<li>
<p><code>ADD</code></p>
<ul>
<li>基本效果和<code>COPY</code>相同，但是会自动解压缩</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">ADD</span> index.tar /app/<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行后会发现容器<code>/app/</code>文件夹里面就是<code>index.tar</code>里面被压缩文件的内容</li>
</ul>
</li>
<li>
<p><code>WORKDIR</code></p>
<ul>
<li>切换目录</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:20.04</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /app</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> hello.py hello.py<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>和上面效果相同，最后文件都在<code>/app</code>这个目录下</li>
<li>相当于<code>cd</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>变量声明（类似宏定义，使得代码更简介）</p>
</li>
<li>
<p>例子</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-2.0.1/ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_2.0.1_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_2.0.1_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_2.0.1_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="env"><code>ENV</code></h4>
<ul>
<li><code>ENV key=value</code>（中间不要加空格，有坑）</li>
<li>使用<code>value</code>：<code>${key}$</code></li>
<li>效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">VERSION</span><span class="o">=</span><span class="m">2</span>.0.1<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>/ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="arg"><code>ARG</code></h4>
<ul>
<li>语法和<code>ENV</code>一样
<ul>
<li>和<code>ENV</code>不同的地方
<ul>
<li><b><code>ENV</code>声明的变量会带入镜像内部</b>（比如<code>Linux</code>的<code>env</code>命令，或者直接<code>echo $key</code>也能打出来），而<code>ARG</code>不会</li>
<li><code>ARG</code>可以动态添加</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image build -f Dockfile -t &lt;image&gt;:&lt;tag&gt; --build-arg <span class="nv">VERSION</span><span class="o">=</span>2.0.0 .
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h4 id="cmd"><code>CMD</code></h4>
<ul>
<li>
<p>三个基本原则</p>
<ul>
<li>容器启动时默认执行的命令
<ul>
<li>如果没有，对应拉取的官方镜像会有默认的<code>CMD</code>，比如<code>ubuntu</code>会自带<code>CMD[&quot;bash&quot;]</code></li>
</ul>
</li>
<li>如果启动容器所用的命令是<code>docker container run {commandline}</code>
<ul>
<li>比如<code>docker container run -it &lt;image name&gt; &lt;command&gt; =&gt; docker container run -it ipinfo-base ipinfo version</code>：对于容器<code>ipinfo-base</code>容器的默认<code>CMD</code>就是<code>ipinfo version</code></li>
</ul>
</li>
<li>一个<code>Dockerfile</code>定义了多个<code>CMD</code>命令，只会执行最后一个</li>
</ul>
</li>
<li>
<p>两种写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">CMD</span> <span class="p">[</span> <span class="s2">&#34;python3&#34;</span><span class="p">,</span><span class="s2">&#34;hello.py&#34;</span> <span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> python3 hello.py<span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>清除<b>不再使用</b>的容器</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker system prune -f
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>清除<b>不再使用</b>的镜像</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker image prune -a
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="entrypoint"><code>ENTRYPOINT</code></h4>
<ul>
<li>
<p>和<code>CMD</code>功能相似</p>
</li>
<li>
<p>区别</p>
<ul>
<li><code>CMD</code>会被命令行启动模式后面接的命令覆盖掉，而<code>ENTRYPOINT</code>不会，<b>一定会被执行</b></li>
<li><code>CMD</code>和<code>ENTRYPOINT</code>可以联合使用</li>
</ul>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:21.04</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;echo&#34;</span><span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">CMD</span> <span class="p">[]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>命令行<code>docker container run -rm -it demo-both &quot;hello world&quot;</code>执行效果<code>=&gt; hello world</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>数据持久化：<code>VOLUME</code>
<ul>
<li>数据库，日志等如何存到本地？</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:latest</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">VERSION</span><span class="o">=</span><span class="m">2</span>.0.1<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apt-get install -y wget <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    wget https://github.com/ipinfo/cli/releases/download/ipinfo-<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>/ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar zxf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mv ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64 /usr/bin/ipinfo <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -rf ipinfo_<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>_linux_amd64.tar.gz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span> <span class="p">[</span> <span class="s2">&#34;/data&#34;</span> <span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>保留镜像下面的<code>/data</code>目录，没有会自动创建</p>
</li>
<li>
<p>保存在本地的持久化数据使用<code>docker volume</code>系列的命令查看</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker volume ls
</span></span><span class="line"><span class="cl"><span class="c1"># -----</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -----</span>
</span></span><span class="line"><span class="cl">docker volume inspect &lt;VOLUME NAME&gt;<span class="o">(</span>注意不能简写<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Mountpoint</code>就是本地存储的位置</li>
</ul>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run -d -v &lt;VOLUME NAME&gt;/&lt;VOLUME PATH IN DOCKERFILE&gt; &lt;container name&gt;
</span></span><span class="line"><span class="cl">docker volume inspect &lt;container name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这个时候<code>VOLUME NAME</code>和<code>Mountpoint</code>就是你自己刚才指定的名字了，不会是一串大段的加密码了</li>
<li>这个既可以让容器的数据保存的主机，反过来，如果主机对应的目录下面有文件，再次运行新的容器的时候，该容器可以复用主机对应部分的数据</li>
</ul>
<hr>
<ul>
<li><code>Bind Mount</code>自定义
<ul>
<li><code>Windows</code>实现数据持久化</li>
<li>用容器运行本机的程序，本机无需再需要安装环境</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run -it -v <span class="si">${</span><span class="nv">pwd</span><span class="si">}</span>:/app node sh
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>本机修改数据的时候会同步到容器中，相当于完全绑定</li>
</ul>
<hr>
<ul>
<li>网络端口映射</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container run -d -p 80:80 &lt;container name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>-p &lt;主机端口&gt;:&lt;容器端口&gt;</code>：映射</p>
</li>
<li>
<p>查看容器的端口</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker container inspect --format <span class="s1">&#39;{{.Config.ExposedPorts}}&#39;</span> &lt;container id&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>主要关注<code>Config.ExposedPorts</code>下面的内容</li>
</ul>
<h2 id="docker-compose"><code>Docker-compose</code></h2>
<ul>
<li>
<p>相当于<code>shell</code>脚本，集成了命令</p>
</li>
<li>
<p>两个部分</p>
<ul>
<li>配置<code>yml</code>文件</li>
<li>运行文件的命令</li>
</ul>
</li>
<li>
<p>检测环境</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose --version
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h3 id="yml文件的基本语法"><code>yml</code>文件的基本语法</h3>
<ul>
<li><code>docker-compose.yml</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.8&#34;</span><span class="w"> </span><span class="c"># docker-compose的版本号</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 容器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">servicename</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 服务名字，这个名字也是内部 bridge网络可以使用的 DNS name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="c"># 镜像的名字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，如果设置，则会覆盖默认镜像里的 CMD命令</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker run里的 --env</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于docker run里的 -v</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker run里的 --network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker run里的 -p</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">servicename2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">volumes</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker volume create</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w"> </span><span class="c"># 可选，相当于 docker network create</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>实践</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker container run -d -p 80:80 wordpress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">my-wordpress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">Jungle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">wordpress:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">80</span><span class="p">:</span><span class="m">80</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>version</code>：有关信息</p>
<ul>
<li><a href="https://docs.docker.com/compose/features-uses" target="_blank" rel="noopener noreffer">https://docs.docker.com/compose/features-uses</a></li>
<li><a href="https://docs.docker.com/compose/migrate" target="_blank" rel="noopener noreffer">https://docs.docker.com/compose/migrate</a></li>
</ul>
</li>
<li>
<p>执行<code>compose</code>命令（在同级目录）</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker compose up <span class="c1"># 主动，占用命令行</span>
</span></span><span class="line"><span class="cl">docker compose up -d <span class="c1"># 被动，后台开启</span>
</span></span><span class="line"><span class="cl">docker compose stop <span class="c1"># 停止对应的容器</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>compose</code>镜像的构建和拉取</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># docker container run -d -p 80:80 wordpress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.8&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">my-wordpress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">Jungle</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">rust-oslab:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">80</span><span class="p">:</span><span class="m">80</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>只拉取镜像，不启动容器，下次<code>docker compose up</code>的时候会很快</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker compose pull
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<h2 id="网络配置">网络配置</h2>
<ul>
<li>
<p>主要信息在配置文件里面的<code>Networks</code>部分</p>
</li>
<li>
<p>内网地址：<code>IPAddress</code></p>
</li>
<li>
<p>网关：<code>Gateway</code>：通常是主机地址</p>
</li>
<li>
<p>使用容器集群的时候要进行网络配置</p>
<ul>
<li>
<p>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker network ls
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>三种模式</p>
<ul>
<li><code>bridge</code>：桥接模式（网桥），为每一个容器分配和设置一个<code>ip</code>地址，并将容器连接到<code>docker0</code>上面（<code>linux</code>下使用<code>ip addr</code>查看）</li>
<li><code>host</code>：使用主机的网络地址，容器自己没有<code>ip</code>和网关，全部依赖宿主</li>
<li><code>container</code>：使用其他网络配置好了的容器的网络</li>
<li><code>null</code>：不对网络进行任何配置，也可以自定义</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -it --name bbox01 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>创建<code>host</code>类型的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -it --name nginx1 --network host nginx
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>创建<code>null</code>类型的容器</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker run -it --name bbox2 --network none busybox
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>container</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 启动一个新的容器</span>
</span></span><span class="line"><span class="cl">docker run -it --name bbox01 busybox
</span></span><span class="line"><span class="cl"><span class="c1"># container 模式</span>
</span></span><span class="line"><span class="cl">docker run -it --name bbox02 --network container:bbox1 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果<code>container</code>对应的容器关闭，<b>或者关闭之后开启</b>，<code>container</code>的容器的网都会断开</li>
</ul>
]]></description>
</item>
<item>
    <title>Go 1.19 排序算法</title>
    <link>https://Jungle430.github.io/posts/go/pdqsort/</link>
    <pubDate>Sun, 04 Jun 2023 19:46:20 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/pdqsort/</guid>
    <description><![CDATA[<h1 id="go-119-排序算法-pdqsort">Go 1.19 排序算法-$pdqsort$</h1>
<h2 id="三种经典排序算法的对比">三种经典排序算法的对比</h2>
<ul>
<li>所有短元素和元素有序的情况下，<strong>插入排序性能最好</strong></li>
<li>在大部分情况下，快速排序都有较好的<strong>综合性能</strong></li>
<li>几乎在任何情况下，堆排序都表现的<strong>比较稳定</strong></li>
</ul>
<hr>
<ul>
<li>能否结合上面三种排序算法的优点，设计出一个排序算法使得</li>
</ul>
<p>$$
\begin{align}
&amp;Best \Longrightarrow O(n)\newline
&amp;Avg \Longrightarrow O(n\log n)\newline
&amp;Worst \Longrightarrow O(n\log n)\newline
\end{align}
$$</p>
<h2 id="pdqsort">pdqsort</h2>
<ul>
<li>简介</li>
</ul>
<blockquote>
<ul>
<li>
<p>$pdqsort(pattern-defeating-quicksort)$</p>
</li>
<li>
<p>是一种<em>不稳定</em>的<strong>混合</strong>排序算法，它的不同版本被应用在<code>C++ Boost,Rust</code>以及<code>Go</code>1.19中。它对常见的序列类型做了特殊的优化，使得<strong>在不同条件下都拥有不错的性能</strong></p>
</li>
</ul>
</blockquote>
<ul>
<li>复习不稳定:$96_a,96_b \rightarrow^{sort} 96_b,96_a$</li>
</ul>
<h3 id="version-1">version 1</h3>
<ul>
<li>
<p>结合三种排序的优点</p>
<ul>
<li>短序列使用插入排序</li>
<li>其他情况使用快排</li>
<li>如果快速排序表现不佳，则使用<strong>堆排序</strong>保证$Worst$情况下仍有$O(n\log n)$的复杂度</li>
</ul>
</li>
<li>
<p>Q&amp;A</p>
<ul>
<li>短序列的具体长度是多少？
<ul>
<li>12~32，不同语言和场景下会有不同，<strong>在泛型版本中根据测试选定为24</strong></li>
</ul>
</li>
<li>怎么得知快排表现不佳，切换到堆排序?
<ul>
<li>当<strong>最终</strong>的$pivot$的位置离序列两端很接近时$(&lt; \frac{length}{8})$（其实就是分的太少），判定其表现不佳，当这种情况达到$limit(bits.Len(length))$时，切换到堆排序</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image1.png" title="/img/Go/pdqsort/image1.png" data-thumbnail="/img/Go/pdqsort/image1.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>改进：<code>choose pivot</code>尽量能够选中中位数，改进<code>choose pivot</code></li>
</ul>
<h3 id="version-2">version 2</h3>
<ul>
<li>
<p><code>version1</code>中选择<code>pivot</code>的方式是选择首个元素，算法简单但是效率低</p>
</li>
<li>
<p>遍历数组，寻找真正的中位数 $\Longrightarrow$ 遍历代价太高</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>平衡</p>
<ul>
<li>寻找<code>pivot</code>所需要的开销</li>
<li><code>pivot</code>带来的性能优化</li>
</ul>
</li>
<li>
<p>解决方案</p>
<ul>
<li>寻找近似中位数</li>
</ul>
</li>
<li>
<p>根据不同的长度选择<code>pivot</code>策略</p>
<ul>
<li>短序列$(\le 8)$：选择固定元素</li>
<li>中序列$(\le 50)$：采样选用三个元素，<a href="https://brilliant.org/wiki/median-finding-algorithm/#citation-1" target="_blank" rel="noopener noreffer"><code>median of three</code></a></li>
<li>长度列$(&gt;50)$：采样九个元素，<a href="https://www.johndcook.com/blog/2009/06/23/tukey-median-ninther/" target="_blank" rel="noopener noreffer"><code>median of medians</code></a></li>
</ul>
</li>
<li>
<p><u><code>pivot</code>的采样方式可以让我们“感知”当前序列的状态</u></p>
<ul>
<li>采样都为逆序 $\Longrightarrow$ 猜测当前序列可能为<strong>逆序</strong> $\Longrightarrow$ <code>reverse(array)</code></li>
<li>采样都为顺序 $\Longrightarrow$ 猜测当前序列可能为<strong>顺序</strong> $\Longrightarrow$ <code>insertsort(array)</code>
<ul>
<li>注：这里面的插入排序实际使用的是<code>partiallnsertionSort</code>，即有限制次数的插入排序，来限制其最坏情况</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image2.png" title="/img/Go/pdqsort/image2.png" data-thumbnail="/img/Go/pdqsort/image2.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>改进
<ul>
<li>优化了<code>pivot</code>的选择策略（近似中位数）</li>
<li>根据采样来感知序列状态，适当使用其他方法来提高收益(<code>reverse</code>和<code>partiallnsertionSort</code>)</li>
</ul>
</li>
</ul>
<h3 id="final-version">final version</h3>
<ul>
<li>
<p>还有什么情况没有被考虑到，可以被优化？</p>
<ul>
<li><strong>重复度较高</strong></li>
</ul>
</li>
<li>
<p>可以在选择<code>pivot</code>的时候“感知”重复度？</p>
<ul>
<li>不是很好，因为采样不是很多，很难拿到相同的元素</li>
</ul>
</li>
<li>
<p>解决方案</p>
<ul>
<li><u>如果两次<code>partion</code>生成的<code>pivot</code>相同，即对<code>partition</code>进行了无效分割，此时认为<code>piovt</code>的值为重复元素</u>（比上面的方法有更高的采样率）</li>
</ul>
</li>
<li>
<p>优化-重复元素较多的情况(<code>partitionEqual</code>)</p>
<ul>
<li>当检测到此时的<code>pivot</code>和上次相同时 (发生在<code>leftSubArray</code>) ，使用<code>partitionEqual</code>将重复元素排列在一起，减少重复元素对于<code>pivot</code>选择的干扰</li>
</ul>
</li>
<li>
<p>优化-当<code>pivot</code>选择策略表现不佳时，随机交换元素</p>
<ul>
<li>避免一些极端情况使得<code>QuickSort</code>总是表现不佳，以及一些黑客攻击情况（随机交换来增加不确定性）</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/pdqsort/image3.png" title="/img/Go/pdqsort/image3.png" data-thumbnail="/img/Go/pdqsort/image3.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>最终效果</li>
</ul>
<p>$$
\begin{align}
&amp;Best \Longrightarrow O(n)\newline
&amp;Avg \Longrightarrow O(n\log n)\newline
&amp;Worst \Longrightarrow O(n\log n)\newline
\end{align}
$$</p>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>高性能的排序算法是如何设计的?</p>
<ul>
<li>根据不同情况选择不同策略，取长补短</li>
</ul>
</li>
<li>
<p>生产环境中使用的的排序算法和课本上的排序算法有什么区别?</p>
<ul>
<li>理论算法注重理论性能，例如时间、空间复杂度等。生产环境中的算法需要面对不同的实践场景，更加注重实践性能</li>
</ul>
</li>
<li>
<p>Go 语言($\le 1.18$)的排序算法是快速排序么?</p>
<ul>
<li>实际一直是<strong>混合排序算法，主体是快速排序</strong>。$Go \le 1.18 $时的算法也是基于快速排序，和<code>pdgsort</code>的区别在于<code>fallback</code>时机、<code>pivot </code>选择策略、是否有针对不同<code>pattern</code>优化等</li>
</ul>
</li>
<li>
<p>附<code>Go 1.20</code>$pdqsort$源码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// pdqsort sorts data[a:b].
</span></span></span><span class="line"><span class="cl"><span class="c1">// The algorithm based on pattern-defeating quicksort(pdqsort), but without the optimizations from BlockQuicksort.
</span></span></span><span class="line"><span class="cl"><span class="c1">// pdqsort paper: https://arxiv.org/pdf/2106.05123.pdf
</span></span></span><span class="line"><span class="cl"><span class="c1">// C++ implementation: https://github.com/orlp/pdqsort
</span></span></span><span class="line"><span class="cl"><span class="c1">// Rust implementation: https://docs.rs/pdqsort/latest/pdqsort/
</span></span></span><span class="line"><span class="cl"><span class="c1">// limit is the number of allowed bad (very unbalanced) pivots before falling back to heapsort.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span> <span class="nx">Interface</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">limit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">const</span> <span class="nx">maxInsertion</span> <span class="p">=</span> <span class="mi">12</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wasBalanced</span>    <span class="p">=</span> <span class="kc">true</span> <span class="c1">// whether the last partitioning was reasonably balanced
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">wasPartitioned</span> <span class="p">=</span> <span class="kc">true</span> <span class="c1">// whether the slice was already partitioned
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">length</span> <span class="o">:=</span> <span class="nx">b</span> <span class="o">-</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">length</span> <span class="o">&lt;=</span> <span class="nx">maxInsertion</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">insertionSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Fall back to heapsort if too many bad choices were made.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">limit</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">heapSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If the last partitioning was imbalanced, we need to breaking patterns.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">wasBalanced</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">breakPatterns</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">limit</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">pivot</span><span class="p">,</span> <span class="nx">hint</span> <span class="o">:=</span> <span class="nf">choosePivot</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">hint</span> <span class="o">==</span> <span class="nx">decreasingHint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">reverseRange</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// The chosen pivot was pivot-a elements after the start of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// After reversing it is pivot-a elements before the end of the array.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// The idea came from Rust&#39;s implementation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">pivot</span> <span class="p">=</span> <span class="p">(</span><span class="nx">b</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="nx">pivot</span> <span class="o">-</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">hint</span> <span class="p">=</span> <span class="nx">increasingHint</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// The slice is likely already sorted.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">wasBalanced</span> <span class="o">&amp;&amp;</span> <span class="nx">wasPartitioned</span> <span class="o">&amp;&amp;</span> <span class="nx">hint</span> <span class="o">==</span> <span class="nx">increasingHint</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nf">partialInsertionSort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Probably the slice contains many duplicate elements, partition the slice into
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// elements equal to and elements greater than the pivot.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">data</span><span class="p">.</span><span class="nf">Less</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">mid</span> <span class="o">:=</span> <span class="nf">partitionEqual</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">a</span> <span class="p">=</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">mid</span><span class="p">,</span> <span class="nx">alreadyPartitioned</span> <span class="o">:=</span> <span class="nf">partition</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">pivot</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wasPartitioned</span> <span class="p">=</span> <span class="nx">alreadyPartitioned</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">leftLen</span><span class="p">,</span> <span class="nx">rightLen</span> <span class="o">:=</span> <span class="nx">mid</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="o">-</span><span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="nx">balanceThreshold</span> <span class="o">:=</span> <span class="nx">length</span> <span class="o">/</span> <span class="mi">8</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">leftLen</span> <span class="p">&lt;</span> <span class="nx">rightLen</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wasBalanced</span> <span class="p">=</span> <span class="nx">leftLen</span> <span class="o">&gt;=</span> <span class="nx">balanceThreshold</span>
</span></span><span class="line"><span class="cl">			<span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">mid</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">a</span> <span class="p">=</span> <span class="nx">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wasBalanced</span> <span class="p">=</span> <span class="nx">rightLen</span> <span class="o">&gt;=</span> <span class="nx">balanceThreshold</span>
</span></span><span class="line"><span class="cl">			<span class="nf">pdqsort</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">limit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">b</span> <span class="p">=</span> <span class="nx">mid</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>github</code>上面的提交:https://github.com/golang/go/issues/50154</p>
</li>
<li>
<p><a href="https://arxiv.org/pdf/2106.05123.pdf" target="_blank" rel="noopener noreffer">Pattern-defeating Quicksort</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/5HqfRGqPyAhFt0krPgMHOQ" target="_blank" rel="noopener noreffer">公众号文章</a></p>
</li>
</ul>
<hr>
<ul>
<li><code>Go</code>的源码还是不错的，起码不至于像<code>C++</code>那样群魔乱舞，考完试抽时间看看</li>
</ul>
]]></description>
</item>
<item>
    <title>消息队列</title>
    <link>https://Jungle430.github.io/posts/go/message-queue/</link>
    <pubDate>Sat, 03 Jun 2023 16:04:20 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/message-queue/</guid>
    <description><![CDATA[<h1 id="消息队列">消息队列</h1>
<h2 id="走进消息队列">走进消息队列</h2>
<h3 id="场景">场景</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image1.png" title="/img/Go/message-queue/image1.png" data-thumbnail="/img/Go/message-queue/image1.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例一：有一天晚上我们上完课，回到宿舍，想着新出的游戏机，但又摸了摸钱包，太贵了买不起，这个时候你突然想到，今天抖音直播搞活动，瞬间你掏出了手机打开抖音搜索，找到直播间以后，你打开了心心念念的游戏机详情页，看到价格只要500。
<ul>
<li>这个时候我们分析一下，就我们上面这几步操作，在我们的程序背后，做了什么事情。</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image2.png" title="/img/Go/message-queue/image2.png" data-thumbnail="/img/Go/message-queue/image2.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例二：服务能力有限（到点上车，无数用户在对面狂点手机+黄牛的脚本）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image3.png" title="/img/Go/message-queue/image3.png" data-thumbnail="/img/Go/message-queue/image3.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>案例三：链路耗时长尾（下单之后一直在转圈圈）</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image4.png" title="/img/Go/message-queue/image4.png" data-thumbnail="/img/Go/message-queue/image4.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>案例四：日志存储</p>
<ul>
<li>如果完事之后发现本地日志丢掉了怎么办？</li>
</ul>
</li>
<li>
<p>面对上面的四个场景，我们有什么解决办法吗？</p>
</li>
</ul>
<h3 id="解决问题">解决问题</h3>
<ul>
<li>案例一
<ul>
<li>解决方案：解耦</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image5.png" title="/img/Go/message-queue/image5.png" data-thumbnail="/img/Go/message-queue/image5.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>类似生产者消费者模型（或者是<code>go</code>的<code>channel</code>），即使数据库方面宕机但是消息仍然被保存下来，部分请求还是可以被处理掉</p>
</li>
<li>
<p>案例二</p>
<ul>
<li>解决方案：削峰</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image6.png" title="/img/Go/message-queue/image6.png" data-thumbnail="/img/Go/message-queue/image6.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>加了一层缓冲机制</p>
</li>
<li>
<p>案例三</p>
<ul>
<li>解决方案：异步</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image7.png" title="/img/Go/message-queue/image7.png" data-thumbnail="/img/Go/message-queue/image7.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>前两个请求处理完成之后用户会马上得到响应，不再干等着，耗时的通知商家响应方是商家，所以慢一点问题不太大</p>
</li>
<li>
<p>三个过程从原来的<strong>单线程顺序处理</strong>变成<strong>多线程异步处理</strong></p>
</li>
<li>
<p>案例四</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image8.png" title="/img/Go/message-queue/image8.png" data-thumbnail="/img/Go/message-queue/image8.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h2 id="什么是消息队列">什么是消息队列？</h2>
<blockquote>
<p>消息队列(MQ)，指保存<strong>消息</strong>的一个<strong>容器</strong>，本质是个<strong>队列</strong>。但是这个队列需要满足<strong>高吞吐，高并发，并且高可用</strong></p>
</blockquote>
<div class="mermaid" id="id-1"></div>
<h3 id="业界消息队列对比">业界消息队列对比</h3>
<figure><a class="lightgallery" href="/img/Go/message-queue/image9.png" title="/img/Go/message-queue/image9.png" data-thumbnail="/img/Go/message-queue/image9.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h3 id="消息队列kafka">消息队列<code>Kafka</code></h3>
<ul>
<li>使用场景：离线的消息处理当中（日志信息，<code>Metrics</code>数据，用户行为 $\Longrightarrow$ 搜索，点赞，评论，收藏）</li>
</ul>
<h4 id="如何使用kafka">如何使用<code>Kafka</code></h4>
<div class="mermaid" id="id-2"></div>
<ul>
<li>基本概念
<ul>
<li><code>Topic</code>：逻辑队列，不同的<code>Topic</code>可以建立不同的<code>Topic</code></li>
<li><code>Cluster</code>：物理集群，每个集群中可以建立多个不同的<code>Topic</code></li>
<li><code>Producer</code>：生产者，负责将业务消息发送到<code>Topic</code>中</li>
<li><code>Consumer</code>：消费者，负责消费<code>Topic</code>中的消息</li>
<li><code>ConsumerGroup</code>：消费者组，不同组<code>Consumer</code>互不干涉</li>
<li>同一个<code>Topic</code>中的<code>Partion</code>可以并发处理，提高吞吐量</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image10.png" title="/img/Go/message-queue/image10.png" data-thumbnail="/img/Go/message-queue/image10.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li>Offset</li>
</ul>
<blockquote>
<p><strong>Offset</strong>:消息在Partion内的相对位置信息，可以理解为唯一ID，<strong>在partion内部是严格递增的</strong></p>
</blockquote>
<hr>
<ul>
<li>Replica</li>
</ul>
<blockquote>
<p>每个分片有多个<strong>Replica</strong>，<strong>Leader Replica</strong>将会从$LSR$中选出</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Go/message-queue/image11.png" title="/img/Go/message-queue/image11.png" data-thumbnail="/img/Go/message-queue/image11.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>
<p>Leader:对外进行读写</p>
</li>
<li>
<p>Foller:不断将数据从Leader上面拉取下来，努力和Leader保持一个一致的状态，如果和Leader差距过大会被踢出ISR（参考Replica3）</p>
</li>
<li>
<p>ISR的作用：如果ISR里面的leader对应的机器发生了宕机等故障，<strong>ISR会从里面的Foller中选择一个让其重新成为Leader</strong>，保证服务器继续运行，保证了<strong>高可用性</strong></p>
</li>
</ul>
<hr>
<ul>
<li>数据复制</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image12.png" title="/img/Go/message-queue/image12.png" data-thumbnail="/img/Go/message-queue/image12.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>其中有一个Broker同时也扮演了Controller的角色。Controller是整个集群的大脑，负责对副本和Broker的分配</li>
</ul>
<hr>
<ul>
<li><code>Kafka</code>架构</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image13.png" title="/img/Go/message-queue/image13.png" data-thumbnail="/img/Go/message-queue/image13.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h4 id="消息的处理流程">消息的处理流程</h4>
<div class="mermaid" id="id-3"></div>
<h5 id="发送消息">发送消息</h5>
<ul>
<li>如果发送一条消息，等待其成功后再发送下一条消息会有什么问题？</li>
</ul>
<div class="mermaid" id="id-4"></div>
<hr>
<ul>
<li>批量发送消息可以增加吞吐量，<strong>但是如果网络带宽不够怎么办</strong>？</li>
</ul>
<div class="mermaid" id="id-5"></div>
<ul>
<li>解决方法：进行压缩，减少消息大小，目前支持的有:Snappy,Gzip,LZ4,ZSTD压缩算法</li>
</ul>
<div class="mermaid" id="id-6"></div>
<h5 id="存储消息">存储消息</h5>
<div class="mermaid" id="id-7"></div>
<ul>
<li>
<p>如何存储到磁盘？</p>
</li>
<li>
<p><code>Borker</code>的文件结构</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image14.png" title="/img/Go/message-queue/image14.png" data-thumbnail="/img/Go/message-queue/image14.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>磁盘结构：由于寻道成本比较高，所以<u>顺序写入可以减少寻道带来的时间成本</u></li>
</ul>
<hr>
<ul>
<li><code>Broker</code>-顺序写</li>
</ul>
<div class="mermaid" id="id-8"></div>
<ul>
<li>采用顺序写的方式进行写入（磁盘末尾追加，减少动磁头的次数），以提高写入效率</li>
</ul>
<hr>
<ul>
<li>
<p><code>Broker</code>-如何找到消息</p>
</li>
<li>
<p><code>Consumer </code>通过发送<code>FetchRequest</code>请求消息数据，<code>Broker </code>会将指定<code>Offset</code>处的消息，按照时间窗口和消息大小窗口发送给<code> Consumer</code>，<u>寻找数据这个细节是如何做到的呢?</u></p>
</li>
</ul>
<div class="mermaid" id="id-9"></div>
<ul>
<li>
<p>例子：寻找<code>offer=28</code></p>
<ul>
<li>
<p><b>二分法</b>查找小于目标<code>offer</code>的最大文件</p>
</li>
<li>
<p>接着通过偏移量去对应的地址里面继续查找</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image15.png" title="/img/Go/message-queue/image15.png" data-thumbnail="/img/Go/message-queue/image15.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<hr>
<ul>
<li><code>Broker</code>-时间戳索引文件
<ul>
<li>二分法找到<strong>小于目标时间戳的最大索引位置</strong>，再通过<code>offset</code>的方式找到最终数据</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/message-queue/image16.png" title="/img/Go/message-queue/image16.png" data-thumbnail="/img/Go/message-queue/image16.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
]]></description>
</item>
<item>
    <title>Go Module与测试</title>
    <link>https://Jungle430.github.io/posts/go/module_and_test/</link>
    <pubDate>Sun, 14 May 2023 21:51:22 &#43;0800</pubDate><author>junglece430@gmail.com (Jungle)</author><guid>https://Jungle430.github.io/posts/go/module_and_test/</guid>
    <description><![CDATA[<h1 id="go-module">Go Module</h1>
<h2 id="简介">简介</h2>
<ul>
<li>通过<code>go.mod</code>文件管理依赖包版本</li>
<li>通过<code>go get/go mod</code>指令工具管理依赖包</li>
<li>终极目标
<ul>
<li>定义版本规则和管理项目依赖关系</li>
</ul>
</li>
</ul>
<h2 id="依赖管理三要素">依赖管理三要素</h2>
<ol>
<li>配置文件，描述依赖 <code>go.mod</code>(类比<code>cargo</code>)</li>
<li>中心仓库管理依赖库 <code>Proxy</code>(类比<a href="https://crates.io" target="_blank" rel="noopener noreffer"><strong>crates.io</strong></a>)</li>
<li>本地工具 <code>go get/mod</code></li>
</ol>
<h2 id="配置gomod">配置go.mod</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">module</span> <span class="nx">example</span><span class="o">/</span><span class="nx">project</span><span class="o">/</span><span class="nx">app</span> <span class="nx">依赖管理的基本单元</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">有的时候大项目里面的小项目就得则么写</span><span class="err">，</span><span class="nx">类比c</span><span class="o">++</span><span class="nx">中src下面的CMakeList</span><span class="p">.</span><span class="nx">txt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">或者一个大包</span><span class="err">，</span><span class="nx">但是别人只想用里面的小包</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">go</span> <span class="mf">1.16</span> <span class="nx">原生库</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">require</span><span class="p">(</span> <span class="nx">单元依赖</span>
</span></span><span class="line"><span class="cl">  <span class="nx">example</span><span class="o">/</span><span class="nx">lib1</span> <span class="nx">v1</span><span class="mf">.0.2</span>
</span></span><span class="line"><span class="cl">  <span class="nx">example</span><span class="o">/</span><span class="nx">lib2</span> <span class="nx">v1</span><span class="mf">.0.0</span> <span class="c1">//indirect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">example</span><span class="o">/</span><span class="nx">lib6</span> <span class="nx">v3</span><span class="mf">.2.0</span><span class="o">+</span><span class="nx">incompatible</span>
</span></span><span class="line"><span class="cl">  <span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="依赖配置-version">依赖配置-version</h2>
<ul>
<li>
<p>语义化版本</p>
<ul>
<li><code>${MAJOR}.${MINOR}.${PATCH}</code>
<ul>
<li>MAJOR:大版本，不同的MAJOR间认为是代码不兼容的</li>
<li>MINOR:新增函数或功能，需要保持MAJOR下的兼容性</li>
<li>PATCH:部分<code>bug</code>的修复</li>
</ul>
</li>
<li>V1.3.0</li>
<li>V2.3.0</li>
</ul>
</li>
<li>
<p>基于<code>commit</code>伪版本</p>
<ul>
<li>vX.0.0-yyyymmddhhmmss-abcdefg1234
<ul>
<li>版本前缀-时间戳-哈希码前缀</li>
<li>v0.0.0-20220401081311-c38fb921298</li>
<li>v1.0.0-20201130134442-10cb123792679c6c</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>indirtect</strong></p>
</li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>A -&gt; B:直接依赖</p>
</li>
<li>
<p>A -&gt; C:间接依赖，使用<strong>indirtect</strong>进行标识</p>
</li>
<li>
<p><strong>incompatible</strong></p>
<ul>
<li>对于没有<code>go.mod</code>文件而且主版本2+的依赖，会+incompatible</li>
</ul>
</li>
<li>
<p>最低兼容算法</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Go/Module_and_test.jpg" title="/img/Go/Module_and_test.jpg" data-thumbnail="/img/Go/Module_and_test.jpg" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<h2 id="依赖分发-回源">依赖分发-回源</h2>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>问题</p>
<ul>
<li>无法保证构建的稳定性和依赖的可用性</li>
<li>增加第三方压力</li>
</ul>
</li>
<li>
<p>解决方法<strong>Proxy</strong></p>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<ul>
<li>(类比<a href="https://crates.io" target="_blank" rel="noopener noreffer"><strong>crates.io</strong></a>)，自己构建大仓库保证稳定性</li>
</ul>
<p><code>GOPROXY=&quot;https://proxy1.cn, https://proxy2.cn, direct&quot;</code>(direct表示源站)</p>
<div class="mermaid" id="id-4"></div>
<ul>
<li>我的配置:<code>GOPROXY=https://proxy.golang.com.cn,direct</code></li>
</ul>
<h2 id="工具-go-get">工具-go get</h2>
<ul>
<li>go get example.org/pkg
<ul>
<li>@update 默认</li>
<li>@none 删除依赖</li>
<li>@v1.1.2 <code>tag</code>版本，语义版本</li>
<li>@23dfdd5 特定的<code>commit</code></li>
<li>@master 分支最新的<code>commit</code></li>
</ul>
</li>
</ul>
<h2 id="工具-go-mod">工具-go mod</h2>
<ul>
<li>go mod
<ul>
<li>init 初始化，创建go.mod文件</li>
<li>download 下载模块到本地缓存</li>
<li>tidy 增加需要的依赖，删除不需要的依赖</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<ol>
<li>go.mod</li>
<li>Proxy</li>
<li>go get/mod</li>
</ol>
<h2 id="测试">测试</h2>
<h2 id="单元测试流程">单元测试流程</h2>
<div class="mermaid" id="id-5"></div>
<ul>
<li>测试单元
<ul>
<li>函数</li>
<li>模块</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<h2 id="规则">规则</h2>
<ul>
<li>
<p>所有测试文件以<code>_test.go</code>结尾(如<code>publish_post_test.go</code>)</p>
</li>
<li>
<p><code>func TestXxx(*testing.T)</code>(如<code>func TestPublishPost(t *testing.T)</code>)</p>
</li>
<li>
<p>初始化逻辑放到TestMain中</p>
</li>
<li>
<p>例子<code>publish_post.go</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">HelloTom</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>publish_post_test.go</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">output</span> <span class="o">:=</span> <span class="nf">HelloTom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">exceptOutput</span> <span class="o">:=</span> <span class="s">&#34;Tom&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">output</span> <span class="o">!=</span> <span class="nx">exceptOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="nx">exceptOutput</span><span class="p">,</span> <span class="nx">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>(校对部分建议使用开源的assert包)</p>
<ul>
<li>执行效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span>
</span></span><span class="line"><span class="cl">--- FAIL: TestMain <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="cl">    publish_post_test.go:9: Expect Tom, but output Jerry
</span></span><span class="line"><span class="cl">FAIL
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> status <span class="m">1</span>
</span></span><span class="line"><span class="cl">FAIL    learing_go      0.261s
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="覆盖率">覆盖率</h2>
<ul>
<li>
<p>覆盖度，越高代码的正确性越好</p>
</li>
<li>
<p>示例</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">HelloTom</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="nx">score</span> <span class="kt">int16</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">60</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nx">output</span> <span class="o">:=</span> <span class="nf">HelloTom</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">exceptOutput</span> <span class="o">:=</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">output</span> <span class="o">!=</span> <span class="nx">exceptOutput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="nx">exceptOutput</span><span class="p">,</span> <span class="nx">output</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="nx">isPass</span> <span class="o">:=</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="mi">70</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="k">if</span> <span class="nx">isPass</span> <span class="o">!=</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Expect %v, but output %v&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">isPass</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span> --cover
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">coverage: 27.3% of statements
</span></span><span class="line"><span class="cl">ok      learing_go      0.260s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果加上修改</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">JudgePassLine</span><span class="p">(</span><span class="nx">score</span> <span class="kt">int16</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nx">score</span> <span class="o">&gt;=</span> <span class="mi">60</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ go <span class="nb">test</span> .<span class="se">\p</span>ublish_post_test.go .<span class="se">\p</span>ublish_post.go --cover
</span></span><span class="line"><span class="cl">ok      command-line-arguments  0.254s  coverage: 100.0% of statements
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="单元测试-依赖">单元测试-依赖</h2>
<div class="mermaid" id="id-6"></div>
<div class="mermaid" id="id-7"></div>
<ul>
<li>
<p>幂等：每次运行结果一样（应该涉及了并发的问题，暴力测试）</p>
</li>
<li>
<p>稳定：任何时间，任何函数进行独立运行</p>
</li>
<li>
<p>Mock</p>
<ul>
<li><a href="https://github.com/bouk/monkey" target="_blank" rel="noopener noreffer">monkey</a></li>
</ul>
</li>
</ul>
<h2 id="基准测试">基准测试</h2>
<ul>
<li>
<p>优化分析代码</p>
</li>
<li>
<p>内置</p>
</li>
<li>
<p>示例</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;math/rand&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">ServerIndex</span> <span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">InitServerIndex</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">ServerIndex</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Select</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="nx">ServerIndex</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">     <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkSelect</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nf">InitServerIndex</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">ResetTimer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Select</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BenchmarkSelectParallel</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="nf">InitServerIndex</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">ResetTimer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">     <span class="nx">b</span><span class="p">.</span><span class="nf">RunParallel</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">PB</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">for</span> <span class="nx">p</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="nf">Select</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">     <span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Running tool: D:<span class="se">\G</span>o<span class="se">\b</span>in<span class="se">\g</span>o.exe <span class="nb">test</span> -benchmem -run<span class="o">=</span>^$ -bench ^BenchmarkSelect$ learing_go
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">goos: windows
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: learing_go
</span></span><span class="line"><span class="cl">cpu: AMD Ryzen <span class="m">9</span> 5900HX with Radeon Graphics        
</span></span><span class="line"><span class="cl">BenchmarkSelect-16     <span class="m">175706265</span>          6.498 ns/op        <span class="m">0</span> B/op        <span class="m">0</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok   learing_go 2.053s
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Running tool: D:<span class="se">\G</span>o<span class="se">\b</span>in<span class="se">\g</span>o.exe <span class="nb">test</span> -benchmem -run<span class="o">=</span>^$ -bench ^BenchmarkSelectParallel$ learing_go
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">goos: windows
</span></span><span class="line"><span class="cl">goarch: amd64
</span></span><span class="line"><span class="cl">pkg: learing_go
</span></span><span class="line"><span class="cl">cpu: AMD Ryzen <span class="m">9</span> 5900HX with Radeon Graphics        
</span></span><span class="line"><span class="cl">BenchmarkSelectParallel-16     <span class="m">30002550</span>         38.89 ns/op        <span class="m">0</span> B/op        <span class="m">0</span> allocs/op
</span></span><span class="line"><span class="cl">PASS
</span></span><span class="line"><span class="cl">ok   learing_go 1.409s
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>
