<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Operating System - 标签 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/tags/operating-system/</link>
        <description>Operating System - 标签 - Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1239946358@qq.com (Jungle)</managingEditor>
            <webMaster>1239946358@qq.com (Jungle)</webMaster><lastBuildDate>Tue, 28 Mar 2023 13:10:52 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/tags/operating-system/" rel="self" type="application/rss+xml" /><item>
    <title>Operating System Chapter10 状态机模型的应用</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</link>
    <pubDate>Tue, 28 Mar 2023 13:10:52 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>状态机：理论
<ul>
<li>数字电路：<a href="https://jyywiki.cn/pages/OS/2022/demos/logisim.c" target="_blank" rel="noopener noreffer">logisim.c</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/seven-seg.py" target="_blank" rel="noopener noreffer">seven-seg.py</a></li>
<li>Model checker: 理解并发程序执行的新方法</li>
</ul>
</li>
<li>状态机：实践
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a></li>
</ul>
</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 状态机模型如此有用，还能更有用一点吗？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>终于做完了铺垫，是时候让你感受到 “真正的力量” 了
<ul>
<li>都是没用的内容，当我口胡就行了</li>
</ul>
</li>
</ul>
<h2 id="状态机理解我们的世界">状态机：理解我们的世界</h2>
<h3 id="哲--学探讨">哲 ♂ 学探讨</h3>
<ul>
<li>
<p>我们的物理世界是 “确定规则” 的状态机吗？</p>
<ul>
<li>
<p>宏观物理世界近似于 deterministic 的状态机 (经典力学)</p>
</li>
<li>
<p>微观世界可能是 non-deterministic 的 (量子力学)</p>
</li>
</ul>
</li>
</ul>
<p>把物理世界建模成基本粒子的运动</p>
<ul>
<li><a href="https://playgameoflife.com/" target="_blank" rel="noopener noreffer">Conway&rsquo;s game of life</a> $\Longrightarrow$ <b>Turing Complete</b></li>
</ul>
<h3 id="哲--学探讨-contd">哲 ♂ 学探讨 (cont&rsquo;d)</h3>
<p>可以在这个模型上严肃地定义很多概念：预测未来、时间旅行……</p>
<ul>
<li>成为你理解物理 (和计算机) 世界的参考</li>
</ul>
<hr>
<ul>
<li>例子
<ul>
<li>Cellular automata 不支持 “时间旅行”
<ul>
<li>怎么添加一个公理使它可以支持？
<ul>
<li>平行宇宙</li>
<li>如果世界线需要合并？可以<a href="https://www.scientificamerican.com/article/time-travel-simulation-resolves-grandfather-paradox/" target="_blank" rel="noopener noreffer">收敛于某个分布</a></li>
</ul>
</li>
</ul>
</li>
<li>Cellular automata 不支持 “预测外来”
<ul>
<li>能否添加一个 syscall 使它支持？
<ul>
<li><a href="https://www.scottaaronson.com/papers/philos.pdf" target="_blank" rel="noopener noreffer">Why philosophers should care about computational complexity, Ch. 10</a> (<b>jyy 强烈推荐，解释部分在10th-section</b>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="状态机模型理解编译器和现代-cpu">状态机模型：理解编译器和现代 CPU</h3>
<ul>
<li>编译器：源代码$S$(状态机) → 二进制代码$C$(状态机)</li>
</ul>
<p>$$
C=compile(S)
$$</p>
<ul>
<li>
<p>编译 (优化) 的正确性 (Soundness):</p>
<ul>
<li><font color="red"><em>S</em> 与 <em>C</em> 的可观测行为严格一致</font> （二进制落实到硬件也是如此，严格一致不是句句对应，而是状态机一致，比如一个时钟周期内执行两条指令 $\Longrightarrow$ <font color="red">instruction-level parallelism</font>）
<ul>
<li>system calls; volatile variable loads/stores; termination</li>
</ul>
</li>
</ul>
</li>
<li>
<p>超标量 (superscalar)/乱序执行处理器</p>
<ul>
<li>
<p>允许在状态机上 “跳跃”</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/ilp-demo.c" target="_blank" rel="noopener noreffer">ilp-demo.c</a></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOOP 1000000000ul
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rax;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rsi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rcx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r10;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r8;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r9;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">:::</span><span class="s">&#34;rax&#34;</span><span class="p">,</span> <span class="s">&#34;rdi&#34;</span><span class="p">,</span> <span class="s">&#34;rsi&#34;</span><span class="p">,</span> <span class="s">&#34;rdx&#34;</span><span class="p">,</span> <span class="s">&#34;rcx&#34;</span><span class="p">,</span> <span class="s">&#34;r10&#34;</span><span class="p">,</span> <span class="s">&#34;r8&#34;</span><span class="p">,</span> <span class="s">&#34;r9&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">loop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">LOOP</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ips</span> <span class="o">=</span> <span class="n">inst</span> <span class="o">/</span> <span class="p">((</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.2lfG instructions/s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ips</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在优化下执行的效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ screenfetch            
</span></span><span class="line"><span class="cl">..............                                  
</span></span><span class="line"><span class="cl">            ..,<span class="p">;</span>:ccc,.                           kali@kali
</span></span><span class="line"><span class="cl">          ......<span class="s1">&#39;&#39;&#39;;lxO.                         OS: Kali Linux 
</span></span></span><span class="line"><span class="cl"><span class="s1">.....&#39;&#39;&#39;&#39;..........,:ld;                         Kernel: x86_64 Linux 6.0.0-kali3-amd64
</span></span></span><span class="line"><span class="cl"><span class="s1">           .&#39;</span><span class="p">;;;</span>:::<span class="p">;</span>,,.x,                        Uptime: 49m
</span></span><span class="line"><span class="cl">      ..<span class="s1">&#39;&#39;&#39;.            0Xxoc:,.  ...            Packages: 2707
</span></span></span><span class="line"><span class="cl"><span class="s1">  ....                ,ONkc;,;cokOdc&#39;</span>,.          Shell: zsh 5.9
</span></span><span class="line"><span class="cl"> .                   OMo           <span class="s1">&#39;:ddo.        Resolution: 1714x874
</span></span></span><span class="line"><span class="cl"><span class="s1">                    dMc               :OO;       DE: Xfce
</span></span></span><span class="line"><span class="cl"><span class="s1">                    0M.                 .:o.     WM: Xfwm4
</span></span></span><span class="line"><span class="cl"><span class="s1">                    ;Wd                          WM Theme: Kali-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                     ;XO,                        GTK Theme: Kali-Dark [GTK2]
</span></span></span><span class="line"><span class="cl"><span class="s1">                       ,d0Odlc;,..               Icon Theme: Flat-Remix-Blue-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                           ..&#39;</span>,<span class="p">;</span>:cdOOd::,.       Font: Cantarell <span class="m">11</span>
</span></span><span class="line"><span class="cl">                                    .:d<span class="p">;</span>.<span class="s1">&#39;:;.    Disk: 19G / 80G (26%)
</span></span></span><span class="line"><span class="cl"><span class="s1">                                       &#39;</span>d,  .<span class="s1">&#39;   CPU: AMD Ryzen 9 5900HX with Radeon Graphics @ 4x 3.294GHz
</span></span></span><span class="line"><span class="cl"><span class="s1">                                         ;l   .. GPU: VMware SVGA II Adapter
</span></span></span><span class="line"><span class="cl"><span class="s1">                                          .o     RAM: 1501MiB / 1972MiB
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            c   
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            .&#39;</span>  
</span></span><span class="line"><span class="cl">                                             .  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo   
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo                      
</span></span><span class="line"><span class="cl">19.06G instructions/s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.38G instructions/s
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.19G instructions/s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>优化过后，<b>每一个时钟周期可以执行远远超过一条指令</b></li>
</ul>
<h2 id="查看状态机执行">查看状态机执行</h2>
<h3 id="trace-和调试器">Trace 和调试器</h3>
<ul>
<li>
<p>程序执行 = 状态机执行</p>
<ul>
<li>我们能不能 “hack” 进这个状态机
<ul>
<li>观察状态机的执行
<ul>
<li>strace/gdb</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>甚至记录和<font color="red">改变</font>状态机的执行</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./ilp-demo 
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffe10420e10 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b2c000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b16000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4935000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb495b000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7f9eb495b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4ab0000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4ab0000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b03000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b03000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b09000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b09000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4932000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7f9eb4932740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7f9eb4932a10<span class="o">)</span>         <span class="o">=</span> <span class="m">5644</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7f9eb4932a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7f9eb4933060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b03000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55de2e4dc000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b5e000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f9eb4b16000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>1796473<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>514062681<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x2a\x03\xa3\xe2\x7d\xa4\x84\x07&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55de2e503000<span class="o">)</span>                     <span class="o">=</span> 0x55de2e503000
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.52G instructions/s\n&#34;</span>, 2219.52G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>strace</code>调试最小的Hello OS，可以清楚地看到系统调用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./minimal
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./minimal&#34;</span>, <span class="o">[</span><span class="s2">&#34;./minimal&#34;</span><span class="o">]</span>, 0x7ffefc958480 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;\33[01;31mHello, OS World\33[0m\n&#34;</span>, 28Hello, OS World
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">28</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>1<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>-T看每一个系统调用花费的时间</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace -T ./ilp-demo
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffdfd498e18 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000258&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000005&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c980a000 &lt;0.000113&gt;
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97f4000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9613000 &lt;0.000084&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c9639000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7fb9c9639000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c978e000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7fb9c978e000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e1000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e1000 &lt;0.000060&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e7000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e7000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9610000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7fb9c9610740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7fb9c9610a10<span class="o">)</span>         <span class="o">=</span> <span class="m">8876</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7fb9c9610a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span> &lt;0.000097&gt;
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7fb9c9611060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000109&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c97e1000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000079&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55a0fcb07000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c983c000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7fb9c97f4000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span> &lt;0.000094&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>876239<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000075&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>511881481<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000199&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000090&gt;
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x6e\x63\x59\xe8\xb3\xfe\x8a\x8d&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span> &lt;0.000143&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000106&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55a0fd298000<span class="o">)</span>                     <span class="o">=</span> 0x55a0fd298000 &lt;0.000052&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.57G instructions/s\n&#34;</span>, 2219.57G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span> &lt;0.000085&gt;
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter10-1.png" title="/img/Operating System/chapter10-1.png" data-thumbnail="/img/Operating System/chapter10-1.png" data-sub-html="<h2>gdb layout src</h2>">
        
    </a><figcaption class="image-caption"><code>gdb layout src</code></figcaption>
    </figure>
<ul>
<li>注意为了让<code>layout src</code>能够成功显示，编译时需要使用<code>gcc</code>的<code>-g</code>编译选项</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo -g  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gdb ilp-demo                     
</span></span><span class="line"><span class="cl">GNU gdb <span class="o">(</span>Debian 13.1-2<span class="o">)</span> 13.1
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2023</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">License GPLv3+: GNU GPL version <span class="m">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show copying&#34;</span> and <span class="s2">&#34;show warranty&#34;</span> <span class="k">for</span> details.
</span></span><span class="line"><span class="cl">This GDB was configured as <span class="s2">&#34;x86_64-linux-gnu&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show configuration&#34;</span> <span class="k">for</span> configuration details.
</span></span><span class="line"><span class="cl">For bug reporting instructions, please see:
</span></span><span class="line"><span class="cl">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.
</span></span><span class="line"><span class="cl">Find the GDB manual and other documentation resources online at:
</span></span><span class="line"><span class="cl">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">For help, <span class="nb">type</span> <span class="s2">&#34;help&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;apropos word&#34;</span> to search <span class="k">for</span> commands related to <span class="s2">&#34;word&#34;</span>...
</span></span><span class="line"><span class="cl">Reading symbols from ilp-demo...
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> start
</span></span><span class="line"><span class="cl">Temporary breakpoint <span class="m">1</span> at 0x1060: file ilp-demo.c, line 22.
</span></span><span class="line"><span class="cl">Starting program: /home/kali/chapter9/ilp-demo 
</span></span><span class="line"><span class="cl"><span class="o">[</span>Thread debugging using libthread_db enabled<span class="o">]</span>
</span></span><span class="line"><span class="cl">Using host libthread_db library <span class="s2">&#34;/lib/x86_64-linux-gnu/libthread_db.so.1&#34;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Temporary breakpoint 1, main <span class="o">()</span> at ilp-demo.c:22
</span></span><span class="line"><span class="cl"><span class="m">22</span>        clock_t <span class="nv">st</span> <span class="o">=</span> clock<span class="o">()</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> layout src
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="应用-1-time-travel-debugging">应用 (1): Time-Travel Debugging</h3>
<ul>
<li>
<p>程序执行是随时间 “前进” 的$s_0 \rightarrow s_1 \rightarrow s_2 \rightarrow \dots$</p>
</li>
<li>
<p>能否在时间上 “后退”？ (time-travel)</p>
<ul>
<li>经常 gdb 不小心 step 过了，从头再来……</li>
<li>记录所有的$s_i$，就能实现任意的 time-traveling</li>
</ul>
</li>
</ul>
<blockquote>
<p>凉性循环，看一会<code>rust</code></p>
</blockquote>
<ul>
<li>记录所有$s_i$的开销太大（$s_i$由内存+寄存器组成）
<ul>
<li>但<font color="red">一条指令的side-effect通常有限</font></li>
</ul>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Operating System Chapter9 操作系统的状态机模型</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter9/</link>
    <pubDate>Sat, 25 Mar 2023 23:21:44 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter9/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>并发……就这么……讲完了……
<ul>
<li>理解的方式：“玩一玩” 示例代码</li>
</ul>
</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 听说操作系统也是程序。那到底是鸡生蛋还是蛋生鸡？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>软件和硬件的桥梁</li>
<li>操作系统的加载和初始化</li>
<li>AbstractMachine 代码导读</li>
</ul>
<h2 id="自己动手写操作系统">自己动手写操作系统</h2>
<h3 id="时事热评">时事热评</h3>
<p><a href="https://www.bilibili.com/video/BV14T4y1D7y8" target="_blank" rel="noopener noreffer">小学生写了三个月的操作系统是什么样的？</a></p>
<ul>
<li>看到 i386 就知道了嘛</li>
</ul>
<h3 id="本学期的-oslabs">本学期的 OSLabs</h3>
<p>热身实验</p>
<ul>
<li>Lab0 (amgame): 熟悉代码框架</li>
</ul>
<hr>
<p>正经实验</p>
<ul>
<li>
<p>Lab1 (pmm): Physical memory management</p>
<ul>
<li>多处理器 (bare-metal) 上的 kalloc/free</li>
</ul>
</li>
<li>
<p>Lab2 (kmt): Kernel multi-threading</p>
<ul>
<li>中断和异常驱动的上下文 (线程) 切换</li>
</ul>
</li>
<li>
<p>Lab3 (uproc): User processes</p>
<ul>
<li>虚拟地址空间、用户态进程和系统调用</li>
</ul>
</li>
<li>
<p>Lab4 (vfs): Virtual file system</p>
<ul>
<li>devfs, procfs, 简单的文件系统；ELF 加载器</li>
</ul>
</li>
</ul>
<h3 id="大学的真正意义">大学的真正意义</h3>
<blockquote>
<p>将已有的知识和方法重新消化，为大家建立好 “台阶”，在有限的时间里迅速<font color="red">赶上数十年来建立起的学科体系</font></p>
</blockquote>
<hr>
<ul>
<li>
<p>例子：破除 “写操作系统很难”、“写操作系统很牛” 的错误认识</p>
<ul>
<li>
<p>操作系统真的就是个 C 程序</p>
</li>
<li>
<p>你只是需要 “被正确告知” 一些额外的知识</p>
<ul>
<li>然后写代码、吃苦头</li>
<li>从而建立正确的 “专业世界观”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="例子">例子</h3>
<ul>
<li>
<p>“专业世界观” 的例子 (这些都没啥，paper 都发不了)</p>
<ul>
<li>
<p>写 x86 模拟器的时候，不知道哪条指令错了，怎么办？</p>
</li>
<li>
<p>做操作系统实验的时候，如果遇到神秘 CPU Reset，怎么办？</p>
</li>
<li>
<p>做实验做不下去的时候，该实现什么工具？</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>“专业世界观” 的学习方法</p>
<ul>
<li>
<p>经典研究论文 (OSDI, SOSP, ATC, EuroSys, &hellip;)</p>
</li>
<li>
<p>久经考验的经典教学材料 (xv6, OSTEP, CSAPP, &hellip;)</p>
</li>
<li>
<p>海量的开源工具 (GNU 系列, qemu, gdb, &hellip;)</p>
</li>
<li>
<p>第三方资料，慎用 (tutorials, osdev wiki, &hellip;)</p>
</li>
</ul>
</li>
</ul>
<h2 id="硬件和软件的桥梁">硬件和软件的桥梁</h2>
<h3 id="c-程序">C 程序</h3>
<ul>
<li>
<p>我们已经知道如何写一个 “最小” 的 C 程序了：</p>
<ul>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a></p>
</li>
<li>
<p>不需要链接任何库，就能在操作系统上运行</p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_write</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>   <span class="c1">// write(
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="c1">//   fd=1,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span>        <span class="o">%</span><span class="n">rsi</span>   <span class="c1">//   buf=st,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>   <span class="c1">//   count=ed-st
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">syscall</span>                 <span class="c1">// );
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_exit</span><span class="p">,</span>  <span class="o">%</span><span class="n">rax</span>   <span class="c1">// exit(
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="c1">//   status=1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">syscall</span>                 <span class="c1">// );
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>“程序 = 状态机” 没问题</p>
</li>
<li>
<p>带来更多的疑问</p>
<ul>
<li><font color="red">但谁创建的这个状态机？？？</font>
<ul>
<li>当然是操作系统了……呃…… $\Longrightarrow$ 参考<a href="https://jungle430.github.io/posts/operating-system/support2/#%E4%BB%8E%E6%88%91%E4%BB%AC%E7%BB%88%E7%AB%AF%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%88%B0%E7%A8%8B%E5%BA%8F%E8%A2%AB%E8%BD%BD%E5%85%A5%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreffer">从我们终端敲回车到程序被载入执行的过程中发生了什么？</a></li>
</ul>
</li>
<li><font color="red">这个程序可以在没有操作系统的硬件上运行吗？</font>
<ul>
<li>“启动” 状态机是由 “加载器” 完成的</li>
<li>加载器也是一段程序 (状态机)</li>
<li>这个程序由是由谁加载的？</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ file minimal
</span></span><span class="line"><span class="cl">minimal: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bare-metal-与程序员的约定">Bare-metal 与程序员的约定</h3>
<ul>
<li>
<p>计算机硬件运行的时候也是状态机</p>
</li>
<li>
<p>为了让计算机能<font color="red">运行任何我们的程序</font>，一定存在软件/硬件的约定</p>
</li>
</ul>
<hr>
<ul>
<li>
<p><b>CPU reset</b> 后，处理器处于某个<b>确定的状态</b></p>
<ul>
<li><b>PC 指针</b>一般指向一段 <font color="blue">memory-mapped ROM</font>
<ul>
<li>ROM 存储了厂商提供的 firmware (固件)</li>
</ul>
</li>
<li>处理器的大部分特性处于关闭状态
<ul>
<li>缓存、虚拟存储、……</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Firmware (固件，厂商提供的代码)</p>
<ul>
<li>将用户数据加载到内存
<ul>
<li>例如存储介质上的第二级 loader (加载器)</li>
<li>或者直接加载操作系统 (嵌入式系统)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="x86-family-cpu-reset-行为">x86 Family: CPU Reset 行为</h3>
<ul>
<li>
<p>CPU Reset (<a href="https://software.intel.com/en-us/articles/intel-sdm" target="_blank" rel="noopener noreffer">Intel® 64 and IA-32 Architectures Software Developer’s Manual</a>, Volume 3A/3B)</p>
</li>
<li>
<p>寄存器会有初始状态</p>
<ul>
<li>
<p><code>EIP = 0x0000fff0</code></p>
</li>
<li>
<p><code>CR0 = 0x60000010</code></p>
<ul>
<li>16-bit 模式 $\Longrightarrow$ 2010年前的老电脑会兼容老接口和老的操作系统</li>
</ul>
</li>
<li>
<p><code>EFLAGS = 0x00000002</code></p>
</li>
<li>
<p>interrupt disabled（中断关闭）</p>
</li>
</ul>
</li>
<li>
<p>TFM (5,000 页 by 2019)</p>
<ul>
<li>最需要的 Volume 3A 只有 468 页</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-1.png" title="/img/Operating System/chapter9-1.png" data-thumbnail="/img/Operating System/chapter9-1.png" data-sub-html="<h2>friendly manual</h2>">
        
    </a><figcaption class="image-caption"><code>friendly manual</code></figcaption>
    </figure>
<ul>
<li>让<code>qemu</code>模拟器停在第一条指令上，和上面的手册对照，会发现和手册一致</li>
</ul>
<h3 id="cpu-reset-之后发生了什么">CPU Reset 之后：发生了什么？</h3>
<ul>
<li>
<p>《计算机系统基础》：<font color="red">不仅是程序，整个计算机系统也是一个状态机</font></p>
<ul>
<li>
<p>从 PC (<code>CS:IP</code>) 指针处取指令、译码、执行……</p>
</li>
<li>
<p>从 firmware 开始执行</p>
<ul>
<li><code>ffff0</code>(PC初始化的值) 通常是一条向 firmware 跳转的 jmp 指令</li>
</ul>
</li>
</ul>
</li>
<li>
<p>厂商会在<code>ROW</code>里面放好写死的代码（Only-read）</p>
</li>
<li>
<p>Firmware: <a href="https://www.zhihu.com/question/21672895" target="_blank" rel="noopener noreffer">BIOS vs. UEFI</a></p>
<ul>
<li>
<p>都是主板/主板上外插设备的软件抽象</p>
<ul>
<li>支持系统管理程序运行</li>
</ul>
</li>
<li>
<p>Legacy BIOS (Basic I/O System)</p>
</li>
<li>
<p>UEFI (Unified Extensible Firmware Interface)</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-2.png" title="/img/Operating System/chapter9-2.png" data-thumbnail="/img/Operating System/chapter9-2.png" data-sub-html="<h2>BIOS</h2>">
        
    </a><figcaption class="image-caption"><code>BIOS</code></figcaption>
    </figure>
<h3 id="legacy-bios-约定">Legacy BIOS: 约定</h3>
<p><b>Firmware 必须提供机制，将用户数据载入内存</b></p>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>Legacy BIOS 把<b>第一个可引导设备的第一个扇区加载到物理内存的 <code>7c00</code> 位置</b>，这也是我们Fireware和OS之间的第一次，也是唯一一次握手</p>
<ul>
<li>
<p>此时处理器处于 16-bit 模式</p>
</li>
<li>
<p>规定 <code>CS:IP = 0x7c00</code>, <code>(R[CS] &lt;&lt; 4) | R[IP] == 0x7c00</code></p>
<ul>
<li>
<p>可能性1：<code>CS = 0x07c0, IP = 0</code></p>
</li>
<li>
<p>可能性2：<code>CS = 0, IP = 0x7c00</code></p>
</li>
</ul>
</li>
<li>
<p>其他没有任何约束</p>
</li>
</ul>
</li>
<li>
<p>Windows启动模式：老的Windows的A，B盘都是软盘，BIOS先去软盘里面读前512个<code>bytes</code>，看最后两个byte是否为<code>55aa</code>（大端），如果是就加载这块磁盘，否则读下一块，如果都不是就启动失败。读完A/B盘之后引导到C盘，这也是为什么今天的Windows操作系统C盘是系统盘的原因</p>
</li>
<li>
<p>Firmware做的事情（以BIOS为例）</p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<h3 id="能不能看一下代码">能不能看一下代码？</h3>
<blockquote>
<p>Talk is cheap. Show me the code. ——Linus Torvalds</p>
</blockquote>
<ul>
<li>
<p>有没有可能我们真的去看从 CPU Reset 以后每一条指令的执行？</p>
</li>
<li>
<p><font color="red">计算机系统公理：你想到的就一定有人做到</font></p>
</li>
<li>
<p>模拟方案：QEMU</p>
<ul>
<li>传奇黑客、天才程序员 <a href="https://www.zhihu.com/question/28388113" target="_blank" rel="noopener noreffer">Fabrice Bellard</a> 的杰作（其他:ffmpeg)
<ul>
<li><a href="https://www.usenix.org/legacy/publications/library/proceedings/usenix05/tech/freenix/full_papers/bellard/bellard.pdf" target="_blank" rel="noopener noreffer">QEMU, A fast and portable dynamic translator</a> (USENIX ATC'05)</li>
<li>Android Virtual Device, VirtualBox, &hellip; 背后都是 QEMU</li>
</ul>
</li>
</ul>
</li>
<li>
<p>真机方案：JTAG (Joint Test Action Group) debugger</p>
<ul>
<li>一系列 (物理) 调试寄存器，可以实现 gdb 接口 (!!!)</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-3.png" title="/img/Operating System/chapter9-3.png" data-thumbnail="/img/Operating System/chapter9-3.png" data-sub-html="<h2>ffmpeg</h2>">
        
    </a><figcaption class="image-caption"><code>ffmpeg</code></figcaption>
    </figure>
<h3 id="调试-qemu-确认-firmware-的行为">调试 QEMU: 确认 Firmware 的行为</h3>
<blockquote>
<p>亲眼确认 Firmware 到底是不是会加载启动盘第一个扇区到 <code>0x7c00</code> 内存位置！</p>
</blockquote>
<p>调试 QEMU 模拟器</p>
<ul>
<li>
<p>查看 CPU Reset 后的寄存器</p>
<ul>
<li><code>info registers</code></li>
</ul>
</li>
<li>
<p>查看<code>0x7c00</code>内存的加载</p>
<ul>
<li><code>watch *0x7c00</code> - 《计算机系统基础》的良苦用心</li>
<li>查看当前指令 <code>x/i ($cs * 16 + $rip)</code></li>
<li>打印内存 <code>x/16xb 0x7c00</code></li>
</ul>
</li>
<li>
<p>进入<code>0x7c00</code>代码的执行</p>
<ul>
<li><code>b *0x7c00</code>, <code>c</code> (撒花！我们一会再回来)</li>
</ul>
</li>
</ul>
<h3 id="鸡和蛋的问题解决">鸡和蛋的问题解决</h3>
<ul>
<li>
<p>有个原始的鸡：Firmware</p>
<ul>
<li>
<p>代码直接存在于硬件里</p>
</li>
<li>
<p>CPU Reset 后 Firmware 会执行</p>
<ul>
<li>加载 512 字节到内存 (Legacy Boot)
<ul>
<li>然后功成身退</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Firmware 的另一用处</p>
<ul>
<li>放置一些 “绝对安全的代码”
<ul>
<li><a href="https://jyywiki.cn/pages/OS/manuals/BIOS-interrupts.pdf" target="_blank" rel="noopener noreffer">BIOS 中断</a> (Hello World 是如何被打印的)</li>
<li>如果加载失败将错误信息打印出来</li>
<li>ARM Trusted Firmware
<ul>
<li>Boot-Level 1, 2, 3.1, 3.2, 3.3</li>
<li><a href="https://www.denx.de/wiki/U-Boot" target="_blank" rel="noopener noreffer">U-Boot</a>: the universal boot loader</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="小插曲firmware-的病毒-1998">小插曲：Firmware 的病毒 (1998)</h3>
<ul>
<li>
<p>Firmware 通常是只读的 (当然……)</p>
</li>
<li>
<p>Intel 430TX (Pentium) 芯片组允许<font color="red">写入 Flash ROM</font></p>
<ul>
<li>
<p>只要向 Flash BIOS 写入特定序列，Flash ROM 就变为可写</p>
<ul>
<li>留给 firmware 更新的通道</li>
</ul>
</li>
<li>
<p>要得到这个序列其实并不困难</p>
<ul>
<li>似乎文档里就有 🤔 Boom……</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://zh.wikipedia.org/zh-tw/CIH%E7%97%85%E6%AF%92" target="_blank" rel="noopener noreffer">CIH</a> 的作者陈盈豪被逮捕，但并未被定罪</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-4.gif" title="/img/Operating System/chapter9-4.gif" data-thumbnail="/img/Operating System/chapter9-4.gif" data-sub-html="<h2>病毒代码结尾的CIH</h2>">
        
    </a><figcaption class="image-caption">病毒代码结尾的<code>CIH</code></figcaption>
    </figure>
<h3 id="今天的-firmware-uefi">今天的 Firmware: UEFI</h3>
<ul>
<li>
<p>IBM PC 所有设备/BIOS 中断是有 specification 的 (成就了 “兼容机”)</p>
</li>
<li>
<p>今天的 boot loader 面临麻烦得多的硬件：</p>
<ul>
<li>指纹锁、不知名厂商生产网卡上的网络启动、USB 上的蓝牙转接器连接的蓝牙键盘、……</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-5.png" title="/img/Operating System/chapter9-5.png" data-thumbnail="/img/Operating System/chapter9-5.png" data-sub-html="<h2>UEFI</h2>">
        
    </a><figcaption class="image-caption"><code>UEFI</code></figcaption>
    </figure>
<h3 id="uefi-上的操作系统加载">UEFI 上的操作系统加载</h3>
<ul>
<li>
<p>标准化的加载流程</p>
<ul>
<li>
<p>盘必须按 GPT (GUID Partition Table) 方式格式化</p>
</li>
<li>
<p>预留一个 FAT32 分区 (lsblk/fdisk 可以看到)</p>
</li>
<li>
<p>Firmware 加载任意大小的 PE 可执行文件<code>.efi</code></p>
<ul>
<li>
<p>没有 legacy boot 512 字节限制</p>
</li>
<li>
<p>EFI 应用可以返回 firmware</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>更好的程序支持</p>
<ul>
<li>
<p>设备驱动框架</p>
</li>
<li>
<p>更多的功能，例如 Secure Boot，只能启动 “信任” 的操作系统</p>
</li>
</ul>
</li>
</ul>
<h2 id="操作系统的状态机模型">操作系统的状态机模型</h2>
<h3 id="操作系统-的状态机已经启动">“操作系统” 的状态机已经启动</h3>
<ul>
<li>Firmware 和 boot loader 共同完成 “操作系统的加载”
<ul>
<li>初始化全局变量和栈；分配堆区 (<code>heap</code>)</li>
<li>为 <code>main</code> 函数传递参数
<ul>
<li>谁给操作系统传递了参数？</li>
<li>如何实现参数传递？</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>进入 C 代码之后</p>
<ul>
<li>
<p>完全遵循 C 语言的形式语义</p>
</li>
<li>
<p>但有一些行为 “补充” —— AbstractMachine API</p>
</li>
</ul>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<h3 id="操作系统是个-c-程序">操作系统：是个 C 程序</h3>
<ul>
<li>一个迷你 “操作系统” <a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a>
<ul>
<li>make 会得到一个 “磁盘镜像”，好像魔法一样
<ul>
<li>就跟你们第一次用 IDE 的时候按一个键就可以编译运行一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>thread-os.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;am.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib-macros.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define MAX_CPU 8
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">union</span> <span class="n">task</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="n">task</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span>      <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Context</span>    <span class="o">*</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint8_t</span> <span class="n">stack</span><span class="p">[</span><span class="mi">8192</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Task</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="o">*</span><span class="n">currents</span><span class="p">[</span><span class="n">MAX_CPU</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define current currents[cpu_current()]
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// user-defined tasks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span>   <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span> <span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Thread-%s on CPU #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="k">volatile</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="n">tasks</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;A&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;B&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;D&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;E&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="abstractmachine-对-c-程序语义-做出的扩充">AbstractMachine 对 “C 程序语义” 做出的扩充</h3>
<ul>
<li>
<p>TRM + MPE</p>
<ul>
<li>
<p>完全等同于多线程 (处理器相当于线程) - L1/native</p>
</li>
<li>
<p>IOE API: 完全是普通的库函数</p>
<ul>
<li>同一设备的数据竞争 = undefined behavior</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>CTE</p>
<ul>
<li>
<p>允许创建多个执行流 (类比协程) - M2</p>
</li>
<li>
<p>yield 主动切换；会被中断被动打断</p>
</li>
<li>
<p><code>on_interrupt</code> 会拦截到中断事件</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>VME</p>
<ul>
<li>
<p>允许创建一个 “经过地址翻译的执行模式”</p>
</li>
<li>
<p>通过 CTE API 管理</p>
</li>
</ul>
</li>
<li>
<p>有关中断代码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">iset</span><span class="p">(</span><span class="kt">bool</span> <span class="n">enable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">sigset_t</span> <span class="n">__am_intr_sigmask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// NOTE: sigprocmask does not supported in multithreading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">sigprocmask</span><span class="p">(</span><span class="n">enable</span> <span class="o">?</span> <span class="nl">SIG_UNBLOCK</span> <span class="p">:</span> <span class="n">SIG_BLOCK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__am_intr_sigmask</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rtfsc-时间">RTFSC 时间</h2>
<h3 id="0-生成镜像和启动虚拟机">(0) 生成镜像和启动虚拟机</h3>
<blockquote>
<p>如果使用 “土办法”，你很可能被淹没在 Makefile 中</p>
<ul>
<li>读懂 Makefile 需要 STFW, RTFM，大量的精力</li>
<li>虽然花点时间读是值得的，但很可能读了很久都没读到重要的地方</li>
</ul>
</blockquote>
<ul>
<li>
<p>花一点时间想 “应该怎么做”</p>
<ul>
<li>
<p>花几分钟创建一个小工具：“AbstractMachine 构建理解工具”</p>
<ul>
<li>UNIX Philosophy: keep it simple, stupid</li>
<li>everything is a file; write things to work together using text interface</li>
</ul>
</li>
<li>
<p><em>Get out of your comfort zone</em></p>
</li>
</ul>
</li>
</ul>
<p>Abstract-Machine 通过脚本+重定向可以转化为<a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/abstract-machine-Makefile.html" target="_blank" rel="noopener noreffer">HTML代码</a>进行阅读</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿jungle-virtual-machine<span class="o">)</span>-<span class="o">[</span>~/deom1/abstract-machine<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ sudo apt install python3-markdown
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿jungle-virtual-machine<span class="o">)</span>-<span class="o">[</span>~/deom1/abstract-machine<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cat Makefile <span class="p">|</span> sed <span class="s1">&#39;s/^\([^#]\)/    \1/g&#39;</span> <span class="p">|</span> markdown_py &gt; Makefile.html
</span></span></code></pre></td></tr></table>
</div>
</div><p>注：使用了自动化工具<a href="https://python-markdown.github.io" target="_blank" rel="noopener noreffer">python3-markdown</a></p>
<h3 id="0-生成镜像和启动虚拟机-contd">(0) 生成镜像和启动虚拟机 (cont&rsquo;d)</h3>
<ul>
<li>观察 AbstractMachine 程序编译过程的正确方法：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make -nB <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> grep -ve <span class="s1">&#39;^\(\#\|echo\|mkdir\|make\)&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> sed <span class="s2">&#34;s#</span><span class="nv">$AM_HOME</span><span class="s2">#\$AM_HOME#g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> sed <span class="s2">&#34;s#</span><span class="nv">$PWD</span><span class="s2">#.#g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> vim -
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Command line tricks</p>
<ul>
<li><code>make -nB</code> (RTFM)</li>
<li>grep: 文本过滤，省略了一些干扰项
<ul>
<li>echo (提示信息), mkdir (目录建立), make (sub-goals)</li>
</ul>
</li>
<li>sed: 让输出更易读
<ul>
<li>将绝对路径替换成相对路径</li>
</ul>
</li>
<li>vim: 更舒适的编辑/查看体验</li>
</ul>
</li>
<li>
<p>部分<code>make -nB</code>的输出信息</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># Building hello-image [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/deom/build/x86_64-qemu/ <span class="err">&amp;&amp;</span> echo + CC main.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/deom/build/x86_64-qemu/main.o /home/jungle/deom1/deom/main.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/deom/build/x86_64-qemu/ <span class="err">&amp;&amp;</span> echo + CC say.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/deom/build/x86_64-qemu/say.o /home/jungle/deom1/deom/say.c
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/am archive
</span></span><span class="line"><span class="cl"><span class="gh"># Building am-archive [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + AS src/x86/qemu/start64.S
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -MMD -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -m64 -fPIC -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/start64.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/start64.S
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + AS src/x86/qemu/trap64.S
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -MMD -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -m64 -fPIC -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trap64.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/trap64.S
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/trm.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trm.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/trm.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/cte.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/cte.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/cte.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/ioe.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/ioe.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/vme.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/vme.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/vme.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/mpe.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/mpe.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/mpe.c
</span></span><span class="line"><span class="cl">echo + AR &#34;-&gt;&#34; build/am-x86_64-qemu.a
</span></span><span class="line"><span class="cl">ar rcs /home/jungle/deom1/abstract-machine/am/build/am-x86_64-qemu.a /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/start64.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trap64.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trm.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/cte.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/vme.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/mpe.o
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/klib archive
</span></span><span class="line"><span class="cl"><span class="gh"># Building klib-archive [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/stdio.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdio.o /home/jungle/deom1/abstract-machine/klib/src/stdio.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/int64.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/int64.o /home/jungle/deom1/abstract-machine/klib/src/int64.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/string.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/string.o /home/jungle/deom1/abstract-machine/klib/src/string.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/cpp.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/cpp.o /home/jungle/deom1/abstract-machine/klib/src/cpp.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/stdlib.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdlib.o /home/jungle/deom1/abstract-machine/klib/src/stdlib.c
</span></span><span class="line"><span class="cl">echo + AR &#34;-&gt;&#34; build/klib-x86_64-qemu.a
</span></span><span class="line"><span class="cl">ar rcs /home/jungle/deom1/abstract-machine/klib/build/klib-x86_64-qemu.a /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdio.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/int64.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/string.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/cpp.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdlib.o
</span></span><span class="line"><span class="cl">echo + LD &#34;-&gt;&#34; build/hello-x86_64-qemu.elf
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-ld -melf_x86_64 -N -Ttext-segment=0x00100000 -o /home/jungle/deom1/deom/build/hello-x86_64-qemu.elf --start-group /home/jungle/deom1/deom/build/x86_64-qemu/main.o /home/jungle/deom1/deom/build/x86_64-qemu/say.o /home/jungle/deom1/deom/../abstract-machine/am/build/am-x86_64-qemu.a /home/jungle/deom1/deom/../abstract-machine/klib/build/klib-x86_64-qemu.a --end-group
</span></span><span class="line"><span class="cl">echo \# Creating image [x86_64-qemu]
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/am/src/x86/qemu/boot
</span></span><span class="line"><span class="cl">echo + CC start.S main.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -static -m32 -fno-pic -Os -nostdlib -Ttext 0x7c00 -I/home/jungle/deom1/deom/../abstract-machine/am/src -o bootblock.o start.S main.c
</span></span><span class="line"><span class="cl">python3 genboot.py bootblock.o
</span></span><span class="line"><span class="cl">echo + CREATE &#34;-&gt;&#34; build/hello-x86_64-qemu
</span></span><span class="line"><span class="cl">( cat /home/jungle/deom1/deom/../abstract-machine/am/src/x86/qemu/boot/bootblock.o; head -c 1024 /dev/zero; cat /home/jungle/deom1/deom/build/hello-x86_64-qemu.elf ) &gt; /home/jungle/deom1/deom/build/hello-x86_64-qemu
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="0-生成镜像和启动虚拟机-contd-1">(0) 生成镜像和启动虚拟机 (cont&rsquo;d)</h3>
<p>想要看得更清楚一些？</p>
<ul>
<li><code>:%s/ /\r /g</code>
<ul>
<li>每一个命令就像 “一句话”</li>
</ul>
</li>
</ul>
<hr>
<p>编译</p>
<ul>
<li><code>-std=gnu11</code>, <code>m64</code>, <code>-mno-sse</code>, <code>-I</code>, <code>-D</code>, &hellip; (这对你配置 vscode 很重要)</li>
</ul>
<p>链接</p>
<ul>
<li><code>-melf_x86_64</code>, <code>-N</code>, <code>-Ttext-segment=0x00100000</code></li>
<li>链接了需要的库 (<code>am-x86_64-qemu.a</code>, <code>klib-x86_64-qemu.a</code>)</li>
</ul>
<p>彩蛋</p>
<ul>
<li><code>make html</code></li>
</ul>
<h3 id="1-启动加载器-boot-loader">(1) 启动加载器 (Boot Loader)</h3>
<p>512 字节中的代码，假设了镜像格式 (真正的的加载器有很多 stages)</p>
<ul>
<li>16-bit → 32-bit</li>
<li>ELF32/64 的加载器
<ul>
<li>按照约定的磁盘镜像格式加载</li>
</ul>
</li>
</ul>
<p>代码讲解：</p>
<ul>
<li><code>am/src/x86/qemu/boot/start.S</code>和<code>main.c</code>
<ul>
<li>它们都可以调试！</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">elf32</span><span class="o">-&gt;</span><span class="n">e_machine</span> <span class="o">==</span> <span class="n">EM_X86_64</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">((</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">elf64</span><span class="o">-&gt;</span><span class="n">e_entry</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">((</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">elf32</span><span class="o">-&gt;</span><span class="n">e_entry</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 操作系统也是程序，它如何用状态机如何定义？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>一切皆可调试 (包括 firmware)
<ul>
<li>理解操作系统是如何被启动的</li>
<li>学会使用 gdb (必备生存技能)</li>
</ul>
</li>
<li>操作系统也是程序
<ul>
<li>AbstractMachine 扩展了程序的语义，仅此而已</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter8 并发 bug 和应对</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter8/</link>
    <pubDate>Fri, 17 Mar 2023 13:48:22 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter8/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>并发编程的基本工具：线程库、互斥和同步</li>
<li>并发编程的应用场景：高性能计算、数据中心、网页/移动应用</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 并发编程那么难，我写出 bug 怎么办？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>应对 bug (和并发 bug) 的方法</li>
<li>死锁和数据竞争</li>
</ul>
<h2 id="应对-bug-的方法">应对 Bug 的方法</h2>
<h3 id="基本思路否定你自己">基本思路：否定你自己</h3>
<blockquote>
<p>虽然不太愿意承认，但始终假设自己的代码是错的。</p>
</blockquote>
<p>然后呢？</p>
<ul>
<li>做好测试</li>
<li>检查哪里错了</li>
<li>再检查哪里错了</li>
<li>再再检查哪里错了
<ul>
<li>(把任何你认为 “不对” 的情况都检查一遍)</li>
</ul>
</li>
</ul>
<h3 id="bug-多的根本原因编程语言的缺陷">Bug 多的根本原因：编程语言的缺陷</h3>
<blockquote>
<p>软件是需求 (规约) 在计算机数字世界的<b>投影</b>（关于变量的更多内容丢失了，只映射了一部分）</p>
</blockquote>
<p>只管 “翻译” 代码，不管和实际需求 (规约) 是否匹配</p>
<ul>
<li>可以加入assert来进行证明</li>
</ul>
<hr>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/alipay.c" target="_blank" rel="noopener noreffer">alipay.c</a>的例子
<ul>
<li>变量 <code>balance</code> 代表 “余额”</li>
<li>怎么看 withdraw 以后 0 → 18446744073709551516 都不对</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// unexpected delays
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Talipay</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Alipay_withdraw</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;balance = %lu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">balance</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>三十年后的编程语言和编程方法？</p>
<ul>
<li>Annotation verifier (<a href="https://dafny-lang.github.io/dafny/" target="_blank" rel="noopener noreffer">Dafny</a>)</li>
<li>Specification mining (<a href="http://plse.cs.washington.edu/daikon/" target="_blank" rel="noopener noreffer">Daikon</a>)</li>
<li><a href="https://dl.acm.org/doi/10.1145/113446.113468" target="_blank" rel="noopener noreffer">Refinement types</a></li>
<li><a href="https://link.springer.com/article/10.1007/s10009-012-0249-7" target="_blank" rel="noopener noreffer">Program sketching</a>……</li>
</ul>
<h3 id="更实在的方法防御性编程">更实在的方法：防御性编程</h3>
<blockquote>
<p>把程序需要满足的条件用 <code>assert</code> 表达出来 $\Longrightarrow$ <b>和上面的防御性编程相对应</b></p>
</blockquote>
<p>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>、二叉树的旋转</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define A 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define B 2
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define BARRIER __sync_synchronize()
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">nested</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_long</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d threads in the critical section @ count=%ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">cnt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="k">volatile</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">turn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TA</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">B</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span> <span class="c1">// &lt;- this is critcal for x86
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">y</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">B</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TB</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">x</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">A</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TB</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter8-1.jpg" title="/img/Operating System/chapter8-1.jpg" data-thumbnail="/img/Operating System/chapter8-1.jpg" data-sub-html="<h2>二叉树的旋转，维护的一些方法assert(y-&gt;parent == x&#39;-&gt;parent &amp;&amp; y-&gt;left == x &amp;&amp; y-&gt;right == c);</h2>">
        
    </a><figcaption class="image-caption">二叉树的旋转，维护的一些方法<code>assert(y-&gt;parent == x'-&gt;parent &amp;&amp; y-&gt;left == x &amp;&amp; y-&gt;right == c);</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-2.png" title="/img/Operating System/chapter8-2.png" data-thumbnail="/img/Operating System/chapter8-2.png" data-sub-html="<h2>assert就是最有效的防御手段,相当于assert(i == 1);</h2>">
        
    </a><figcaption class="image-caption"><code>assert</code>就是最有效的防御手段,相当于<code>assert(i == 1);</code></figcaption>
    </figure>
<ul>
<li>
<p>把assert写出来，你也就知道怎么写代码了</p>
</li>
<li>
<p><font color="red"><b>！！！面试的时候能写出干净利落的assert代码是一个重要的加分项，对增强代码的逻辑性和可读性以及debug都有很大帮助 $\Longrightarrow$ 没有人能够写出完美的代码，代码部分和assert是互相印证的，使得代码的可靠性上升了一个数量级</b></font></p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-3.gif" title="/img/Operating System/chapter8-3.gif" data-thumbnail="/img/Operating System/chapter8-3.gif" data-sub-html="<h2>即使是Linus Torvalds声称自己的代码没有bug最后也被打脸</h2>">
        
    </a><figcaption class="image-caption">即使是<a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener noreffer">Linus Torvalds</a>声称自己的代码没有bug最后也被打脸</figcaption>
    </figure>
<ul>
<li>assert不一定需要绝对的正确，比如在上面的支付宝，如果测试过程中金额较小，我们完全可以使用<code>assert(balance &lt;= 100000);</code>这样的代码</li>
<li>还可以有这样的assert</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">ptr</span> <span class="n">in</span> <span class="n">heap</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">pid</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pid</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这些assert看起来和我们的现实世界的逻辑并没有关系，但是它防止了$Memory\ Error\newline$</li>
</ul>
<h3 id="防御性编程和规约给我们的启发">防御性编程和规约给我们的启发</h3>
<ul>
<li>你知道很多变量的<font color="red">含义</font></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define CHECK_INT(x, cond) \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ({ panic_on(!((x) cond), &#34;int check fail: &#34; #x &#34; &#34; #cond); })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define CHECK_HEAP(ptr) \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ({ panic_on(!IN_RANGE((ptr), heap)); })
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>变量有 “typed annotation”</p>
<ul>
<li>
<p><code>CHECK_INT(waitlist-&gt;count, &gt;= 0);</code></p>
</li>
<li>
<p><code>CHECK_INT(pid, &lt; MAX_PROCS);</code></p>
</li>
<li>
<p><code>CHECK_HEAP(ctx-&gt;rip); CHECK_HEAP(ctx-&gt;cr3);</code></p>
</li>
</ul>
</li>
<li>
<p>变量含义改变 → 发生奇怪问题 (overflow, memory error, &hellip;)</p>
<ul>
<li><font color="red"><b>不要小看这些检查</b></font>，它们在底层编程 (M2, L1, &hellip;) 时非常常见。尤其是C语言“裸奔”写OS内核，既没有语言层面的保护，也没有OS内核的保护（因为你写的就是这玩意），所以这些检查尤其重要！</li>
<li>这些检查逐渐就从C语言演变成了集成度和安全性更高的一些C++标准库还有Rust的编译器（检查很严格，每次编译都直接叫跌）</li>
<li>在虚拟机神秘重启/卡住/&hellip;前发出警报</li>
</ul>
</li>
</ul>
<h2 id="并发-bug死锁-deadlock">并发 Bug：死锁 (Deadlock)</h2>
<h3 id="死锁-deadlock">死锁 (Deadlock)</h3>
<blockquote>
<p>A deadlock is a state in which each member of a group is waiting for another member, including itself, to take action.</p>
</blockquote>
<ul>
<li>出现线程 “互相等待” 的情况</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-4.jpg" title="/img/Operating System/chapter8-4.jpg" data-thumbnail="/img/Operating System/chapter8-4.jpg" data-sub-html="<h2> 互相在等待（你等我，我等你，我等我自己）</h2>">
        
    </a><figcaption class="image-caption"><code> 互相在等待（你等我，我等你，我等我自己）</code></figcaption>
    </figure>
<h3 id="aa-deadlock">AA-Deadlock</h3>
<ul>
<li>
<p>假设你的 spinlock 不小心发生了中断</p>
<ul>
<li>
<p>在不该打开中断的时候开了中断</p>
</li>
<li>
<p>在不该切换的时候执行了 <code>yield()</code></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">os_run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list_lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xxx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xxx</span><span class="p">);</span> <span class="c1">// ---------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>                          <span class="c1">//    |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                           <span class="c1">//    |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">on_interrupt</span><span class="p">()</span> <span class="p">{</span>      <span class="c1">//    |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list_lock</span><span class="p">);</span>   <span class="c1">// &lt;--+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list_lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>lock关闭中断，而unlock打开中断。<b>上面的程序上了两把锁，却在只开一把锁的情况下打开了中断。$\Longrightarrow$ 中断需要等第一把锁释放，第一个unlock执行需要等中断返回才能执行完毕</b>。</li>
</ul>
<div class="mermaid" id="id-1"></div>
<h3 id="abba-deadlock">ABBA-Deadlock</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上锁的顺序很重要……</p>
<ul>
<li>
<p>swap本身看起来没有问题</p>
<ul>
<li><code>swap(1, 2)</code>; <code>swap(2, 3)</code>, <code>swap(3, 1)</code> → 死锁 $\Longrightarrow$ 如果三个并发执行并同时🔒住了1，2，3，那就和哲学家问题里面所有人都拿起左手的叉子一样变成了死锁</li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/philosopher.c" target="_blank" rel="noopener noreffer">philosopher.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 3
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">sem_t</span> <span class="n">locks</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tphilosopher</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">lhs</span> <span class="o">=</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="n">id</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">id</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">lhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">rhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">SEM_INIT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tphilosopher</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="避免死锁">避免死锁</h3>
<ul>
<li>
<p>死锁产生的四个<b>必要条件</b> (<a href="https://en.wikipedia.org/wiki/Edward_G._Coffman,_Jr." target="_blank" rel="noopener noreffer">Edward G. Coffman</a>, 1971):</p>
<ul>
<li>
<p>互斥：一个资源每次只能被一个进程使用（例如🔒）</p>
</li>
<li>
<p>请求与保持：一个进程请求资阻塞时，不释放已获得的资源（比如失败版的哲学家吃饭，右手拿叉子被阻塞的时候不会把左手拿到的叉子释放掉）</p>
</li>
<li>
<p>不剥夺：进程已获得的资源不能强行剥夺（🔒没有优先级，获得之后任何人都拿不走）</p>
</li>
<li>
<p>循环等待：若干进程之间形成<b>头尾相接的循环等待资源</b>关系（参考AA-Deadlock里面的mermaid图像以及十字路口的图像）</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>“理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面<b>注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源</b>。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。” ——Bullshit $\Longrightarrow$ <font color="orange">经典教科书废话，这四个条件想要破除非常困难</font></p>
</blockquote>
<h3 id="避免死锁-contd">避免死锁 (cont&rsquo;d)</h3>
<ul>
<li>
<p>AA-Deadlock</p>
<ul>
<li>
<p>AA 型的死锁容易检测，及早报告，及早修复</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/spinlock-xv6.c" target="_blank" rel="noopener noreffer">spinlock-xv6.c</a> 中的各种防御性编程</p>
<ul>
<li><code>if (holding(lk)) panic();</code> $\Longrightarrow$ 如果这把🔒在上🔒的时候，线程已经得到了🔒，直接就panic()，然后crush。防止出现死🔒之后自己到处找，这种编程模式能够迅速帮你定位自己的缺陷和bug。</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Mutual exclusion spin locks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;types.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;param.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;memlayout.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;spinlock.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;riscv.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;proc.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;defs.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">initlock</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Acquire the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Loops (spins) until the lock is acquired.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">acquire</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">push_off</span><span class="p">();</span> <span class="c1">// disable interrupts to avoid deadlock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="n">holding</span><span class="p">(</span><span class="n">lk</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;acquire&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// On RISC-V, sync_lock_test_and_set turns into an atomic swap:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   a5 = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   s1 = &amp;lk-&gt;locked
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   amoswap.w.aq a5, a5, (s1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span><span class="p">(</span><span class="n">__sync_lock_test_and_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Tell the C compiler and the processor to not move loads or stores
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// past this point, to ensure that the critical section&#39;s memory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// references happen strictly after the lock is acquired.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// On RISC-V, this emits a fence instruction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Record info about lock acquisition for holding() and debugging.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">=</span> <span class="n">mycpu</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Release the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">release</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">holding</span><span class="p">(</span><span class="n">lk</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;release&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Tell the C compiler and the CPU to not move loads or stores
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// past this point, to ensure that all the stores in the critical
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// section are visible to other CPUs before the lock is released,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// and that loads in the critical section occur strictly before
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// the lock is released.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// On RISC-V, this emits a fence instruction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Release the lock, equivalent to lk-&gt;locked = 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// This code doesn&#39;t use a C assignment, since the C standard
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// implies that an assignment might be implemented with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// multiple store instructions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// On RISC-V, sync_lock_release turns into an atomic swap:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   s1 = &amp;lk-&gt;locked
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   amoswap.w zero, zero, (s1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">__sync_lock_release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">pop_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Check whether this cpu is holding the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Interrupts must be off.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">holding</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span> <span class="o">&amp;&amp;</span> <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">==</span> <span class="n">mycpu</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// push_off/pop_off are like intr_off()/intr_on() except that they are matched:
</span></span></span><span class="line"><span class="cl"><span class="c1">// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
</span></span></span><span class="line"><span class="cl"><span class="c1">// are initially off, then push_off, pop_off leaves them off.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">push_off</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">old</span> <span class="o">=</span> <span class="n">intr_get</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">intr_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">mycpu</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">mycpu</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">intena</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">mycpu</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">pop_off</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">cpu</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">mycpu</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">intr_get</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;pop_off - interruptible&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;pop_off&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">c</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">intena</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">intr_on</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>ABBA-Deadlock</p>
<ul>
<li>
<p>任意时刻系统中的锁都是有限的</p>
</li>
<li>
<p>严格<b>按照固定的顺序获得所有锁</b> (lock ordering; 消除 “循环等待”)</p>
<ul>
<li>
<p><b>比如说有X,A,B,C四把🔒，无论如何都要给这四把🔒排一下顺序</b></p>
<div class="mermaid" id="id-2"></div>
</li>
</ul>
</li>
<li>
<p><b>任何一个线程想要获得其中的任何几把🔒，都必须要按照排好的顺序来</b></p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">//------&gt; √ ＜（＾－＾）＞
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">//-----&gt; × 
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>遇事不决可视化：<a href="https://jyywiki.cn/pages/OS/2022/demos/lock-ordering.py" target="_blank" rel="noopener noreffer">lock-ordering.py</a></p>
</li>
<li>
<p>进而证明$@thread-T_1:A \rightarrow B \rightarrow C;@thread-T_2:B \rightarrow C$是安全的</p>
<ul>
<li>“在任意时刻总是有获得 “最靠后” 锁的可以继续执行”
<ul>
<li><b>即使有许多线程的情况下，总会有一个跑的最快的线程（也就是🔒的位置最靠右/编号最大，只有🔒最大的线程才能获得下一把🔒 $\Longrightarrow$ <font color="red">即使后面的线程都卡死了，最前面的线程仍然“畅通无阻“。</font><font color="orange">最大的线程走进临界区以后，它就会把所有的🔒都给释放掉。</font></b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LockOrdering</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locks</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tryacquire</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lk</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locks</span><span class="p">[</span><span class="n">lk</span><span class="p">],</span> <span class="n">seen</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">locks</span><span class="p">[</span><span class="n">lk</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">seen</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lk</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locks</span><span class="p">[</span><span class="n">lk</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_negative</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">pass</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可视化<a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/lock-ordering.html" target="_blank" rel="noopener noreffer">lock-ordering.html</a></li>
</ul>
<hr>
<ul>
<li>总结：两条技术
<ol>
<li>防御编程 $\Longrightarrow$ AA-Deadlock</li>
<li>lock-order $\Longrightarrow$ ABBA-Deadlock</li>
</ol>
</li>
</ul>
<h3 id="lock-ordering-应用-linux-kernel-rmapc">Lock Ordering: 应用 (Linux Kernel: rmap.c)</h3>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-5.png" title="/img/Operating System/chapter8-5.png" data-thumbnail="/img/Operating System/chapter8-5.png" data-sub-html="<h2>Linux Kernel：rmap.c中的Lock Ordering</h2>">
        
    </a><figcaption class="image-caption">Linux Kernel：rmap.c中的<code>Lock Ordering</code></figcaption>
    </figure>
<h3 id="但是你又-naive-了">但是……你又 Naive 了……</h3>
<blockquote>
<p>Textbooks will tell you that if you always lock in the same order, you will never get this kind of deadlock. <b><em>Practice will tell you that this approach doesn&rsquo;t scale</em>:</b> when I create a new lock, I don&rsquo;t understand enough of the kernel to figure out where in the 5000 lock hierarchy it will fit.</p>
<p><b>The best locks are encapsulated</b>: they <em>never get exposed in headers</em>, and are <em>never held around calls to non-trivial functions outside the same file</em>. You can read through this code and see that it will never deadlock, because it never tries to grab another lock while it has that one. People using your code don&rsquo;t even need to know you are using a lock.</p>
<p>—— <em><a href="https://www.kernel.org/doc/html/latest/kernel-hacking/locking.html" target="_blank" rel="noopener noreffer">Unreliable Guide to Locking</a></em> by Rusty Russell</p>
</blockquote>
<ul>
<li>我们稍后回到这个问题，继续看更多的 bugs</li>
</ul>
<h3 id="补充银行家算法">补充：银行家算法</h3>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-11.png" title="/img/Operating System/chapter8-11.png" data-thumbnail="/img/Operating System/chapter8-11.png" data-sub-html="<h2>算法实现</h2>">
        
    </a><figcaption class="image-caption"><code>算法实现</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-11.png" title="/img/Operating System/chapter8-11.png" data-thumbnail="/img/Operating System/chapter8-11.png" data-sub-html="<h2>其他补充</h2>">
        
    </a><figcaption class="image-caption"><code>其他补充</code></figcaption>
    </figure>
<h2 id="并发-bug数据竞争-data-race-longrightarrow-不上锁不就没有死锁了吗">并发 Bug：数据竞争 (Data Race) $\Longrightarrow$ 不上锁不就没有死锁了吗？</h2>
<h3 id="数据竞争">数据竞争</h3>
<blockquote>
<p><font color="red"><b>不同的线程</b></font>同时访问<font color="red"><b>同一段内存</b></font>，且<font color="red"><b>至少有一个是写</b></font>。</p>
</blockquote>
<div class="mermaid" id="id-3"></div>
<ul>
<li>两个内存访问在 “赛跑”，<b>“跑赢” 的操作先执行</b> $\Longrightarrow$ 程序最终的结果与谁跑赢有关 $\Longrightarrow$ 计组中和的“读后写”与“写后读”有关的流水线排序问题
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>: 内存访问都在赛跑
<ul>
<li><a href="https://www.felixcloutier.com/x86/mfence" target="_blank" rel="noopener noreffer">MFENCE</a>：<del>如何留下最少的 fence，依然保证算法正确？</del></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数据竞争-contd">数据竞争 (cont&rsquo;d)</h3>
<ul>
<li>
<p>Peterson 算法告诉大家：</p>
<ul>
<li>
<p><font color="red">你们写不对无锁的并发程序</font></p>
</li>
<li>
<p>所以事情反而简单了</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>用互斥锁保护好共享数据</p>
<p>消灭一切数据竞争</p>
</blockquote>
<div class="mermaid" id="id-4"></div>
<h3 id="数据竞争例子">数据竞争：例子</h3>
<ul>
<li>以下代码概括了你们遇到数据竞争的大部分情况
<ul>
<li>不要笑，你们的 bug 几乎都是这两种情况的变种</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Case #1: 上错了锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">thread1</span><span class="p">()</span> <span class="p">{</span> <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">thread2</span><span class="p">()</span> <span class="p">{</span> <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Case #2: 忘记上锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">thread1</span><span class="p">()</span> <span class="p">{</span> <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">thread2</span><span class="p">()</span> <span class="p">{</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="更多类型的并发-bug">更多类型的并发 Bug</h2>
<h3 id="程序员花式犯错">程序员：花式犯错</h3>
<ul>
<li>
<p>回顾我们实现并发控制的工具</p>
<ul>
<li>
<p>互斥锁 (lock/unlock) - 原子性</p>
</li>
<li>
<p>条件变量 (wait/signal) - 同步</p>
</li>
</ul>
</li>
<li>
<p>忘记上锁——原子性违反 (Atomicity Violation, AV)</p>
</li>
<li>
<p>忘记同步——顺序违反 (Order Violation, OV)</p>
</li>
<li>
<p>Empirical study: 在 105 个并发 bug 中 (non-deadlock/deadlock)</p>
<ul>
<li>
<p>MySQL (14/9), Apache (13/4), Mozilla (41/16), OpenOffice (6/2)</p>
</li>
<li>
<p><font color="red">97% 的非死锁并发 bug 都是 AV 或 OV</font></p>
</li>
</ul>
</li>
</ul>
<h3 id="原子性违反-av">原子性违反 (AV)</h3>
<ul>
<li>“ABA”
<ul>
<li>我以为一段代码没啥事呢，但被人强势插入了</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-6.png" title="/img/Operating System/chapter8-6.png" data-thumbnail="/img/Operating System/chapter8-6.png" data-sub-html="<h2>ABA</h2>">
        
    </a><figcaption class="image-caption"><code>ABA</code></figcaption>
    </figure>
<h3 id="原子性违反-contd">原子性违反 (cont&rsquo;d)</h3>
<ul>
<li>有时候上锁也不解决问题
<ul>
<li>“TOCTTOU” - time of check to time of use</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-7.png" title="/img/Operating System/chapter8-7.png" data-thumbnail="/img/Operating System/chapter8-7.png" data-sub-html="<h2>TOCTTOU</h2>">
        
    </a><figcaption class="image-caption"><code>TOCTTOU</code></figcaption>
    </figure>
<ul>
<li><a href="https://www.usenix.org/legacy/events/fast05/tech/full_papers/wei/wei.pdf" target="_blank" rel="noopener noreffer">TOCTTOU vulnerabilities in UNIX-style file systems: An anatomical study</a>(FAST'05)</li>
</ul>
<h3 id="顺序违反-ov">顺序违反 (OV)</h3>
<ul>
<li>“BA”
<ul>
<li>怎么就没按我预想的顺序来呢？
<ul>
<li>例子：concurrent use after free</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-8.png" title="/img/Operating System/chapter8-8.png" data-thumbnail="/img/Operating System/chapter8-8.png" data-sub-html="<h2>BA</h2>">
        
    </a><figcaption class="image-caption"><code>BA</code></figcaption>
    </figure>
<h2 id="应对并发-bug-的方法">应对并发 Bug 的方法</h2>
<h3 id="完全一样的基本思路否定你自己">完全一样的基本思路：否定你自己</h3>
<blockquote>
<p>还是得<font color="red">始终假设自己的代码是错的</font></p>
</blockquote>
<ul>
<li>
<p>然后呢？</p>
<ul>
<li>
<p>做好测试</p>
</li>
<li>
<p>检查哪里错了</p>
</li>
<li>
<p>再检查哪里错了</p>
</li>
<li>
<p>再再检查哪里错了</p>
<ul>
<li>(把任何你认为 “不对” 的情况都检查一遍)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>例如：用 lock ordering 彻底避免死锁？</p>
<ul>
<li>你想多了：并发那么复杂，程序员哪能充分测试啊</li>
</ul>
</li>
</ul>
<h3 id="lockdep-运行时的死锁检查">Lockdep: 运行时的死锁检查</h3>
<p>Lockdep 规约 (Specification)</p>
<ul>
<li>为每一个锁确定唯一的 “allocation site”
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/lock-site.c" target="_blank" rel="noopener noreffer">lock-site.c</a></li>
<li>assert: 同一个 allocation site 的锁存在全局唯一的上锁顺序</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">lock</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">locked</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">site</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">lock_t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define STRINGIFY(s) #s
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TOSTRING(s)  STRINGIFY(s)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LOCK_INIT() \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ( (lock_t) { .locked = 0, .site = __FILE__ &#34;:&#34; TOSTRING(__LINE__), } )
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">lock_t</span> <span class="n">lk1</span> <span class="o">=</span> <span class="n">LOCK_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">lock_t</span> <span class="n">lk2</span> <span class="o">=</span> <span class="n">LOCK_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;LOCK   %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lk</span><span class="o">-&gt;</span><span class="n">site</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;UNLOCK %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lk</span><span class="o">-&gt;</span><span class="n">site</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">some_object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock_t</span> <span class="n">lock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">object_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">some_object</span> <span class="o">*</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">obj</span><span class="o">-&gt;</span><span class="n">lock</span> <span class="o">=</span> <span class="n">LOCK_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">some_object</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">some_object</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">object_init</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter8-9.png" title="/img/Operating System/chapter8-9.png" data-thumbnail="/img/Operating System/chapter8-9.png" data-sub-html="<h2>ChatGPT</h2>">
        
    </a><figcaption class="image-caption"><code>ChatGPT</code></figcaption>
    </figure>
<ul>
<li>检查方法：printf
<ul>
<li>记录所有观察到的上锁顺序，例如</li>
</ul>
</li>
</ul>
<p>$$
[x,y,z] \Longrightarrow x \rightarrow y,x\rightarrow z,y\rightarrow z
$$</p>
<ul>
<li>
<p>检查是否存在$x ⇝ y ∧ y ⇝ x$</p>
</li>
<li>
<p><font color="red">维护一个图，图里面不能有环（有环就违反了Lock-Order）</font></p>
</li>
<li>
<p><a href="https://jyywiki.cn/OS/OS_Lockdep" target="_blank" rel="noopener noreffer">Lockdep 的实现</a></p>
<ul>
<li>Since Linux Kernel 2.6.17, also in <a href="https://gitee.com/openharmony" target="_blank" rel="noopener noreffer">OpenHarmony</a>!</li>
</ul>
</li>
</ul>
<h3 id="threadsanitizer-运行时的数据竞争检查">ThreadSanitizer: 运行时的数据竞争检查</h3>
<ul>
<li>
<p>为所有事件建立 happens-before 关系图 $\Longrightarrow$ 图论</p>
<ul>
<li>
<p>Program-order + release-acquire</p>
</li>
<li>
<p>对于发生在不同线程且至少有一个是写的$x,y$检查</p>
</li>
</ul>
</li>
</ul>
<p>$$
x ≺ y ∨ y ≺ x
$$</p>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/359545.359563" target="_blank" rel="noopener noreffer">Time, clocks, and the ordering of events in a distributed system</a></li>
</ul>
<h3 id="更多的检查动态程序分析">更多的检查：动态程序分析</h3>
<ul>
<li>
<p>在事件发生时记录</p>
<ul>
<li>
<p>Lockdep: lock/unlock</p>
</li>
<li>
<p>ThreadSanitizer: 内存访问 + lock/unlock</p>
</li>
</ul>
</li>
<li>
<p>解析记录检查问题</p>
<ul>
<li>Lockdep: $x ⇝ y ∧ y ⇝ x$</li>
<li>ThreadSanitizer: $x \nprec y ∧ y \nprec x$</li>
</ul>
</li>
<li>
<p>付出的代价和权衡</p>
<ul>
<li>
<p>程序执行变慢</p>
</li>
<li>
<p>但更容易找到 bug (因此在测试环境中常用)</p>
</li>
</ul>
</li>
</ul>
<h3 id="动态分析工具sanitizers">动态分析工具：Sanitizers</h3>
<ul>
<li>
<p>没用过 lint/sanitizers？</p>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/AddressSanitizer.html" target="_blank" rel="noopener noreffer">AddressSanitizer</a> (asan); <a href="https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany" target="_blank" rel="noopener noreffer">(paper)</a>: 非法内存访问</p>
<ul>
<li>Buffer (heap/stack/global) overflow, use-after-free, use-after-return, double-free, &hellip;</li>
<li>Demo: <a href="https://jyywiki.cn/pages/OS/2022/demos/uaf.c" target="_blank" rel="noopener noreffer">uaf.c</a>; <a href="https://www.kernel.org/doc/html/latest/dev-tools/kasan.html" target="_blank" rel="noopener noreffer">kasan</a></li>
</ul>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" target="_blank" rel="noopener noreffer">ThreadSanitizer</a> (tsan): 数据竞争</p>
<ul>
<li>Demo: <a href="https://jyywiki.cn/pages/OS/2022/demos/fish.c" target="_blank" rel="noopener noreffer">fish.c</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>; <a href="https://github.com/google/ktsan" target="_blank" rel="noopener noreffer">ktsan</a></li>
</ul>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/MemorySanitizer.html" target="_blank" rel="noopener noreffer">MemorySanitizer</a> (msan): 未初始化的读取</p>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" target="_blank" rel="noopener noreffer">UBSanitizer</a> (ubsan): undefined behavior</p>
<ul>
<li>Misaligned pointer, signed integer overflow, &hellip;</li>
<li>Kernel 会带着 <code>-fwrapv</code> 编译</li>
</ul>
</li>
<li>
<p>示例：test.c</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -g test.c -fsanitize<span class="o">=</span>address -o <span class="nb">test</span> <span class="o">&amp;&amp;</span> ./test
</span></span><span class="line"><span class="cl"><span class="o">=================================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span><span class="nv">37384</span><span class="o">==</span>ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x55c0a903b213 bp 0x7ffe5d50fcd0 sp 0x7ffe5d50fcc8
</span></span><span class="line"><span class="cl">WRITE of size <span class="m">4</span> at 0x602000000010 thread T0
</span></span><span class="line"><span class="cl">    <span class="c1">#0 0x55c0a903b212 in main /home/kali/chapter7/test.c:7</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#1 0x7f8416046189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2 0x7f8416046244 in __libc_start_main_impl ../csu/libc-start.c:381</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#3 0x55c0a903b0b0 in _start (/home/kali/chapter7/test+0x10b0)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0x602000000010 is located <span class="m">0</span> bytes inside of 4-byte region <span class="o">[</span>0x602000000010,0x602000000014<span class="o">)</span>
</span></span><span class="line"><span class="cl">freed by thread T0 here:
</span></span><span class="line"><span class="cl">    <span class="c1">#0 0x7f84162b76a8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:52</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#1 0x55c0a903b1db in main /home/kali/chapter7/test.c:6</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2 0x7f8416046189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">previously allocated by thread T0 here:
</span></span><span class="line"><span class="cl">    <span class="c1">#0 0x7f84162b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#1 0x55c0a903b18a in main /home/kali/chapter7/test.c:4</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2 0x7f8416046189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SUMMARY: AddressSanitizer: heap-use-after-free /home/kali/chapter7/test.c:7 in main
</span></span><span class="line"><span class="cl">Shadow bytes around the buggy address:
</span></span><span class="line"><span class="cl">  0x0c047fff7fb0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7fc0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7fd0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7fe0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7ff0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="nv">00</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt;0x0c047fff8000: fa fa<span class="o">[</span>fd<span class="o">]</span>fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">Shadow byte legend <span class="o">(</span>one shadow byte represents <span class="m">8</span> application bytes<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  Addressable:           <span class="m">00</span>
</span></span><span class="line"><span class="cl">  Partially addressable: <span class="m">01</span> <span class="m">02</span> <span class="m">03</span> <span class="m">04</span> <span class="m">05</span> <span class="m">06</span> <span class="m">07</span> 
</span></span><span class="line"><span class="cl">  Heap left redzone:       fa
</span></span><span class="line"><span class="cl">  Freed heap region:       fd
</span></span><span class="line"><span class="cl">  Stack left redzone:      f1
</span></span><span class="line"><span class="cl">  Stack mid redzone:       f2
</span></span><span class="line"><span class="cl">  Stack right redzone:     f3
</span></span><span class="line"><span class="cl">  Stack after <span class="k">return</span>:      f5
</span></span><span class="line"><span class="cl">  Stack use after scope:   f8
</span></span><span class="line"><span class="cl">  Global redzone:          f9
</span></span><span class="line"><span class="cl">  Global init order:       f6
</span></span><span class="line"><span class="cl">  Poisoned by user:        f7
</span></span><span class="line"><span class="cl">  Container overflow:      <span class="nb">fc</span>
</span></span><span class="line"><span class="cl">  Array cookie:            ac
</span></span><span class="line"><span class="cl">  Intra object redzone:    bb
</span></span><span class="line"><span class="cl">  ASan internal:           fe
</span></span><span class="line"><span class="cl">  Left alloca redzone:     ca
</span></span><span class="line"><span class="cl">  Right alloca redzone:    <span class="nv">cb</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span><span class="nv">37384</span><span class="o">==</span>ABORTING
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter8-10.png" title="/img/Operating System/chapter8-10.png" data-thumbnail="/img/Operating System/chapter8-10.png" data-sub-html="<h2>检查sum.c的thread</h2>">
        
    </a><figcaption class="image-caption"><code>检查sum.c的thread</code></figcaption>
    </figure>
<h2 id="这不就是防御性编程吗">这不就是防御性编程吗？</h2>
<ul>
<li>只不过不需要我亲自动手把代码改得乱七八糟了……</li>
</ul>
<h3 id="我们也可以buffer-overrun-检查">我们也可以！Buffer Overrun 检查</h3>
<ul>
<li>
<p>Canary (金丝雀) 对一氧化碳非常敏感</p>
<ul>
<li>用生命预警矿井下的瓦斯泄露 (since 1911)</li>
</ul>
</li>
<li>
<p>计算机系统中的 canary</p>
<ul>
<li>“牺牲” 一些内存单元，来预警 memory error 的发生
<ul>
<li>(程序运行时没有动物受到实质的伤害)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="canary-的例子保护栈空间-m2l2">Canary 的例子：保护栈空间 (M2/L2)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define MAGIC 0x55555555
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BOTTOM (STK_SZ / sizeof(u32) - 1)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">stack</span> <span class="p">{</span> <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="n">STK_SZ</span><span class="p">];</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">canary_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">stack</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">u32</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CANARY_SZ</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ptr</span><span class="p">[</span><span class="n">BOTTOM</span> <span class="o">-</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAGIC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">canary_check</span><span class="p">(</span><span class="k">struct</span> <span class="n">stack</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">u32</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CANARY_SZ</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic_on</span><span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">BOTTOM</span> <span class="o">-</span> <span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">MAGIC</span><span class="p">,</span> <span class="s">&#34;underflow&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic_on</span><span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">MAGIC</span><span class="p">,</span> <span class="s">&#34;overflow&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="烫烫烫屯屯屯和葺葺葺">烫烫烫、屯屯屯和葺葺葺</h3>
<ul>
<li>
<p>msvc 中 debug mode 的 guard/fence/canary</p>
<ul>
<li>
<p>未初始化栈: <code>0xcccccccc</code></p>
</li>
<li>
<p>未初始化堆: <code>0xcdcdcdcd</code></p>
</li>
<li>
<p>对象头尾: <code>0xfdfdfdfd</code></p>
</li>
<li>
<p>已回收内存: <code>0xdddddddd</code></p>
</li>
</ul>
</li>
<li>
<p><code>(b'**\xcc**' * 80).decode('gb2312')</code></p>
</li>
</ul>
<blockquote>
<p>手持两把锟斤拷，口中疾呼烫烫烫</p>
<p>脚踏千朵屯屯屯，笑看万物锘锘锘</p>
<p>(它们一直在无形中保护你)</p>
</blockquote>
<h3 id="防御性编程低配版-lockdep">防御性编程：低配版 Lockdep</h3>
<ul>
<li>不必大费周章记录什么上锁顺序
<ul>
<li>统计当前的 spin count
<ul>
<li>如果超过某个明显不正常的数值 (1,000,000,000) 就报告</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">spin_cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">spin_cnt</span><span class="o">++</span> <span class="o">&gt;</span> <span class="n">SPIN_LIMIT</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Too many spin @ %s:%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FILE__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>配合调试器和线程 backtrace 一秒诊断死锁</li>
</ul>
<h3 id="防御性编程低配版-sanitizer-l1">防御性编程：低配版 Sanitizer (L1)</h3>
<ul>
<li>内存分配要求<code>malloc and free</code>：已分配内存$S=[l_0,r_0) \cup [l_1,r_1) \cup &hellip;$
<ul>
<li>$kalloc(S)$返回的$[l,r)$ 必须满足$[l,r) \cup S = \empty$
<ul>
<li>thread-local allocation + 并发的 free 还蛮容易弄错的</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// allocation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">u32</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">panic_on</span><span class="p">(((</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">MAGIC</span><span class="p">,</span> <span class="s">&#34;double-allocation&#34;</span><span class="p">);</span><span class="c1">//分配的时候看到了malloc颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAGIC</span><span class="p">;</span> <span class="c1">//刷上malloc颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// free
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">u32</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">alloc_size</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">panic_on</span><span class="p">(((</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;double-free&#34;</span><span class="p">);</span><span class="c1">//分配的时候看到了free颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//刷上free颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何拯救人类不擅长的并发编程？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>常见的并发 bug
<ul>
<li>死锁、数据竞争、原子性/顺序违反</li>
</ul>
</li>
<li>不要盲目相信自己：检查、检查、检查
<ul>
<li>防御性编程：检查</li>
<li>动态分析：打印 + 检查</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter7 真实世界的并发编程</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter7/</link>
    <pubDate>Wed, 15 Mar 2023 13:26:02 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter7/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>并发编程的基本工具：线程库、互斥和同步</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 什么样的任务是需要并行/并发的？它们应该如何实现？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>高性能计算中的并发编程</li>
<li>数据中心里的并发编程</li>
<li>我们身边的并发编程</li>
</ul>
<h2 id="高性能计算中的并发编程">高性能计算中的并发编程</h2>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/359327.359336" target="_blank" rel="noopener noreffer">CRAY-1 Supercomputer</a>, 1976 @ 138 MFLOPS, SIMD Processor</li>
</ul>
<h3 id="高性能计算程序特点">高性能计算程序：特点</h3>
<blockquote>
<p>“A technology that harnesses the power of supercomputers or computer clusters to solve complex problems requiring massive computation.” (IBM)</p>
</blockquote>
<ul>
<li>
<p>以计算为中心</p>
<ul>
<li>
<p>系统模拟：天气预报、能源、分子生物学</p>
</li>
<li>
<p>人工智能：神经网络训练</p>
</li>
<li>
<p>矿厂：纯粹的 hash 计算</p>
</li>
<li>
<p><a href="http://www.hpc100.cn/top100/20/" target="_blank" rel="noopener noreffer">HPC-China 100</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="高性能计算主要挑战">高性能计算：主要挑战</h3>
<p>计算任务如何分解</p>
<ul>
<li>
<p>计算图需要容易并行化</p>
<ul>
<li>机器-线程两级任务分解</li>
</ul>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"> <span class="o">*</span> <span class="k">if</span> <span class="n">array1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">array2</span><span class="p">[</span><span class="n">y</span><span class="p">],</span><span class="n">we</span> <span class="n">can</span> <span class="n">know</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span> <span class="n">form</span> <span class="n">the</span> <span class="s">&#34;decreasing and conquer&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="o">*</span> <span class="n">so</span> <span class="n">we</span> <span class="n">should</span> <span class="n">make</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="o">*</span> <span class="k">else</span> <span class="n">array1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">array2</span><span class="p">[</span><span class="n">y</span><span class="p">],</span><span class="n">we</span> <span class="n">can</span> <span class="n">know</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span> <span class="n">form</span> <span class="n">the</span> <span class="s">&#34;divide and conquer&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="o">*</span> <span class="n">so</span> <span class="n">we</span> <span class="n">should</span> <span class="n">make</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>计算图</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-1.jpg" title="/img/Operating System/chapter7-1.jpg" data-thumbnail="/img/Operating System/chapter7-1.jpg" data-sub-html="<h2>计算图（看依赖关系，表明了计算的顺序限制）</h2>">
        
    </a><figcaption class="image-caption">计算图（看依赖关系，表明了计算的顺序限制）</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-2.jpg" title="/img/Operating System/chapter7-2.jpg" data-thumbnail="/img/Operating System/chapter7-2.jpg" data-sub-html="<h2>看成有向图进行拓扑排序，确定计算顺序。可以看出矩阵规模小的时候并行度很低，不如单线程计算。但是矩阵规模大的时候就要考虑并行计算了</h2>">
        
    </a><figcaption class="image-caption">看成有向图进行拓扑排序，确定计算顺序。<br>可以看出矩阵规模小的时候并行度很低，不如单线程计算。但是矩阵规模大的时候就要考虑并行计算了</figcaption>
    </figure>
<ul>
<li>
<p>生产者-消费者解决一切</p>
<ul>
<li><a href="https://hpc-tutorials.llnl.gov/mpi/" target="_blank" rel="noopener noreffer">MPI</a> - “a specification for the developers and users of message passing libraries”, <a href="https://www.openmp.org/" target="_blank" rel="noopener noreffer">OpenMP</a> - “multi-platform shared-memory parallel programming in C/C++ and Fortran”</li>
</ul>
</li>
<li>
<p><a href="https://web.mit.edu/dimitrib/www/pdc.html" target="_blank" rel="noopener noreffer">Parallel and Distributed Computation: Numerical Methods</a>（与高性能计算有关）</p>
</li>
</ul>
<p>线程间如何通信</p>
<ul>
<li>通信不仅发生在节点/线程之间，还发生在任何共享内存访问</li>
<li>还记得被 <a href="https://jyywiki.cn/pages/OS/2022/demos/mem-ordering.c" target="_blank" rel="noopener noreffer">mem-ordering.c</a> 支配的恐惧吗？</li>
</ul>
<p><font color="red"><b>模拟计算：现实中的物理世界就是并发的</b></font></p>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/mandelbrot.c" target="_blank" rel="noopener noreffer">mandelbrot.c</a> (embarrassingly parallel)<font color="orange">环境有点难配，这个程序在kali上面的运行速度要比乌班图快</font>。线程数越多，运行速度越快。而且我们会发现线程会将区域划分，然后只负责自己那一部分的区域。（由于区域间没有关联，这个问题很容易进行划分和并行）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-3.png" title="/img/Operating System/chapter7-3.png" data-thumbnail="/img/Operating System/chapter7-3.png" data-sub-html="<h2>最终效果</h2>">
        
    </a><figcaption class="image-caption">最终效果</figcaption>
    </figure>
<h2 id="数据中心里的并发编程">数据中心里的并发编程</h2>
<h3 id="数据中心程序特点">数据中心程序：特点</h3>
<blockquote>
<p>“A network of computing and storage resources that enable the delivery of shared applications and data.” (CISCO)</p>
</blockquote>
<p>以数据 (存储) 为中心</p>
<ul>
<li>从互联网搜索 (Google)、社交网络 (Facebook/Twitter) 起家</li>
<li>支撑各类互联网应用：微信/QQ/支付宝/游戏/网盘/……</li>
</ul>
<p>算法/系统对 HPC 和数据中心的意义</p>
<ul>
<li>你有 1,000,000 台服务器</li>
<li>如果一个算法/实现能快 1%，就能省 10,000 台服务器
<ul>
<li>参考：$NJU$对面一套房 ≈ 50 台服务器 (不计运维成本)</li>
</ul>
</li>
</ul>
<h3 id="数据中心主要挑战">数据中心：主要挑战</h3>
<p>多副本情况下的<b>高可靠</b>、<b>低延迟</b>数据访问</p>
<div class="mermaid" id="id-1"></div>
<p><b>为了可靠性（做数据恢复）每个数据在多个服务器里面都有副本</b></p>
<p>其中的计算机称为$Key-value-storage$<code>{key : value}</code>，<font color="red"><b>是现在分布式系统的最流行的模型</b></font></p>
<ul>
<li>在服务海量地理分布请求的前提下
<ul>
<li>数据要保持一致 $\Longrightarrow$ 多个副本都要跟着变动(Consistency)</li>
<li>服务时刻保持可用 (Availability)</li>
<li>容忍机器离线 (Partition tolerance)</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-4.png" title="/img/Operating System/chapter7-4.png" data-thumbnail="/img/Operating System/chapter7-4.png" data-sub-html="<h2>量子纠缠</h2>">
        
    </a><figcaption class="image-caption">量子纠缠</figcaption>
    </figure>
<h3 id="这门课的问题如何用好一台计算机">这门课的问题：如何用好一台计算机？</h3>
<p>如何用一台 (可靠的) 计算机<b>尽可能多地服务并行的请求</b></p>
<ul>
<li>关键指标：QPS, tail latency, &hellip;</li>
</ul>
<p>我们有的工具</p>
<ul>
<li>线程 (threads)
<ul>
<li>线程的切换需要代价<font color="purple"><b>（从一个状态机切换到另一个状态机 $\Longrightarrow$ 保存PC，保存所有寄存器（空间开销），压栈，陷入管态等）</b></font></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kr">thread</span><span class="p">(</span><span class="n">start</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">println</span><span class="p">(</span><span class="s">&#34;${Thread.currentThread()} has run.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b>协程 (coroutines)</b>
<ul>
<li><code>code: co_yield ==&gt; asm: call &lt;co_yield&gt;</code> $\Longrightarrow$ <font color="red"><b>实际上是函数调用</b></font>。只需要进行<font color="red"><b>一部分栈和一部分寄存器</b></font>的操作</li>
<li>多个可以保存/恢复的执行流 (<a href="https://jyywiki.cn/OS/2022/labs/M2" target="_blank" rel="noopener noreffer">M2 - libco</a>)</li>
<li><b>比线程更轻量 (完全没有系统调用，也就没有操作系统状态)</b></li>
</ul>
</li>
</ul>
<h3 id="数据中心协程和线程">数据中心：协程和线程</h3>
<ul>
<li>数据中心简化模型</li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>数据中心</p>
<ul>
<li>
<p>同一时间有数千/数万个请求到达服务器</p>
</li>
<li>
<p>计算部分</p>
<ul>
<li><b>需要利用好多处理器</b>
<ul>
<li>线程 → <b><font color="red">这就是我擅长的 (Mandelbrot Set)</font>，但是每一个线程都会占用相当可观的操作系统资源<font color="orange">（需要挂PC，保存状态等，开销比协程大的多）</font></b></li>
<li>协程 → <b>一人出力，他人摸鱼 $\Longrightarrow$ <font color="red">（协程不受操作系统调度，一个线程里面一次只能运行一个协程）例如协程碰到read(),就会反过来阻塞对应的线程</font></b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>I/O 部分</p>
<ul>
<li>会在系统调用上 block (例如请求另一个服务或读磁盘)
<ul>
<li>协程 → 一人干等，他人围观</li>
<li>线程 → 每个线程都占用可观的操作系统资源</li>
</ul>
</li>
</ul>
</li>
<li>
<p>(这个问题比你想象的复杂，例如虚拟机)</p>
</li>
</ul>
<h3 id="go-和-goroutine">Go 和 Goroutine</h3>
<blockquote>
<p>Go: 小孩子才做选择，多处理器并行和轻量级并发<b><font color="red">我全都要</font></b>！</p>
</blockquote>
<p><b>Goroutine: 概念上是线程，实际是线程和协程的混合体</b> $\Longrightarrow$ 解决了高并发$I/O$的问题</p>
<div class="mermaid" id="id-3"></div>
<ul>
<li>
<p><b>即利用的协程的高效性，又通过一定的机制防止协程造成的阻塞</b></p>
</li>
<li>
<p>调度器会帮助你管理好<b>Goroutine</b></p>
</li>
<li>
<p>同时并行执行的最多也只有一个CPU和一个线程</p>
<ul>
<li><font color="red"><b>一个CPU都不会在两个go线程之间切换，省掉了切换CPU线程的时间，运行和切换的都是协程</b></font></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>每个 CPU 上有一个 Go Worker，自由调度 goroutines</li>
<li>执行到 blocking API 时 (例如 sleep, read)
<ul>
<li>Go Worker 偷偷改成 non-blocking 的版本
<ul>
<li>成功 → 立即继续执行</li>
<li>失败 → 立即 yield 到另一个需要 CPU 的 goroutine
<ul>
<li>太巧妙了！CPU 和操作系统全部用到 100%</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>例子</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/fib.go" target="_blank" rel="noopener noreffer">fib.go</a>; <a href="https://books.studygolang.com/gopl-zh/ch9/ch9-08.html" target="_blank" rel="noopener noreffer"><em>The Go Programming Language</em> (ch 9.8)</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Example from &#34;The Go Programming Language&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">go</span> <span class="nf">spinner</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">const</span> <span class="nx">n</span> <span class="p">=</span> <span class="mi">45</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fibN</span> <span class="o">:=</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// slow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\rFibonacci(%d) = %d\n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">fibN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">spinner</span><span class="p">(</span><span class="nx">delay</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="s">`-\|/`</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\r%c&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">delay</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">x</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>go spinner(100 * time.Millisecond)</code>概念是线程，实现是协程</p>
</li>
<li>
<p><code>spinner</code>实践上会被调度到另外一个CPU上面执行</p>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/chapter7-5.png" title="/img/Operating System/chapter7-5.png" data-thumbnail="/img/Operating System/chapter7-5.png">
        
    </a>
<h3 id="现代编程语言上的系统编程">现代编程语言上的系统编程</h3>
<blockquote>
<p>Do not communicate by sharing memory; instead, share memory by communicating. ——<em>Effective Go</em></p>
</blockquote>
<p><font color="red">共享内存 = 万恶之源</font></p>
<ul>
<li>在奇怪调度下发生的各种并发 bugs
<ul>
<li>条件变量：broadcast 性能低，不 broadcast 容易错</li>
<li>信号量：在管理多种资源时就没那么好用了</li>
</ul>
</li>
</ul>
<hr>
<p><b>既然生产者-消费者能解决绝大部分问题，提供一个 API 不就好了？</b></p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/producer-consumer.go" target="_blank" rel="noopener noreffer">producer-consumer.go</a>
<ul>
<li>缓存为 0 的 channel 可以用来同步 <font color="red"><b>(先到者等待)</b></font></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">stream</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">n</span> <span class="p">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">produce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;produce&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">stream</span> <span class="o">&lt;-</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">consume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">x</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">stream</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;consume&#34;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="nf">produce</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">consume</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>stream &lt;- i</code> $\Longrightarrow$ 把i丢进channel</li>
<li><code>x := &lt;- stream</code> $\Longrightarrow$ 把i从channel中拉出来</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/chapter7-6.png" title="/img/Operating System/chapter7-6.png" data-thumbnail="/img/Operating System/chapter7-6.png">
        
    </a>
<a class="lightgallery" href="/img/Operating%20System/chapter7-7.png" title="/img/Operating System/chapter7-7.png" data-thumbnail="/img/Operating System/chapter7-7.png">
        
    </a>
<h3 id="补充rust利用原子互斥锁的并发编程">补充：Rust利用原子互斥锁的并发编程</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="p">{</span><span class="n">mpsc</span><span class="p">,</span><span class="w"> </span><span class="n">Arc</span><span class="p">,</span><span class="w"> </span><span class="n">Mutex</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="p">{</span><span class="n">thread</span><span class="p">,</span><span class="w"> </span><span class="n">vec</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">tx</span><span class="p">,</span><span class="w"> </span><span class="n">rx</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mpsc</span>::<span class="n">channel</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">txs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">handles</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">txs</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="n">tx</span><span class="p">.</span><span class="n">clone</span><span class="p">())));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">txs</span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">counter</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">hand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">count</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">sender</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">*</span><span class="n">number</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Send the number: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">number</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sender</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="o">*</span><span class="n">number</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">handles</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">handle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">received</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">rx</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Received: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">received</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">count</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">handles</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">i</span><span class="p">.</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">handle</span><span class="p">.</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="我们身边的并发编程">我们身边的并发编程</h2>
<h3 id="web-20-时代-1999">Web 2.0 时代 (1999)</h3>
<p>人与人之间联系更加紧密的互联网</p>
<ul>
<li>“Users were encouraged to provide content, rather than just viewing it.”</li>
<li>你甚至可以找到一些 “Web 3.0”/Metaverse 的线索</li>
</ul>
<hr>
<p>是什么成就了今天的 Web 2.0?</p>
<ul>
<li><font color="red"><b>浏览器中的并发编程</b></font>：Ajax (Asynchronous JavaScript + XML)</li>
<li>HTML (DOM Tree) + CSS 代表了你能看见的一切
<ul>
<li>通过 JavaScript 可以改变它</li>
<li>通过 JavaScript 可以建立连接本地和服务器</li>
<li>你就拥有了全世界！</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-8.png" title="/img/Operating System/chapter7-8.png" data-thumbnail="/img/Operating System/chapter7-8.png" data-sub-html="<h2>浏览器中的DOM Tree</h2>">
        
    </a><figcaption class="image-caption">浏览器中的<code>DOM Tree</code></figcaption>
    </figure>
<h3 id="人机交互程序特点和主要挑战">人机交互程序：特点和主要挑战</h3>
<ul>
<li>
<p>特点：不太复杂</p>
<ul>
<li>
<p>既没有太多计算</p>
<ul>
<li>DOM Tree 也不至于太大 (大了人也看不过来)</li>
<li>DOM Tree 怎么画浏览器全帮我们搞定了</li>
</ul>
</li>
<li>
<p>也没有太多 I/O</p>
<ul>
<li>就是一些网络请求<b>（调用的快，返回的慢）</b></li>
</ul>
</li>
</ul>
</li>
<li>
<p>挑战：程序员多 $\Longrightarrow$<b>（后面非科班，设计师，原画师这样的群体也会参与进来）</b></p>
<ul>
<li>
<p><b><font color="red">零基础</font>的人你让他整共享内存上的多线程</b></p>
</li>
<li>
<p>恐怕我们现在用的到处都是 bug 吧？？？</p>
</li>
</ul>
</li>
</ul>
<h3 id="单线程--事件模型">单线程 + 事件模型</h3>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-9.jpg" title="/img/Operating System/chapter7-9.jpg" data-thumbnail="/img/Operating System/chapter7-9.jpg" data-sub-html="<h2>单线程&#43;事件模型，事件一旦开始执行就必须执行到结束 $\Longrightarrow$ 这样就避免了并发bug</h2>">
        
    </a><figcaption class="image-caption">单线程+事件模型，事件一旦开始执行就必须执行到结束 $\Longrightarrow$ <b><code>这样就避免了并发bug</code></b></figcaption>
    </figure>
<ul>
<li>
<p>但是事件里面请求网络的时候要注意成功和失败的处理方法。<b>因为网络是有延迟而且不稳定的，不能因为请求网络失败就导致在对应的事件里面堵死</b></p>
</li>
<li>
<p>尽可能少但又足够的并发</p>
<ul>
<li>
<p>一个线程、全局的事件队列、<b><font color="red">按序执行 (run-to-complete)</font></b>，<b>没有lock，编写容易</b></p>
</li>
<li>
<p>耗时的 API (Timer, Ajax, &hellip;) 调用会立即返回</p>
<ul>
<li>条件满足时向队列里增加一个事件</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://xxx.yyy.zzz/login&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://xxx.yyy.zzz/cart&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-10.jpg" title="/img/Operating System/chapter7-10.jpg" data-thumbnail="/img/Operating System/chapter7-10.jpg" data-sub-html="<h2>请求成功的情况</h2>">
        
    </a><figcaption class="image-caption">请求成功的情况</figcaption>
    </figure>
<h3 id="异步事件模型">异步事件模型</h3>
<ul>
<li>
<p>并发模型简单了很多</p>
<ul>
<li>函数的执行是原子的 (不能并行，减少了并发 bug 的可能性)</li>
</ul>
</li>
<li>
<p><b>API 依然可以并行（由浏览器后台帮你搞定并行）</b></p>
<ul>
<li>适合网页这种 “大部分时间花在渲染和网络请求” 的场景
<ul>
<li>JavaScript 代码只负责 “描述” <code>DOM Tree</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>坏处</p>
<ul>
<li>Callback hell (祖传屎山)
<ul>
<li>刚才的代码嵌套 5 层，可维护性已经接近于零了</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="异步编程promise">异步编程：Promise</h3>
<blockquote>
<p>导致 callback hell 的本质：人类脑袋里想的是 “流程图”，看到的是 “回调”。</p>
</blockquote>
<ul>
<li>The Promise object represents the <em>eventual completion</em> (or failure) of an asynchronous operation and its resulting value.</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-11.png" title="/img/Operating System/chapter7-11.png" data-thumbnail="/img/Operating System/chapter7-11.png" data-sub-html="<h2>Promise: 流程图的构造方法 (Mozilla-MDN Docs)</h2>">
        
    </a><figcaption class="image-caption">Promise: 流程图的构造方法 (Mozilla-MDN Docs)</figcaption>
    </figure>
<h3 id="promise-描述-workflow-的-嵌入式语言">Promise: 描述 Workflow 的 “嵌入式语言”</h3>
<p>Chaining</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">loadScript</span><span class="p">(</span><span class="s2">&#34;/article/promise-chaining/one.js&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="nx">script</span> <span class="p">=&gt;</span> <span class="nx">loadScript</span><span class="p">(</span><span class="s2">&#34;/article/promise-chaining/two.js&#34;</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="nx">script</span> <span class="p">=&gt;</span> <span class="nx">loadScript</span><span class="p">(</span><span class="s2">&#34;/article/promise-chaining/three.js&#34;</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="nx">script</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// scripts are loaded, we can use functions declared there
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-12.png" title="/img/Operating System/chapter7-12.png" data-thumbnail="/img/Operating System/chapter7-12.png" data-sub-html="<h2>代码描述</h2>">
        
    </a><figcaption class="image-caption">代码描述</figcaption>
    </figure>
<p>Fork-join</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span> <span class="nx">res</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-13.png" title="/img/Operating System/chapter7-13.png" data-thumbnail="/img/Operating System/chapter7-13.png" data-sub-html="<h2>代码描述</h2>">
        
    </a><figcaption class="image-caption">代码描述</figcaption>
    </figure>
<h3 id="async-await-even-better">Async-Await: Even Better</h3>
<p>async function</p>
<ul>
<li>总是返回一个 <code>Promise</code> object</li>
<li><code>async_func()</code> - fork</li>
</ul>
<hr>
<p>await promise</p>
<ul>
<li><code>await promise</code> - join</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">A</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/hello/a&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">B</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/hello/b&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">C</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/hello/c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">hello</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">A</span><span class="p">(),</span> <span class="nx">B</span><span class="p">(),</span> <span class="nx">C</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl"><span class="nx">hello</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;fetch failed!&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-14.png" title="/img/Operating System/chapter7-14.png" data-thumbnail="/img/Operating System/chapter7-14.png" data-sub-html="<h2>代码描述</h2>">
        
    </a><figcaption class="image-caption">代码描述</figcaption>
    </figure>
<h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 什么样的任务是需要并行/并发的？它们应该如何实现？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>并发编程的真实应用场景
<ul>
<li><b>高性能计算 (注重任务分解): 生产者-消费者 (MPI/OpenMP)</b></li>
<li><b>数据中心 (注重系统调用): 线程-协程 (Goroutine)</b></li>
<li><b>人机交互 (注重易用性): 事件-流图 (Promise)</b></li>
</ul>
</li>
<li>编程工具的发展突飞猛进
<ul>
<li>自 Web 2.0 以来，开源社区改变了计算机科学的学习方式</li>
<li>希望每个同学都有一个<font color="red"><b> “主力现代编程语言”</b></font>
<ul>
<li>Modern C++, Rust, Javascript, &hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter6 并发控制：同步</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter6/</link>
    <pubDate>Fri, 10 Mar 2023 20:32:20 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter6/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-10 20:48</p>
<p>在洲的提醒下，✋才发现原来租国外电话号那个网站可以有访问<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a>的教程，之前首尔线和美国线都因为反IP给ban了，这网站都没仔细看，真是血亏</p>
<p>下午问ChatGPT一个一个问题，不得感叹：牛逼滴狠呐！</p>
<p>只能说有了它，写作业瞬间轻松了十倍甚至九倍（赞赏</p>
</div>
        </div>
    </div>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>互斥：自旋锁、互斥锁、futex</li>
<li><del>是时候面对真正的并发编程了</del></li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: <b>如何在多处理器上协同多个线程完成任务？</b></li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>典型的同步问题：<b>生产者-消费者</b>；哲学家吃饭</li>
<li>同步的实现方法：信号量、条件变量</li>
</ul>
<h2 id="线程同步">线程同步</h2>
<h3 id="同步-synchronization">同步 (Synchronization)</h3>
<ul>
<li>
<p><b>两个或两个以上随时间变化的量在变化过程中保持一定的<u>相对关系</u></b></p>
</li>
<li>
<p>iPhone/iCloud 同步 (手机 vs 电脑 vs 云端)</p>
</li>
<li>
<p>变速箱同步器 (合并快慢速齿轮)</p>
</li>
<li>
<p>同步电机 (转子与磁场速度一致)</p>
</li>
<li>
<p>同步电路 (所有触发器在边沿同时触发)</p>
</li>
</ul>
<hr>
<ul>
<li><b>异步 (Asynchronous) = 不同步</b>
<ul>
<li>上述很多例子都有异步版本 (异步电机、异步电路、异步线程)</li>
</ul>
</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-11 14:00</p>
<p>乌班图打赢复活赛成功（赞赏！$\Longrightarrow$ 大爹复活博客<a href="https://blog.csdn.net/ningmengzhihe/article/details/127295333" target="_blank" rel="noopener noreffer">《GParted给ubuntu系统磁盘resize大小时候出现cannot resize read-only file system解决办法》</a>（十分甚至九分的牛逼</p>
<p>昨晚打只狼打上头了，一觉睡到中午（可以重开了</p>
<p>下午继续拿着乌班图听课（喜</p>
</div>
        </div>
    </div>
<h3 id="并发程序中的同步">并发程序中的同步</h3>
<ul>
<li>
<p><b>并发程序的步调很难保持 “<font color="red">完全</font>一致”</b></p>
<ul>
<li><b>线程同步：<font color="red">在某个时间点共同达到互相已知的状态</font></b>，（先整完的等另一个</li>
</ul>
</li>
<li>
<p>再次把线程想象成我们自己</p>
<ul>
<li>NPY：等我洗个头就出门/等我打完这局游戏就来</li>
<li>舍友：等我修好这个 bug 就吃饭</li>
<li>导师：等我出差回来就讨论这个课题</li>
<li>jyy：<del>等我成为卷王就躺平</del>
<ul>
<li><font color="red"><b>“先到先等”</b></font></li>
</ul>
</li>
</ul>
</li>
<li>
<p>目标：写线程模拟上面的过程，比如A线程代表你打游戏，B线程代表你舍友修bug，这两个线程要做的是在你打完游戏，舍友修完bug之后一起去干饭</p>
</li>
</ul>
<h3 id="生产者-消费者问题学废你就赢了">生产者-消费者问题：学废你就赢了</h3>
<blockquote>
<p><b><font color="red">99% 的实际并发问题都可以用生产者-消费者解决。</font></b></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>printf</code> 前后增加代码，使得打印的括号序列满足</p>
<ul>
<li>一定是某个合法括号序列的<b>前缀</b></li>
<li>括号<b>嵌套的深度</b>不超过$n$
<ul>
<li>$n=3$, <code>((())())(((</code> 合法</li>
<li>$n=3$, <code>(((())))</code>, <code>(()))</code> 不合法</li>
</ul>
</li>
<li>同步
<ul>
<li><b>等到有空位（嵌套层数不多）再打印左括号</b></li>
<li><b>等到能配对时再打印右括号</b></li>
</ul>
</li>
</ul>
<h4 id="生产者-消费者问题分析">生产者-消费者问题：分析</h4>
<ul>
<li>
<p>为什么叫 “生产者-消费者” 而不是 “括号问题”？</p>
<ul>
<li>
<p><b>左括号：生产资源 (任务)、放入队列</b></p>
</li>
<li>
<p><b>右括号：从队列取出资源 (任务) 执行</b></p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>能否用互斥锁实现括号问题？</p>
<ul>
<li>左括号：嵌套深度 (队列) 不足$n$时才能打印</li>
<li>右括号：嵌套深度 (队列) &gt; 1时才能打印</li>
</ul>
</li>
<li>
<p><font color="red">当然是等到满足条件时再打印了</font>：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc.c" target="_blank" rel="noopener noreffer">pc.c</a></p>
<ul>
<li><font color="red">用互斥锁保持条件成立</font></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">mutex_t</span> <span class="n">lk</span> <span class="o">=</span> <span class="n">MUTEX_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tproduce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tconsume</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>压力测试的检查当然不能少：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc-check.py" target="_blank" rel="noopener noreffer">pc-check.py</a> $\Longrightarrow$ <b>学一门脚本语言来做自动化检测（很重要！），总比$OJ$给你报错你不知道错在哪里好很多</b></li>
<li>少面向OJ编程（真正的project没有这玩意儿）</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-1.png" title="/img/Operating System/chapter6-1.png" data-thumbnail="/img/Operating System/chapter6-1.png" data-sub-html="<h2>有时间看一看</h2>">
        
    </a><figcaption class="image-caption">有时间看一看</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">limit</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">count</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100000</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="n">limit</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s1"> Ok.&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Model checker 当然也不能少 (留作习题)</p>
</li>
<li>
<p>管道通信+自动化脚本检测</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> 2023-03-11 15:21:02 ⌚  jungle-virtual-machine in ~/chapter6
</span></span><span class="line"><span class="cl">○ → ./pc <span class="m">3</span> <span class="p">|</span> python3 pc-check.py <span class="m">3</span>
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-11 15:23:26 ⌚  jungle-virtual-machine in ~/chapter6
</span></span><span class="line"><span class="cl">○ → ./pc <span class="m">3</span> <span class="p">|</span> python3 pc-check.py <span class="m">2</span>
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/home/jungle/chapter6/pc-check.py&#34;</span>, line 9, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    assert <span class="m">0</span> &lt;<span class="o">=</span> count &lt;<span class="o">=</span> limit
</span></span><span class="line"><span class="cl">AssertionError
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="补充利用rust的自旋锁实现上述问题">补充：利用<code>Rust</code>的自旋锁实现上述问题</h3>
<ul>
<li><code>lib.rs</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">io</span>::<span class="n">Write</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="p">{</span><span class="n">Arc</span><span class="p">,</span><span class="w"> </span><span class="n">Mutex</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>:<span class="err">🧵</span>:<span class="p">{</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">JoinHandle</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">counter</span>: <span class="nc">Arc</span><span class="o">&lt;</span><span class="n">Mutex</span><span class="o">&lt;</span><span class="kt">u32</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">max</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">channel</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">JoinHandle</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">n</span>: <span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">counter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">max</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">channel</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">produce</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">counter</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">max</span><span class="p">;</span><span class="w"> </span><span class="c1">// 将 max 复制到闭包中，避免对 self 进行 Move
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">hand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counter</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="fm">print!</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">std</span>::<span class="n">io</span>::<span class="n">stdout</span><span class="p">().</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">consume</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">counter</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">hand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counter</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">-=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="fm">print!</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">std</span>::<span class="n">io</span>::<span class="n">stdout</span><span class="p">().</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">join</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">pop</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>main.rs</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">rust_practice</span>::<span class="n">Produceconsume</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span>::<span class="n">env</span>::<span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">len</span><span class="p">(),</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">n</span>: <span class="kt">u32</span> <span class="o">=</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">assert_ne!</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">pac</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Produceconsume</span>::<span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="o">..</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pac</span><span class="p">.</span><span class="n">produce</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pac</span><span class="p">.</span><span class="n">consume</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">pac</span><span class="p">.</span><span class="n">join</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>压力测试</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>~/some_address<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cargo run <span class="m">3</span> <span class="p">|</span> python3 checker.py <span class="m">3</span>
</span></span><span class="line"><span class="cl">    Finished dev <span class="o">[</span>unoptimized + debuginfo<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.09s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/debug/rust_practice 3<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl">^CTraceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/mnt/d/work for vscode/rust_practice/checker.py&#34;</span>, line 6, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    <span class="k">for</span> ch in sys.stdin.read<span class="o">(</span>n<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/usr/lib/python3.10/codecs.py&#34;</span>, line 319, in decode
</span></span><span class="line"><span class="cl">    def decode<span class="o">(</span>self, input, <span class="nv">final</span><span class="o">=</span>False<span class="o">)</span>:
</span></span><span class="line"><span class="cl">KeyboardInterrupt
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>互斥锁太难了（<code>Rust</code>写着就很难），有时间再看吧😭</li>
</ul>
<h2 id="条件变量万能同步方法">条件变量：万能同步方法</h2>
<h3 id="同步问题分析">同步问题：分析</h3>
<blockquote>
<p>任何同步问题都<b><font color="red">有先来先等待的条件</font></b></p>
</blockquote>
<ul>
<li>
<p>线程 join (<a href="https://jyywiki.cn/pages/OS/2022/demos/thread.h" target="_blank" rel="noopener noreffer">thread.h</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a>)</p>
<ul>
<li>等所有线程结束后继续执行，否则等待</li>
</ul>
</li>
<li>
<p>NPY 的例子</p>
<ul>
<li>打完游戏且洗完头后继续执行 <code>date()</code>，否则等待</li>
</ul>
</li>
<li>
<p>生产者/消费者问题</p>
<ul>
<li>左括号：深度$k &lt; n$时<code>printf</code>，否则等待</li>
<li>右括号：$k &gt; 0$时<code>printf</code>，否则等待
<ul>
<li>再看一眼 <a href="https://jyywiki.cn/pages/OS/2022/demos/pc.c" target="_blank" rel="noopener noreffer">pc.c</a> $\Longrightarrow$ thread每次停下来都要执行“<b>上🔒 $\rightarrow$ <b><font color="orange">让我看看！</font></b>(资源，好康的东西) $\rightarrow$ 执行或解🔒</b>”（代码：<code>retry:mutex_lock(&amp;lk);if (count == 0) {mutex_unlock(&amp;lk);goto retry;}</code>）浪费了时间，能不能优化掉“<b>上🔒 $\rightarrow$ <b><font color="orange">让我看看！</font></b>$\rightarrow$ 执行或解🔒</b>”的时间？</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-2.png" title="/img/Operating System/chapter6-2.png" data-thumbnail="/img/Operating System/chapter6-2.png" data-sub-html="<h2>jyy的thread库通过ChatGPT看起来舒服多了</h2>">
        
    </a><figcaption class="image-caption">jyy的thread库通过ChatGPT看起来舒服多了</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-3.png" title="/img/Operating System/chapter6-3.png" data-thumbnail="/img/Operating System/chapter6-3.png" data-sub-html="<h2>join也告诉你在干啥了</h2>">
        
    </a><figcaption class="image-caption">join也告诉你在干啥了</figcaption>
    </figure>
<ul>
<li>
<p>目前理解：<code>join() = while(!terminated_all);</code></p>
</li>
<li>
<p>我们想要做的：<b>将“上🔒 $\rightarrow$ <b><font color="orange">让我看看！</font></b>$\rightarrow$ 执行或解🔒”变成“看完了，资源不对，那就睡觉（悲”</b>（代码：<code>mutex_lock(&amp;lk);if (count == 0){mutex_unlock_and_sleep(&amp;lk);}</code>），也就是“半自旋”$\Longrightarrow$ 休眠</p>
<ul>
<li>同时，另一个thread在执行<b>完该做的任务后要叫醒休眠的线程</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="c1">//finish my work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">wake_up</span><span class="p">(</span><span class="n">other_thread</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="conditional-variables-条件变量-cv">Conditional Variables (条件变量, CV)</h3>
<ul>
<li>
<p>条件变量 API</p>
<ul>
<li>wait(cv, mutex) 💤
<ul>
<li>调用时必须保证已经获得 mutex</li>
<li>释放 mutex、进入睡眠状态</li>
</ul>
</li>
</ul>
</li>
<li>
<p>signal/notify(cv) 💬 私信：走起</p>
<ul>
<li>如果有线程正在等待 cv，则唤醒其中一个线程</li>
</ul>
</li>
<li>
<p>broadcast/notifyAll(cv) 📣 所有人：走起</p>
<ul>
<li>唤醒全部正在等待 cv 的线程（呃呃呃，原来去年cyd的Java教的就是这玩意啊，🐮魔差点写死✌）</li>
</ul>
</li>
</ul>
<h3 id="条件变量实现生产者-消费者">条件变量：实现生产者-消费者</h3>
<ul>
<li>改良代码</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="n">cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span> <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">--</span><span class="p">;</span> <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>压力测试：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.c" target="_blank" rel="noopener noreffer">pc-cv.c</a>；模型检验：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.py" target="_blank" rel="noopener noreffer">pc-cv.py</a></p>
<ul>
<li>(Small scope hypothesis)</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-4.png" title="/img/Operating System/chapter6-4.png" data-thumbnail="/img/Operating System/chapter6-4.png" data-sub-html="<h2>我自己的疑问</h2>">
        
    </a><figcaption class="image-caption">我自己的疑问</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-5.png" title="/img/Operating System/chapter6-5.png" data-thumbnail="/img/Operating System/chapter6-5.png" data-sub-html="<h2>继续提问</h2>">
        
    </a><figcaption class="image-caption">继续提问</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-6.png" title="/img/Operating System/chapter6-6.png" data-thumbnail="/img/Operating System/chapter6-6.png" data-sub-html="<h2>继续提问</h2>">
        
    </a><figcaption class="image-caption">继续提问</figcaption>
    </figure>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.c" target="_blank" rel="noopener noreffer">pc-cv.c</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">mutex_t</span> <span class="n">lk</span> <span class="o">=</span> <span class="n">MUTEX_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">cond_t</span> <span class="n">cv</span> <span class="o">=</span> <span class="n">COND_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tproduce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tconsume</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>观察</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tproduce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tconsume</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>i &lt; 1</code>的时候没问题，而<code>i &lt; 8</code>的时候就出了问题</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.py" target="_blank" rel="noopener noreffer">pc-cy.py</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ProducerConsumer</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">log</span><span class="p">,</span> <span class="n">waits</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tryacquire</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">,</span> <span class="n">seen</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">seen</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span> <span class="c1"># mutex_lock()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># cond_wait</span>
</span></span><span class="line"><span class="cl">                <span class="n">_</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;1&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;1&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span> <span class="o">+</span> <span class="s1">&#39;(&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c1"># cond_signal</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span> <span class="c1"># mutex_unlock()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tc1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">_</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;2&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="s1">&#39;2&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tc2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">_</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;3&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="s1">&#39;3&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_negative</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>过程解读（上面的pc-cv.c）</li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>从生成者开始往下走，<b>一个生成材料生成成功，而消费过程执行了两次</b> $\Longrightarrow$ 寄了！</p>
<ul>
<li><b>为什么呢：同类唤醒了同类，这是错误的</b></li>
<li><b>需要两个条件变量，保证只能唤醒异类</b>，课后自己阅读相关材料</li>
</ul>
</li>
<li>
<p><a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/pc-cv.html" target="_blank" rel="noopener noreffer">可视化</a></p>
</li>
</ul>
<h3 id="条件变量正确的打开方式">条件变量：正确的打开方式</h3>
<ul>
<li>需要<b><font color="red">等待条件满足时</font></b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">cond</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1">// 互斥锁保证了在此期间条件 cond 总是成立
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b><font color="red">其他线程条件可能被满足时</font></b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>修改 <a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.c" target="_blank" rel="noopener noreffer">pc-cv.c</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.py" target="_blank" rel="noopener noreffer">pc-cv.py</a> $if \rightarrow while\ and\ signal \rightarrow boardcast\newline$</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-8.png" title="/img/Operating System/chapter6-8.png" data-thumbnail="/img/Operating System/chapter6-8.png" data-sub-html="<h2>两者区别</h2>">
        
    </a><figcaption class="image-caption">两者区别</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-9.png" title="/img/Operating System/chapter6-9.png" data-thumbnail="/img/Operating System/chapter6-9.png" data-sub-html="<h2>为什么要唤醒全部线程的原因。总算搞明白为什么之前只改$if \rightarrow while$的情况下程序会卡死</h2>">
        
    </a><figcaption class="image-caption">为什么要唤醒全部线程的原因。总算搞明白为什么之前只改$if \rightarrow while$的情况下程序会卡死</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">2023-03-11 20:47:45 ⌚  jungle-virtual-machine in ~/chapter6
</span></span><span class="line"><span class="cl">○ → ./pc-cv <span class="m">3</span> <span class="p">|</span> python3 pc-check.py <span class="m">3</span>
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行成功！</li>
<li>问大爹ChatGPT</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-7.png" title="/img/Operating System/chapter6-7.png" data-thumbnail="/img/Operating System/chapter6-7.png" data-sub-html="<h2>if是假睡眠，只能睡一次，下一次就会苏醒，而while才是真睡眠，只有条件满足时才苏醒</h2>">
        
    </a><figcaption class="image-caption"><code>if</code>是<b>假睡眠</b>，只能睡一次，下一次就会苏醒，而<code>while</code>才是<b>真睡眠</b>，只有条件满足时才苏醒</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">pthread_mutex_t</span> <span class="n">lock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">pthread_cond_t</span> <span class="n">cond</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">thread_func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">data</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Thread %d: data = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">arg</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_t</span> <span class="n">tid1</span><span class="p">,</span> <span class="n">tid2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_cond_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_func</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_func</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_cond_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="条件变量实现并行计算">条件变量：实现并行计算</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">job</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">run</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">job</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="o">!</span> <span class="p">(</span><span class="n">job</span> <span class="o">=</span> <span class="n">get_job</span><span class="p">())</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">job</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">(</span><span class="n">job</span><span class="o">-&gt;</span><span class="n">arg</span><span class="p">);</span> <span class="c1">// 不需要持有锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                      <span class="c1">// 可以生成新的 job
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                      <span class="c1">// 注意回收分配的资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>下面开始将最长公共子串的dp算法，视频断了，这个之前博客里面有<a href="https://jungle430.github.io/posts/data-structures-and-algorithms/dynamic-programming/#longest-common-subsequence-by-dynamic-programming" target="_blank" rel="noopener noreffer">《Dynamic Programming》</a>回去复习</li>
<li>视频中断，但是大致听出来优化的方法，因为上面的最长公共子串的计算是<b>有一定顺序</b>的，我们需要先算$depth$比较浅的，然后再算$depth$比较浅的 $\Longrightarrow$ <font color="red">是不是和上面的生成者，消费者问题有着相似的地方？</font><b>我们可以将这个想法分配给不同的线程，利用sleep和notify来保持相对的一个顺序来对我们之前的算法做优化！（注意利用上面的job库）</b></li>
<li>研究这道题<a href="https://leetcode.cn/problems/building-h2o" target="_blank" rel="noopener noreffer">$H_20$生成</a></li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Pause<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Pause in 2023-03-11 21:30</p>
<p>感觉这节课内容好™️的多，已经不是仅仅就限制于一个一个算法了，难滴很呐（！</p>
<p>今天先听到这罢，不过收获也是很多，去年cyd的Java上面讲的Thread那些东西终于开始理解了，而不是像当时那样在宿舍瞎🐔8️⃣写一个一个Thread（怒</p>
<p>感谢<a href="https://github.com/derecknowayback" target="_blank" rel="noopener noreffer">Dereck Chen</a>推荐的两篇有关<code>xv6</code>锁的文章<a href="https://zhuanlan.zhihu.com/p/352699414" target="_blank" rel="noopener noreffer">《Chapter 6: Locking》</a>和<a href="https://zhuanlan.zhihu.com/p/353400345" target="_blank" rel="noopener noreffer">《Chapter 6.5: More Tools, Examples and Deadlocks》</a>，一定找时间好好看</p>
<p>感谢洲帮我找到了用台湾线上<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a>的方法（大喜，之前首尔线和美国线被ban了导致后面都没用上（悲</p>
</div>
        </div>
    </div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-12 11:30</p>
<p>👀✋今天薄纱你这章</p>
</div>
        </div>
    </div>
<h3 id="条件变量更古怪的习题面试题">条件变量：更古怪的习题/面试题</h3>
<p>有三种线程，分别打印 <code>&lt;</code>, <code>&gt;</code>, 和 <code>_</code></p>
<ul>
<li>对这些线程进行同步，使得打印出的序列总是 <code>&lt;&gt;&lt;_</code> 和 <code>&gt;&lt;&gt;_</code> 组合</li>
</ul>
<hr>
<p>使用条件变量，只要回答三个问题：</p>
<ul>
<li>打印 “<code>&lt;</code>” 的条件？</li>
<li>打印 “<code>&gt;</code>” 的条件？</li>
<li>打印 “<code>_</code>” 的条件？
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/fish.c" target="_blank" rel="noopener noreffer">fish.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LENGTH(arr) (sizeof(arr) / sizeof(arr[0]))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">enum</span> <span class="p">{</span> <span class="n">A</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">F</span><span class="p">,</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">rule</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="n">ch</span><span class="p">,</span> <span class="n">to</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">rule</span> <span class="n">rules</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">A</span><span class="p">,</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span> <span class="n">B</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">B</span><span class="p">,</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span> <span class="n">C</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">C</span><span class="p">,</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span> <span class="n">D</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">A</span><span class="p">,</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span> <span class="n">E</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">E</span><span class="p">,</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span> <span class="n">F</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">F</span><span class="p">,</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span> <span class="n">D</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">D</span><span class="p">,</span> <span class="sc">&#39;_&#39;</span><span class="p">,</span> <span class="n">A</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">current</span> <span class="o">=</span> <span class="n">A</span><span class="p">,</span> <span class="n">quota</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pthread_mutex_t</span> <span class="n">lk</span>   <span class="o">=</span> <span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">pthread_cond_t</span>  <span class="n">cond</span> <span class="o">=</span> <span class="n">PTHREAD_COND_INITIALIZER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">next</span><span class="p">(</span><span class="kt">char</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">rules</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">rule</span> <span class="o">*</span><span class="n">rule</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">rules</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">rule</span><span class="o">-&gt;</span><span class="n">from</span> <span class="o">==</span> <span class="n">current</span> <span class="o">&amp;&amp;</span> <span class="n">rule</span><span class="o">-&gt;</span><span class="n">ch</span> <span class="o">==</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">rule</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fish_before</span><span class="p">(</span><span class="kt">char</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">next</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">quota</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// can proceed only if (next(ch) &amp;&amp; quota)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">quota</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fish_after</span><span class="p">(</span><span class="kt">char</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">quota</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">current</span> <span class="o">=</span> <span class="n">next</span><span class="p">(</span><span class="n">ch</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_cond_broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">char</span> <span class="n">roles</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;.&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;___&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fish_thread</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">role</span> <span class="o">=</span> <span class="n">roles</span><span class="p">[</span><span class="n">id</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fish_before</span><span class="p">(</span><span class="n">role</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">putchar</span><span class="p">(</span><span class="n">role</span><span class="p">);</span> <span class="c1">// can be long; no lock protection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">fish_after</span><span class="p">(</span><span class="n">role</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">roles</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">fish_thread</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="信号量">信号量</h2>
<h3 id="复习互斥锁和更衣室管理">复习：互斥锁和更衣室管理</h3>
<p>操作系统 = 更衣室管理员</p>
<ul>
<li>先到的人 (线程)
<ul>
<li>成功获得手环，进入游泳馆</li>
<li><code>*lk = 🔒</code>，系统调用直接返回</li>
</ul>
</li>
<li>后到的人 (线程)
<ul>
<li>不能进入游泳馆，排队等待</li>
<li>线程放入等待队列，执行线程切换 (yield)</li>
</ul>
</li>
<li>洗完澡出来的人 (线程)
<ul>
<li>交还手环给管理员；管理员把手环再交给排队的人</li>
<li>如果等待队列不空，从等待队列中取出一个线程允许执行</li>
<li>如果等待队列为空，<code>*lk = ✅</code></li>
</ul>
</li>
<li>管理员 (OS) 使用自旋锁确保自己处理手环的过程是原子的</li>
</ul>
<h3 id="更衣室管理">更衣室管理</h3>
<p>完全没有必要限制手环的数量——让更多同学可以进入更衣室</p>
<ul>
<li>管理员可以持有任意数量的手环 (更衣室容量上限)
<ul>
<li>先进入更衣室的同学先得到</li>
<li>手环用完后才需要等同学出来</li>
</ul>
</li>
</ul>
<h3 id="更衣室管理-by-ew-dijkstra">更衣室管理 (by E.W. Dijkstra)</h3>
<p>做一点扩展——线程可以任意 “变出” 一个手环</p>
<ul>
<li>把手环看成是令牌</li>
<li>得到令牌的可以进入执行</li>
<li>可以随时创建令牌</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/chapter6-10.gif" title="/img/Operating System/chapter6-10.gif" data-thumbnail="/img/Operating System/chapter6-10.gif">
        
    </a>
<p>“手环” = “令牌” = “一个资源” = “信号量” (semaphore)</p>
<ul>
<li>P(&amp;sem) - prolaag = try + decrease; wait; down; in
<ul>
<li>等待一个手环后返回</li>
<li>如果此时管理员手上有空闲的手环，立即返回</li>
</ul>
</li>
<li>V(&amp;sem) - verhoog = increase; post; up; out
<ul>
<li>变出一个手环，送给管理员</li>
</ul>
</li>
<li>信号量的行为建模: <a href="https://jyywiki.cn/pages/OS/2022/demos/sem.py" target="_blank" rel="noopener noreffer">sem.py</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Semaphore</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">token</span><span class="p">,</span> <span class="n">waits</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="c1"># 从一把🔑变成了好多把🔑，token现在是一个计数器</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">P</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tid</span><span class="p">):</span> <span class="c1"># 拿🔑</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">token</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>   <span class="c1"># 有超过一把🔑，🔑-1，自己得到了一把🔑</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">token</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="n">tid</span> <span class="c1"># 没有🔑就只能把自己放在等待队列里面，等到别人把我唤醒</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">V</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 交付🔑</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c1"># 如果有人在等待队列里面，直接唤醒他（不需要通过管理员）</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">token</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1"># 如果无人等待直接把手环交给管理员</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">P</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="s1">&#39;1&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">        <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">V</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">P</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="s1">&#39;2&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">        <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">V</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/sem.html" target="_blank" rel="noopener noreffer">model-checker</a></li>
</ul>
<h3 id="信号量实现生产者-消费者">信号量：实现生产者-消费者</h3>
<p>信号量设计的重点</p>
<ul>
<li>考虑 “手环” (每一单位的 “<font color="red"><b>资源</b></font>”) 是什么，谁创造？谁获取？
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/pc-sem.c" target="_blank" rel="noopener noreffer">pc-sem.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">producer</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>   <span class="c1">// P()返回 -&gt; 得到手环 （检测包里面是否还有空位，有空位就加入）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="c1">// 假设线程安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fill</span><span class="p">);</span> <span class="c1">//打印就就相当于向包里放一个东西
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">consumer</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fill</span><span class="p">);</span> <span class="c1">//检测包里面是否还有东西
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span> <span class="c1">//把包里面的一个东西给吃掉了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">//非常对称优美！
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在 “<font color="red"><b>一单位资源</b></font>” 明确的问题上更好用</li>
<li>”凭空创造🔑“而不是像之前那样使用”配对的手环“，程序的正确性更加危险。。。</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-11.png" title="/img/Operating System/chapter6-11.png" data-thumbnail="/img/Operating System/chapter6-11.png" data-sub-html="<h2>回去就翻csapp</h2>">
        
    </a><figcaption class="image-caption">回去就翻<code>csapp</code></figcaption>
    </figure>
<blockquote>
<p>ChatGPT生成的一些代码</p>
<p>生产者-消费者问题是一个经典的并发问题，描述了一个生产者和一个消费者在共享资源的环境中的互动。生产者生成一些产品并将它们放入一个共享缓冲区，消费者从共享缓冲区中取出产品并将其消费。为了确保生产者和消费者之间的正确互动，需要使用信号量来实现同步和互斥。</p>
</blockquote>
<p>C++实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;mutex&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;condition_variable&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;chrono&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;atomic&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;semaphore.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">int</span> <span class="n">BUFFER_SIZE</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 定义信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">sem_t</span> <span class="n">empty</span><span class="p">,</span> <span class="n">full</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">producer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待空缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 添加数据到缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">buffer</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Producer &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; produced data &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;, buffer size is &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 发信号量通知有新数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">consumer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待有数据的信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 从缓冲区中取出数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Consumer &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; consumed data &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;, buffer size is &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 发信号量通知有空缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化随机种子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">srand</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="p">(</span><span class="k">nullptr</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sem_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sem_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建生产者和消费者线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">producer1</span><span class="p">(</span><span class="n">producer</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">producer2</span><span class="p">(</span><span class="n">producer</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">consumer1</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">consumer2</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 运行一段时间后结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 通知线程结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">producer1</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">producer2</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">consumer1</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">consumer2</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 销毁信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sem_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sem_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter6-12.png" title="/img/Operating System/chapter6-12.png" data-thumbnail="/img/Operating System/chapter6-12.png" data-sub-html="<h2>例子1</h2>">
        
    </a><figcaption class="image-caption"><code>例子1</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-13.png" title="/img/Operating System/chapter6-13.png" data-thumbnail="/img/Operating System/chapter6-13.png" data-sub-html="<h2>例子2</h2>">
        
    </a><figcaption class="image-caption"><code>例子2</code></figcaption>
    </figure>
<h2 id="哲学家吃饭问题e-w-dijkstra-1960">哲♂️学家吃饭问题(E. W. Dijkstra, 1960)</h2>
<p>哲学家 (线程) 有时思考，有时吃饭</p>
<ul>
<li><b>吃饭需要同时得到左手和右手的叉子</b></li>
<li>当叉子被其他人占有时，必须等待，如何完成同步？
<ul>
<li><a href="https://leetcode.cn/problems/the-dining-philosophers" target="_blank" rel="noopener noreffer">如何用互斥锁/信号量实现？</a></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-14.jpg" title="/img/Operating System/chapter6-14.jpg" data-thumbnail="/img/Operating System/chapter6-14.jpg" data-sub-html="<h2>哲♂️学家</h2>">
        
    </a><figcaption class="image-caption">哲♂️学家</figcaption>
    </figure>
<h3 id="失败与成功的尝试">失败与成功的尝试</h3>
<p>失败的尝试</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/philosopher.c" target="_blank" rel="noopener noreffer">philosopher.c</a> (如何解决？)</li>
<li>这里面使用了信号量</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 3
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">sem_t</span> <span class="n">locks</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tphilosopher</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">lhs</span> <span class="o">=</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="n">id</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">id</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span> <span class="c1">//拿左边的叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">lhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span> <span class="c1">//拿右边的叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">rhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span> <span class="c1">//放回左叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span> <span class="c1">//放回右叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//将锁初始化为1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">SEM_INIT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tphilosopher</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>上面的程序会卡死（都拿左叉子的时候执行拿右叉子的动作的时候会一直<code>wait</code>直到有人<code>notify</code>它，可是这个场景下没人<code>notify</code>它 $\Longrightarrow$ 程序死锁）</li>
</ul>
<blockquote>
<p>这段代码实现了经典的哲学家就餐问题（Dining Philosophers Problem）。在这个问题中，有 $N$ 个哲学家和 $N$ 个叉子，每个哲学家需要同时拿到两个相邻的叉子才能吃饭，但是叉子一次只能被一个哲学家拿走，因此当所有哲学家都拿起一个叉子时，就会出现死锁。这段代码使用信号量来避免死锁，具体来说，每个叉子对应一个信号量，哲学家先尝试获取左边的叉子，如果获取不到则等待，否则再尝试获取右边的叉子。获取到两个叉子后，哲学家吃完后将两个叉子都放回原处，再次尝试获取叉子。由于每个哲学家只允许同时持有一个叉子，因此不会出现死锁。</p>
<p>在代码中，首先使用 <code>SEM_INIT</code> 函数将所有锁初始化为1，表示所有叉子都没有被占用。然后使用 <code>create</code> 函数创建 $N$ 个哲学家线程，每个线程执行 <code>Tphilosopher</code> 函数，即尝试获取叉子。在 <code>Tphilosopher</code> 函数中，首先获取左边的叉子，然后获取右边的叉子，如果两个叉子都获取到了，就吃饭，并将两个叉子都放回原处，再次循环。在获取和放回叉子时，使用 <code>P</code> 和 <code>V</code> 函数操作信号量，其中 <code>P</code> 表示获取锁，如果锁已经被占用，则阻塞等待，直到锁被释放；<code>V</code> 表示释放锁，将锁的值加1，唤醒一个等待锁的线程。</p>
<hr>
<p>上面的代码存在死锁的问题，原因是当所有的哲学家同时拿起自己左边的叉子后，会发生死锁。</p>
<p>具体来说，假设当前所有的哲学家都拿起了自己左边的叉子，那么每个哲学家都在等待自己的右边的叉子被释放，以便拿起右边的叉子。但是右边的叉子已经被邻座的哲学家拿走了，他们也在等待他们左边的叉子被释放。这种情况下，所有哲学家都无法继续执行，进入了死锁状态。</p>
<p>为了避免死锁，可以使用以下方法之一：</p>
<ol>
<li>将某个哲学家的左右叉子同时拿起来，这样他就可以开始进餐了，避免了所有哲学家都拿起自己左边的叉子导致的死锁。</li>
<li>改变某些哲学家的拿叉子顺序，例如先拿右边的叉子再拿左边的叉子，避免了所有哲学家都拿起自己左边的叉子导致的死锁。</li>
</ol>
<p>来自带爹<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a></p>
</blockquote>
<ul>
<li>成功的尝试 (万能的方法)</li>
<li><b>OS哲学：通用 $&gt;$ 小聪明</b>（⬛✋：别装🅱️！）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">avail</span><span class="p">[</span><span class="n">lhs</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">avail</span><span class="p">[</span><span class="n">rhs</span><span class="p">]))</span> <span class="p">{</span> <span class="c1">//左右手的叉子都在的时候才能吃饭，否则等着
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">avail</span><span class="p">[</span><span class="n">lhs</span><span class="p">]</span> <span class="o">=</span> <span class="n">avail</span><span class="p">[</span><span class="n">rhs</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">//一下子拿两个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">avail</span><span class="p">[</span><span class="n">lhs</span><span class="p">]</span> <span class="o">=</span> <span class="n">avail</span><span class="p">[</span><span class="n">rhs</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">//一下子还回去两个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><font color="red">与上面那个失败的例子相比，这个程序里面的哲♂️学家<b>一看看左右两边的叉子</b>，<b>拿取和归还也是按双</b>，不会再像前面那样一个一个拿，最后造成死锁的情况</font>。</li>
</ul>
<h3 id="忘了信号量让一个人集中管理叉子吧">忘了信号量，让一个人集中管理叉子吧！</h3>
<p>“Leader/follower” - 生产者/消费者</p>
<ul>
<li>分布式系统中非常常见的解决思路 (HDFS, &hellip;)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tphilosopher</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">send_request</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">EAT</span><span class="p">);</span> <span class="c1">//向waiter请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">P</span><span class="p">(</span><span class="n">allowed</span><span class="p">[</span><span class="n">id</span><span class="p">]);</span> <span class="c1">// waiter 会把叉子递给哲学家（这个过程需要等）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">philosopher_eat</span><span class="p">();</span> <span class="c1">//干饭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">send_request</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">DONE</span><span class="p">);</span> <span class="c1">//发请求归还
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Twaiter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span> <span class="o">=</span> <span class="n">receive_request</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">EAT</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">DONE</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter6-13.png" title="/img/Operating System/chapter6-13.png" data-thumbnail="/img/Operating System/chapter6-13.png" data-sub-html="<h2>和上面的例子很像，用一个服务员做总管理</h2>">
        
    </a><figcaption class="image-caption"><code>和上面的例子很像，用一个服务员做总管理</code></figcaption>
    </figure>
<ul>
<li>这个是一个<b>集中式算法</b>，要比<b>分布式算法</b>更容易整对,<code>Twaiter</code>是一个调度器</li>
</ul>
<h3 id="忘了那些复杂的同步算法吧">忘了那些复杂的同步算法吧！</h3>
<ul>
<li>
<p>你可能会觉得，管叉子的人是性能瓶颈</p>
<ul>
<li>
<p>一大桌人吃饭，每个人都叫服务员的感觉</p>
</li>
<li>
<p>$Premature\ optimization\ is\ the\ root\ of\ all\ evil\ (D. E. Knuth)\newline$</p>
</li>
<li>
<p><b>与数据结构不同，OS更多考虑现实情况</b></p>
</li>
</ul>
</li>
<li>
<p><font color="red"><b>抛开 workload 谈优化就是耍流氓</b></font></p>
<ul>
<li>
<p>吃饭的时间通常远远大于请求服务员的时间</p>
</li>
<li>
<p>如果一个 manager 搞不定，可以分多个 (fast/slow path)（多个服务员+总服务员，每个服务员都有一把叉子）</p>
<ul>
<li>把系统设计好，使集中管理不成为瓶颈
<ul>
<li><a href="https://www.usenix.org/conference/nsdi20/presentation/brooker" target="_blank" rel="noopener noreffer">Millions of tiny databases</a> (NSDI'20)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何在多处理器上协同多个线程完成任务？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>实现同步的方法
<ul>
<li>条件变量、信号量；生产者-消费者问题</li>
<li>Job queue 可以实现几乎任何并行算法</li>
</ul>
</li>
<li>不要 “自作聪明” 设计算法，小心求证</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>END<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>in 2023-03-12 15:30</p>
<p>这章好™️的难，感觉是本门课听到目前为止除了第三章以外最吃力的一节课之一了，可能也和前置知识缺失有关（毕竟不是南大✋）</p>
<ul>
<li>
<p>而且发现有很多东西要看了</p>
<ul>
<li>
<p>《CSAPP》第12章</p>
</li>
<li>
<p>《UNIX环境高级编程》第15章（之前<a href="https://z217blog.cn" target="_blank" rel="noopener noreffer">z217</a>学长就推荐了这本书）</p>
</li>
<li>
<p>C++多线程部分的标准库，不然力扣的题做不了，而且后面这个还要用</p>
</li>
</ul>
</li>
</ul>
<p><del>有时间赶紧看(bushi</del></p>
</div>
        </div>
    </div>
<h2 id="补充进程调度scheduling">补充：进程调度$(Scheduling)$</h2>
<blockquote>
<p>参考<b>清华大学</b>$rCore$课程资料——<a href="http://rcore-os.cn/rCore-Tutorial-Book-v3/chapter5/4scheduling.html" target="_blank" rel="noopener noreffer">进程调度</a>——补充于2023-4-15</p>
</blockquote>
<h3 id="导读">导读</h3>
<ul>
<li>
<p>计算机内存中<b><u>可执行的程序个数大于处理器个数时</u></b>，这些程序可通过共享处理器来完成各自的任务。而操作系统负责让它们能够<b><u>高效合理地共享处理器资源</u></b>，这就引入了调度（<code>scheduling</code>）这个概念。进程调度（也称处理器调度）是进程管理的重要组成部分。</p>
</li>
<li>
<p>调度的一般定义</p>
<ul>
<li>在一定的约束条件下，把<b>有限的资源</b>在时间上分配给若干个任务，以<b>满足或优化一个或多个性能指标</b>。</li>
<li>对于计算机系统而言，就是在一台计算机中运行了多个进程，操作系统把有限的处理器在时间上分配给各个进程，以满足或优化进程执行的性能指标。</li>
</ul>
</li>
<li>
<p>核心问题：<b>操作系统如何通过进程调度来提高进程和系统的性能</b></p>
</li>
<li>
<p>细化为子问题</p>
<ul>
<li>运行进程的约束条件是啥？</li>
<li>有哪些调度策略和算法？</li>
<li>调度的性能指标是啥？</li>
<li>如何评价调度策略和算法？</li>
</ul>
</li>
</ul>
<h3 id="批处理系统的调度">批处理系统的调度</h3>
<ul>
<li>在批处理系统下，应用<b>以科学计算为主，I/O操作较少，</b>且I/O操作主要集中在应用开始和结束的一小段时间，应用的执行时间主要消耗在占用处理器进行计算上，且应用的大致执行时间一般可以预估到。</li>
</ul>
<h4 id="约束条件">约束条件</h4>
<ul>
<li>批处理系统中的进程有如下一些约束/前提条件：</li>
</ul>
<ol>
<li>每个进程<b><u>同时到达</u></b>。</li>
<li>每个进程的执行时间相同。（为了贴合实际也可以改变一些约束条件，比如将条件2改为：<code>每个进程的执行时间不同</code>）</li>
<li>进程的执行时间是<b>已知的</b>。</li>
<li>进程在整个执行过程期间很少执行I/O操作。（可理解为在操作系统调度过程中，<b><u>可以忽略进程执行I/O操作的开销</u></b>）</li>
<li>进程在执行过程中<b>不会被抢占</b>。</li>
</ol>
<h4 id="性能指标">性能指标</h4>
<ul>
<li>
<p>我们还需给出性能指标，用于衡量，比较和评价不同的调度策略。对于批处理系统中的一般应用而言，可以只有一个性能指标：周转时间（<code>turn around time</code>），即进程完成时间与进程到达时间的差值：$T_{周转时间}=T_{完成时间}-T_{到达时间}$</p>
</li>
<li>
<p>由于前提条件1 明确指出<b>所有进程在同一时间到达</b>， 所以$T_{到达时间}=0$，因此$T_{周转时间}=T_{完成时间}-T_{到达时间}=T_{完成时间}$。除了总的周转时间，我们还需要关注平均周转时间这样的统计值：</p>
</li>
</ul>
<p>$$
T_{平均周转时间}=\frac{\sum_{i=1}^{就绪进程个数} T_{周转时间_i}}{就绪进程个数}
$$</p>
<ul>
<li><font color="red"><b>对于单个进程而言，平均周转时间是一个更值得关注的性能指标</b></font></li>
</ul>
<h4 id="先来先服务">先来先服务</h4>
<ul>
<li>
<p>先来先服务（<code>first-come first-severd</code>，也称<code>First-in first-out</code>，先进先出）调度策略的基本思路就是<b><u>按进程请求处理器的先后顺序来使用处理器</u></b>。在具体实现上，操作系统首先会建立一个<b>就绪调度队列（简称就绪队列）</b>和一个<b>等待队列（也称阻塞队列）</b>。</p>
</li>
<li>
<p>大致的调度过程如下</p>
<ul>
<li>操作系统每次执行调度时，都是从就绪队列的<b>队头</b>取出一个进程来执行</li>
<li><b>当一个应用被加载到内存，并创建对应的进程，设置进程为<font color="red">就绪进程</font></b>，按进程到达的先后顺序，把进程放入<b><font color="red">就绪调度队列</font></b>的队尾</li>
<li>当正在运行的进程<b>主动放弃</b>处理器时，操作系统会把该进程放到<b>就绪队列<font color="red">末尾</font></b>，并从<b>就绪队列<font color="red">头</font></b>取出一个进程执行</li>
<li>当正在运行的进程<b>执行完毕</b>时，操作系统会<font color="red"><b>回收该进程所在资源</b></font>，并从<b>就绪队列<font color="red">头</font></b>取出一个进程执行</li>
<li>当正在运行的进程需要<b>等待某个事件或资源时</b>，操作系统会把该进程<b>从<font color="red">就绪队列</font>中移出，放到<font color="red">等待队列</font>中（<font color="orange">此时这个进程从就绪进程变成等待进程</font>），并从<font color="red">就绪队列头</font>取出下一个进程执行</b></li>
<li>当等待进程所<b>等待的某个事件出现或等待的资源得到满足时</b>，操作系统会把该进程<font color="red"><b>转为就绪进程</b></font>，并会把该进程<b>从<font color="red">等待队列</font>中移出，并放到<font color="red">就绪队列末尾</font></b></li>
</ul>
</li>
<li>
<p>该调度策略的优点是简单，容易实现。对于满足1~5约束条件的执行环境，用这个调度策略的平均周转时间性能指标也很好。如果在一个在较长的时间段内，每个进程都能结束，那么公平性这个指标也是能得到保证的</p>
</li>
<li>
<p>操作系统不会主动打断进程的运行</p>
</li>
</ul>
<h4 id="最短作业优先">最短作业优先</h4>
<ul>
<li>
<p>满足1~5的约束条件的执行环境太简化和理想化了，在实际系统中，每个应用的执行时间很可能不同，所以约束条件2“每个进程的执行时间相同”就不合适了。如果把约束条件2改为 <b>“每个进程的执行时间不同”</b>，那么在采用先来先服务调度策略的系统中，<b><u>可能就会出现短进程不得不等长进程结束后才能运行的现象，导致短进程的等待时间太长，且系统的平均周转时间也变长了</u></b></p>
</li>
<li>
<p>假设有两个进程$P_A、P_B$，它们大致同时到达，但$P_A$稍微快一点，进程$P_A$执行时间为100，进程$P_B$的执行时间为20。如果操作系统采用<b>先来先服务</b>的调度策略，进程的平均周转时间为：$\frac{P_A周转时间+P_B周转时间}{2}=\frac {100+120}{2} = 110$</p>
</li>
<li>
<p>但如果操作系统先调度进程$P_B$，那么进程的平均周转时间为：$\frac{P_B周转时间+P_A周转时间}{2}=\frac {20+120}{2} = 70$</p>
</li>
<li>
<p>可以看到，<b>如果采用先来先服务调度策略，<font color="red">执行时间短的进程（简称短进程）可被排在执行时间长的进程（长进程）后面，导致进程的平均周转时间变长</font>（长进程首先执行导致了后面的进程等待时间过长）</b></p>
</li>
<li>
<p>为应对短进程不得不等长进程结束后才能运行的问题，我们可以想到一个调度的方法：<b>优先让短进程执行。这就是<font color="red">最短作业优先（<code>Shortest Job First</code>，简称<code>SJF</code>）</font>调度策略。其实上面让PB先执行的调度方法，就是采用了最短作业优先策略</b>。</p>
</li>
<li>
<p>在更新约束条件2的前提下，如果我们把平均周转时间作为唯一的性能指标，那么SJF是一个最优调度算法</p>
</li>
<li>
<p>虽然SJF调度策略在理论上表现很不错，但在具体实现中，<b>需要对处于就绪队列上的进程按执行时间进行排序，这会引入一定的调度执行开销</b>。<u>而且如果进一步放宽约束，贴近实际情况，SJF就会显现出它的<code>不足</code></u>。如果我们放宽约束条件1：</p>
</li>
</ul>
<ol>
<li>每个进程可以在不同时间到达</li>
</ol>
<blockquote>
<p>那么可能会发生一种情况，当前正在运行的进程还需 $k$ 执行时间才能完成，这时来了一个执行时间为 $h$ 的进程，且 $h &lt; K$ ，但根据<code>约束条件5</code>，<b>操作系统不能强制切换正在运行的进程</b>。所以，在这种情况下，最短作业优先的<b>含义就不是那么确切了</b>，<b>而且在理论上，SJF也就不是最优调度算法了</b></p>
</blockquote>
<ul>
<li>例如，操作系统采用SJF调度策略（不支持抢占进程），有两个进程，$P_A$在时间0到达，执行时间为100， $P_B$在时间20到达，执行时间为20，那么周转时间为</li>
</ul>
<p>$$
(P_A执行结束-P_A开始执行)+(P_B执行结束-P_B开始执行)=(100-0)+(120-20)=200
$$</p>
<p>平均周转时间：$\frac{200}{2}=100$</p>
<h3 id="交互式系统的调度">交互式系统的调度</h3>
<ul>
<li>交互式系统是指支持人机交互和各种$I/O$交互的计算机系统。可抢占任务执行的分时多任务操作系统对人机交互性和$I/O$及时响应更加友好，对进程特征的约束条件进一步放宽，进程的<b>可抢占特性</b>需要我们重新思考如何调度</li>
</ul>
<h4 id="约束条件-1">约束条件</h4>
<ul>
<li>交互式系统中的进程有如下一些约束/前提条件：</li>
</ul>
<ol>
<li>每个进程可<b>不同时间到达</b></li>
<li>每个进程的<b>执行时间不同</b></li>
<li>进程的执行时间是已知的</li>
<li><b>进程在整个执行过程期间会执行$I/O$操作</b></li>
<li><b>进程在执行过程中会被抢占</b></li>
</ol>
<ul>
<li>相对于批处理操作系统，约束条件4发生了变化，<font color="red"><b>这意味着在进程执行过程中，操作系统不能忽视其I/O操作</b></font>。约束条件5也发生了改变，即<b><font color="red">进程可以被操作系统随时打断和抢占</font></b></li>
</ul>
<h4 id="性能指标-1">性能指标</h4>
<ul>
<li>操作系统支持任务/进程被抢占的一个重要目标是提高用户的交互性体验和减少$I/O$响应时间。用户希望计算机系统能及时响应他发出的$I/O$请求（如键盘、鼠标等），但平均周转时间这个性能指标不足以反映人机交互或$I/O$响应的性能。所以，我们需要定义新的性能指标 – 响应时间（<code>response time</code>）：</li>
</ul>
<p>$$
T_{响应时间}=T_{首次执行}-T_{到达时间}
$$</p>
<ul>
<li>而对应的平均响应时间是：</li>
</ul>
<p>$$
T_{平均响应时间}=\frac{T_{响应时间}}{就绪进程个数}
$$</p>
<blockquote>
<p>例如，操作系统采用<code>SJF</code>调度策略（不支持抢占进程），有两个进程，$P_A$在时间0到达，执行时间为100， $P_B$在时间20到达，执行时间为20，那么$P_A$的响应时间为0，$P_B$为80，平均响应时间为 40 。</p>
</blockquote>
<h4 id="最短完成时间优先stcf">最短完成时间优先（<code>STCF</code>）</h4>
<ul>
<li>
<p>由于约束条件5表示了操作系统允许抢占，那么我们就可以实现一种<font color="red">支持进程抢占</font>的<b>改进型<code>SJF</code>调度策略</b>，即<b>最短完成时间优先（<code>Shortest Time to Complet First</code>）调度策略</b>。</p>
</li>
<li>
<p>基于前述的例子，操作系统采用STCF调度策略，有两个进程，PA在时间0到达，执行时间为100， PB在时间20到达，执行时间为20，那么周转时间为<b>（注意这里面PB可以抢占PA了，所以PA的完成时间变成了$100+20=120$）</b>：</p>
</li>
</ul>
<p>$$
\begin{align}
&amp;(120 - 0) + (40 - 20) = 140\newline
&amp;T_{平均周转时间}=\frac{140}{2}=70\newline
\end{align}
$$</p>
<ul>
<li>
<p>平均周转时间为 70 。可以看到，如果采用<code>STCF</code>调度策略，相比于<code>SJF</code>调度策略，<b>在<font color="red">周转时间</font>这个性能指标上得到了改善</b></p>
</li>
<li>
<p><b>但对于<font color="red">响应时间</font>而言，可能就不这么好了</b>。考虑一个例子，有两个用户发出了执行两个进程的请求，且两个进程大约同时到达，PA和PB的执行时间都为20。我们发现，无论操作系统采用FIFO/SJF/STCF中的哪一种调度策略，<u>某一个用户不得不等待20个时间单位后，才能让他的进程开始执行，这是一个非常不好的交互体验</u>。从性能指标上看，响应时间比较差。 这就引入了新的问题：<b><u>操作系统如何支持看重响应时间这一指标的应用程序？</u></b></p>
</li>
</ul>
<h4 id="基于时间片的轮转">基于时间片的轮转</h4>
<ul>
<li>如果操作系统分给每个运行的进程的运行时间是一个足够小的时间片（<code>time slice，quantum</code>），<b>时间片一到，就<font color="red">抢占当前进程并切换到另外一个进程执行。</font></b></li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter5 并发控制：互斥</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter5/</link>
    <pubDate>Wed, 08 Mar 2023 17:23:11 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter5/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-08 17:30</p>
<p>继续看，并发真™️👨</p>
</div>
        </div>
    </div>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>状态机、状态机、状态机</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何在多处理器上实现线程互斥？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>自旋锁的实现</li>
<li>互斥锁的实现</li>
</ul>
<h2 id="共享内存上的互斥">共享内存上的互斥</h2>
<h3 id="回顾并发编程">回顾：并发编程</h3>
<p>理解并发的工具</p>
<ul>
<li>线程 = 人 (大脑能完成局部存储和计算)</li>
<li>共享内存 = 物理世界 (物理世界天生并行)</li>
<li>一切都是状态机</li>
</ul>
<h3 id="回顾互斥算法">回顾：互斥算法</h3>
<p>互斥 (mutual exclusion)，“互相排斥”</p>
<ul>
<li>实现 <code>lock_t</code> 数据结构和 <code>lock/unlock</code> API:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">lock_t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>一把 “排他性” 的锁——对于锁对象 <code>lk</code></p>
<ul>
<li>如果某个线程持有锁，则其他线程的 <code>lock</code> 不能返回</li>
</ul>
<h3 id="在共享内存上实现互斥">在共享内存上实现互斥</h3>
<p>失败的尝试</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/mutex-bad.py" target="_blank" rel="noopener noreffer">mutex-bad.py</a></li>
</ul>
<hr>
<p>(部分) 成功的尝试</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a></li>
</ul>
<hr>
<p>实现互斥的根本困难：不能同时读/写共享内存</p>
<ul>
<li>load (环顾四周) 的时候不能写，只能 “看一眼就把眼睛闭上”
<ul>
<li>看到的东西马上就过时了</li>
</ul>
</li>
<li>store (改变物理世界状态) 的时候不能读，只能 “闭着眼睛动手”
<ul>
<li>也不知道把什么改成了什么</li>
</ul>
</li>
<li>这是<del>简单、粗暴 (稳定)、有效</del>的《操作系统》课</li>
</ul>
<h2 id="自旋锁-spin-lock">自旋锁 (Spin Lock)</h2>
<h3 id="解决问题的两种方法">解决问题的两种方法</h3>
<blockquote>
<p>提出算法、解决问题 (Dekker/Peterson/&hellip;&rsquo;s Protocols)</p>
</blockquote>
<p>或者……</p>
<blockquote>
<p>改变假设 (软件不够，硬件来凑$\Longrightarrow$ x86架构的风格，软件指令做不好直接写一个指令集让硬件这么做hhh)</p>
</blockquote>
<hr>
<p>假设硬件能为我们提供一条 “瞬间完成” 的读 + 写指令</p>
<ul>
<li>请所有人闭上眼睛，看一眼 (load)，然后贴上标签 (store)
<ul>
<li>如果多人同时请求，硬件选出一个 “胜者”</li>
<li>“败者” 要等 “胜者” 完成后才能继续执行</li>
</ul>
</li>
</ul>
<h3 id="x86-原子操作lock-指令前缀">x86 原子操作：<code>LOCK</code> 指令前缀</h3>
<p>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/sum-atomic.c" target="_blank" rel="noopener noreffer"><code>sum-atomic.c</code></a></p>
<ul>
<li><code>sum = 200000000</code></li>
</ul>
<hr>
<p>Atomic exchange (load + store)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">xchg</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newval</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;lock xchg %0, %1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">:</span> <span class="s">&#34;+m&#34;</span><span class="p">(</span><span class="o">*</span><span class="n">addr</span><span class="p">),</span> <span class="s">&#34;=a&#34;</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;1&#34;</span><span class="p">(</span><span class="n">newval</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><b>重点就是asm内联汇编那句，这里是“一气呵成”的</b></p>
</li>
<li>
<p>更多的原子指令：<a href="https://en.cppreference.com/w/cpp/header/stdatomic.h" target="_blank" rel="noopener noreffer">stdatomic.h</a> (C11)</p>
</li>
</ul>
<h3 id="用-xchg-实现互斥也就是自旋锁的本质实现过程">用 <code>xchg</code> 实现互斥（也就是自旋锁的本质实现过程）</h3>
<ul>
<li>xchg在之前的<a href="https://jungle430.github.io/posts/operating-system/support2" target="_blank" rel="noopener noreffer">文章</a>中有提到过</li>
</ul>
<p>如何协调宿舍若干位同学上厕所问题？</p>
<ul>
<li>在厕所门口放一个桌子 (共享变量)
<ul>
<li>初始时，桌上是 🔑</li>
</ul>
</li>
</ul>
<hr>
<p>实现互斥的协议</p>
<ul>
<li>想上厕所的同学 (一条 xchg 指令)
<ul>
<li>天黑请闭眼</li>
<li>看一眼桌子上有什么 (🔑 或 🔞)</li>
<li>把 🔞 放到桌上 (覆盖之前有的任何东西)</li>
<li>天亮请睁眼；看到 🔑 才可以进厕所哦</li>
</ul>
</li>
<li>出厕所的同学
<ul>
<li>把 🔑 放到桌上</li>
</ul>
</li>
</ul>
<h3 id="实现互斥自旋锁">实现互斥：自旋锁</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">table</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">got</span> <span class="o">=</span> <span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">table</span><span class="p">,</span> <span class="n">NOPE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">got</span> <span class="o">==</span> <span class="n">NOPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">got</span> <span class="o">==</span> <span class="n">YES</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">table</span><span class="p">,</span> <span class="n">YES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span> <span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>重要的还是xchg这个东西，保证那一步是原子性的，就没有其他事情了</li>
</ul>
<h3 id="实现互斥自旋锁-contd">实现互斥：自旋锁 (cont&rsquo;d)</h3>
<p>并发编程：千万小心</p>
<ul>
<li>做详尽的测试 (在此省略，你们做 Labs 就知道了)</li>
<li>尽可能地证明 (<a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py" target="_blank" rel="noopener noreffer">model-checker.py</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/spinlock.py" target="_blank" rel="noopener noreffer">spinlock.py</a>)</li>
</ul>
<hr>
<p>原子指令的模型</p>
<ul>
<li>保证之前的 store 都写入内存</li>
<li>保证 load/store 不与原子指令乱序</li>
</ul>
<h3 id="原子指令的诞生bus-lock-80486">原子指令的诞生：Bus Lock (80486)</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-09 10:00</p>
<p>早起开完SB大会，✋接着看</p>
<p>咖啡机里面的咖啡真提神，估计下午毛概得狠狠睡一把</p>
</div>
        </div>
    </div>
<ul>
<li>486 (20-50MHz) 就支持 <code>dual-socket</code> 了</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter5-1.jpg" title="/img/Operating System/chapter5-1.jpg" data-thumbnail="/img/Operating System/chapter5-1.jpg" data-sub-html="<h2>80486</h2>">
        
    </a><figcaption class="image-caption">80486</figcaption>
    </figure>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>如果CPU1需要执行<code>add x, 1</code>，那么需要分成3步</p>
<ul>
<li>从memory里面load</li>
<li>再把这个值add 1之后先放入一个内部的寄存器里</li>
<li>再store把m的值写回内存里</li>
</ul>
</li>
<li>
<p>为什么486时代会诞生<b>LOCK</b>这样的指令呢？</p>
<ul>
<li>因为涉及了两个CPU面对同一个memory的状况，所以需要对memory进行lock的操作</li>
</ul>
</li>
<li>
<p>设计方法</p>
<ul>
<li>x86的指令集有指令的前缀（比如<code>rep</code>），我们让<code>lock</code>也变成一个<b>指令前缀</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">lock + |指令|
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><u>当CPU开始读指令的时候，它会先读到lock指令，这个时候就上锁（也即是对应的CPU拿到了总线的锁）</u></li>
<li><u>等到CPU拿到总线的锁之后，它会再执行后面的部分</u></li>
<li><u>把有关指令执行完成之后再把锁释放掉</u></li>
</ul>
<h4 id="负担">负担</h4>
<ul>
<li><b>今天的CPU与memory之间都有各自的cache，而且cache已经和CPU集成在一个元件上面了，而且是多级cache</b></li>
<li><b>486时代仅仅只有外面的一块cache（而且这块cache在主板上），所以说只要CPU拿到了总线🔒的控制权，就把自己和外面的一切隔离开了</b></li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p><b>多级cache会使得lock变得很麻烦</b></p>
</li>
<li>
<p>例子：一个数据在两个CPU的cache里面都有副本</p>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<ul>
<li><b>这个时候如果CPU1要lock访问m的话，就要将cache21里面的m副本“踢掉”</b> $\Longrightarrow$ 也就是今天inter一个很大的历史包袱：缓存的一致性 $\Longrightarrow$ 解决方案：将所有的cache用总线连接起来</li>
</ul>
<div class="mermaid" id="id-4"></div>
<ul>
<li>一旦其中有一个数据需要被lock，那么总线需要遍历一遍所有CPU的cache，如果发现了该数据的副本，就要将该数据从其他CPU的cache里面“踢掉”，<b>这是很浪费时间的</b></li>
</ul>
<h3 id="lock-指令的现代实现">Lock 指令的现代实现</h3>
<p>在 L1 cache 层保持一致性 (ring/mesh bus)</p>
<ul>
<li>相当于每个 cache line 有分别的锁</li>
<li>store(x) 进入 L1 缓存即保证对其他处理器可见
<ul>
<li>但要小心 store buffer 和乱序执行</li>
</ul>
</li>
</ul>
<hr>
<p>L1 cache line 根据状态进行协调</p>
<ul>
<li>M (Modified), 脏值</li>
<li>E (Exclusive), 独占访问</li>
<li>S (Shared), 只读共享</li>
<li>I (Invalid), 不拥有 cache line</li>
</ul>
<h3 id="risc-v-另一种原子操作的设计">RISC-V: 另一种原子操作的设计</h3>
<p>考虑常见的原子操作：</p>
<ul>
<li>atomic test-and-set
<ul>
<li><code>reg = load(x); if (reg == XX) { store(x, YY); }</code></li>
</ul>
</li>
<li>lock xchg
<ul>
<li><code>reg = load(x); store(x, XX);</code></li>
</ul>
</li>
<li>lock add
<ul>
<li><code>t = load(x); t++; store(x, t);</code></li>
</ul>
</li>
</ul>
<hr>
<p><b>它们的本质都是</b></p>
<ol>
<li>load</li>
<li>exec (处理器本地寄存器的运算)</li>
<li>store</li>
</ol>
<h3 id="load-reservedstore-conditional-lrsc">Load-Reserved/Store-Conditional (LR/SC)</h3>
<ul>
<li>LR: 在内存上标记 reserved (盯上你了)，中断、其他处理器写入都会导致标记消除
<ul>
<li><b>我先读，读完之后在这个物品上面做一个标记</b></li>
<li><b>标记一直在物品上，同时在做本地的计算</b></li>
<li><b>本地计算算完了，该写了</b></li>
<li><b>写的时候要先检测标记，只有标记还在的时候才可以写，否则返回fail，只能再次尝试重新上锁写入</b></li>
</ul>
</li>
<li><u>本地内存的计算不重要，重要的是<b>共享内存的计算</b></u></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">lr.w rd, (rs1)
</span></span><span class="line"><span class="cl">  rd = M[rs1]
</span></span><span class="line"><span class="cl">  reserve M[rs1]
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>SC: 如果 “盯上” 未被解除，则写入</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sc.w rd, rs2, (rs1)
</span></span><span class="line"><span class="cl">  if still reserved:
</span></span><span class="line"><span class="cl">    M[rs1] = rs2
</span></span><span class="line"><span class="cl">    rd = 0
</span></span><span class="line"><span class="cl">  else:
</span></span><span class="line"><span class="cl">    rd = nonzero
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="compare-and-swap-的-lrsc-实现">Compare-and-Swap 的 LR/SC 实现</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">cas</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmp_val</span><span class="p">,</span> <span class="kt">int</span> <span class="n">new_val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">old_val</span> <span class="o">=</span> <span class="o">*</span><span class="n">addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">old_val</span> <span class="o">==</span> <span class="n">cmp_val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="n">new_val</span><span class="p">;</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cas:
</span></span><span class="line"><span class="cl">  lr.w  t0, (a0)       # Load original value.
</span></span><span class="line"><span class="cl">  bne   t0, a1, fail   # Doesn’t match, so fail.
</span></span><span class="line"><span class="cl">  sc.w  t0, a2, (a0)   # Try to update.
</span></span><span class="line"><span class="cl">  bnez  t0, cas        # Retry if store-conditional failed.
</span></span><span class="line"><span class="cl">  li a0, 0             # Set return to success.
</span></span><span class="line"><span class="cl">  jr ra                # Return.
</span></span><span class="line"><span class="cl">fail:
</span></span><span class="line"><span class="cl">  li a0, 1             # Set return to failure.
</span></span><span class="line"><span class="cl">  jr ra                # Return
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>lr，sc还可以检测🔒的拥堵程度</li>
</ul>
<h4 id="lrsc-的硬件实现">LR/SC 的硬件实现</h4>
<ul>
<li>
<p>BOOM (Berkeley Out-of-Order Processor)</p>
</li>
<li>
<p><a href="https://github.com/riscv-boom/riscv-boom" target="_blank" rel="noopener noreffer">riscv-boom</a></p>
</li>
<li>
<p><a href="https://github.com/riscv-boom/riscv-boom/blob/master/src/main/scala/lsu/dcache.scala#L655" target="_blank" rel="noopener noreffer">lsu/dcache.scala</a></p>
</li>
<li>
<p>留意s2_sc_fail的条件</p>
<ul>
<li>s2 是流水线 Stage 2</li>
</ul>
</li>
<li>
<p>(yzh 扒出的代码)</p>
</li>
</ul>
<h2 id="互斥锁-mutex-lock">互斥锁 (Mutex Lock)</h2>
<h3 id="自旋锁的缺陷">自旋锁的缺陷</h3>
<ul>
<li>
<p>性能问题 (0)</p>
<ul>
<li>自旋 (共享变量) 会触发<b>处理器间的缓存同步，延迟增加（总线遍历cache踢副本）</b></li>
</ul>
</li>
<li>
<p>性能问题 (1)</p>
<ul>
<li>
<p>除了进入临界区的线程，其他处理器上的线程都在空转<b>（看自旋锁的实现代码，没有拿到🔒的线程在空转死循环）</b></p>
<ul>
<li>会造成多CPU机器利用率过低的问题（就有🔒的在工作）</li>
</ul>
</li>
<li>
<p><b>争抢锁的处理器越多，利用率越低</b></p>
</li>
</ul>
</li>
<li>
<p>性能问题 (2)</p>
<ul>
<li>获得自旋锁的线程<b>可能被操作系统切换出去（出现在单CPU时间片轮转的条件下，轮转时间片导致拿🔒的线程休眠，相当于你拿着🔒回宿舍睡觉，全教室的人只能等着你 $\Longrightarrow$ 还在死循环里面空转）</b>
<ul>
<li>操作系统不 “感知” 线程在做什么</li>
<li>(但为什么不能呢？) $\Longrightarrow$ 课后思考</li>
</ul>
</li>
</ul>
</li>
<li>
<p><b>实现 100% 的资源浪费</b></p>
</li>
</ul>
<div class="mermaid" id="id-5"></div>
<h3 id="scalability-性能的新维度">Scalability: 性能的新维度</h3>
<blockquote>
<p><u>同一份计算任务，时间 (CPU cycles) 和空间 (mapped memory) 会随处理器数量的增长而变化</u>。</p>
<p><b>注意和数据结构里面的计算数据量n区别，这里面衡量的标准是依据处理器的数量而定的</b></p>
</blockquote>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/sum-scalability.c" target="_blank" rel="noopener noreffer">sum-scalability.c</a>，<a href="https://jyywiki.cn/pages/OS/2022/demos/stat.py" target="_blank" rel="noopener noreffer">stat.py</a></li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/thread-sync.h" target="_blank" rel="noopener noreffer">thread-sync.h</a></li>
<li>严谨的统计很难
<ul>
<li>CPU 动态功耗（散热跟不上只能做一峰⌚真👨（悲 ）</li>
<li>系统中的其他进程</li>
<li>……</li>
</ul>
</li>
<li><a href="https://www.cse.unsw.edu.au/~gernot/benchmarking-crimes.html" target="_blank" rel="noopener noreffer">Benchmarking crimes</a></li>
</ul>
<p>sum-scalability.c，里面用的就是<b>自旋锁</b>，在自旋锁的保护下执行sum++</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 10000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">spinlock_t</span> <span class="n">lock</span> <span class="o">=</span> <span class="n">SPIN_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">n</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nthread</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">n</span> <span class="o">=</span> <span class="n">N</span> <span class="o">/</span> <span class="n">nthread</span><span class="p">;</span> <span class="c1">//nthread是线程数量，n就是平摊下来每个线程要执行的sum++（也就是🔒）的数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nthread</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">sum</span> <span class="o">==</span> <span class="n">n</span> <span class="o">*</span> <span class="n">nthread</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>自旋锁的实现(来自<code>thread-sync.h</code>)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">spin_lock</span><span class="p">(</span><span class="n">spinlock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">intptr_t</span> <span class="n">value</span> <span class="o">=</span> <span class="n">atomic_xchg</span><span class="p">(</span><span class="n">lk</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">spin_unlock</span><span class="p">(</span><span class="n">spinlock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_xchg</span><span class="p">(</span><span class="n">lk</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-09 15:20</p>
<p>绷不住直接😪了，睡醒继续</p>
</div>
        </div>
    </div>
<ul>
<li>运行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc sum-scalability.c -O2 -lpthread
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:25:37 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.043s
</span></span><span class="line"><span class="cl">user    0m0.016s
</span></span><span class="line"><span class="cl">sys     0m0.021s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:25:40 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.229s
</span></span><span class="line"><span class="cl">user    0m0.337s
</span></span><span class="line"><span class="cl">sys     0m0.071s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:25:44 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.337s
</span></span><span class="line"><span class="cl">user    0m0.393s
</span></span><span class="line"><span class="cl">sys     0m0.166s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:26:21 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m1.316s
</span></span><span class="line"><span class="cl">user    0m2.176s
</span></span><span class="line"><span class="cl">sys     0m0.288s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:26:35 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m1.230s
</span></span><span class="line"><span class="cl">user    0m2.040s
</span></span><span class="line"><span class="cl">sys     0m0.255s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>现象：<b>同样的工作量，线程越多，效率越低</b></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter5-2.jpg" title="/img/Operating System/chapter5-2.jpg" data-thumbnail="/img/Operating System/chapter5-2.jpg" data-sub-html="<h2>图像</h2>">
        
    </a><figcaption class="image-caption">图像</figcaption>
    </figure>
<h3 id="自旋锁的使用场景">自旋锁的使用场景</h3>
<ul>
<li><b>两个重要的约束</b>
<ul>
<li>临界区几乎不“拥堵”$\Longrightarrow$ <b>几乎就只有一个线程进入临界区</b> $\Longrightarrow$ 这样争抢🔒的状况就会很少</li>
<li>持有自旋锁时禁止执行流切换 $\Longrightarrow$ 翻译成上面的人话就是禁止拿着🔒回宿舍😴 $\Longrightarrow$ <b>但是，我们的应用程序是做不到这一点的（如果应用程序能够防止自己在时间片轮转的时候被切出去，那么一个while(1);就能让电脑崩溃，操作系统是绝对禁止这样的事情的）</b></li>
</ul>
</li>
</ul>
<h4 id="使用场景操作系统内核的并发数据结构-短临界区">使用场景：操作系统内核的并发数据结构 (短临界区)</h4>
<ul>
<li><b>操作系统可以关闭中断和抢占</b> $\Longrightarrow$ 这就是和应用程序不一样的地方
<ul>
<li>保证锁的持有者在很短的时间内可以释放锁</li>
</ul>
</li>
<li>(如果是虚拟机呢&hellip;😂)
<ul>
<li>PAUSE 指令会触发 VM Exit $\Longrightarrow$ 防止有故障把物理机给卡死</li>
</ul>
</li>
<li>但依旧很难做好
<ul>
<li><a href="https://www.usenix.org/conference/osdi10/analysis-linux-scalability-many-cores" target="_blank" rel="noopener noreffer">An analysis of Linux scalability to many cores</a> (OSDI'10) （10年paper，吐槽Linux内核的自旋锁有多烂）</li>
</ul>
</li>
</ul>
<h3 id="实现线程--长临界区的互斥">实现线程 + 长临界区的互斥</h3>
<blockquote>
<p>作业那么多，与其干等 Online Judge 发布，不如把自己 (CPU) 让给其他作业 (线程) 执行？</p>
<p><u>说白了就是有事情卡住了就去干别的，别就瞎🐔8️⃣干等着这一件事（这也就是比自旋锁高明的地方）</u></p>
</blockquote>
<p>“让” 不是 C 语言代码可以做到的 (C 代码只能计算)</p>
<ul>
<li>
<p>把锁的实现放到操作系统里就好啦！$\Longrightarrow$ 系统调用</p>
<ul>
<li>
<p><code>syscall(SYSCALL_lock, &amp;lk);</code></p>
<ul>
<li><b>试图获得 <code>lk</code>，但如果失败，<u>就切换到其他线程</u> $\Longrightarrow$ 这个就是精髓</b></li>
</ul>
</li>
<li>
<p><code>syscall(SYSCALL_unlock, &amp;lk);</code></p>
<ul>
<li><b>释放 <code>lk</code>，如果有等待锁的线程就唤醒</b></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-09 19:15</p>
<p>干拌面吃完真撑的慌，下回还是吃汤面</p>
<p>晚上看完</p>
</div>
        </div>
    </div>
<h3 id="实现线程--长临界区的互斥-contd">实现线程 + 长临界区的互斥 (cont&rsquo;d)</h3>
<ul>
<li>
<p><b>操作系统 = 更衣室管理员</b></p>
</li>
<li>
<p>先到的人 (线程)</p>
<ul>
<li>成功获得手环，进入游泳馆</li>
<li><code>*lock = 🔒</code>，系统调用直接返回</li>
</ul>
</li>
<li>
<p>后到的人 (线程)</p>
<ul>
<li>不能进入游泳馆，排队等待</li>
<li><b>线程放入等待队列，执行线程切换 (yield)</b></li>
</ul>
</li>
<li>
<p>洗完澡出来的人 (线程)</p>
<ul>
<li>
<p>交还手环给管理员；管理员把手环再交给排队的人</p>
</li>
<li>
<p><b>如果等待队列不空，从等待队列中取出一个线程允许执行</b></p>
</li>
<li>
<p><b>如果等待队列为空，<code>*lock = ✅</code></b></p>
</li>
</ul>
</li>
<li>
<p><b><font color="red">管理员 (OS) 使用<u>自旋锁</u>确保自己处理手环的过程是原子的</font></b></p>
</li>
</ul>
<h2 id="futex--spin--mutex">Futex = Spin + Mutex</h2>
<h3 id="关于互斥的一些分析">关于互斥的一些分析</h3>
<ul>
<li>
<p>自旋锁 (线程直接共享 locked)</p>
<ul>
<li>
<p>更快的 fast path</p>
<ul>
<li>xchg 成功 → 立即进入临界区，开销很小</li>
</ul>
</li>
<li>
<p>更慢的 slow path</p>
<ul>
<li>xchg 失败 → 浪费 CPU 自旋等待（交换一些不是🔒，没用的东西）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>睡眠（互斥）锁 (通过系统调用访问 locked)</p>
<ul>
<li>
<p>更快的 slow path</p>
<ul>
<li>上锁失败线程不再占用 CPU</li>
</ul>
</li>
<li>
<p>更慢的 fast path</p>
<ul>
<li>即便上锁成功也需要<u>进出内核 (syscall)</u> $\Longrightarrow$ 速度相对比较慢</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="futex-fast-userspace-mutexes">Futex: Fast Userspace muTexes</h3>
<blockquote>
<p>解决方案：全都要</p>
</blockquote>
<div class="mermaid" id="id-6"></div>
<ul>
<li>
<p><b><font color="red">性能优化的最常见技巧</font></b></p>
<ul>
<li>看 average (frequent) case 而不是 worst case $\Longrightarrow$ <b>这里是和算法题做对比，算法题要保证所有可能的情况都可以被高效计算（worst case），而操作系统要求的则是大部分情况都可以被快速处理，少数的情况处理地慢也可以（average）</b></li>
</ul>
</li>
<li>
<p>POSIX 线程库中的互斥锁 (<code>pthread_mutex</code>) $\Longrightarrow$ 两种🔒的好处都得了</p>
</li>
<li>
<p>我们将<a href="https://jyywiki.cn/pages/OS/2022/demos/sum-scalability.c" target="_blank" rel="noopener noreffer">sum-scalability.c</a>里面的自旋锁换成互斥锁</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">mutex_t</span> <span class="n">lock</span> <span class="o">=</span> <span class="n">MUTEX_INIT</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>互斥锁的实现（通过syscall）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mutex_lock</span><span class="p">(</span><span class="n">mutex_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>   <span class="p">{</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">lk</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mutex_unlock</span><span class="p">(</span><span class="n">mutex_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span> <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="n">lk</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译+测试</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> 2023-03-09 20:11:45 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → gcc sum-scalability.c -O2 -lpthread
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:06 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.065s
</span></span><span class="line"><span class="cl">user    0m0.037s
</span></span><span class="line"><span class="cl">sys     0m0.019s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:12 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.180s
</span></span><span class="line"><span class="cl">user    0m0.121s
</span></span><span class="line"><span class="cl">sys     0m0.185s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:26 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.179s
</span></span><span class="line"><span class="cl">user    0m0.156s
</span></span><span class="line"><span class="cl">sys     0m0.152s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:28 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.106s
</span></span><span class="line"><span class="cl">user    0m0.100s
</span></span><span class="line"><span class="cl">sys     0m0.039s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:20:18 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.087s
</span></span><span class="line"><span class="cl">user    0m0.056s
</span></span><span class="line"><span class="cl">sys     0m0.060s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><b>可以看到当线程数量变多的时候，<code>pthread_mutex</code>处理的效率要远高于自旋锁</b></p>
</li>
<li>
<p>观察系统调用 (strace) $\Longrightarrow$ 太长了就复制一段</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">2023-03-09 20:11:24 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → strace -f ./a.out <span class="m">64</span>
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./a.out&#34;</span>, <span class="o">[</span><span class="s2">&#34;./a.out&#34;</span>, <span class="s2">&#34;64&#34;</span><span class="o">]</span>, 0x7ffe8bbc7370 /* <span class="m">64</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d83eca4000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffcb38f0700<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>无效的参数<span class="o">)</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56b2a000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>没有那个文件或目录<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>76495, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 76495, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56b17000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0P\237\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0&#34;</span>..., 48, 848<span class="o">)</span> <span class="o">=</span> <span class="m">48</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\24\0\0\0\3\0\0\0GNU\0i8\235HZ\227\223\333\350s\360\352,\223\340.&#34;</span>..., 68, 896<span class="o">)</span> <span class="o">=</span> <span class="m">68</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>2216304, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 2260560, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56800000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda56828000, 1658880, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x28000<span class="o">)</span> <span class="o">=</span> 0x7fda56828000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda569bd000, 360448, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1bd000<span class="o">)</span> <span class="o">=</span> 0x7fda569bd000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda56a15000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x214000<span class="o">)</span> <span class="o">=</span> 0x7fda56a15000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda56a1b000, 52816, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56a1b000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56b14000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7fda56b14740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7fda56b14a10<span class="o">)</span>         <span class="o">=</span> <span class="m">4614</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7fda56b14a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7fda56b150e0, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fda56a15000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55d83cf2f000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fda56b64000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7fda56b17000, 76495<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rt_sigaction<span class="o">(</span>SIGRT_1, <span class="o">{</span><span class="nv">sa_handler</span><span class="o">=</span>0x7fda568918f0, <span class="nv">sa_mask</span><span class="o">=[]</span>, <span class="nv">sa_flags</span><span class="o">=</span>SA_RESTORER<span class="p">|</span>SA_ONSTACK<span class="p">|</span>SA_RESTART<span class="p">|</span>SA_SIGINFO, <span class="nv">sa_restorer</span><span class="o">=</span>0x7fda56842520<span class="o">}</span>, NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rt_sigprocmask<span class="o">(</span>SIG_UNBLOCK, <span class="o">[</span>RTMIN RT_1<span class="o">]</span>, NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda55fff000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fda56000000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xc0\x0d\x30\x79\xa6\xc0\x9a\x32&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d83eca4000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55d83ecc5000<span class="o">)</span>                     <span class="o">=</span> 0x55d83ecc5000
</span></span><span class="line"><span class="cl">rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>, <span class="o">[]</span>, 8<span class="o">)</span>   <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda567ff910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda567ff910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda55fff000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda567ff640<span class="o">}</span>strace: Process <span class="m">4615</span> <span class="nv">attached</span>
</span></span><span class="line"><span class="cl"> <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4615<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4615</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> rseq<span class="o">(</span>0x7fda567fffe0, 0x20, 0, 0x53053053 &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... rseq resumed&gt;<span class="o">)</span>         <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> set_robust_list<span class="o">(</span>0x7fda567ff920, <span class="m">24</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda557fe000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... set_robust_list resumed&gt;<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda557ff000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>, <span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda55ffe910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda55ffe910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda557fe000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda55ffe640<span class="o">}</span>strace: Process <span class="m">4616</span> <span class="nv">attached</span>
</span></span><span class="line"><span class="cl"> <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4616<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4616</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> rseq<span class="o">(</span>0x7fda55ffefe0, 0x20, 0, 0x53053053 &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... rseq resumed&gt;<span class="o">)</span>         <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> set_robust_list<span class="o">(</span>0x7fda55ffe920, <span class="m">24</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda54ffd000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... set_robust_list resumed&gt;<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda54ffe000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;<span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda557fd910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda557fd910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda54ffd000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda557fd640<span class="o">}</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, 1<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">strace: Process <span class="m">4617</span> attached
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... clone3 resumed&gt; <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4617<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4617</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> rseq<span class="o">(</span>0x7fda557fdfe0, 0x20, 0, 0x53053053 &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... rseq resumed&gt;<span class="o">)</span>         <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> set_robust_list<span class="o">(</span>0x7fda557fd920, <span class="m">24</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda547fc000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... set_robust_list resumed&gt;<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda547fd000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;<span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda54ffc910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda54ffc910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda547fc000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda54ffc640<span class="o">}</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... clone3 resumed&gt; <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4618<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4618</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>, NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda53ffb000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda53ffc000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;<span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda547fb910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda547fb910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda53ffb000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda547fb640<span class="o">}</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>里面有很多类似73行的语句<code>[pid  4616] futex(0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;</code></li>
</ul>
<blockquote>
<p><strong>一、什么是futex？</strong></p>
<p>futex是Fast Userspace muTEX的缩写，该机制是由Rusty Russell、Hubertus Franke和Mathew Kirkwood在2.5.7版本的内核中引入，虽然名字中有互斥锁（mutex）的含义，但实际它是一种用于用户空间应用程序的通用同步工具（基于futex可以在userspace实现互斥锁、读写锁、condition variable等同步机制）。Futex组成包括：</p>
<ul>
<li>内核空间的等待队列</li>
<li>用户空间层的32-bit futex word（所有平台都是32bit，包括64位平台）</li>
</ul>
<p><b>在没有竞争的场景下，锁的获取和释放性能都非常高，不需要内核的参与，仅仅是通过用户空间的原子操作来修改futex word的状态即可</b>。在有竞争的场景下，如果线程无法获取futex锁，那么把自己放入到 wait queue中（陷入内核，有系统调用的开销），而在owner task释放锁的时候，如果检测到有竞争（等待队列中有阻塞任务），就会通过系统调用来唤醒等待队列中的任务，使其恢复执行，继续去持锁。如果没有竞争，那么也无需陷入内核。</p>
<p>摘自：<a href="https://zhuanlan.zhihu.com/p/568678633" target="_blank" rel="noopener noreffer">《什么是futex？》</a></p>
</blockquote>
<blockquote>
<p>Futex（Fast Userspace Mutex）是一种用户空间锁，它是Linux内核提供的一种同步原语，用于控制多个进程或线程之间的访问共享资源。Futex主要用于实现更高级别的同步原语，例如条件变量和读写锁。Futex提供了一种低开销的锁机制，当锁被持有时，它可以避免将线程或进程阻塞在内核空间。</p>
<p>在Futex中，锁的状态保存在用户空间中，而不是内核空间中，当线程或进程需要获取锁时，它会尝试将锁的状态从“未锁定”改为“锁定”状态。如果成功，线程或进程就可以访问共享资源。如果锁已被其他线程或进程占用，则它将在用户空间内忙等待，直到锁被释放。</p>
<p>Futex还支持一些其他的操作，例如等待一个特定的值或比较并交换值，这些操作可以用于实现条件变量和读写锁等高级别的同步原语。由于Futex的低开销和高效性，它成为了Linux系统中许多高级别同步原语的基础。</p>
<p>来自<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a></p>
</blockquote>
<ul>
<li>
<p><b>如果我们仔细观察就会发现，futex调用的数量远远小于lock和unlock的数量</b></p>
</li>
<li>
<p>gdb 调试</p>
<ul>
<li><code>set scheduler-locking on</code>, <code>info threads</code>, <code>thread X</code></li>
</ul>
</li>
</ul>
<h3 id="futex-fast-userspace-mutexes-contd">Futex: Fast Userspace muTexes (cont&rsquo;d)</h3>
<p>先在用户空间自旋</p>
<ul>
<li>如果获得锁，直接进入</li>
<li>未能获得锁，系统调用</li>
<li>解锁以后也需要系统调用
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/futex.py" target="_blank" rel="noopener noreffer">futex.py</a></li>
<li>更好的设计可以在 fast-path 不进行系统调用</li>
</ul>
</li>
</ul>
<p>futex.py</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Futex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span><span class="p">,</span> <span class="n">waits</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tryacquire</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Test-and-set (cmpxchg)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Same effect, but more efficient than xchg</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>     <span class="c1"># User</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;1&#39;</span> <span class="c1"># Kernel</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;1&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>      <span class="c1"># Kernel</span>
</span></span><span class="line"><span class="cl">                    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>                         <span class="c1"># User</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>                            <span class="c1"># User</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>                    <span class="c1"># Kernel</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;2&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;2&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t3</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;3&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;3&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t3</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t3&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;yellow&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;t3&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>python代码的优势：如果你想让一句代码原子执行——&gt;加入<code>yield breakpoint()</code></p>
</li>
<li>
<p><code>python3 model-checker.py futex.py | python3 visualize.py -t &gt; a.html </code>重定向，可视化</p>
</li>
<li>
<p><a href="https://github.com/Jungle430/check-for-NJU-OS" target="_blank" rel="noopener noreffer">样例仓库</a></p>
</li>
</ul>
<hr>
<p>RTFM (劝退)</p>
<ul>
<li>futex (7), futex (2)</li>
<li><a href="https://lwn.net/Articles/360699/" target="_blank" rel="noopener noreffer">A futex overview and update</a> (LWN)</li>
<li><a href="https://jyywiki.cn/pages/OS/manuals/futexes-are-tricky.pdf" target="_blank" rel="noopener noreffer">Futexes are tricky</a> (论 model checker 的重要性) $\Longrightarrow$ <u>同时也提示我们从最简单的写起，千万不要觉得自己行就装🖊搞大的</u></li>
<li>(我们不讲并发算法)</li>
</ul>
<h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何在多处理器系统上实现互斥？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>软件不够，硬件来凑 (自旋锁)</li>
<li>用户不够，内核来凑 (互斥锁)
<ul>
<li><b><font color="red">找到你依赖的假设，并大胆地打破它</font></b></li>
</ul>
</li>
<li>Fast/slow paths: 性能优化的重要途径</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter4 理解并发程序执行</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter4/</link>
    <pubDate>Mon, 06 Mar 2023 19:34:15 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter4/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="typeit"><div id="id-1" class=""></div></div>
<p>晚上看的，<b>Peterson</b>算法好™️的👨，证明等过两天有时间给看了</div>
        </div>
    </div>
<h2 id="理解并发程序执行">理解并发程序执行</h2>
<h3 id="复习">复习</h3>
<ul>
<li>一般程序执行</li>
</ul>
<div class="mermaid" id="id-2"></div>
<p>线程的栈帧会用一个<code>list</code>来存放</p>
<ul>
<li>多线程</li>
</ul>
<div class="mermaid" id="id-3"></div>
<p>T1,T2随机来回转换执行</p>
<ul>
<li><b>并发程序 = 多个执行流、共享内存的<u>状态机</u></b></li>
</ul>
<h3 id="画状态机理解并发程序">画状态机理解并发程序</h3>
<blockquote>
<p><u>互斥：保证两个线程不能同时执行一段代码</u></p>
</blockquote>
<ul>
<li>插入 “神秘代码”，使得 <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> (或者任意其他代码) 能够正常工作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 神秘代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">sum</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 神秘代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以通过<code>__sync_synchronize();</code>来保证原子操作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 或 int t = x;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>__sync_synchronize();</code>是GCC内置函数的一种，用于在编写多线程程序时确保在内存操作之前和之后的指令都不会被重排。</p>
<p>具体来说，这个函数是一个内存栅栏，用于告诉编译器不要把本条指令前面和后面的内存操作顺序交换，也就是防止编译器进行指令重排，保证在这个函数之前和之后的内存操作按照代码中的顺序执行。</p>
<p>这个函数在实现多线程锁、原子操作等场景中经常被使用，以确保线程间的同步和一致性。</p>
</blockquote>
<h4 id="失败的尝试">失败的尝试</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">locked</span> <span class="o">!=</span> <span class="n">UNLOCK</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">locked</span> <span class="o">=</span> <span class="n">LOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// critical section
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>原因</p>
<ul>
<li>看到的状态到真正做下一件事之间的状态是否被人改了？（<u>看到的东西仅仅只是一个历史，离做还有几个周期，而做是根据这个<b>“历史”</b>的状态来决定的</u>）$\Longrightarrow$ 和人眼看着东西对比，人眼是<b>一直在看的</b>，而CPU并行执行程序的时候，看这个指令执行完了之后可能CPU会去执行另一个线程的几条指令，这种情况下相当于这个人<b>看完后闭上眼睛等了几秒</b>，然后根据几秒前所看的东西来判断自己要干啥，<b>可是这个东西在前几秒可能已经让另一个线程的某些指令改过了</b></li>
<li><b>处理器默认不保证 load + store 的原子性（单操作可以保证）</b></li>
</ul>
</li>
<li>
<p>一种失败的情况</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOCK 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UNLOCK 0
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>  <span class="c1">//T2在这个时候也执行到了locked != UNLOCK的判断，而lock = LOCK,T2也进去了，没锁住！
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">locked</span> <span class="o">!=</span> <span class="n">UNLOCK</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//&lt;--------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>                                        <span class="c1">//  |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>                                                    <span class="c1">//  |  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">locked</span> <span class="o">=</span> <span class="n">LOCK</span><span class="p">;</span>       <span class="c1">//T1执行到了这里 此时locked = UNLOCK-|
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="正确性不明的奇怪尝试-peterson-算法">正确性不明的奇怪尝试 (<code>Peterson</code> 算法)</h4>
<ul>
<li>
<p>A 和 B 争用厕所的包厢</p>
</li>
<li>
<p>想进入包厢之前，A/B 都要先举起自己的旗子</p>
<ul>
<li>A 确认旗子举好以后，往厕所门上贴上 <b>“B 正在使用”</b> 的标签</li>
<li>B 确认旗子举好以后，往厕所门上贴上 <b>“A 正在使用”</b> 的标签</li>
</ul>
</li>
<li>
<p>然后<b>如果对方的旗子举起来，且门上的名字不是自己</b>，等待</p>
<ul>
<li>否则可以进入包厢</li>
</ul>
</li>
<li>
<p><b>出包厢后，放下自己的旗子</b></p>
</li>
<li>
<p>示例代码：<a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-simple.c" target="_blank" rel="noopener noreffer">peterson-simple.c</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define A 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define B 2
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">nested</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_long</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="k">volatile</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TA</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=1 */</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=2 */</span> <span class="n">turn</span> <span class="o">=</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=3 */</span> <span class="k">while</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">turn</span> <span class="o">==</span> <span class="n">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=4 */</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TB</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=1 */</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=2 */</span> <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=3 */</span> <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">turn</span> <span class="o">==</span> <span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=4 */</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TB</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>有关上面的原子操作：</p>
<p>这段代码定义了两个原子变量 <code>nested</code> 和 <code>count</code>，并实现了一个临界区 <code>critical_section()</code>。</p>
<p>在 <code>critical_section()</code> 中，首先通过调用 <code>atomic_fetch_add(&amp;count, 1)</code> 将 <code>count</code> 原子变量的值加 1 并返回当前的值，保存在 <code>cnt</code> 中。</p>
<p>然后通过调用 <code>atomic_fetch_add(&amp;nested, 1)</code> 将 <code>nested</code> 原子变量的值加 1，同时检查原子变量 <code>nested</code> 是否为 0。由于 <code>nested</code> 的初始值为 0，因此这里可以通过 <code>assert</code> 断言来验证。</p>
<p>最后通过调用 <code>atomic_fetch_add(&amp;nested, -1)</code> 将 <code>nested</code> 原子变量的值减 1。</p>
<p>整个 <code>critical_section()</code> 实现了一个简单的临界区，其中 <code>nested</code> 原子变量用于保证临界区同时只能被一个线程访问，而 <code>count</code> 原子变量用于记录临界区的进入次数。</p>
<hr>
<p>在给 <code>nested</code> 这个 <code>atomic_int</code> 对象赋初值为 0 的情况下，断言 <code>assert(atomic_fetch_add(&amp;nested, 1) == 0)</code> 是可以通过的。</p>
<p>这是因为 <code>atomic_fetch_add()</code> 函数是原子的，它会将 <code>nested</code> 的值加 1，并返回增加前的值。在这个代码中，<code>nested</code> 初始值为 0，然后通过 <code>atomic_fetch_add(&amp;nested, 1)</code> 将其增加为 1，并<font color="red">返回增加前的值</font> 0。因此，断言 <code>assert(atomic_fetch_add(&amp;nested, 1) == 0)</code> 会成功通过，因为 <code>atomic_fetch_add()</code> 返回的值与断言中的比较值相等。</p>
<p>需要注意的是，<code>atomic_int</code> 是 C++ 标准库提供的原子类型，用于在多线程环境下进行原子操作，确保线程安全性。在多线程环境下，原子操作是不会被中断的，因此可以保证 <code>atomic_int</code> 类型对象的操作不会发生竞态条件等问题。但仍然需要谨慎使用，并根据具体情况考虑是否需要使用其他同步机制，如互斥锁、条件变量等。</p>
</blockquote>
<h4 id="petersons-protocol-verified-">Peterson&rsquo;s Protocol Verified 🎖</h4>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="typeit"><div id="id-4" class=""></div></div>
<p>原来证明和判断可以用状态🌳来证明（和全数学相比可能不严谨，但是从CS的角度来说够用了）</p>
<p>先😴，回来再看</p>
</div>
        </div>
    </div>
<blockquote>
<p>我们 (在完全不理解算法的前提下) 证明了 Sequential 内存模型下 Peterson&rsquo;s Protocol 的 Safety。它能够实现互斥。</p>
</blockquote>
<ul>
<li>“<a href="https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf" target="_blank" rel="noopener noreffer">Myths about the mutual exclusion problem</a>” (IPL, 1981，<code>Peterson</code>算法论文，<u>终于给了一个对于我们来说理解起来<b>相对</b>容易的一个算法</u>)</li>
<li>之前有关锁的一些复杂算法：<a href="https://jyywiki.cn/pages/OS/2022/demos/dekker.py" target="_blank" rel="noopener noreffer">dekker.py</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Dekker</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">this</span><span class="p">,</span> <span class="n">another</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">another</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">pass</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="n">another</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">this</span><span class="p">,</span> <span class="n">another</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">another</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">pass</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="n">another</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>一些现状
<ul>
<li>今天有非常坚 (内) 实 (卷) 的理论体系</li>
<li>小心编译器和多处理器硬件（编译器优化，CPU指令流水线优化）
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>（<b>改良版，防止编译器优化造成的结果和预期不符</b>）</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define A 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define B 2
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define BARRIER __sync_synchronize()
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">nested</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_long</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d threads in the critical section @ count=%ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">cnt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="k">volatile</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">turn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TA</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">B</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span> <span class="c1">// &lt;- this is critcal for x86
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">y</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">B</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TB</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">x</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">A</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TB</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>课后思考：<b>哪些 barrier 是多余的吗？</b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define BARRIER __sync_synchronize() </span><span class="c1">//重点研究这个宏的作用
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="自动-画状态机理解并发程序">(自动) 画状态机理解并发程序</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="typeit"><div id="id-5" class=""></div></div>
<p>体育课累歇逼了，晚上给看完</div>
        </div>
    </div>
<ul>
<li>
<p>并发算法的设计困境</p>
<ul>
<li>
<p>不敢不画：谁知道有什么奇怪情况会发生？</p>
</li>
<li>
<p>不敢乱画：画错了就都完了</p>
</li>
</ul>
</li>
<li>
<p>解决方法</p>
<ul>
<li>让电脑帮我们画（因为画状态机就是一个<b>机械</b>的事情）</li>
</ul>
</li>
</ul>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py" target="_blank" rel="noopener noreffer">model-checker.py</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">inspect</span><span class="o">,</span> <span class="nn">ast</span><span class="o">,</span> <span class="nn">astor</span><span class="o">,</span> <span class="nn">copy</span><span class="o">,</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">threads</span><span class="p">,</span> <span class="n">marker_fn</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">thread</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Decorate a member function as a thread&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">threads</span>
</span></span><span class="line"><span class="cl">    <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fn</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">marker</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Decorate a member function as a state marker&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">marker_fn</span>
</span></span><span class="line"><span class="cl">    <span class="n">marker_fn</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">localvar</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">varname</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Return local variable value of thread t in state s&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">{}))[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">varname</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">checkpoint</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Instrumented `yield checkpoint()` goes here&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">stack</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">frame</span> <span class="c1"># stack[1] is the caller of checkpoint()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">f_lineno</span><span class="p">,</span> <span class="p">{</span> <span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">f_locals</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="o">!=</span> <span class="s1">&#39;self&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hack</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Hack Class to instrument @mc.thread functions&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Instrument</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">NodeTransformer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">def</span> <span class="nf">generic_visit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">in_fn</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">FunctionDef</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># a @mc.thread function -&gt; instrument it</span>
</span></span><span class="line"><span class="cl">                    <span class="n">in_fn</span><span class="p">,</span> <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">                <span class="k">elif</span> <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># a decorated function like @mc.mark -&gt; remove it</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">body</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="p">[]):</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># prepend each line with `yield checkpoint()`</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">in_fn</span><span class="p">:</span> <span class="n">body</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">ast</span><span class="o">.</span><span class="n">Expr</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Yield</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ast</span><span class="o">.</span><span class="n">Call</span><span class="p">(</span><span class="n">func</span><span class="o">=</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="n">checkpoint</span><span class="o">.</span><span class="vm">__name__</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="n">ast</span><span class="o">.</span><span class="n">Load</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">                            <span class="n">args</span><span class="o">=</span><span class="p">[],</span> <span class="n">keywords</span><span class="o">=</span><span class="p">[])))</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">body</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">generic_visit</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">in_fn</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">node</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="s1">&#39;hacked&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">hacked_ast</span> <span class="o">=</span> <span class="n">Instrument</span><span class="p">()</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">Class</span><span class="o">.</span><span class="n">source</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">hacked_src</span><span class="p">,</span> <span class="nb">vars</span> <span class="o">=</span> <span class="n">astor</span><span class="o">.</span><span class="n">to_source</span><span class="p">(</span><span class="n">hacked_ast</span><span class="p">),</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># set a breakpoint() here to see **magic happens**!</span>
</span></span><span class="line"><span class="cl">        <span class="n">exec</span><span class="p">(</span><span class="n">hacked_src</span><span class="p">,</span> <span class="nb">globals</span><span class="p">(),</span> <span class="nb">vars</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Class</span><span class="o">.</span><span class="n">hacked</span><span class="p">,</span> <span class="n">Class</span><span class="o">.</span><span class="n">hacked_src</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">[</span><span class="n">Class</span><span class="o">.</span><span class="vm">__name__</span><span class="p">],</span> <span class="n">hacked_src</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Class</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Execute trace (like [0,0,0,2,2,1,1,1]) on Class&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">attrs</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">attr</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">val</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">attr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">attr</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;__&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">bool</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="k">yield</span> <span class="n">attr</span><span class="p">,</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">obj</span> <span class="o">=</span> <span class="n">hack</span><span class="p">(</span><span class="n">Class</span><span class="p">)</span><span class="o">.</span><span class="n">hacked</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">attr</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">attrs</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">setattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">val</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fn</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fn</span><span class="p">())</span> <span class="c1"># a generator for a thread</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span> <span class="o">=</span> <span class="p">{</span> <span class="n">t</span><span class="p">:</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">trace</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">chosen</span><span class="p">,</span> <span class="n">tname</span><span class="p">,</span> <span class="n">trace</span> <span class="o">=</span> <span class="n">trace</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">threads</span><span class="p">[</span><span class="n">trace</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="n">trace</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">T</span><span class="p">[</span><span class="n">chosen</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">S</span><span class="p">[</span><span class="n">tname</span><span class="p">]</span> <span class="o">=</span> <span class="n">T</span><span class="p">[</span><span class="n">chosen</span><span class="p">]</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">S</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">tname</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">T</span><span class="p">[</span><span class="n">chosen</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">attr</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">attrs</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">S</span><span class="p">[</span><span class="n">attr</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">,</span> <span class="n">S</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">State</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">trace</span> <span class="o">=</span> <span class="n">trace</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">execute</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;s</span><span class="si">{</span><span class="nb">abs</span><span class="p">(</span><span class="n">State</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">state</span><span class="p">)</span><span class="o">.</span><span class="fm">__hash__</span><span class="p">())</span><span class="si">}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">freeze</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;Create an object&#39;s hashable frozen (immutable) counterpart&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">obj</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">or</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">bool</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">obj</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">State</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nb">zip</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">keys</span><span class="p">(),</span> <span class="p">(</span><span class="n">State</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">obj</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">            <span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s1">&#39;Cannot freeze&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">s0</span><span class="p">,</span> <span class="n">vertices</span><span class="p">,</span> <span class="n">edges</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Serialize all model checking results&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;CLASS(</span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">Class</span><span class="o">.</span><span class="n">hacked_src</span><span class="p">)</span><span class="si">}</span><span class="s1">)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sid</span> <span class="o">=</span> <span class="p">{</span> <span class="n">s0</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">sid</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">sid</span><span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">sid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;s</span><span class="si">{</span><span class="n">sid</span><span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">name</span><span class="p">]</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">vertices</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">mk</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">state</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">marker_fn</span> <span class="k">if</span> <span class="n">f</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">state</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;STATE(</span><span class="si">{</span><span class="n">name</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">state</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">mk</span><span class="p">)</span><span class="si">}</span><span class="s1">)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">chosen</span> <span class="ow">in</span> <span class="n">edges</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;TRANS(</span><span class="si">{</span><span class="n">name</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="n">name</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">threads</span><span class="p">[</span><span class="n">chosen</span><span class="p">])</span><span class="si">}</span><span class="s1">)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">check_bfs</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Enumerate all possible thread interleavings of @mc.thread functions&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s0</span> <span class="o">=</span> <span class="n">State</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="o">=</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># breadth-first search to find all possible thread interleavings</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">,</span> <span class="n">vertices</span><span class="p">,</span> <span class="n">edges</span> <span class="o">=</span> <span class="p">[</span><span class="n">s0</span><span class="p">],</span> <span class="p">{</span><span class="n">s0</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="n">s0</span><span class="p">},</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">u</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">queue</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">chosen</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">threads</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">v</span> <span class="o">=</span> <span class="n">State</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">trace</span> <span class="o">+</span> <span class="p">[</span><span class="n">chosen</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vertices</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">vertices</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span></span><span class="line"><span class="cl">            <span class="n">edges</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">chosen</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">serialize</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">s0</span><span class="p">,</span> <span class="n">vertices</span><span class="p">,</span> <span class="n">edges</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">src</span><span class="p">,</span> <span class="nb">vars</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">.</span><span class="n">read_text</span><span class="p">(),</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="nb">globals</span><span class="p">(),</span> <span class="nb">vars</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Class</span> <span class="o">=</span> <span class="p">[</span><span class="n">C</span> <span class="k">for</span> <span class="n">C</span> <span class="ow">in</span> <span class="nb">vars</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="o">==</span> <span class="nb">type</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">setattr</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">check_bfs</span><span class="p">(</span><span class="n">Class</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>$Model$ $\Longrightarrow$ $Input$</p>
</li>
<li>
<p>$checker$ $\Longrightarrow$ 遍历所有状态</p>
</li>
<li>
<p>通过一些class来说明你的并发算法：<a href="https://jyywiki.cn/pages/OS/2022/demos/mutex-bad.py" target="_blank" rel="noopener noreffer">mutex-bad.py</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-flag.py" target="_blank" rel="noopener noreffer">peterson-flag.py</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/dekker.py" target="_blank" rel="noopener noreffer">dekker.py</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Mutex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Peterson</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">=</span> <span class="s1">&#39;  &#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="s1">&#39;🏴&#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="s1">&#39;🏳&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39; &#39;</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="s1">&#39;🏳&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;🏳&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="s1">&#39;🏴&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39; &#39;</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="s1">&#39;🏴&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用例</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python3 model-checker.py peterson-flag.py
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>后面跟着model的参数脚本即可</p>
</li>
<li>
<p>为什么输出模式这么反人类 $\Longrightarrow$ 因为输出是给程序看的，后面的python脚本可以写一些lambda表达式来提取信息 $\Longrightarrow$ 加到后期的工具<a href="http://jyywiki.cn/pages/OS/2022/demos/visualize.py" target="_blank" rel="noopener noreffer">visualize.py</a>，直接可视化（很像之前<b>zweix</b>大佬的<a href="https://github.com/zweix123/jyyslide-md" target="_blank" rel="noopener noreffer">jyyslide-md</a>）的markdown转html的感觉很像</p>
</li>
<li>
<p>安装相关模块，除了pip的以外Linux的机器上要安装graphviz</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install graphviz
</span></span><span class="line"><span class="cl">pip install graphviz
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后通过管道通信和重定向</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python3 model-checker.py peterson-flag.py <span class="p">|</span> python3 visualize.py &gt; a.html
</span></span><span class="line"><span class="cl">open a.html
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/Jungle430/check-for-NJU-OS" target="_blank" rel="noopener noreffer">一个checker的demo</a></p>
<h4 id="代码导读python-generator">代码导读：Python Generator</h4>
<p>死循环也能返回？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">numbers</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="n">init</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">+=</span> <span class="n">step</span>
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">numbers</span> <span class="n">at</span> <span class="mh">0x107f873c0</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>yield</code>让死循环返回，但又<b>不是完全返回</b></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter4-1.png" title="/img/Operating System/chapter4-1.png" data-thumbnail="/img/Operating System/chapter4-1.png" data-sub-html="<h2>效果 $\Longrightarrow$ g就是一个状态机</h2>">
        
    </a><figcaption class="image-caption">效果 $\Longrightarrow$ g就是一个<code>状态机</code></figcaption>
    </figure>
<ul>
<li>
<p>文章<a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856" target="_blank" rel="noopener noreffer">《python中yield的用法详解——最简单，最清晰的解释》</a></p>
</li>
<li>
<p>这里就模仿了线程的执行<u>使用<code>yield</code>的特性</u></p>
</li>
</ul>
<h4 id="model-checker-实现">Model Checker: 实现</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Mutex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">T1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">thread_state</span> <span class="o">=</span> <span class="n">mutex_obj</span><span class="p">()</span><span class="o">.</span><span class="n">T1</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="n">thread_state</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span> <span class="c1"># 单步执行一行; see: execute()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="model-checker-实现-contd">Model Checker: 实现 (cont&rsquo;d)</h4>
<p>什么是状态空间？</p>
<ul>
<li>所有可能的状态机执行序列</li>
<li><code>BFS</code> 生成，合并重复状态</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">[0]      T1
</span></span><span class="line"><span class="cl">[1]      T2
</span></span><span class="line"><span class="cl">[0,0]    T1 -&gt; T1
</span></span><span class="line"><span class="cl">[0,1]    T1 -&gt; T2
</span></span><span class="line"><span class="cl">[0,0,0]  T1 -&gt; T1 -&gt; T1
</span></span><span class="line"><span class="cl">[0,0,1]  T1 -&gt; T1 -&gt; T2
</span></span><span class="line"><span class="cl">[0,1,0]  T1 -&gt; T2 -&gt; T1
</span></span><span class="line"><span class="cl">...      ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="model-checking-和工具的故事">Model Checking 和工具的故事</h3>
<blockquote>
<p>Model checking is a method for formally verifying finite-state systems——只要能为系统建立模型，就能用 prove by brute-force 证明正确/找到错误。</p>
</blockquote>
<p>Model checker 的一切就是状态机！</p>
<ul>
<li>Safety: 红色的状态不可到达
<ul>
<li><em>G</em>(<em>V</em>,<em>E</em>) 上的可达性问题</li>
</ul>
</li>
<li>(Strong) Liveness: 从任意状态出发，都能到达绿/蓝色状态
<ul>
<li><em>G</em>(<em>V</em>,<em>E</em>) 上的什么问题？</li>
</ul>
</li>
<li>如何展示这个状态机？</li>
<li>如何能避免无效的探索？</li>
</ul>
<h4 id="更多的-model-checker">更多的 Model Checker</h4>
<p>真实程序的状态空间太大？</p>
<ul>
<li><a href="https://dl.acm.org/doi/abs/10.1145/263699.263717" target="_blank" rel="noopener noreffer">Model checking for programming languages using VeriSoft</a> (POPL'97, 第一个 “software model checker”)</li>
<li><a href="https://dl.acm.org/doi/10.5555/1855741.1855760" target="_blank" rel="noopener noreffer">Finding and reproducing Heisenbugs in concurrent programs</a> (OSDI'08, Small Scope Hypothesis 🪳🪳🪳)</li>
<li><a href="https://dl.acm.org/doi/10.1145/1189256.1189259" target="_blank" rel="noopener noreffer">Using model checking to find serious file system errors</a> (OSDI'04, Best Paper 🏅，可以用在不并发的系统上)</li>
</ul>
<hr>
<p>不满足于简单的内存模型？</p>
<ul>
<li><a href="https://dl.acm.org/doi/abs/10.1145/3445814.3446748" target="_blank" rel="noopener noreffer">VSync: Push-button verification and optimization for synchronization primitives on weak memory models</a> (ASPLOS'21, Distinguished Paper 🏅)</li>
</ul>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何理解各种并发程序？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>并发程序 = 状态机
<ul>
<li>线程共享内存</li>
<li>每一步非确定选择线程执行</li>
</ul>
</li>
<li>画状态机就对了
<ul>
<li>当然，用工具帮你画 (model checker)</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Linux x86 Program Start Up or - How the heck do we get to main()?</title>
    <link>https://Jungle430.github.io/posts/operating-system/support2/</link>
    <pubDate>Sat, 04 Mar 2023 15:47:02 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/support2/</guid>
    <description><![CDATA[<h2 id="概述">概述</h2>
<ul>
<li>
<p>文章介绍了X86系统main函数调用前后的一些细节，并阐述了C程序的<b>构造函数</b>和<b>析构函数</b>，<u>以及<code>.init</code>,<code>.fini</code>,<code>init_array</code>和<code>fini_array</code>各section相对于main函数及彼此的执行顺序。遗憾的是这篇文章是基于32位CPU架构来研究的</u></p>
</li>
<li>
<p>文章对$debug$ <code>main</code>函数之前的代码有一定的帮助效果</p>
</li>
<li>
<p>主要介绍了X86 ELF文件的动态加载过程</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-1.png" title="/img/Operating System/support2-1.png" data-thumbnail="/img/Operating System/support2-1.png" data-sub-html="<h2>总体流程图</h2>">
        
    </a><figcaption class="image-caption">总体流程图</figcaption>
    </figure>
<h2 id="调用过程分析">调用过程分析</h2>
<h3 id="main函数的调用">main函数的调用</h3>
<ul>
<li>先写一个最简单的C程序prog1.c</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译一下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -ggdb -o prog1 prog1.c
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：<code>-ggdb</code>的选项作用：生成<code>gdb</code>专用的调试信息，会有一些<code>gdb</code>专用的扩展</p>
</blockquote>
<ul>
<li>然后我们用objdump做一下反汇编</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">objdump -d prog1 &gt; prog1.asm
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="从我们终端敲回车到程序被载入执行的过程中发生了什么">从我们终端敲回车到程序被载入执行的过程中发生了什么？</h4>
<ul>
<li>当我们从终端输入要运行的程序或者是从有关的<code>gui</code>界面点击相关的button的时候，<b>shell</b>或者<b>gui</b>就会调用<code>execve()</code>。这里不是我们重点关心的地方，简单来说，execve()会设立一个栈，然后将参数<code>argc</code>，<code>argv</code>和<code>envp</code>压入栈中。文件描述符0，1，2（stdin, stdout和stderr）由之前的shell设置，加载器会帮我们完成有关重定位的许多工作，当所有搞定之后，控制权会传递给<code>_start()</code></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-2.png" title="/img/Operating System/support2-2.png" data-thumbnail="/img/Operating System/support2-2.png" data-sub-html="<h2>shell输入man execve之后的函数声明和所在位置</h2>">
        
    </a><figcaption class="image-caption">shell输入<code>man execve</code>之后的函数声明和所在位置</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-4.png" title="/img/Operating System/support2-4.png" data-thumbnail="/img/Operating System/support2-4.png" data-sub-html="<h2>evnp</h2>">
        
    </a><figcaption class="image-caption"><code>evnp</code></figcaption>
    </figure>
<h4 id="_start">_start()</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">080482e0 &lt;_start&gt;:
</span></span><span class="line"><span class="cl">80482e0:       31 ed                   xor    %ebp,%ebp
</span></span><span class="line"><span class="cl">80482e2:       5e                      pop    %esi
</span></span><span class="line"><span class="cl">80482e3:       89 e1                   mov    %esp,%ecx
</span></span><span class="line"><span class="cl">80482e5:       83 e4 f0                and    $0xfffffff0,%esp
</span></span><span class="line"><span class="cl">80482e8:       50                      push   %eax
</span></span><span class="line"><span class="cl">80482e9:       54                      push   %esp
</span></span><span class="line"><span class="cl">80482ea:       52                      push   %edx
</span></span><span class="line"><span class="cl">80482eb:       68 00 84 04 08          push   $0x8048400
</span></span><span class="line"><span class="cl">80482f0:       68 a0 83 04 08          push   $0x80483a0
</span></span><span class="line"><span class="cl">80482f5:       51                      push   %ecx
</span></span><span class="line"><span class="cl">80482f6:       56                      push   %esi
</span></span><span class="line"><span class="cl">80482f7:       68 94 83 04 08          push   $0x8048394
</span></span><span class="line"><span class="cl">80482fc:       e8 c3 ff ff ff          call   80482c4 &lt;__libc_start_main@plt&gt;
</span></span><span class="line"><span class="cl">8048301:       f4                      hlt
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>任何值<code>xor</code>自身得到的结果都是0。所以<code>xor %ebp,%ebp</code>语句会把<code>%ebp</code>设置为0。ABI（Application Binary Interface specification）推荐这么做，目的是为了标记最外层函数的页帧（frame）</li>
<li>接下来，从栈中弹出栈顶的值保存到<code>%esi</code>。在最开始的时候我们把<code>argc</code>，<code>argv</code>和<code>envp</code>放到了栈里，所以现在的<code>pop</code>语句会把<code>argc</code>放到<code>%esi</code>中</li>
<li>这里只是临时保存一下，稍后我们会把它再次压回栈中</li>
<li>因为我们弹出了<code>argc</code>，所以<code>%ebp</code>现在指向的是<code>argv</code>。<code>mov</code>指令把<code>argv</code>放到了<code>%ecx</code>中，但是并没有移动栈指针</li>
<li><u>然后，将栈指针和一个可以清除后四位的掩码做<code>and</code>操作。根据当前栈指针的位置不同，栈指针将会向下移动0到15个字节。这么做，保证了任何情况下，栈指针都是16字节的偶数倍对齐的。对齐的目的是保证栈上所有的变量都能够被内存和cache快速的访问</u></li>
<li><u>要求这么做的是SSE，就是指令都能在单精度浮点数组上工作的那个<b>（扩展指令集）</b></u></li>
<li>例子：某次运行时，<code>_start</code>函数刚被调用的时候，<code>%esp</code>处于<code>0xbffff770</code>。在我们从栈上弹出<code>argc</code>后，<code>%esp</code>指向<code>0xbffff774</code>。它向高地址移动了（栈向下增长）。当对栈指针执行了<code>and</code>操作后，栈指针回到了<code>0xbffff770</code></li>
</ul>
<h4 id="__libc_start_main">__libc_start_main</h4>
<ul>
<li>现在，我们把<code>__libc_start_main</code>函数的参数压入栈中。第一个参数<code>%eax</code>被压入栈中，里面保存了无效信息，原因是稍后会有七个参数将被压入栈中，但是为了保证16字节对齐，所以需要第八个参数。这个值也并不会被用到。<code>__libc_start_main</code>是在链接的时候从glibc复制过来的。在glibc的代码中，它位于<code>csu/libc-start.c</code>文件里。<code>__libc_start_main</code>的定义如下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">__libc_start_main</span><span class="p">(</span>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">main</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="o">*</span> <span class="n">ubp_av</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">init</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">rtld_fini</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="kt">void</span> <span class="p">(</span><span class="o">*</span> <span class="n">stack_end</span><span class="p">));</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/support2-3.jpg" title="/img/Operating System/support2-3.jpg" data-thumbnail="/img/Operating System/support2-3.jpg" data-sub-html="<h2>参数说明</h2>">
        
    </a><figcaption class="image-caption">参数说明</figcaption>
    </figure>
<ul>
<li>__libc_csu_fini函数也是从glibc被链接进我们代码的，它的源代码位于csu/elf-init.c中</li>
</ul>
<h4 id="环境变量哪里去了">环境变量哪里去了？</h4>
<ul>
<li>
<p>我们并没有获取envp（栈里指向我们环境变量的指针）？它并不是<code>__libc_start_main</code>函数的参数。但是我们知道main函数的原型其实是<code>int main(int argc, char** argv, char** envp)</code>。所以，到底怎么回事？</p>
</li>
<li>
<p>其实，<code>__libc_start_main</code>函数会调用<code>__libc_init_first</code>，这个函数会使用内部信息去找到环境变量（实际上环境变量就位于<code>argv</code>的终止字符null的后面），然后设置一个全局变量<code>__environ</code>，这个全局变量可以被<code>__libc_start_main</code>函数内部任何地方使用，包括调用main函数时。当<code>envp</code>建立了之后，<code>__libc_start_main</code>函数会使用相同的小技巧，越过envp数组之后的<code>NULL</code>字符，获取另一个向量——ELF辅助向量（加载器使用它给进程传递一些信息）</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__libc_init_first</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">arg0</span><span class="p">,</span> <span class="p">...)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">arg0</span><span class="p">,</span> <span class="o">**</span><span class="n">envp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="n">argc</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">__environ</span> <span class="o">=</span> <span class="n">envp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">__libc_init</span> <span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行程序前，设置环境变量<code>LD_SHOW_AUXV=1</code>,可以查看里面的内容</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nv">LD_SHOW_AUXV</span><span class="o">=</span><span class="m">1</span> ./prog1
</span></span><span class="line"><span class="cl">AT_SYSINFO:      0xe62414
</span></span><span class="line"><span class="cl">AT_SYSINFO_EHDR: 0xe62000
</span></span><span class="line"><span class="cl">AT_HWCAP:    fpu vme de pse tsc msr pae mce cx8 apic
</span></span><span class="line"><span class="cl">             mtrr pge mca cmov pat pse36 clflush dts
</span></span><span class="line"><span class="cl">             acpi mmx fxsr sse sse2 ss ht tm pbe
</span></span><span class="line"><span class="cl">AT_PAGESZ:       <span class="m">4096</span>
</span></span><span class="line"><span class="cl">AT_CLKTCK:       <span class="m">100</span>
</span></span><span class="line"><span class="cl">AT_PHDR:         0x8048034
</span></span><span class="line"><span class="cl">AT_PHENT:        <span class="m">32</span>
</span></span><span class="line"><span class="cl">AT_PHNUM:        <span class="m">8</span>
</span></span><span class="line"><span class="cl">AT_BASE:         0x686000
</span></span><span class="line"><span class="cl">AT_FLAGS:        0x0
</span></span><span class="line"><span class="cl">AT_ENTRY:        0x80482e0
</span></span><span class="line"><span class="cl">AT_UID:          <span class="m">1002</span>
</span></span><span class="line"><span class="cl">AT_EUID:         <span class="m">1002</span>
</span></span><span class="line"><span class="cl">AT_GID:          <span class="m">1000</span>
</span></span><span class="line"><span class="cl">AT_EGID:         <span class="m">1000</span>
</span></span><span class="line"><span class="cl">AT_SECURE:       <span class="m">0</span>
</span></span><span class="line"><span class="cl">AT_RANDOM:       0xbff09acb
</span></span><span class="line"><span class="cl">AT_EXECFN:       ./prog1
</span></span><span class="line"><span class="cl">AT_PLATFORM:     i686
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>各种各样的信息。<code>AT_ENTRY</code>是<code>_start</code>的地址，还有我们的UID、有效UID和GID</p>
</li>
<li>
<p><b>__libc_start_main功能总结</b></p>
<ul>
<li>处理关于setuid、setgid程序的安全问题</li>
<li>启动线程</li>
<li>把<code>fini</code>函数和<code>rtld_fini</code>函数作为参数传递给<code>at_exit</code>调用，使它们在<code>at_exit</code>里被调用，从而完成用户程序和加载器的调用结束之后的清理工作</li>
<li>调用其<code>init</code>参数</li>
<li>调用<code>main</code>函数，并把<code>argc</code>和<code>argv</code>参数、环境变量传递给它</li>
<li>调用<code>exit</code>函数，并将main函数的返回值传递给它</li>
</ul>
</li>
</ul>
<h4 id="__libc_csu_init">__libc_csu_init</h4>
<ul>
<li><code>__libc_start_main</code>函数的<code>init</code>参数被设置成了<code>__libc_csu_init</code>函数，它也是被链接进我们代码的。它来源于glibc源代码中的csu/elf-init.c。其C代码如下（原代码只不过多了一些#ifdef）：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__libc_csu_init</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_init</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">__init_array_end</span> <span class="o">-</span> <span class="n">__init_array_start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="o">*</span><span class="n">__init_array_start</span> <span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>功能：<b>用户应用程序的构造函数</b></p>
</li>
<li>
<p><code>__libc_csu_init</code>函数相当重要，因为它是我们<b>可执行程序的构造函数</b></p>
<ul>
<li>？？？这不是C++，哪里来的构造函数？？？ $\Longrightarrow$ 构造函数和析构函数的概念并非属于C++，它诞生早于C++</li>
<li>对于任意的可执行程序都可以有一个C函数的<b>构造函数</b><code>__libc_csu_init</code>和C函数的<b>析构函数</b><code>__libc_csu_fini</code>。<u>在构造函数内部，可执行程序会找到全局C函数组成的构造函数集，并且调用它们</u>。（任何一个C程序都是可以有构造函数集的） $\Longrightarrow$ <u>the executable will look for global C level constructors and call any that it finds. It&rsquo;s possible for a C program to also have these</u>（原文）</li>
</ul>
</li>
<li>
<p><code>__libc_csu_init</code>函数的反汇编代码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">080483a0 &lt;__libc_csu_init&gt;:
</span></span><span class="line"><span class="cl"> 80483a0:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 80483a1:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 80483a3:       57                      push   %edi
</span></span><span class="line"><span class="cl"> 80483a4:       56                      push   %esi
</span></span><span class="line"><span class="cl"> 80483a5:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 80483a6:       e8 5a 00 00 00          call   8048405 &lt;__i686.get_pc_thunk.bx&gt;
</span></span><span class="line"><span class="cl"> 80483ab:       81 c3 49 1c 00 00       add    $0x1c49,%ebx
</span></span><span class="line"><span class="cl"> 80483b1:       83 ec 1c                sub    $0x1c,%esp
</span></span><span class="line"><span class="cl"> 80483b4:       e8 bb fe ff ff          call   8048274 &lt;_init&gt;
</span></span><span class="line"><span class="cl"> 80483b9:       8d bb 20 ff ff ff       lea    -0xe0(%ebx),%edi
</span></span><span class="line"><span class="cl"> 80483bf:       8d 83 20 ff ff ff       lea    -0xe0(%ebx),%eax
</span></span><span class="line"><span class="cl"> 80483c5:       29 c7                   sub    %eax,%edi
</span></span><span class="line"><span class="cl"> 80483c7:       c1 ff 02                sar    $0x2,%edi
</span></span><span class="line"><span class="cl"> 80483ca:       85 ff                   test   %edi,%edi
</span></span><span class="line"><span class="cl"> 80483cc:       74 24                   je     80483f2 &lt;__libc_csu_init+0x52&gt;
</span></span><span class="line"><span class="cl"> 80483ce:       31 f6                   xor    %esi,%esi
</span></span><span class="line"><span class="cl"> 80483d0:       8b 45 10                mov    0x10(%ebp),%eax
</span></span><span class="line"><span class="cl"> 80483d3:       89 44 24 08             mov    %eax,0x8(%esp)
</span></span><span class="line"><span class="cl"> 80483d7:       8b 45 0c                mov    0xc(%ebp),%eax
</span></span><span class="line"><span class="cl"> 80483da:       89 44 24 04             mov    %eax,0x4(%esp)
</span></span><span class="line"><span class="cl"> 80483de:       8b 45 08                mov    0x8(%ebp),%eax
</span></span><span class="line"><span class="cl"> 80483e1:       89 04 24                mov    %eax,(%esp)
</span></span><span class="line"><span class="cl"> 80483e4:       ff 94 b3 20 ff ff ff    call   *-0xe0(%ebx,%esi,4)
</span></span><span class="line"><span class="cl"> 80483eb:       83 c6 01                add    $0x1,%esi
</span></span><span class="line"><span class="cl"> 80483ee:       39 fe                   cmp    %edi,%esi
</span></span><span class="line"><span class="cl"> 80483f0:       72 de                   jb     80483d0 &lt;__libc_csu_init+0x30&gt;
</span></span><span class="line"><span class="cl"> 80483f2:       83 c4 1c                add    $0x1c,%esp
</span></span><span class="line"><span class="cl"> 80483f5:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 80483f6:       5e                      pop    %esi
</span></span><span class="line"><span class="cl"> 80483f7:       5f                      pop    %edi
</span></span><span class="line"><span class="cl"> 80483f8:       5d                      pop    %ebp
</span></span><span class="line"><span class="cl"> 80483f9:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="这个函数都做了什么">这个函数都做了什么？</h5>
<h6 id="get_pc_truck函数">get_pc_truck函数</h6>
<ul>
<li>该函数是给位置无关码使用的。设置它们可以让位置无关码正常工作。为了让它们工作，基址寄存器（%ebp）需要知道<code>GLOBAL_OFFSET_TABLE</code>。其部分代码如下</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">push %ebx
</span></span><span class="line"><span class="cl">call __get_pc_thunk_bx
</span></span><span class="line"><span class="cl">add  $_GLOBAL_OFFSET_TABLE_,%ebx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">__get_pc_thunk_bx:
</span></span><span class="line"><span class="cl">movel (%esp),%ebx
</span></span><span class="line"><span class="cl">return
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>过程分析</p>
<ul>
<li>
<p>调用<code>__get_pc_thunk_bx</code>时，像所有其他函数调用一样，将下一条指令的地址压入栈中（计组：保存上一级程序的<b>PC</b>）。这样，当函数返回时，就会继续执行下条指令</p>
</li>
<li>
<p>在<code>__get_pc_thunk_bx</code>中，我们将返回地址从栈中复制到<code>%ebx</code>中。当返回的时候，下条指令会把<code>_GLOBAL_OFFSET_TABLE_</code>加到<code>%ebx</code>上去（前3句）</p>
</li>
<li>
<p>其中<code>_GLOBAL_OFFSET_TABLE_</code>代表了当前地址和位置无关码使用的<code>GOT(global offset table)</code>的差值</p>
</li>
<li>
<p>在<code>GOT</code>中保存了我们想访问的变量的指针的集合，<b>并且我们只需要知道数据在这个表中的偏移量就行</b></p>
</li>
<li>
<p>加载器会为我们修改这个表里面的地址。对于函数来讲，也有一个类似的表（PLT）</p>
</li>
<li>
<p><u>汇编里面这么编写实在是太烦人了，但是，在C或者C++中，你可以将-pic参数传递给编译器，它将会自动帮你完成这个工作</u><b>（你知道你不用关心这个事情就可以了（md就怕自己再™️钻牛角尖））</b></p>
</li>
</ul>
</li>
<li>
<p>和64位有关的区别</p>
</li>
</ul>
<blockquote>
<p><em>上述·get_pc_truck·函数的主要目的其实是获取变量对应的GOT，以通过它获取变量真正的值。之所以这么写，是因为在32位系统里，没有类似于rip的寄存器，因此并不能直接获取当前指令的地址，而在64位系统里就不用这种小技巧了</em></p>
<ul>
<li>
<p>有关阅读</p>
<ul>
<li>
<p><a href="https://blog.csdn.net/mw_nice/article/details/100022610" target="_blank" rel="noopener noreffer">《Linux中的GOT和PLT到底是个啥？》</a> （原来的博客寄了，在CSDN找到了转载）</p>
</li>
<li>
<p><a href="https://www.technovelty.org/linux/plt-and-got-the-key-to-code-sharing-and-dynamic-libraries.html" target="_blank" rel="noopener noreffer">《PLT and GOT - the key to code sharing and dynamic libraries》</a> （英文原文）</p>
</li>
</ul>
</li>
</ul>
</blockquote>
<h6 id="剩下的循环在干什么">剩下的循环在干什么？</h6>
<ul>
<li>现在我们只要记住：<b>翻译的不好，这里建议看原文</b></li>
</ul>
<blockquote>
<p>For now, just remember that it calls any C level initializers for our program.</p>
</blockquote>
<p>中文翻译版：</p>
<blockquote>
<p><b>它调用了用户程序中所有用C代码编写的<code>initializers</code></b></p>
</blockquote>
<ul>
<li>中文这个版本容易让人看跑了，这个C代码不一定是自己编写的，只要是<b>C level</b>级别的<b>initializers</b>（后面有预处理，链接，中译容易让人看跑）</li>
</ul>
<h4 id="_init函数分析">_init函数分析</h4>
<h5 id="源码">源码</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">08048274 &lt;_init&gt;:
</span></span><span class="line"><span class="cl"> 8048274:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 8048275:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 8048277:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048278:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 804827b:       e8 00 00 00 00          call   8048280 &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 8048280:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 8048281:       81 c3 74 1d 00 00       add    $0x1d74,%ebx        (.got.plt)
</span></span><span class="line"><span class="cl"> 8048287:       8b 93 fc ff ff ff       mov    -0x4(%ebx),%edx
</span></span><span class="line"><span class="cl"> 804828d:       85 d2                   test   %edx,%edx
</span></span><span class="line"><span class="cl"> 804828f:       74 05                   je     8048296 &lt;_init+0x22&gt;
</span></span><span class="line"><span class="cl"> 8048291:       e8 1e 00 00 00          call   80482b4 &lt;__gmon_start__@plt&gt;
</span></span><span class="line"><span class="cl"> 8048296:       e8 d5 00 00 00          call   8048370 &lt;frame_dummy&gt;
</span></span><span class="line"><span class="cl"> 804829b:       e8 70 01 00 00          call   8048410 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"> 80482a0:       58                      pop    %eax
</span></span><span class="line"><span class="cl"> 80482a1:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 80482a2:       c9                      leave
</span></span><span class="line"><span class="cl"> 80482a3:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="调用">调用</h5>
<ul>
<li>当加载器将控制权交给<code>_start</code>函数之后，<code>_start</code>函数将会调用<code>__libc_start_main</code>函数，<code>__libc_start_main</code>函数会调用<code>__libc_csu_init</code>函数, <code>__libc_csu_init</code>函数会调用<code>_init</code>函数</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>End in 2023-03-08 0:44</p>
<p>这种真🐔8️⃣👨的文章真是看点就看不下去了，明天概率论，先睡</p>
<p>某<a href="https://daonan233.github.io" target="_blank" rel="noopener noreffer">55</a>今天玩了5h ⚪，晚上卸载之后🎠自己是<b>S</b>🅱️，只能说是dinner行为了吧</p>
</div>
        </div>
    </div>
<h5 id="_init函数起始于常规的c函数调用"><code>_init</code>函数起始于常规的C函数调用</h5>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-08 10:04</p>
<p>睡醒了，感觉看了能有一半多了，今天再看点</p>
</div>
        </div>
    </div>
<ul>
<li>
<p>如果想要详细了解C函数调用规范，请阅读<a href="http://dbp-consulting.com/tutorials/debugging/basicAsmDebuggingGDB.html" target="_blank" rel="noopener noreffer">《Basic Assembler Debugging with GDB》</a></p>
</li>
<li>
<p>大致过程</p>
<ul>
<li>调用者的基址寄存器（<code>%ebp</code>）会被保存到栈里(8048274)</li>
<li>当前函数的基址寄存器（<code>%ebp</code>）会<b>指向栈顶</b>(8048275)</li>
<li>然后，<b>保留4个字节空间</b>(8048278) $\Longrightarrow$ <u>更好的解释是push之后<code>%esp</code>要sub $0x4 来保证栈指针仍然指向栈顶（栈向下增长）</u></li>
<li>这个过程和调用<code>get_pc_trunk</code>非常像</li>
</ul>
</li>
<li>
<p>要大致了解一下stack和function调用的关系，阅读文章<a href="https://blog.csdn.net/max_ii_min/article/details/116047509?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167824270516800182771276%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167824270516800182771276&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-116047509-null-null.142%5ev73%5ewechat,201%5ev4%5eadd_ask,239%5ev2%5einsert_chatgpt&amp;utm_term=esp%E5%AF%84%E5%AD%98%E5%99%A8&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener noreffer">《汇编-栈帧-寄存器esp, ebp》</a></p>
</li>
<li>
<p>如果你仔细看的话，发现调用的是下一条指令的地址？？？啥操作？？？</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 804827b:       e8 00 00 00 00          call   8048280 &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 8048280:       5b                      pop    %ebx
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>给人感觉这就是在顺序执行，不过你要用函数调用的压栈出栈来干什么？
<ul>
<li>$\Longrightarrow$ <b>当前的地址被压入了栈中。然后通过弹出栈操作，又把它放到了<code>%ebx</code>中，之后就可以用它来设置访问全局访问表了(.got.plt)</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 8048277:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048278:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 804827b:       e8 00 00 00 00          call   8048280 &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 8048280:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 8048281:       81 c3 74 1d 00 00       add    $0x1d74,%ebx        (.got.plt)
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="gmon_start函数分析">gmon_start函数分析</h4>
<h5 id="生成profilehttpsenwikipediaorgwikiprofiling_computer_programming文件">生成<a href="https://en.wikipedia.org/wiki/Profiling_%28computer_programming%29" target="_blank" rel="noopener noreffer">profile</a>文件</h5>
<ul>
<li><code>gmon_start</code>函数。如果它是空的，我们跳过它，不调用它。否则，调用它来设置profiling。该函数调用一个例程开始profiling，并且调用<code>at_exit</code>去调用另一个程序运行,并且在运行结束的时候生成gmon.out</li>
</ul>
<blockquote>
<p><em>为了优化软件中频繁调用的部分，从而提高程序整体执行的效率，我们可以在使用gcc编译的时候加上</em> <code>-pg</code><em>标志。这样在程序运行结束的时候会生成一个记录程序运行状态的文件叫做</em><code>gmon.out</code><em>。然后，我们可以使用一个名为</em><code>gprof</code><em>的GNU profiler工具来分析该文件从而获得程序各部分的运行时间，来反映其运行性能</em></p>
<p>相关文章：<a href="https://developer.ibm.com/" target="_blank" rel="noopener noreffer">《Home IBM Developer》</a></p>
</blockquote>
<h4 id="frame_dummy函数分析">frame_dummy函数分析</h4>
<ul>
<li><u>无论那种情况（前面函数的执行情况）</u>(原文是In either case)，下一步我们将调用<code>frame_dummy</code>函数</li>
<li><code>frame_dummy</code>函数的目的是调用<code>__register_frame_info</code>函数，但是，调用<code>frame_dummy</code>是为了给上述函数设置参数。这么做的目的是为了在出错时设置<code>unwinding stack frames</code> $\Longrightarrow$ 不是本次重点，想了解请阅读<a href="https://stackoverflow.com/questions/2331316/what-is-stack-unwinding" target="_blank" rel="noopener noreffer">《What is stack unwinding?》</a></li>
</ul>
<h4 id="_do_global_ctors_aux-longrightarrow-finally-were-getting-constructive"><code>_do_global_ctors_aux</code> $\Longrightarrow$ Finally we&rsquo;re getting constructive!</h4>
<ul>
<li>如果在调用main函数之前，你的程序出了问题，你很可能需要看看这个函数。当然，这里存放了全局C++对象的构造函数，但是，这里也能存放其他东西。</li>
</ul>
<h5 id="example">Example</h5>
<ul>
<li>我们把prog1.c修改为prog2.c</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">a_constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>void __attribute__ ((constructor)) a_constructor()</code>：它告诉GCC：链接器应该在<code>__do_global_ctors_aux</code>使用的表里创建一个指针指向这里</p>
</li>
<li>
<p><code>__FUNCTION__</code>被编译器替换成了当前函数的名字</p>
</li>
<li>
<p>运行</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./prog2
</span></span><span class="line"><span class="cl">a_constructor
</span></span><span class="line"><span class="cl">main
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>反编译看一下<code>_init</code>的汇编（自己的Linux上面编不出来的可以看一下<a href="https://stackoverflow.com/questions/27900834/do-global-ctors-aux-not-shown-in-objdump" target="_blank" rel="noopener noreffer">《__do_global_ctors_aux not shown in objdump》</a>，不过看文章就行了）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">08048290 &lt;_init&gt;:
</span></span><span class="line"><span class="cl"> 8048290:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 8048291:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 8048293:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048294:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 8048297:       e8 00 00 00 00          call   804829c &lt;_init+0xc&gt;
</span></span><span class="line"><span class="cl"> 804829c:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 804829d:       81 c3 58 1d 00 00       add    $0x1d58,%ebx
</span></span><span class="line"><span class="cl"> 80482a3:       8b 93 fc ff ff ff       mov    -0x4(%ebx),%edx
</span></span><span class="line"><span class="cl"> 80482a9:       85 d2                   test   %edx,%edx
</span></span><span class="line"><span class="cl"> 80482ab:       74 05                   je     80482b2 &lt;_init+0x22&gt;
</span></span><span class="line"><span class="cl"> 80482ad:       e8 1e 00 00 00          call   80482d0 &lt;__gmon_start__@plt&gt;
</span></span><span class="line"><span class="cl"> 80482b2:       e8 d9 00 00 00          call   8048390 &lt;frame_dummy&gt;
</span></span><span class="line"><span class="cl"> 80482b7:       e8 94 01 00 00          call   8048450 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"> 80482bc:       58                      pop    %eax
</span></span><span class="line"><span class="cl"> 80482bd:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 80482be:       c9                      leave
</span></span><span class="line"><span class="cl"> 80482bf:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们可以看到，上述的地址和prog1的地址略微有所不同。<u>这些有差异的地址似乎相对于prog1移动了28个字节</u>。<b>这里，有两个函数：<code>&quot;a_constructor&quot;</code>（加上结束符一共14个字节）、<code>&quot;main&quot;</code>（加上结束符一共5个字节）和两个格式化字符串<code>&quot;%s\n&quot;</code>（2*4个字节，加上一个1字节的换行符和终止符），所以14 + 5 + 4 + 4 = 27？ 似乎还差一个</b>。不管怎样，这只是个猜想，我就不仔细研究了。然后我们就要跳入到<code>__do_global_ctors_aux</code>函数中去，看看到底发生了什么。</li>
</ul>
<h5 id="源码-1">源码</h5>
<ul>
<li>位于GCC源码中的gcc/crtstuff.c里</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__do_global_ctors_aux</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">func_ptr</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">__CTOR_END__</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="p">(</span><span class="n">func_ptr</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">p</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如上所示，p的值被初始化成<code>__CTOR_END__</code>减去一个字节。这是一种指针算法
<ul>
<li><b>如果指针指向一个函数，在这种情况下，-1表示向上移动一个指针或者说4个字节</b>。<u>We&rsquo;ll see that in the assembler as well. While the pointer doesn&rsquo;t have a value of -1 (cast to a pointer), we&rsquo;ll call the function we&rsquo;re pointing at, and then back the pointer up again</u></li>
<li>这个指针数组起始于-1，并且包含若干个函数指针</li>
</ul>
</li>
</ul>
<h5 id="对应的汇编">对应的汇编</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">08048450 &lt;__do_global_ctors_aux&gt;:
</span></span><span class="line"><span class="cl"> 8048450:       55                      push   %ebp
</span></span><span class="line"><span class="cl"> 8048451:       89 e5                   mov    %esp,%ebp
</span></span><span class="line"><span class="cl"> 8048453:       53                      push   %ebx
</span></span><span class="line"><span class="cl"> 8048454:       83 ec 04                sub    $0x4,%esp
</span></span><span class="line"><span class="cl"> 8048457:       a1 14 9f 04 08          mov    0x8049f14,%eax
</span></span><span class="line"><span class="cl"> 804845c:       83 f8 ff                cmp    $0xffffffff,%eax
</span></span><span class="line"><span class="cl"> 804845f:       74 13                   je     8048474 &lt;__do_global_ctors_aux+0x24&gt;
</span></span><span class="line"><span class="cl"> 8048461:       bb 14 9f 04 08          mov    $0x8049f14,%ebx
</span></span><span class="line"><span class="cl"> 8048466:       66 90                   xchg   %ax,%ax
</span></span><span class="line"><span class="cl"> 8048468:       83 eb 04                sub    $0x4,%ebx
</span></span><span class="line"><span class="cl"> 804846b:       ff d0                   call   *%eax
</span></span><span class="line"><span class="cl"> 804846d:       8b 03                   mov    (%ebx),%eax
</span></span><span class="line"><span class="cl"> 804846f:       83 f8 ff                cmp    $0xffffffff,%eax
</span></span><span class="line"><span class="cl"> 8048472:       75 f4                   jne    8048468 &lt;__do_global_ctors_aux+0x18&gt;
</span></span><span class="line"><span class="cl"> 8048474:       83 c4 04                add    $0x4,%esp
</span></span><span class="line"><span class="cl"> 8048477:       5b                      pop    %ebx
</span></span><span class="line"><span class="cl"> 8048478:       5d                      pop    %ebp
</span></span><span class="line"><span class="cl"> 8048479:       c3                      ret
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="函数最开始的部分">函数最开始的部分</h5>
<ul>
<li>函数最开始的部分依然遵从了C函数正常的调用惯例（保存调用者的栈基址寄存器，设置当前函数的栈基址寄存器），本函数中还增加了一点：额外把<code>%ebx</code>保存到了栈中，因为这个函数后面会使用到它。同时，我们也为（C代码中的）指针p保留了空间。你可能注意到了，即使我们在栈上为其开辟了空间，但是从未使用这部分空间。<b>取而代之的是，<code>p</code>将会保存到<code>%ebx</code>中，<code>*p</code>会保存到<code>%eax</code>中</b>。$\Longrightarrow$ 注意看前面_init的汇编，函数执行完栈里面弹出来的东西，在本函数的汇编里面没找到 （ⓜ️D，真TM难找）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 80482b7:       e8 94 01 00 00          call   8048450 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"> 80482bc:       58                      pop    %eax
</span></span><span class="line"><span class="cl"> 80482bd:       5b                      pop    %ebx
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="循环之前的设置">循环之前的设置</h5>
<ul>
<li>看起来编译器做了一些优化，编译器并没有直接“加载<code>__CTOR_END__</code>，然后将其值减去1，再查找它指向的内容”，而是直接加载<code>*(__CTOR_END__ - 1)</code>，这是一个立即数<code>0x8049f14</code>（注意，<code>$0x8049f14</code>意思是一个立即数，而不带<code>$</code>，只写<code>0x8049f14</code>的意思是这个地址指向的内容）。这个数里面的内容被直接放到了%eax中，然后立刻比较%eax和-1，如果相等，则跳转到地址0x8048474，回收栈，弹出我们保存在栈里的内容，函数调用结束，返回。</li>
<li>假设在函数表中至少有一个值，立即数<code>0x8049f14</code>被存放到<code>%ebx</code>，也就是函数指针<code>p</code>，然后执行指令<code>xchg %ax,%ax</code>，这是什么鬼？$\Downarrow$</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> 8048461:       bb 14 9f 04 08          mov    $0x8049f14,%ebx
</span></span><span class="line"><span class="cl"> 8048466:       66 90                   xchg   %ax,%ax
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b>原来这是X86 16或者32位里的一个nop（No Operation）语句。它什么也不做，只是占据了一个指令周期，起一个占位符作用而已。在这种情况下，使循环开始于<code>8048468</code>，而不是<code>8048466</code>。<u>这么做的好处是使循环开始的地方以4字节对齐，这样整个循环将会极大可能的被保存到一个cache line里，而不会被分成两段，从而起到加速执行的作用</u></b> （这段感觉编译器好🐮🅱️啊）</li>
<li>接下来，将<code>%ebx</code>减去4，从而为下一次循环做好准备，调用<code>%eax</code>里保存的地址对应的函数，然后将下一个函数指针移至<code>%eax</code>中，并且和-1比较，如果不等于-1，再次调回到上述循环</li>
</ul>
<h5 id="and-finally-the-epilogue">And finally the epilogue</h5>
<p>Otherwise we fall through into our function epilogue and return to <strong>_init</strong>, which immediately falls through into its epilogue and returns to <strong><strong>libc_csu_init</strong></strong>. Bet you forgot all about him. There&rsquo;s still a loop to deal with there but first&ndash;</p>
<h5 id="使用gdb检测prog2">使用gdb检测prog2</h5>
<ul>
<li><b>GDB总是显示你将要执行的下一行或者下一条指令</b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ !gdb
</span></span><span class="line"><span class="cl">gdb prog2
</span></span><span class="line"><span class="cl">Reading symbols from /home/patrick/src/asm/prog2...done.
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set</span> disassemble-next-line on
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> b *0x80482b7
</span></span><span class="line"><span class="cl">Breakpoint <span class="m">1</span> at 0x80482b7
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行调试器，打开<code>disassemble-next-line</code>，这样它就会总是显示下一条将要执行的指令的汇编代码，然后我们在<code>_init</code>函数将要调用<code>__do_global_ctors_aux</code>函数的地方设置一个断点</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> r
</span></span><span class="line"><span class="cl">Starting program: /home/patrick/src/asm/prog2 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Breakpoint 1, 0x080482b7 in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482b7 &lt;_init+39&gt;:    e8 <span class="m">94</span> <span class="m">01</span> <span class="m">00</span> <span class="m">00</span> call   0x8048450 &lt;__do_global_ctors_aux&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x08048450 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048450 &lt;__do_global_ctors_aux+0&gt;:     <span class="m">55</span> push   %ebp
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>输入<code>r</code>继续运行程序，到达断点处。再输入<code>si</code>单步执行指令，现在我们进入了<code>__do_global_ctors_aux</code>函数内部。后面你会看到若干次我并没输入任何指令，但是GDB却继续执行，这是因为我只是按了回车而已，GDB默认会重复上条指令。所以，如果我按下回车，GDB将会按照输入<code>si</code>继续执行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span>
</span></span><span class="line"><span class="cl">0x08048451 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048451 &lt;__do_global_ctors_aux+1&gt;:     <span class="m">89</span> e5  mov    %esp,%ebp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048453 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048453 &lt;__do_global_ctors_aux+3&gt;:     <span class="m">53</span> push   %ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048454 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048454 &lt;__do_global_ctors_aux+4&gt;:     <span class="m">83</span> ec <span class="m">04</span>   sub    <span class="nv">$0</span>x4,%esp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048457 in __do_global_ctors_aux <span class="o">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>好的，现在我们已经执行完程序最开始的部分，接下来将要执行真正的代码了。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048457 &lt;__do_global_ctors_aux+7&gt;:     a1 <span class="m">14</span> 9f <span class="m">04</span> <span class="m">08</span> mov    0x8049f14,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x0804845c in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804845c &lt;__do_global_ctors_aux+12&gt;:    <span class="m">83</span> f8 ff   cmp    <span class="nv">$0</span>xffffffff,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> p/x <span class="nv">$eax</span>
</span></span><span class="line"><span class="cl"><span class="nv">$1</span> <span class="o">=</span> 0x80483b4
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我想知道加载完指针之后会是什么样，所以输入了<code>p/x $eax</code>，意思是以十六进制的形式打印寄存器<code>%eax</code>的内容。它不等于-1，所以我们假定程序将继续执行循环。现在由于我的最后一条指令是print指令，所以我不能按回车继续执行了，下次我就得输入<code>si</code>了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x0804845f in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804845f &lt;__do_global_ctors_aux+15&gt;:    <span class="m">74</span> <span class="m">13</span>  je     0x8048474 &lt;__do_global_ctors_aux+36&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048461 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048461 &lt;__do_global_ctors_aux+17&gt;:    bb <span class="m">14</span> 9f <span class="m">04</span> <span class="m">08</span> mov    <span class="nv">$0</span>x8049f14,%ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048466 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048466 &lt;__do_global_ctors_aux+22&gt;:    <span class="m">66</span> <span class="m">90</span>  xchg   %ax,%ax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048468 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048468 &lt;__do_global_ctors_aux+24&gt;:    <span class="m">83</span> eb <span class="m">04</span>   sub    <span class="nv">$0</span>x4,%ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x0804846b in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804846b &lt;__do_global_ctors_aux+27&gt;:    ff d0  call   *%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">a_constructor <span class="o">()</span> at prog2.c:3
</span></span><span class="line"><span class="cl"><span class="m">3</span>   void __attribute__ <span class="o">((</span>constructor<span class="o">))</span> a_constructor<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080483b4 &lt;a_constructor+0&gt;:     <span class="m">55</span> push   %ebp
</span></span><span class="line"><span class="cl">   0x080483b5 &lt;a_constructor+1&gt;:     <span class="m">89</span> e5  mov    %esp,%ebp
</span></span><span class="line"><span class="cl">   0x080483b7 &lt;a_constructor+3&gt;:     <span class="m">83</span> ec <span class="m">18</span>   sub    <span class="nv">$0</span>x18,%esp
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>这部分代码很有意思。我们一步步调用来看看。现在我们已经进入了我们自己写的函数<code>a_constructor</code>。因为GDB是能看到我们的源代码的，所以它在下一行给出了我们源码。又因为我打开了<code>disassemble-next-line</code>，所以它也会给出对应的汇编代码。这个例子中输出了函数最开始的部分，对应了函数的声明，所以我们得到了三行汇编。有意思吧？现在，我输入<code>n</code>命令，这个时候我们写的<code>prinf</code>就会被调用了。第一个n跳过了程序最开始的部分，第二个n执行prinf，第三个n执行了函数的结尾部分。如果你想知道为什么你需要在函数最开始和结束部分做些处理的话，现在，你使用GDB的单步调试应该能知道答案了吧。</p>
</li>
<li>
<p>之前，我们已经把<code>a_constructor</code>字符串的地址作为<code>printf</code>的参数保存到了栈里，因为编译器足够的智能，发现实际上<code>puts</code>函数才是我们想要的，所以它调用了<code>puts</code>函数。</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">(gdb) n
</span></span><span class="line"><span class="cl">4       printf(&#34;%s\n&#34;, __FUNCTION__);
</span></span><span class="line"><span class="cl">=&gt; 0x080483ba &lt;a_constructor+6&gt;:     c7 04 24 a5 84 04 08   movl   $0x80484a5,(%esp)
</span></span><span class="line"><span class="cl">   0x080483c1 &lt;a_constructor+13&gt;:    e8 2a ff ff ff call   0x80482f0 &lt;puts@plt&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>因为我们正在运行中来调试程序，所以我们看到了a_constructor打印出了上面的内容。后括号}对应了函数的结尾部分</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> n
</span></span><span class="line"><span class="cl">a_constructor
</span></span><span class="line"><span class="cl"><span class="m">5</span>   <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080483c6 &lt;a_constructor+18&gt;:    c9 leave  
</span></span><span class="line"><span class="cl">   0x080483c7 &lt;a_constructor+19&gt;:    c3 ret 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>有关<code>leave</code>指令实际操作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> movl %ebp, %esp
</span></span><span class="line"><span class="cl"> popl %ebp
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>继续执行，我们就退出了函数，并返回了调用函数。这里我又不得不输入<code>si</code>了：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> n
</span></span><span class="line"><span class="cl">0x0804846d in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804846d &lt;__do_global_ctors_aux+29&gt;:    8b <span class="m">03</span>  mov    <span class="o">(</span>%ebx<span class="o">)</span>,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x0804846f in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x0804846f &lt;__do_global_ctors_aux+31&gt;:    <span class="m">83</span> f8 ff   cmp    <span class="nv">$0</span>xffffffff,%eax
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048472 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048472 &lt;__do_global_ctors_aux+34&gt;:    <span class="m">75</span> f4  jne    0x8048468 &lt;__do_global_ctors_aux+24&gt;
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> p/x <span class="nv">$eax</span>
</span></span><span class="line"><span class="cl"><span class="nv">$2</span> <span class="o">=</span> 0xffffffff
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我比较好奇，并且再次看了一下：这次，我们的函数指针指向了-1，所以，程序退出了循环</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> si
</span></span><span class="line"><span class="cl">0x08048474 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048474 &lt;__do_global_ctors_aux+36&gt;:    <span class="m">83</span> c4 <span class="m">04</span>   add    <span class="nv">$0</span>x4,%esp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048477 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048477 &lt;__do_global_ctors_aux+39&gt;:    5b pop    %ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048478 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048478 &lt;__do_global_ctors_aux+40&gt;:    5d pop    %ebp
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x08048479 in __do_global_ctors_aux <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x08048479 &lt;__do_global_ctors_aux+41&gt;:    c3 ret    
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482bc in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482bc &lt;_init+44&gt;:    <span class="m">58</span> pop    %eax
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们现在退回到了<code>_init</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482bd in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482bd &lt;_init+45&gt;:    5b pop    %ebx
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482be in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482be &lt;_init+46&gt;:    c9 leave  
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080482bf in _init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080482bf &lt;_init+47&gt;:    c3 ret    
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span><span class="line"><span class="cl">0x080483f9 in __libc_csu_init <span class="o">()</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt; 0x080483f9 &lt;__libc_csu_init+25&gt;:  8d bb 1c ff ff ff  lea    -0xe4<span class="o">(</span>%ebx<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> q
</span></span><span class="line"><span class="cl">A debugging session is active.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Inferior <span class="m">1</span> <span class="o">[</span>process 17368<span class="o">]</span> will be killed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Quit anyway? <span class="o">(</span>y or n<span class="o">)</span> y
</span></span><span class="line"><span class="cl">$
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="回到__libc_csu_init__">回到<code>__libc_csu_init__</code></h4>
<ul>
<li>源码</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__libc_csu_init</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">_init</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="n">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">__init_array_end</span> <span class="o">-</span> <span class="n">__init_array_start</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span><span class="o">*</span><span class="n">__init_array_start</span> <span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="这是另一个函数的循环调用">这是另一个函数的循环调用</h5>
<ul>
<li><code>__init__</code>数组里面是什么呢？你肯定不会想到。你也可以在这个阶段自定义代码。这时刚刚从运行我们自定义的构造函数的<code>_init</code>函数返回，这意味着，在这个数组里面的内容将会在构造函数完成之后运行。你能通过某种方式告诉编译器你想在这个阶段运行某个你自定义的函数。这个函数也会收到和main函数相同的参数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.init_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">init</span><span class="p">)</span> <span class="o">*</span><span class="n">__init</span> <span class="o">=</span> <span class="n">init</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="程序将返回__libc_start_main__">程序将返回<code>__libc_start_main__</code></h4>
<ul>
<li>它调用了我们的main函数，然后把main函数的返回值传递给exit()函数</li>
</ul>
<h5 id="exit函数运行了更多的循环">exit()函数运行了更多的循环</h5>
<ul>
<li>exit()函数按照注册顺序依次运行了在at_exit()中注册的函数。然后会运行另外一个循环，这次的循环是在<code>__fini_</code>数组中定义的。在运行完这些函数之后，就会调用析构函数。</li>
</ul>
<h3 id="这个程序把上面所有的过程联系了起来">这个程序，把上面所有的过程联系了起来</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">preinit</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fini</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.init_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">init</span><span class="p">)</span> <span class="o">*</span><span class="n">__init</span> <span class="o">=</span> <span class="n">init</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.preinit_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">preinit</span><span class="p">)</span> <span class="o">*</span><span class="n">__preinit</span> <span class="o">=</span> <span class="n">preinit</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&#34;.fini_array&#34;</span><span class="p">)))</span> <span class="n">typeof</span><span class="p">(</span><span class="n">fini</span><span class="p">)</span> <span class="o">*</span><span class="n">__fini</span> <span class="o">=</span> <span class="n">fini</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>  <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="n">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="n">destructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">my_atexit</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">my_atexit2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="n">atexit</span><span class="p">(</span><span class="n">my_atexit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> <span class="n">atexit</span><span class="p">(</span><span class="n">my_atexit2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译并运行这个函数（这里我将其命名为hooks.c），输出如下：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ./hooks
</span></span><span class="line"><span class="cl">preinit
</span></span><span class="line"><span class="cl">constructor
</span></span><span class="line"><span class="cl">init
</span></span><span class="line"><span class="cl">my_atexit2
</span></span><span class="line"><span class="cl">my_atexit
</span></span><span class="line"><span class="cl">fini
</span></span><span class="line"><span class="cl">destructor
</span></span><span class="line"><span class="cl">$
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="回顾">回顾</h2>
<ul>
<li>还是这张图</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support2-1.png" title="/img/Operating System/support2-1.png" data-thumbnail="/img/Operating System/support2-1.png" data-sub-html="<h2>总体流程图</h2>">
        
    </a><figcaption class="image-caption">总体流程图</figcaption>
    </figure>
<h2 id="总结">总结</h2>
<ul>
<li>汇编真TM难分析</li>
<li>由于是32位的老Linux，所以没能在自己的虚拟机上面复现</li>
<li>涉及编译和链接的过程，应该去补<a href="https://luomuxiaoxiao.com/?p=137" target="_blank" rel="noopener noreffer">《计算机原理系列之三 ——– 如何编译目标文件》</a>这篇文章</li>
</ul>
<h2 id="相关参考资料">相关参考资料</h2>
<ul>
<li>参考文章
<ul>
<li>
<p><a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html" target="_blank" rel="noopener noreffer">《Linux x86 Program Start Up or - How the heck do we get to main()? by Patrick Horgan》</a></p>
</li>
<li>
<p><a href="https://luomuxiaoxiao.com/?p=516" target="_blank" rel="noopener noreffer">《Linux X86 程序启动 – main函数是如何被执行的？——落木萧萧的博客》</a>（已与作者沟通，同意部分转载）</p>
</li>
<li>
<p><a href="https://www.gnu.org/software/hurd/glibc/startup.html" target="_blank" rel="noopener noreffer">《How libc startup in a process works》</a></p>
</li>
</ul>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Chapter2-部分二刷-个人理解System call</title>
    <link>https://Jungle430.github.io/posts/operating-system/support1/</link>
    <pubDate>Sun, 26 Feb 2023 21:02:57 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/support1/</guid>
    <description><![CDATA[<h1 id="二刷部分chapter2-longrightarrow-如何理解system-call">二刷部分Chapter2 $\Longrightarrow$ 如何理解<code>System call</code></h1>
<h2 id="问题构造最小的hello-world程序">问题：构造最小的”Hello world”程序</h2>
<h3 id="基本程序和静态编译">基本程序和静态编译</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello world&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -static hello.c -o hello <span class="o">&amp;&amp;</span> ./hello
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译出来很大(Ubuntu上约900KB)</p>
<ul>
<li>如果只编译，不链接，看一下obj文件的反汇编</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gcc -c hello.c <span class="o">&amp;&amp;</span> objdump -d hello.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hello.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;main&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">55</span>                   	push   %rbp
</span></span><span class="line"><span class="cl">   5:	<span class="m">48</span> <span class="m">89</span> e5             	mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">   8:	<span class="m">48</span> 8d <span class="m">05</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	lea    0x0<span class="o">(</span>%rip<span class="o">)</span>,%rax        <span class="c1"># f &lt;main+0xf&gt;</span>
</span></span><span class="line"><span class="cl">   f:	<span class="m">48</span> <span class="m">89</span> c7             	mov    %rax,%rdi
</span></span><span class="line"><span class="cl">  12:	b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  17:	e8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	call   1c &lt;main+0x1c&gt;
</span></span><span class="line"><span class="cl">  1c:	b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  21:	5d                   	pop    %rbp
</span></span><span class="line"><span class="cl">  22:	c3                   	ret    
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>就和普通的函数差不多，只有参数压栈，call和参数出栈的过程
<ul>
<li>普通函数<code>fun.c</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -c fun.c <span class="o">&amp;&amp;</span> objdump -d fun.o 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fun.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;f&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">55</span>                   	push   %rbp
</span></span><span class="line"><span class="cl">   5:	<span class="m">48</span> <span class="m">89</span> e5             	mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">   8:	<span class="m">90</span>                   	nop
</span></span><span class="line"><span class="cl">   9:	5d                   	pop    %rbp
</span></span><span class="line"><span class="cl">   a:	c3                   	ret
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>可以看到不链接的话和普通的函数调用过程差不多</p>
</li>
<li>
<p>链接失败！</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">○ → ld hello.o
</span></span><span class="line"><span class="cl">ld: 警告: 无法找到项目符号 _start<span class="p">;</span> 缺省为 <span class="m">0000000000401000</span>
</span></span><span class="line"><span class="cl">ld: hello.o: in <span class="k">function</span> <span class="sb">`</span>main<span class="s1">&#39;:
</span></span></span><span class="line"><span class="cl"><span class="s1">hello.c:(.text+0x18): undefined reference to `printf&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>本来以为找的<code>main</code>，但是它实际上在找<code>_start</code>这个东西？</li>
</ul>
<h3 id="那我们就把main改成_start">那我们就把<code>main</code>改成<code>_start</code></h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">_start</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello world&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/support1-1.png" title="/img/Operating System/support1-1.png" data-thumbnail="/img/Operating System/support1-1.png" data-sub-html="<h2>ld仍然不予通过-&gt; 找不到printf?</h2>">
        
    </a><figcaption class="image-caption"><code>ld仍然不予通过</code>-&gt; 找不到printf?</figcaption>
    </figure>
<ul>
<li>那把printf也给去了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">_start</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译与链接全部成功！</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">○ → gcc -c hello.c <span class="o">&amp;&amp;</span> objdump -d hello.o <span class="o">&amp;&amp;</span> ld hello.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hello.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;_start&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">55</span>                   	push   %rbp
</span></span><span class="line"><span class="cl">   5:	<span class="m">48</span> <span class="m">89</span> e5             	mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">   8:	<span class="m">90</span>                   	nop
</span></span><span class="line"><span class="cl">   9:	5d                   	pop    %rbp
</span></span><span class="line"><span class="cl">   a:	c3                   	ret    
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>程序很小，只有99个字节</p>
</li>
<li>
<p>但是运行 $\Longrightarrow$ 段错误！</p>
</li>
<li>
<p>但是里面加入while(1)这种死循环就没事了</p>
</li>
</ul>
<hr>
<ul>
<li>对于没有while(1)的a.out，使用gdb狠狠的拷打调试</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/support1-2.jpg" title="/img/Operating System/support1-2.jpg" data-thumbnail="/img/Operating System/support1-2.jpg">
        
    </a>
<p>这个时候我们看到rsp的地址是合法的，里面的值是1，当执行ret后，rsp将栈顶的值1赋给了pc，gdb显示pc访问了非法位置</p>
<figure><a class="lightgallery" href="/img/Operating%20System/support1-3.png" title="/img/Operating System/support1-3.png" data-thumbnail="/img/Operating System/support1-3.png" data-sub-html="<h2>🤡呦吼，崩溃了！</h2>">
        
    </a><figcaption class="image-caption">🤡呦吼，崩溃了！</figcaption>
    </figure>
<ul>
<li>CPU只会执行指令，该怎么停下来？(mov,add这些指令停不下来)</li>
<li>需要什么指令让它停下来？ $\Longrightarrow$ <code>System call</code> 也就是管态</li>
</ul>
<h3 id="最小的hello-world程序">最小的<code>Hello world</code>程序</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_write</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">write</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">fd</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span>        <span class="o">%</span><span class="n">rsi</span>   <span class="err">#</span>   <span class="n">buf</span><span class="o">=</span><span class="n">st</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>   <span class="err">#</span>   <span class="n">count</span><span class="o">=</span><span class="n">ed</span><span class="o">-</span><span class="n">st</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_exit</span><span class="p">,</span>  <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">exit</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">status</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>它在干什么
<ul>
<li>给许多寄存器赋值，然后call了syscall</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support1-4.png" title="/img/Operating System/support1-4.png" data-thumbnail="/img/Operating System/support1-4.png" data-sub-html="<h2>编译后查看反汇编代码</h2>">
        
    </a><figcaption class="image-caption">编译后查看反汇编代码</figcaption>
    </figure>
<ul>
<li>ld链接，编译成功，运行成功！</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">○ → objdump -d a.out <span class="p">|</span> less
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/support1-5.png" title="/img/Operating System/support1-5.png" data-thumbnail="/img/Operating System/support1-5.png" data-sub-html="<h2>查看反汇编代码</h2>">
        
    </a><figcaption class="image-caption">查看反汇编代码</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/support1-6.png" title="/img/Operating System/support1-6.png" data-thumbnail="/img/Operating System/support1-6.png" data-sub-html="<h2>man syscall查看syscall的文档</h2>">
        
    </a><figcaption class="image-caption"><code>man syscall</code>查看syscall的文档</figcaption>
    </figure>
<p>我们会发现，syscall会告诉我们在各种架构的计算机中该如何通过寄存器为syscall传入参数,<code>man syscalls</code>会告诉我们Linux操作系统的接口</p>
<ul>
<li>所以程序的执行模式</li>
</ul>
<div class="mermaid" id="id-1"></div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>感谢<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="typeit"><div id="id-2" class=""></div></div>
<p>感谢jyy互助群里<b>zweix</b>大佬提供的<a href="https://github.com/zweix123/jyyslide-md" target="_blank" rel="noopener noreffer">
jyyslide-md</a></p>
<p>使用过程中发现因为Windows很烂的编码问题始终会出现gbk解码错误的error，和<b>zweix</b>大佬差不多沟通了大半个下午，由于懒得给vscode配环境直接改成手动print看数据🤣，感觉就是命令行传参编码的问题，最后终于找到了解决方法😆，只能说Windows这个编码设置也是没谁了。</p>
</div>
        </div>
    </div>
]]></description>
</item>
<item>
    <title>Operating System Chapter3 多处理器编程：从入门到放弃</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter3/</link>
    <pubDate>Sun, 01 Jan 2023 19:59:41 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter3/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="多处理器编程从入门到放弃">多处理器编程：从入门到放弃</h2>
<h3 id="overview">Overview</h3>
<p>复习</p>
<ul>
<li>程序 (源代码<code>S</code>、二进制代码<code>C</code>) = 状态机
<ul>
<li>编译器 $C = \textrm{compile}(S)\newline$</li>
</ul>
</li>
<li>应用视角的操作系统 = syscall 指令</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 在多处理器时代，上面的理解应该作出怎样的变化？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>并发程序的状态机模型</li>
<li>线程库 <code>thread.h</code></li>
<li>多线程带来的麻烦</li>
</ul>
<h3 id="入门">入门</h3>
<h4 id="three-easy-pieces-并发">Three Easy Pieces: 并发</h4>
<blockquote>
<p>Concurrent: existing, happening, or done <em>at the same time</em>.</p>
<p>In computer science, concurrency refers to the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. (Wikipedia)</p>
</blockquote>
<p>为什么在这门课 (先) 讲并发？</p>
<ul>
<li>讲并发
<ul>
<li><strong>操作系统是最早的并发程序之一</strong></li>
<li>今天遍地都是多处理器系统 (为什么？)</li>
</ul>
</li>
<li>先讲并发
<ul>
<li>实验是 bottom-up 的 (L1: 多处理器上的 <code>malloc</code>/<code>free</code>)</li>
</ul>
</li>
</ul>
<h4 id="并发的基本单位线程">并发的基本单位：线程</h4>
<p>共享内存的多个执行流</p>
<ul>
<li>执行流拥有独立的堆栈/寄存器</li>
<li>共享全部的内存 (指针可以互相引用)</li>
</ul>
<hr>
<p>用状态机的视角就很容易理解了！</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-1.jpg" title="/img/Operating System/chapter3-1.jpg" data-thumbnail="/img/Operating System/chapter3-1.jpg" data-sub-html="<h2>手写(状态机,stack frame与共享内存)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>状态机,stack frame与共享内存</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-2.jpg" title="/img/Operating System/chapter3-2.jpg" data-thumbnail="/img/Operating System/chapter3-2.jpg" data-sub-html="<h2>手写(线程)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>线程</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-3.jpg" title="/img/Operating System/chapter3-3.jpg" data-thumbnail="/img/Operating System/chapter3-3.jpg" data-sub-html="<h2>手写(并发编程的不确定性)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>并发编程的不确定性</code>)</figcaption>
    </figure>
<h4 id="入门threadh-简化的线程-api">入门：<code>thread.h</code> 简化的线程 API</h4>
<p>我们为大家封装了超级好用的线程 API (<a href="https://jyywiki.cn/pages/OS/2022/demos/thread.h" target="_blank" rel="noopener noreffer"><code>thread.h</code></a>)</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">create</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>创建一个入口函数是<code>fn</code>的线程，并立即开始执行（状态机理解创建 $\rightarrow$ 在状态机里加入一个新的栈帧的列表，并且每次可以选到每一个链表来执行）</p>
<ul>
<li>
<p>void fn(int tid) { &hellip; }</p>
</li>
<li>
<p>参数 <code>tid</code> 从 1 开始编号</p>
</li>
</ul>
</li>
<li>
<p>语义：在状态中新增 stack frame 列表并初始化为 <code>fn(tid)</code></p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">join</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>等待所有运行线程的 <code>fn</code> 返回</li>
<li>在 <code>main</code> 返回时会自动等待所有线程结束</li>
<li><strong>语义：在有其他线程未执行完时死循环，否则返回</strong>（用状态机空转的角度来理解）</li>
</ul>
</li>
<li>
<p>编译时需要增加 <code>-lpthread</code></p>
</li>
</ul>
<p><code>thread.h</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdatomic.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define NTHREAD 64
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">enum</span> <span class="p">{</span> <span class="n">T_FREE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">T_LIVE</span><span class="p">,</span> <span class="n">T_DEAD</span><span class="p">,</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kr">thread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_t</span> <span class="kr">thread</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kr">thread</span> <span class="n">tpool</span><span class="p">[</span><span class="n">NTHREAD</span><span class="p">],</span> <span class="o">*</span><span class="n">tptr</span> <span class="o">=</span> <span class="n">tpool</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">wrapper</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="kr">thread</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">thread</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">(</span><span class="kr">thread</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">create</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">tptr</span> <span class="o">-</span> <span class="n">tpool</span> <span class="o">&lt;</span> <span class="n">NTHREAD</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">tptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">tptr</span> <span class="o">-</span> <span class="n">tpool</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">T_LIVE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">fn</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">tptr</span><span class="o">-&gt;</span><span class="kr">thread</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">,</span> <span class="n">tptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">++</span><span class="n">tptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">join</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NTHREAD</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tpool</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">status</span> <span class="o">==</span> <span class="n">T_LIVE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pthread_join</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="kr">thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">t</span><span class="o">-&gt;</span><span class="n">status</span> <span class="o">=</span> <span class="n">T_DEAD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">cleanup</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="入门-contd">入门 (cont&rsquo;d)</h4>
<p>Hello, Multi-threaded World!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Ta</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tb</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;b&#34;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Ta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译（注意使用<code>-lpthread</code>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc the.c -lpthread 
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行 $\rightarrow$ 交替输出</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-4.png" title="/img/Operating System/chapter3-4.png" data-thumbnail="/img/Operating System/chapter3-4.png" data-sub-html="<h2>Linux(输出结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>输出结果</code>)</figcaption>
    </figure>
<p>利用 <code>thread.h</code> 就可以写出利用多处理器的程序！</p>
<ul>
<li>操作系统会自动把线程放置在不同的处理器上</li>
<li>在后台运行，可以看到 CPU 使用率超过了 100%（2个接近200， 4个接近400）$\rightarrow$ 使用了多个CPU</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-5.png" title="/img/Operating System/chapter3-5.png" data-thumbnail="/img/Operating System/chapter3-5.png" data-sub-html="<h2>top(查看CPU使用率)</h2>">
        
    </a><figcaption class="image-caption">top(<code>查看CPU使用率</code>)</figcaption>
    </figure>
<blockquote>
<p>会编程，你就拥有全世界！</p>
</blockquote>
<p>如何证明线程确实共享内存？</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/shm-test.c" target="_blank" rel="noopener noreffer">shm-test.c</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Thello</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">usleep</span><span class="p">(</span><span class="n">id</span> <span class="o">*</span> <span class="mi">100000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello from thread #%c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;123456789ABCDEF&#34;</span><span class="p">[</span><span class="n">x</span><span class="o">++</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Thello</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-6.png" title="/img/Operating System/chapter3-6.png" data-thumbnail="/img/Operating System/chapter3-6.png" data-sub-html="<h2>Linux(shm-test.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>shm-test.c运行结果</code>)</figcaption>
    </figure>
<hr>
<p>如何证明线程具有独立堆栈 (以及确定它们的范围)？</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/stack-probe.c" target="_blank" rel="noopener noreffer">stack-probe.c</a> (输出有点乱？我们还有 <code>sort</code>!)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__thread</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span> <span class="c1">// thread-local variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__thread</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// objdump to see how thread-local variables are implemented
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">set_cur</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">char</span> <span class="o">*</span><span class="n">get_cur</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="n">cur</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">stackoverflow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">set_cur</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">1024</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">base</span> <span class="o">-</span> <span class="n">get_cur</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Stack size of T%d &gt;= %d KB</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">sz</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tprobe</span><span class="p">(</span><span class="kt">int</span> <span class="n">tid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tprobe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-7.png" title="/img/Operating System/chapter3-7.png" data-thumbnail="/img/Operating System/chapter3-7.png" data-sub-html="<h2>Linux(stack-probe.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>stack-probe.c运行结果</code>)</figcaption>
    </figure>
<p>进行排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc stack-probe.c -lpthread <span class="o">&amp;&amp;</span> ./a.out <span class="p">|</span> sort -nk <span class="m">6</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果：</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-8.png" title="/img/Operating System/chapter3-8.png" data-thumbnail="/img/Operating System/chapter3-8.png" data-sub-html="<h2>stack-probe.c(排序后)</h2>">
        
    </a><figcaption class="image-caption">stack-probe.c(<code>排序后</code>)</figcaption>
    </figure>
<p>$size\ of\ stack=8192KB\newline$</p>
<hr>
<p>更多的习题</p>
<ul>
<li>创建线程使用的是哪个系统调用？</li>
<li>能不能用 gdb 调试？</li>
<li>基本原则：有需求，就能做到 (<a href="https://sourceware.org/gdb/onlinedocs/gdb/Threads.html" target="_blank" rel="noopener noreffer">RTFM</a>)</li>
</ul>
<h4 id="threadh-背后posix-threads"><code>thread.h</code> 背后：POSIX Threads</h4>
<p>想进一步配置线程？</p>
<ul>
<li>设置更大的线程栈</li>
<li>设置 detach 运行 (不在进程结束后被杀死，也不能 join)</li>
<li>……</li>
</ul>
<hr>
<p>POSIX 为我们提供了线程库 (pthreads)</p>
<ul>
<li>
<p><code>man 7 pthreads</code></p>
</li>
<li>
<p>练习：改写 thread.h，使得线程拥有更大的栈</p>
<ul>
<li>可以用 <a href="https://jyywiki.cn/pages/OS/2022/demos/stack-probe.c" target="_blank" rel="noopener noreffer">stack-probe.c</a> 验证</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__thread</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span> <span class="c1">// thread-local variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__thread</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// objdump to see how thread-local variables are implemented
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">set_cur</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">char</span> <span class="o">*</span><span class="n">get_cur</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="n">cur</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">stackoverflow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">set_cur</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">1024</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">base</span> <span class="o">-</span> <span class="n">get_cur</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Stack size of T%d &gt;= %d KB</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">sz</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tprobe</span><span class="p">(</span><span class="kt">int</span> <span class="n">tid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tprobe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，可怕的事情正在悄悄逼近……</p>
<ul>
<li>
<p>多处理器系统中线程的代码可能同时执行</p>
<ul>
<li>两个线程同时执行 <code>x++</code>，结果会是什么呢？</li>
</ul>
</li>
</ul>
<h3 id="放弃1原子性">放弃（1）：原子性</h3>
<h4 id="例子山寨多线程支付宝">例子：山寨多线程支付宝</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">FAIL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>两个线程并发支付 ¥100 会发生什么？<a href="https://jyywiki.cn/pages/OS/2022/demos/alipay.c" target="_blank" rel="noopener noreffer">alipay.c</a></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-10.jpg" title="/img/Operating System/chapter3-10.jpg" data-thumbnail="/img/Operating System/chapter3-10.jpg" data-sub-html="<h2>手写(山寨支付宝状态机)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>山寨支付宝状态机</code>)</figcaption>
    </figure>
<ul>
<li>账户里会多出用不完的钱！</li>
<li>Bug/漏洞不跟你开玩笑：Mt. Gox Hack 损失650,000
<ul>
<li>今天价值 $28,000,000,000</li>
</ul>
</li>
</ul>
<p><code>alipay.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// unexpected delays
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Talipay</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Alipay_withdraw</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;balance = %lu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">balance</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter3-9.png" title="/img/Operating System/chapter3-9.png" data-thumbnail="/img/Operating System/chapter3-9.png" data-sub-html="<h2>Linux(alipay.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>alipay.c运行结果</code>)</figcaption>
    </figure>
<h4 id="例子求和">例子：求和</h4>
<p>分两个线程，计算 $1+1+1+\ldots+1+1+1+1+…+1$ (共计 2n 个 1)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> 运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-11.png" title="/img/Operating System/chapter3-11.png" data-thumbnail="/img/Operating System/chapter3-11.png" data-sub-html="<h2>Linux(sum.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>sum.c运行结果</code>)</figcaption>
    </figure>
<ul>
<li>
<p>119790390, 99872322 (结果可以比 <code>N</code> 还要小), &hellip;</p>
</li>
<li>
<p>Inline assembly 也不行</p>
</li>
</ul>
<p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;lock add $1, %0&#34;</span><span class="o">:</span> <span class="s">&#34;+m&#34;</span><span class="p">(</span><span class="n">sum</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-12.png" title="/img/Operating System/chapter3-12.png" data-thumbnail="/img/Operating System/chapter3-12.png" data-sub-html="<h2>Linux(sum.c修改后运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>sum.c修改后运行结果</code>)</figcaption>
    </figure>
<p>结果正确，但是运行性能显著下降</p>
<h4 id="原子性的丧失">原子性的丧失</h4>
<blockquote>
<p>“程序 (甚至是一条指令) 独占处理器执行” 的基本假设在现代多处理器系统上不再成立。</p>
</blockquote>
<p>原子性：一段代码执行 (例如 <code>pay()</code>) 独占整个计算机系统</p>
<ul>
<li>单处理器多线程
<ul>
<li>线程在运行时可能被中断，切换到另一个线程执行</li>
</ul>
</li>
<li>多处理器多线程
<ul>
<li>线程根本就是并行执行的</li>
</ul>
</li>
</ul>
<hr>
<p>(历史) 1960s，大家争先在共享内存上实现原子性 (互斥)</p>
<ul>
<li>但几乎所有的实现都是错的，直到 <a href="https://en.wikipedia.org/wiki/Dekker%27s_algorithm" target="_blank" rel="noopener noreffer">Dekker&rsquo;s Algorithm</a>，还只能保证两个线程的互斥</li>
</ul>
<h4 id="原子性的丧失有没有感到后怕">原子性的丧失：有没有感到后怕？</h4>
<p><code>printf</code> 还能在多线程程序里调用吗？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">void thread1() { while (1) { printf(&#34;a&#34;); } }
</span></span><span class="line"><span class="cl">void thread2() { while (1) { printf(&#34;b&#34;); } }
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们都知道 printf 是有缓冲区的 (为什么？)</p>
<ul>
<li>如果执行 <code>buf[pos++] = ch</code> (<code>pos</code> 共享) 不就💥了吗？</li>
</ul>
<hr>
<p>RTFM!</p>
<p>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ man <span class="m">3</span> <span class="nb">printf</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ATTRIBUTES
</span></span><span class="line"><span class="cl">       For an explanation of the terms used in this section, see attributes<span class="o">(</span>7<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       ┌────────────────────────┬───────────────┬────────────────┐
</span></span><span class="line"><span class="cl">       │Interface               │ Attribute     │ Value          │
</span></span><span class="line"><span class="cl">       ├────────────────────────┼───────────────┼────────────────┤
</span></span><span class="line"><span class="cl">       │printf<span class="o">()</span>, fprintf<span class="o">()</span>,    │ Thread safety │ MT-Safe locale │
</span></span><span class="line"><span class="cl">       │sprintf<span class="o">()</span>, snprintf<span class="o">()</span>,  │               │                │
</span></span><span class="line"><span class="cl">       │vprintf<span class="o">()</span>, vfprintf<span class="o">()</span>,  │               │                │
</span></span><span class="line"><span class="cl">       │vsprintf<span class="o">()</span>, vsnprintf<span class="o">()</span> │               │                │
</span></span><span class="line"><span class="cl">       └────────────────────────┴───────────────┴────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>进程安全！</strong></p>
<h4 id="实现原子性">实现原子性</h4>
<p>互斥和原子性是本学期的重要主题</p>
<ul>
<li>
<p><code>lock(&amp;lk)</code></p>
</li>
<li>
<p><code>unlock(&amp;lk)</code></p>
<ul>
<li>实现临界区 (critical section) 之间的绝对串行化</li>
<li>程序的其他部分依然可以并行执行</li>
</ul>
</li>
</ul>
<hr>
<p>99% 的并发问题都可以用一个队列解决</p>
<ul>
<li>
<p>把大任务切分成可以并行的小任务</p>
</li>
<li>
<p>worker thread 去锁保护的队列里取任务</p>
</li>
<li>
<p>除去不可并行的部分，剩下的部分可以获得线性的加速</p>
<ul>
<li>$Thm.\ T_n&lt;T_{\infty}+\frac {T_1}{n}$(<a href="https://web.mit.edu/dimitrib/www/pdc.html" target="_blank" rel="noopener noreffer">PDC</a>, Chap. 1)</li>
</ul>
</li>
</ul>
<h3 id="放弃2顺序">放弃（2）：顺序</h3>
<h4 id="例子求和-再次出现">例子：求和 (再次出现)</h4>
<p>分两个线程，计算 $1+1+1+\ldots+1+1+1+1+…+1$ (共计 2n 个 1)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们好像忘记给 <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> 添加编译优化了？</p>
<ul>
<li><code>-O1</code>: 100000000 😱😱</li>
<li><code>-O2</code>: 200000000 😱😱😱</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -O1 sum.c -lpthread <span class="o">&amp;&amp;</span> ./a.out 
</span></span><span class="line"><span class="cl"><span class="nv">sum</span> <span class="o">=</span> <span class="m">100000000</span>
</span></span><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -O2 sum.c -lpthread <span class="o">&amp;&amp;</span> ./a.out 
</span></span><span class="line"><span class="cl"><span class="nv">sum</span> <span class="o">=</span> <span class="m">200000000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="顺序的丧失">顺序的丧失</h4>
<blockquote>
<p>编译器对内存访问 “eventually consistent” 的处理导致共享内存作为线程同步工具的失效。</p>
</blockquote>
<p>刚才的例子</p>
<ul>
<li><code>-O1</code>: <code>R[eax] = sum; R[eax] += N; sum = R[eax]</code></li>
<li><code>-O2</code>: <code>sum += N;</code></li>
<li>(你的编译器也许是不同的结果)</li>
</ul>
<p>另一个例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// would be optimized to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -c -O1 sum.c <span class="o">&amp;&amp;</span> objdump -d sum.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sum.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;wrapper&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">48</span> <span class="m">83</span> ec <span class="m">08</span>          	sub    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">   8:	<span class="m">48</span> <span class="m">89</span> f8             	mov    %rdi,%rax
</span></span><span class="line"><span class="cl">   b:	8b 3f                	mov    <span class="o">(</span>%rdi<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl">   d:	ff <span class="m">50</span> <span class="m">10</span>             	call   *0x10<span class="o">(</span>%rax<span class="o">)</span>
</span></span><span class="line"><span class="cl">  10:	b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  15:	<span class="m">48</span> <span class="m">83</span> c4 <span class="m">08</span>          	add    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">  19:	c3                   	ret    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">000000000000001a &lt;Tsum&gt;:
</span></span><span class="line"><span class="cl">  1a:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">  1e:	<span class="m">48</span> 8b <span class="m">15</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	mov    0x0<span class="o">(</span>%rip<span class="o">)</span>,%rdx        <span class="c1"># 25 &lt;Tsum+0xb&gt; -&gt; R[eax] = sum</span>
</span></span><span class="line"><span class="cl">  25:	<span class="m">48</span> 8d <span class="m">42</span> <span class="m">01</span>          	lea    0x1<span class="o">(</span>%rdx<span class="o">)</span>,%rax		 <span class="c1"># -&gt; R[eax] += N, sum = R[eax]</span>
</span></span><span class="line"><span class="cl">  29:	<span class="m">48</span> <span class="m">81</span> c2 <span class="m">01</span> e1 f5 <span class="m">05</span> 	add    <span class="nv">$0</span>x5f5e101,%rdx
</span></span><span class="line"><span class="cl">  30:	<span class="m">48</span> <span class="m">89</span> c1             	mov    %rax,%rcx
</span></span><span class="line"><span class="cl">  33:	<span class="m">48</span> <span class="m">83</span> c0 <span class="m">01</span>          	add    <span class="nv">$0</span>x1,%rax
</span></span><span class="line"><span class="cl">  37:	<span class="m">48</span> <span class="m">39</span> d0             	cmp    %rdx,%rax
</span></span><span class="line"><span class="cl">  3a:	<span class="m">75</span> f4                	jne    <span class="m">30</span> &lt;Tsum+0x16&gt;
</span></span><span class="line"><span class="cl">  3c:	<span class="m">48</span> <span class="m">89</span> 0d <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	mov    %rcx,0x0<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 43 &lt;Tsum+0x29&gt;</span>
</span></span><span class="line"><span class="cl">  43:	c3                   	ret    
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter3-13.jpg" title="/img/Operating System/chapter3-13.jpg" data-thumbnail="/img/Operating System/chapter3-13.jpg" data-sub-html="<h2>手写(O1模式下优化)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>O1模式下优化</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -c -O2 sum.c <span class="o">&amp;&amp;</span> objdump -d sum.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sum.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;wrapper&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">48</span> <span class="m">83</span> ec <span class="m">08</span>          	sub    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">   8:	<span class="m">48</span> <span class="m">89</span> f8             	mov    %rdi,%rax
</span></span><span class="line"><span class="cl">   b:	8b 3f                	mov    <span class="o">(</span>%rdi<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl">   d:	ff <span class="m">50</span> <span class="m">10</span>             	call   *0x10<span class="o">(</span>%rax<span class="o">)</span>
</span></span><span class="line"><span class="cl">  10:	<span class="m">31</span> c0                	xor    %eax,%eax
</span></span><span class="line"><span class="cl">  12:	<span class="m">48</span> <span class="m">83</span> c4 <span class="m">08</span>          	add    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">  16:	c3                   	ret    
</span></span><span class="line"><span class="cl">  17:	<span class="m">66</span> 0f 1f <span class="m">84</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	nopw   0x0<span class="o">(</span>%rax,%rax,1<span class="o">)</span>
</span></span><span class="line"><span class="cl">  1e:	<span class="m">00</span> <span class="m">00</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000020</span> &lt;Tsum&gt;:
</span></span><span class="line"><span class="cl">  20:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">  24:	<span class="m">48</span> <span class="m">81</span> <span class="m">05</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	addq   <span class="nv">$0</span>x5f5e100,0x0<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 2f &lt;Tsum+0xf&gt;</span>
</span></span><span class="line"><span class="cl">  2b:	<span class="m">00</span> e1 f5 <span class="m">05</span> 
</span></span><span class="line"><span class="cl">  2f:	c3                   	ret 
</span></span></code></pre></td></tr></table>
</div>
</div><p>O2优化的比较彻底，只add了一次（出问题的概率比较低）</p>
<h4 id="实现源代码的按顺序翻译">实现源代码的按顺序翻译</h4>
<p>在代码中插入 “优化不能穿越” 的 barrier</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">asm</span> <span class="nf">volatile</span> <span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:::</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Barrier 的含义是 “可以读写任何内存”</li>
</ul>
</li>
<li>
<p>使用<code>volatile</code>变量</p>
<ul>
<li>保持 C 语义和汇编语义一致</li>
</ul>
</li>
</ul>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">int</span> <span class="k">volatile</span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span> <span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="放弃-3可见性">放弃 (3)：可见性</h3>
<h4 id="例子">例子</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">T1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="o">:</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span> <span class="c1">// compiler barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;y = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="o">:</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span> <span class="c1">// compiler barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;x = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>问题：我们最终能看到哪些结果？</p>
<p>状态机</p>
<div class="mermaid" id="id-1"></div>
<ul>
<li>mem-ordering.c
<ul>
<li>输出不好读？<code>pipe to head -n 1000000 | sort | uniq -c</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">flag</span><span class="p">;</span> <span class="c1">//开关初始为0（关着），原子变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define FLAG atomic_load(&amp;flag) </span><span class="c1">//原子读
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define FLAG_XOR(val) atomic_fetch_xor(&amp;flag, val) </span><span class="c1">//原子异或
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define WAIT_FOR(cond) while (!(cond)) ;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_x_read_y</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// x = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// y_val = y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">y_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">y_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_y_read_x</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// y = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// x_val = x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">x_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">x_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T1</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">));</span> <span class="c1">//等开关1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">write_x_read_y</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//关掉开关1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">//等开关2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">write_y_read_x</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//关掉开关2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tsync</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//控制线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//布置好初值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">__sync_synchronize</span><span class="p">();</span> <span class="c1">// full barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>            <span class="c1">// + delay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">//确定开关是关着的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//开关的两个bit从0变为1（开启开关1，2）（原子操作）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// T1 and T2 clear 0/1-bit, respectively
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WAIT_FOR</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsync</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>-O2模式下编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">00000000000001a0 &lt;write_x_read_y&gt;:
</span></span><span class="line"><span class="cl"> 1a0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl"> 1a4:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 1ae &lt;write_x_read_y+0xe&gt;
</span></span><span class="line"><span class="cl"> 1ab:	00 00 00 
</span></span><span class="line"><span class="cl"> 1ae:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 1b4 &lt;write_x_read_y+0x14&gt;
</span></span><span class="line"><span class="cl"> 1b4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1bb &lt;write_x_read_y+0x1b&gt;
</span></span><span class="line"><span class="cl"> 1bb:	bf 01 00 00 00       	mov    $0x1,%edi
</span></span><span class="line"><span class="cl"> 1c0:	31 c0                	xor    %eax,%eax
</span></span><span class="line"><span class="cl"> 1c2:	e9 00 00 00 00       	jmp    1c7 &lt;write_x_read_y+0x27&gt;
</span></span><span class="line"><span class="cl"> 1c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
</span></span><span class="line"><span class="cl"> 1ce:	00 00 
</span></span></code></pre></td></tr></table>
</div>
</div><p>利用脚本来统计，不知道为啥自己的乌班图💩🐴跑出来都是01，00，01，10，11都跑出来了，和我们的状态机模型不符🤡</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-14.png" title="/img/Operating System/chapter3-14.png" data-thumbnail="/img/Operating System/chapter3-14.png" data-sub-html="<h2>From class(输出结果)</h2>">
        
    </a><figcaption class="image-caption">From class(<code>输出结果</code>)</figcaption>
    </figure>
<h4 id="现代处理器处理器也是-动态-编译器">现代处理器：处理器也是 (动态) 编译器！</h4>
<p>单个处理器把汇编代码 (用电路) “编译” 成更小的 $\mu ops\newline$</p>
<ul>
<li>RF[9] = load(RF[7] + 400)</li>
<li>store(RF[12], RF[13])</li>
<li>RF[3] = RF[4] + RF[5]
<ul>
<li>每个 $\mu op$ 都有 Fetch, Issue, Execute, Commit 四个阶段</li>
</ul>
</li>
</ul>
<hr>
<p>在任何时刻，处理器都维护一个 $\mu op$ 的 “池子”</p>
<ul>
<li>
<p>每一周期向池子补充尽可能多的$\mu op\newline$</p>
<ul>
<li>“多发射”</li>
</ul>
</li>
<li>
<p>每一周期 (在不违反编译正确性的前提下) 执行尽可能多的$\mu op\newline$</p>
<ul>
<li>“乱序执行”、“按序提交”</li>
</ul>
</li>
<li>
<p>这就是《计算机体系结构》 (剩下就是木桶效应，哪里短板补哪里)</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-15.jpg" title="/img/Operating System/chapter3-15.jpg" data-thumbnail="/img/Operating System/chapter3-15.jpg" data-sub-html="<h2>神书(《计算机体系结构——量化研究方法》)</h2>">
        
    </a><figcaption class="image-caption">神书(<code>《计算机体系结构——量化研究方法》</code>)</figcaption>
    </figure>
<h4 id="多处理器间即时可见性的丧失">多处理器间即时可见性的丧失</h4>
<blockquote>
<p>满足单处理器 eventual memory consistency 的执行，在多处理器上可能无法序列化！</p>
</blockquote>
<p>当 $x \ne y$ 时，对 $x ,y$ 的内存读写可以交换顺序</p>
<ul>
<li>它们甚至可以在同一个周期里完成 (只要 load/store unit 支持)</li>
<li>如果写x发生 cache miss，可以让读y先执行
<ul>
<li>满足 “尽可能执行 “$\mu op$” 的原则，最大化处理器性能</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">     # &lt;-----------+
</span></span><span class="line"><span class="cl">movl $1, (x)   #   |
</span></span><span class="line"><span class="cl">movl (y), %eax # --+
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在多处理器上的表现
<ul>
<li>两个处理器分别看到 $y=0 和 x=0\newline$</li>
</ul>
</li>
</ul>
<h4 id="宽松内存模型-relaxedweak-memory-model">宽松内存模型 (Relaxed/Weak Memory Model)</h4>
<blockquote>
<p>宽松内存模型的目的是使单处理器的执行更高效。</p>
</blockquote>
<p>x86 已经是市面上能买到的 “最强” 的内存模型了 😂</p>
<ul>
<li>这也是 Intel 自己给自己加的包袱</li>
<li>看看 <a href="https://research.swtch.com/mem-weak@2x.png" target="_blank" rel="noopener noreffer">ARM/RISC-V</a> 吧，根本就是个分布式系统</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-16.png" title="/img/Operating System/chapter3-16.png" data-thumbnail="/img/Operating System/chapter3-16.png" data-sub-html="<h2>x86(内存模型)</h2>">
        
    </a><figcaption class="image-caption">x86(<code>内存模型</code>)</figcaption>
    </figure>
<p><strong>(x86-TSO in <a href="https://research.swtch.com/hwmm" target="_blank" rel="noopener noreffer">Hardware memory models</a> by Russ Cox)</strong></p>
<hr>
<p><strong>ARM/RISC-V</strong></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-17.png" title="/img/Operating System/chapter3-17.png" data-thumbnail="/img/Operating System/chapter3-17.png" data-sub-html="<h2>ARM/RISC-V(内存模型)</h2>">
        
    </a><figcaption class="image-caption">ARM/RISC-V(<code>内存模型</code>)</figcaption>
    </figure>
<h4 id="实现顺序一致性">实现顺序一致性</h4>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-18.png" title="/img/Operating System/chapter3-18.png" data-thumbnail="/img/Operating System/chapter3-18.png" data-sub-html="<h2>改良(内存模型)</h2>">
        
    </a><figcaption class="image-caption">改良(<code>内存模型</code>)</figcaption>
    </figure>
<hr>
<p>软件做不到，硬件来帮忙</p>
<ul>
<li>
<p>Memory barrier: __sync_synchronize() (RTFM)</p>
<ul>
<li>Compiler barrier + fence 指令</li>
<li>插入 fence 指令后，将阻止 x=y=0</li>
</ul>
</li>
<li>
<p>原子指令 (lock,prefix, lr/sc, &hellip;)</p>
<ul>
<li><code>stdatomic.h</code></li>
</ul>
</li>
</ul>
<p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">flag</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define FLAG atomic_load(&amp;flag)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define FLAG_XOR(val) atomic_fetch_xor(&amp;flag, val)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define WAIT_FOR(cond) while (!(cond)) ;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_x_read_y</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// x = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;mfence;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// y_val = y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">y_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">y_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_y_read_x</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// y = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;mfence;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// x_val = x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">x_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">x_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T1</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_x_read_y</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_y_read_x</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tsync</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">__sync_synchronize</span><span class="p">();</span> <span class="c1">// full barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>            <span class="c1">// + delay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// T1 and T2 clear 0/1-bit, respectively
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WAIT_FOR</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsync</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>不会再看见00的组合了</p>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何理解多处理器系统？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>多处理器编程：入门
<ul>
<li>多处理器程序 = 状态机 (共享内存；非确定选择线程执行)</li>
<li>thread.h = create + join</li>
</ul>
</li>
<li>多处理器编程：放弃你对 “程序” 的旧理解
<ul>
<li>不原子、能乱序、不立即可见（现代处理器就是一个动态的数据流分析器）
<ul>
<li>来自于编译优化 (处理器也是编译器)</li>
<li><a href="https://www.usenix.org/events/osdi10/tech/full_papers/Xiong.pdf" target="_blank" rel="noopener noreffer">Ad hoc synchronization considered harmful</a> (OSDI'10)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
</channel>
</rss>
