<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/posts/</link>
        <description>所有文章 | Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1239946358@qq.com (Jungle)</managingEditor>
            <webMaster>1239946358@qq.com (Jungle)</webMaster><lastBuildDate>Fri, 05 May 2023 13:35:01 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Operating System Chapter12 进程的地址空间</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter12/</link>
    <pubDate>Fri, 05 May 2023 13:35:01 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter12/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<ul>
<li>
<p>复习</p>
<ul>
<li>
<p>操作系统：加载第一个 <code>init</code> 程序，随后变为 “异常处理程序”</p>
</li>
<li>
<p><code>init</code>: fork, execve, exit 和其他系统调用创造整个操作系统世界</p>
</li>
</ul>
</li>
<li>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 进程的地址空间是如何创建、如何更改的？</li>
</ul>
</li>
<li>
<p>本次课主要内容</p>
<ul>
<li>进程的地址空间和管理 (<code>mmap</code>)</li>
</ul>
</li>
</ul>
<h2 id="进程的地址空间">进程的地址空间</h2>
<h3 id="进程的地址空间-1">进程的地址空间</h3>
<ul>
<li>
<p><code>char *p</code> 可以和 <code>intptr_t</code> 互相转换</p>
<ul>
<li>可以指向 “任何地方”</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">main</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="mh">0x12345678l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">main</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// p = (void *)(0x12345678l);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%x</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span> <span class="c1">//=&gt;fa1e0ff3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>反汇编</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">0000000000001149 &lt;main&gt;:
</span></span><span class="line"><span class="cl">    1149:       f3 0f 1e fa             endbr64 
</span></span><span class="line"><span class="cl">    114d:       55                      push   %rbp
</span></span><span class="line"><span class="cl">    114e:       48 89 e5                mov    %rsp,%rbp
</span></span><span class="line"><span class="cl">    1151:       48 83 ec 10             sub    $0x10,%rsp
</span></span><span class="line"><span class="cl">    1155:       48 8d 05 ed ff ff ff    lea    -0x13(%rip),%rax        # 1149 &lt;main&gt;
</span></span><span class="line"><span class="cl">    115c:       48 89 45 f8             mov    %rax,-0x8(%rbp)
</span></span><span class="line"><span class="cl">    1160:       48 8b 45 f8             mov    -0x8(%rbp),%rax
</span></span><span class="line"><span class="cl">    1164:       8b 00                   mov    (%rax),%eax
</span></span><span class="line"><span class="cl">    1166:       89 c6                   mov    %eax,%esi
</span></span><span class="line"><span class="cl">    1168:       48 8d 05 95 0e 00 00    lea    0xe95(%rip),%rax        # 2004 &lt;_IO_stdin_used+0x4&gt;
</span></span><span class="line"><span class="cl">    116f:       48 89 c7                mov    %rax,%rdi
</span></span><span class="line"><span class="cl">    1172:       b8 00 00 00 00          mov    $0x0,%eax
</span></span><span class="line"><span class="cl">    1177:       e8 d4 fe ff ff          call   1050 &lt;printf@plt&gt;
</span></span><span class="line"><span class="cl">    117c:       b8 00 00 00 00          mov    $0x0,%eax
</span></span><span class="line"><span class="cl">    1181:       c9                      leave  
</span></span><span class="line"><span class="cl">    1182:       c3  
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>正好对应<code>endbr64</code>（注意小端口输出顺序）</p>
</li>
<li>
<p>合法的地址 (可读或可写)</p>
<ul>
<li>
<p>代码 (<code>main</code>, <code>%rip</code> 会从此处取出待执行的指令)，只读</p>
</li>
<li>
<p>数据 (<code>static int x</code>)，读写</p>
</li>
<li>
<p>堆栈 (<code>int y</code>)，读写</p>
</li>
<li>
<p>运行时分配的内存 (???)，读写</p>
</li>
<li>
<p>动态链接库 (???)</p>
</li>
</ul>
</li>
<li>
<p>非法的地址</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// p = (void *)main;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)(</span><span class="mh">0x12345678l</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%x</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span> <span class="c1">//=&gt;zsh: segmentation fault
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>NULL</code>，导致 segmentation fault</li>
</ul>
</li>
<li>
<p>它们停留在概念中，但实际呢？</p>
</li>
</ul>
<h3 id="查看进程的地址空间">查看进程的地址空间</h3>
<ul>
<li>
<p>pmap (1) - report memory of a process</p>
<ul>
<li>
<p>Claim: pmap 是通过访问 procfs (<code>/proc/</code>) 实现的</p>
</li>
<li>
<p>如何验证这一点？</p>
</li>
</ul>
</li>
<li>
<p>查看进程的地址空间</p>
<ul>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a> (静态链接)</p>
</li>
<li>
<p>最小的 Hello World (静态/动态链接)</p>
<ul>
<li>
<p>进程的地址空间：若干连续的 “段”</p>
</li>
<li>
<p>“段” 的内存可以访问</p>
</li>
<li>
<p>不在段内/违反权限的内存访问 触发 <code>SIGSEGV</code></p>
<ul>
<li><code>gdb</code> 可以 “越权访问”，但不能访问 “不存在” 的地址</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#include &lt;sys/syscall.h&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.globl _start
</span></span><span class="line"><span class="cl">_start:
</span></span><span class="line"><span class="cl">  movq $SYS_write, %rax   // write(
</span></span><span class="line"><span class="cl">  movq $1,         %rdi   //   fd=1,
</span></span><span class="line"><span class="cl">  movq $st,        %rsi   //   buf=st,
</span></span><span class="line"><span class="cl">  movq $(ed - st), %rdx   //   count=ed-st
</span></span><span class="line"><span class="cl">  syscall                 // );
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  movq $SYS_exit,  %rax   // exit(
</span></span><span class="line"><span class="cl">  movq $1,         %rdi   //   status=1
</span></span><span class="line"><span class="cl">  syscall                 // );
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">st:
</span></span><span class="line"><span class="cl">  .ascii &#34;\033[01;31mHello, OS World\033[0m\n&#34;
</span></span><span class="line"><span class="cl">ed:
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter12<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./minimal
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./minimal&#34;</span>, <span class="o">[</span><span class="s2">&#34;./minimal&#34;</span><span class="o">]</span>, 0x7fffdfe108e0 /* <span class="m">41</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;\33[01;31mHello, OS World\33[0m\n&#34;</span>, 28Hello, OS World
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">28</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>1<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter12-1.png" title="/img/Operating System/chapter12-1.png" data-thumbnail="/img/Operating System/chapter12-1.png" data-sub-html="<h2>查看进程号</h2>">
        
    </a><figcaption class="image-caption"><code>查看进程号</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-2.png" title="/img/Operating System/chapter12-2.png" data-thumbnail="/img/Operating System/chapter12-2.png" data-sub-html="<h2>使用pmap查看一个进程所有的地址空间</h2>">
        
    </a><figcaption class="image-caption"><code>使用pmap查看一个进程所有的地址空间</code></figcaption>
    </figure>
<ul>
<li>可以看到由许多“段”组成的</li>
<li>仔细看可以发现第一段的段地址和<code>starti</code>首地址的联系</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-3.png" title="/img/Operating System/chapter12-3.png" data-thumbnail="/img/Operating System/chapter12-3.png" data-sub-html="<h2>layout src</h2>">
        
    </a><figcaption class="image-caption"><code>layout src</code></figcaption>
    </figure>
<ul>
<li><code>pmap</code>干了啥？</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter12<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace pmap <span class="m">1431</span>
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;/usr/bin/pmap&#34;</span>, <span class="o">[</span><span class="s2">&#34;pmap&#34;</span>, <span class="s2">&#34;1431&#34;</span><span class="o">]</span>, 0x7ffe115f8938 /* <span class="m">41</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d0cc7da000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffc6ce9b2d0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca614a000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>46367, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 46367, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca613e000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libprocps.so.8&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>80080, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 225320, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6106000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca610a000, 40960, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x4000<span class="o">)</span> <span class="o">=</span> 0x7f4ca610a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca6114000, 16384, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xe000<span class="o">)</span> <span class="o">=</span> 0x7f4ca6114000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca6118000, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x11000<span class="o">)</span> <span class="o">=</span> 0x7f4ca6118000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca611b000, 139304, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca611b000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0P\237\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0&#34;</span>..., 48, 848<span class="o">)</span> <span class="o">=</span> <span class="m">48</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\24\0\0\0\3\0\0\0GNU\0i8\235HZ\227\223\333\350s\360\352,\223\340.&#34;</span>..., 68, 896<span class="o">)</span> <span class="o">=</span> <span class="m">68</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>2216304, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 2260560, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ede000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5f06000, 1658880, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x28000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5f06000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca609b000, 360448, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1bd000<span class="o">)</span> <span class="o">=</span> 0x7f4ca609b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca60f3000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x214000<span class="o">)</span> <span class="o">=</span> 0x7f4ca60f3000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca60f9000, 52816, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca60f9000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libsystemd.so.0&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>807936, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 812384, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e17000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5e2a000, 700416, PROT_NONE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5e2a000, 520192, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x13000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e2a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ea9000, 176128, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x92000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ea9000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ed5000, 32768, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xbd000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ed5000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5edd000, 1376, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5edd000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/liblzma.so.5&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>170456, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 172296, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5dec000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5def000, 110592, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x3000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5def000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5e0a000, 45056, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1e000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e0a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5e15000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x28000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5e15000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libzstd.so.1&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>841808, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 843832, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d1d000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5d27000, 729088, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xa000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d27000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5dd9000, 69632, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xbc000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5dd9000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5dea000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xcc000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5dea000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/liblz4.so.1&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>125152, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d1b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 127072, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cfb000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5cfd000, 114688, PROT_NONE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cfd000, 102400, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x2000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cfd000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5d16000, 8192, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1b000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d16000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5d19000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1d000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5d19000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libcap.so.2&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>39024, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 41016, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf0000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cf3000, 16384, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x3000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf3000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cf7000, 8192, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x7000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf7000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cf9000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x8000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cf9000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libgcrypt.so.20&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>1296312, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1299576, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5bb2000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5bc1000, 1200128, PROT_NONE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5bc1000, 942080, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xf000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5bc1000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ca7000, 253952, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0xf5000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ca7000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ce6000, 36864, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x133000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ce6000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5cef000, 1144, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5cef000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libgpg-error.so.0&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0\0\0\0\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>149760, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 151992, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b8c000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5b90000, 90112, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x4000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b90000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5ba6000, 40960, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1a000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5ba6000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f4ca5bb0000, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x23000<span class="o">)</span> <span class="o">=</span> 0x7f4ca5bb0000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b8a000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5b87000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7f4ca5b877c0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7f4ca5b87a90<span class="o">)</span>         <span class="o">=</span> <span class="m">1646</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7f4ca5b87aa0, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7f4ca5b88160, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca60f3000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5bb0000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5ce6000, 12288, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5cf9000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5d19000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5dea000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5e15000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca5ed5000, 28672, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca6118000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55d0cbbd6000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f4ca6184000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f4ca613e000, 46367<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xc0\x5f\x86\x25\xbb\x1a\x8a\xe5&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d0cc7da000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55d0cc7fb000<span class="o">)</span>                     <span class="o">=</span> 0x55d0cc7fb000
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, CAP_MAC_OVERRIDE<span class="o">)</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x30 /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, CAP_CHECKPOINT_RESTORE<span class="o">)</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x2c /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x2a /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">prctl<span class="o">(</span>PR_CAPBSET_READ, 0x29 /* CAP_??? */<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/auxv&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0400, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;!\0\0\0\0\0\0\0\0\200\364l\374\177\0\0003\0\0\0\0\0\0\0\360\6\0\0\0\0\0\0&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">336</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/sys/kernel/osrelease&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0444, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;5.15.90.1-microsoft-standard-WSL&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">34</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/sys/devices/system/cpu/online&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;0-15\n&#34;</span>, 1024<span class="o">)</span>                 <span class="o">=</span> <span class="m">5</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/auxv&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0400, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;!\0\0\0\0\0\0\0\0\200\364l\374\177\0\0003\0\0\0\0\0\0\0\360\6\0\0\0\0\0\0&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">336</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/locale-archive&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>6213280, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 6213280, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca559a000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/locale.alias&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>2996, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;# Locale name alias data base.\n#&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">2996</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, 4096<span class="o">)</span>                       <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_IDENTIFICATION&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_IDENTIFICATION&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>258, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 258, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6183000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>27002, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 27002, PROT_READ, MAP_SHARED, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6143000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">futex<span class="o">(</span>0x7f4ca60f8a6c, FUTEX_WAKE_PRIVATE, 2147483647<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_MEASUREMENT&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MEASUREMENT&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>23, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 23, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6142000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_TELEPHONE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_TELEPHONE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>47, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 47, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6141000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_ADDRESS&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_ADDRESS&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>127, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 127, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca6140000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_NAME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_NAME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>62, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 62, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca613f000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_PAPER&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_PAPER&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>34, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 34, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca613e000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_MESSAGES&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MESSAGES&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFDIR<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>4096, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MESSAGES/SYS_LC_MESSAGES&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>48, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 48, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5599000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_MONETARY&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_MONETARY&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>270, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 270, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5598000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_COLLATE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_COLLATE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>1406, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1406, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5597000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_TIME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_TIME&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>3360, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 3360, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5596000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_NUMERIC&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_NUMERIC&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>50, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 50, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca5595000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.UTF-8/LC_CTYPE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/lib/locale/C.utf8/LC_CTYPE&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>353616, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 353616, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca553e000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/C.UTF-8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/C.utf8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale/C/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale-langpack/C.UTF-8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale-langpack/C.utf8/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/usr/share/locale-langpack/C/LC_MESSAGES/procps-ng.mo&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/maps&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">dup3<span class="o">(</span>3, 0, 0<span class="o">)</span>                           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">shmget<span class="o">(</span>IPC_PRIVATE, 42, IPC_CREAT<span class="p">|</span>0666<span class="o">)</span> <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl">shmat<span class="o">(</span>1, NULL, SHM_RDONLY<span class="o">)</span>              <span class="o">=</span> 0x7f4ca553d000
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>0, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0444, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>0, <span class="s2">&#34;55d0cbbce000-55d0cbbd0000 r--p 0&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">1024</span>
</span></span><span class="line"><span class="cl">shmdt<span class="o">(</span>0x7f4ca553d000<span class="o">)</span>                   <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">shmctl<span class="o">(</span>1, IPC_RMID, NULL<span class="o">)</span>               <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/self/task&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFDIR<span class="p">|</span>0555, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 135168, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca551d000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 135168, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f4ca54fc000
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFDIR<span class="p">|</span>0555, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431/stat&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;1431 (minimal) t 1398 1431 339 3&#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">272</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431/cmdline&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;/mnt/d/work for vscode/chapter12&#34;</span>..., 2047<span class="o">)</span> <span class="o">=</span> <span class="m">41</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0x4<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;1431:   /mnt/d/work for vscode/c&#34;</span>..., 491431:   /mnt/d/work <span class="k">for</span> vscode/chapter12/minimal
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">49</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/proc/1431/maps&#34;</span>, O_RDONLY<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0444, <span class="nv">st_size</span><span class="o">=</span>0, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;00400000-00401000 r--p 00000000 &#34;</span>..., 1024<span class="o">)</span> <span class="o">=</span> <span class="m">469</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;0000000000400000      4K r---- m&#34;</span>..., <span class="m">390000000000400000</span>      4K r---- minimal
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">39</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;0000000000401000      4K r-x-- m&#34;</span>..., <span class="m">390000000000401000</span>      4K r-x-- minimal
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">39</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;00007ffff7ff9000     16K r----  &#34;</span>..., 4200007ffff7ff9000     16K r----   <span class="o">[</span> anon <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;00007ffff7ffd000      8K r-x--  &#34;</span>..., 4200007ffff7ffd000      8K r-x--   <span class="o">[</span> anon <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;00007ffffffdd000    136K rw---  &#34;</span>..., 4300007ffffffdd000    136K rw---   <span class="o">[</span> stack <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">43</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, 1024<span class="o">)</span>                       <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34; total              168K\n&#34;</span>, <span class="m">25</span> total              168K
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">25</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>1<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">close<span class="o">(</span>2<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">lseek<span class="o">(</span>0, -412, SEEK_CUR<span class="o">)</span>                <span class="o">=</span> <span class="m">612</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>关键信息<code>openat(AT_FDCWD, &quot;/proc/1431/maps&quot;, O_RDONLY) = 3</code></p>
</li>
<li>
<p>???</p>
</li>
<li>
<p><code>cat</code>一下看看里面是啥</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter12<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cat /proc/1431/maps 
</span></span><span class="line"><span class="cl">00400000-00401000 r--p <span class="m">00000000</span> 00:4a <span class="m">3377699720805767</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/minimal
</span></span><span class="line"><span class="cl">00401000-00402000 r-xp <span class="m">00001000</span> 00:4a <span class="m">3377699720805767</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/minimal
</span></span><span class="line"><span class="cl">7ffff7ff9000-7ffff7ffd000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7ffd000-7ffff7fff000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffffffdd000-7ffffffff000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用<code>man 5 proc</code>多阅读</li>
</ul>
<h3 id="操作系统提供查看进程地址空间的机制">操作系统提供查看进程地址空间的机制</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -static deom.c -o deom
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>查看<code>maps</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /proc/2017/maps
</span></span><span class="line"><span class="cl">00400000-00401000 r--p <span class="m">00000000</span> 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">00401000-00498000 r-xp <span class="m">00001000</span> 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">00498000-004c1000 r--p <span class="m">00098000</span> 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">004c1000-004c8000 rw-p 000c0000 00:4a <span class="m">1688849860573486</span>                   /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">004c8000-004cd000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                                  <span class="o">[</span>heap<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7ff9000-7ffff7ffd000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7ffd000-7ffff7fff000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffffffdd000-7ffffffff000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>readelf</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ readelf deom -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Elf file <span class="nb">type</span> is EXEC <span class="o">(</span>Executable file<span class="o">)</span>
</span></span><span class="line"><span class="cl">Entry point 0x401620
</span></span><span class="line"><span class="cl">There are <span class="m">10</span> program headers, starting at offset <span class="m">64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Program Headers:
</span></span><span class="line"><span class="cl">  Type           Offset             VirtAddr           PhysAddr
</span></span><span class="line"><span class="cl">                 FileSiz            MemSiz              Flags  Align
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000
</span></span><span class="line"><span class="cl">                 0x0000000000000528 0x0000000000000528  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000001000 0x0000000000401000 0x0000000000401000
</span></span><span class="line"><span class="cl">                 0x00000000000964bd 0x00000000000964bd  R E    0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000098000 0x0000000000498000 0x0000000000498000
</span></span><span class="line"><span class="cl">                 0x0000000000028476 0x0000000000028476  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x00000000000c07b0 0x00000000004c17b0 0x00000000004c17b0
</span></span><span class="line"><span class="cl">                 0x0000000000005ae0 0x000000000000b490  RW     0x1000
</span></span><span class="line"><span class="cl">  NOTE           0x0000000000000270 0x0000000000400270 0x0000000000400270
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  NOTE           0x00000000000002a0 0x00000000004002a0 0x00000000004002a0
</span></span><span class="line"><span class="cl">                 0x0000000000000044 0x0000000000000044  R      0x4
</span></span><span class="line"><span class="cl">  TLS            0x00000000000c07b0 0x00000000004c17b0 0x00000000004c17b0
</span></span><span class="line"><span class="cl">                 0x0000000000000020 0x0000000000000068  R      0x8
</span></span><span class="line"><span class="cl">  GNU_PROPERTY   0x0000000000000270 0x0000000000400270 0x0000000000400270
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
</span></span><span class="line"><span class="cl">                 0x0000000000000000 0x0000000000000000  RW     0x10
</span></span><span class="line"><span class="cl">  GNU_RELRO      0x00000000000c07b0 0x00000000004c17b0 0x00000000004c17b0
</span></span><span class="line"><span class="cl">                 0x0000000000003850 0x0000000000003850  R      0x1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Section to Segment mapping:
</span></span><span class="line"><span class="cl">  Segment Sections...
</span></span><span class="line"><span class="cl">   <span class="m">00</span>     .note.gnu.property .note.gnu.build-id .note.ABI-tag .rela.plt 
</span></span><span class="line"><span class="cl">   <span class="m">01</span>     .init .plt .text __libc_freeres_fn .fini 
</span></span><span class="line"><span class="cl">   <span class="m">02</span>     .rodata .stapsdt.base .eh_frame .gcc_except_table 
</span></span><span class="line"><span class="cl">   <span class="m">03</span>     .tdata .init_array .fini_array .data.rel.ro .got .got.plt .data __libc_subfreeres __libc_IO_vtables __libc_atexit .bss __libc_freeres_ptrs 
</span></span><span class="line"><span class="cl">   <span class="m">04</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">05</span>     .note.gnu.build-id .note.ABI-tag 
</span></span><span class="line"><span class="cl">   <span class="m">06</span>     .tdata .tbss 
</span></span><span class="line"><span class="cl">   <span class="m">07</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">08</span>     
</span></span><span class="line"><span class="cl">   <span class="m">09</span>     .tdata .init_array .fini_array .data.rel.ro .got 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>动态链接</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /proc/2319/maps 
</span></span><span class="line"><span class="cl">555555554000-555555555000 r--p <span class="m">00000000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">555555555000-555555556000 r-xp <span class="m">00001000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">555555556000-555555557000 r--p <span class="m">00002000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">555555557000-555555559000 rw-p <span class="m">00002000</span> 00:4a <span class="m">1970324837284142</span>           /mnt/d/work <span class="k">for</span> vscode/chapter12/deom
</span></span><span class="line"><span class="cl">7ffff7fbd000-7ffff7fc1000 r--p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7fc1000-7ffff7fc3000 r-xp <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">7ffff7fc3000-7ffff7fc5000 r--p <span class="m">00000000</span> 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffff7fc5000-7ffff7fef000 r-xp <span class="m">00002000</span> 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffff7fef000-7ffff7ffa000 r--p 0002c000 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffff7ffb000-7ffff7fff000 rw-p <span class="m">00037000</span> 08:20 <span class="m">6303</span>                       /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">7ffffffdd000-7ffffffff000 rw-p <span class="m">00000000</span> 00:00 <span class="m">0</span>                          <span class="o">[</span>stack<span class="o">]</span>                                                                                
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>多了链接库的数据</li>
</ul>
<p>RTFM: <code>/proc/[pid]/maps</code> (man 5 proc)</p>
<ul>
<li>
<p>进程地址空间中的每一段</p>
<ul>
<li>地址 (范围) 和权限 (rwxsp)</li>
<li>对应的文件: offset, dev, inode, pathname
<ul>
<li>TFM 里有更详细的解释</li>
</ul>
</li>
</ul>
</li>
<li>
<p>和 readelf (-l) 里的信息互相验证</p>
<ul>
<li>课后习题：定义一些代码/数据，观察变化</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">address           perms offset   dev   inode      pathname
</span></span><span class="line"><span class="cl">00400000-00401000 r--p  <span class="m">00000000</span> fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">00401000-00495000 r-xp  <span class="m">00001000</span> fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">00495000-004bc000 r--p  <span class="m">00095000</span> fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">004bd000-004c3000 rw-p  000bc000 fd:00 <span class="m">525733</span>     a.out
</span></span><span class="line"><span class="cl">004c3000-004c4000 rw-p  <span class="m">00000000</span> 00:00 <span class="m">0</span>          <span class="o">[</span>heap<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="更完整的地址空间映象">更完整的地址空间映象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="m">0000555555554000</span> r--p     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555555000</span> r-xp     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555556000</span> r--p     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555557000</span> r--p     a.out
</span></span><span class="line"><span class="cl"><span class="m">0000555555558000</span> rw-p     a.out
</span></span><span class="line"><span class="cl">00007ffff7dc1000 r--p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7de3000 r-xp     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7f5b000 r--p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7fa9000 r--p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7fad000 rw-p     libc-2.31.so
</span></span><span class="line"><span class="cl">00007ffff7faf000 rw-p     <span class="o">(</span>这是什么？<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffff7fcb000 r--p     <span class="o">[</span>vvar<span class="o">]</span> <span class="o">(</span>这又是什么？<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffff7fce000 r-xp     <span class="o">[</span>vdso<span class="o">]</span> <span class="o">(</span>这叒是什么？<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffff7fcf000 r--p     <span class="o">(</span>省略相似的 ld-2.31.so<span class="o">)</span>
</span></span><span class="line"><span class="cl">00007ffffffde000 rw-p     <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">ffffffffff600000 --xp     <span class="o">[</span>vsyscall<span class="o">]</span> <span class="o">(</span>这叕是什么？<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>是不是 bss? 给我们的代码加一个大数组试试！</li>
</ul>
<h3 id="rtfm-5-proc-我们发现的宝藏">RTFM (5 proc): 我们发现的宝藏</h3>
<blockquote>
<p>vdso (7): Virtual system calls: 只读的系统调用也许可以不陷入内核执行。</p>
</blockquote>
<ul>
<li><b>无需陷入内核的系统调用</b>
<ul>
<li>例子: time (2)
<ul>
<li>直接调试 <a href="https://jyywiki.cn/pages/OS/2022/demos/vdso.c" target="_blank" rel="noopener noreffer">vdso.c</a></li>
<li>时间：内核维护秒级的时间 (所有进程映射同一个页面)</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="nf">gettime</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">timeval</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">// trapless system call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">return</span> <span class="n">t</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">+</span> <span class="n">t</span><span class="p">.</span><span class="n">tv_usec</span> <span class="o">/</span> <span class="mf">1000000.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Time stamp: %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span> <span class="c1">// trapless system call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">double</span> <span class="n">st</span> <span class="o">=</span> <span class="n">gettime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">gettime</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Time: %.6lfs</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>例子: gettimeofday (2)
<ul>
<li><a href="https://elixir.bootlin.com/linux/latest/source/lib/vdso/gettimeofday.c#L49" target="_blank" rel="noopener noreffer">RTFSC</a> (非常聪明的实现)</li>
</ul>
</li>
<li>更多的例子：RTFM
<ul>
<li>计算机系统里没有魔法！我们理解了进程地址空间的<font color="red">全部</font>！</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-4.png" title="/img/Operating System/chapter12-4.png" data-thumbnail="/img/Operating System/chapter12-4.png" data-sub-html="<h2>time address</h2>">
        
    </a><figcaption class="image-caption"><code>time address</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-5.png" title="/img/Operating System/chapter12-5.png" data-thumbnail="/img/Operating System/chapter12-5.png" data-sub-html="<h2>vdso</h2>">
        
    </a><figcaption class="image-caption"><code>vdso</code></figcaption>
    </figure>
<ul>
<li>$time\ address \in vdso$，而<code>vdso</code>没有在<code>libc</code>这个位置上面</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-6.jpg" title="/img/Operating System/chapter12-6.jpg" data-thumbnail="/img/Operating System/chapter12-6.jpg" data-sub-html="<h2>实现方式</h2>">
        
    </a><figcaption class="image-caption"><code>实现方式</code></figcaption>
    </figure>
<ul>
<li>源码</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifdef CONFIG_TIME_NS
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="n">__always_inline</span> <span class="kt">int</span> <span class="nf">do_hres_timens</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vdns</span><span class="p">,</span> <span class="n">clockid_t</span> <span class="n">clk</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					  <span class="k">struct</span> <span class="n">__kernel_timespec</span> <span class="o">*</span><span class="n">ts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="k">struct</span> <span class="n">timens_offset</span> <span class="o">*</span><span class="n">offs</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vdns</span><span class="o">-&gt;</span><span class="n">offset</span><span class="p">[</span><span class="n">clk</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_timestamp</span> <span class="o">*</span><span class="n">vdso_ts</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">u64</span> <span class="n">cycles</span><span class="p">,</span> <span class="n">last</span><span class="p">,</span> <span class="n">ns</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">u32</span> <span class="n">seq</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">s64</span> <span class="n">sec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">vd</span> <span class="o">=</span> <span class="n">vdns</span> <span class="o">-</span> <span class="p">(</span><span class="n">clk</span> <span class="o">==</span> <span class="n">CLOCK_MONOTONIC_RAW</span> <span class="o">?</span> <span class="nl">CS_RAW</span> <span class="p">:</span> <span class="n">CS_HRES_COARSE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">vd</span> <span class="o">=</span> <span class="n">__arch_get_timens_vdso_data</span><span class="p">(</span><span class="n">vd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">clk</span> <span class="o">!=</span> <span class="n">CLOCK_MONOTONIC_RAW</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">vd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vd</span><span class="p">[</span><span class="n">CS_HRES_COARSE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span>
</span></span><span class="line"><span class="cl">		<span class="n">vd</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vd</span><span class="p">[</span><span class="n">CS_RAW</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="n">vdso_ts</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">vd</span><span class="o">-&gt;</span><span class="n">basetime</span><span class="p">[</span><span class="n">clk</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">seq</span> <span class="o">=</span> <span class="n">vdso_read_begin</span><span class="p">(</span><span class="n">vd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">vdso_clocksource_ok</span><span class="p">(</span><span class="n">vd</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="n">cycles</span> <span class="o">=</span> <span class="n">__arch_get_hw_counter</span><span class="p">(</span><span class="n">vd</span><span class="o">-&gt;</span><span class="n">clock_mode</span><span class="p">,</span> <span class="n">vd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="o">!</span><span class="n">vdso_cycles_ok</span><span class="p">(</span><span class="n">cycles</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ns</span> <span class="o">=</span> <span class="n">vdso_ts</span><span class="o">-&gt;</span><span class="n">nsec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">last</span> <span class="o">=</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">cycle_last</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">ns</span> <span class="o">+=</span> <span class="n">vdso_calc_delta</span><span class="p">(</span><span class="n">cycles</span><span class="p">,</span> <span class="n">last</span><span class="p">,</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">mask</span><span class="p">,</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">mult</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">ns</span> <span class="o">=</span> <span class="n">vdso_shift_ns</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">vd</span><span class="o">-&gt;</span><span class="n">shift</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="n">sec</span> <span class="o">=</span> <span class="n">vdso_ts</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">unlikely</span><span class="p">(</span><span class="n">vdso_read_retry</span><span class="p">(</span><span class="n">vd</span><span class="p">,</span> <span class="n">seq</span><span class="p">)));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/* Add the namespace offset */</span>
</span></span><span class="line"><span class="cl">	<span class="n">sec</span> <span class="o">+=</span> <span class="n">offs</span><span class="o">-&gt;</span><span class="n">sec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">ns</span> <span class="o">+=</span> <span class="n">offs</span><span class="o">-&gt;</span><span class="n">nsec</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * Do this outside the loop: a race inside the loop could result
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * in __iter_div_u64_rem() being extremely slow.
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="n">ts</span><span class="o">-&gt;</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">sec</span> <span class="o">+</span> <span class="n">__iter_div_u64_rem</span><span class="p">(</span><span class="n">ns</span><span class="p">,</span> <span class="n">NSEC_PER_SEC</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ns</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">ts</span><span class="o">-&gt;</span><span class="n">tv_nsec</span> <span class="o">=</span> <span class="n">ns</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#else
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="n">__always_inline</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="nf">__arch_get_timens_vdso_data</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="n">__always_inline</span> <span class="kt">int</span> <span class="nf">do_hres_timens</span><span class="p">(</span><span class="k">const</span> <span class="k">struct</span> <span class="n">vdso_data</span> <span class="o">*</span><span class="n">vdns</span><span class="p">,</span> <span class="n">clockid_t</span> <span class="n">clk</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					  <span class="k">struct</span> <span class="n">__kernel_timespec</span> <span class="o">*</span><span class="n">ts</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">-</span><span class="n">EINVAL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="小知识-系统调用的实现">(小知识) 系统调用的实现</h3>
<blockquote>
<p>“执行系统调用时，进程陷入内核态执行”——不，不是的。</p>
</blockquote>
<ul>
<li>
<p>系统调用就是一组接口的约定，谁说一定要 <code>int</code> 指令？</p>
<ul>
<li>光一条指令就要保存 ss, rsp, cs, rip, rflags (40 字节) 到内存</li>
</ul>
</li>
<li>
<p>SYSCALL — Fast System Call</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">RCX    &lt;- RIP; (* 下条指令执行的地址 *)
</span></span><span class="line"><span class="cl">RIP    &lt;- IA32_LSTAR;
</span></span><span class="line"><span class="cl">R11    &lt;- RFLAGS;
</span></span><span class="line"><span class="cl">RFLAGS &lt;- RFLAGS &amp; ~(IA32_FMASK);
</span></span><span class="line"><span class="cl">CPL    &lt;- 0; (* 进入 Ring 0 执行 *)
</span></span><span class="line"><span class="cl">CS.Selector &lt;- IA32_STAR[47:32] &amp; 0xFFFC
</span></span><span class="line"><span class="cl">SS.Selector &lt;- IA32_STAR[47:32] + 8;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="小知识-系统调用的实现-contd">(小知识) 系统调用的实现 (cont&rsquo;d)</h3>
<ul>
<li>
<p>能不能让其他系统调用也 <code>trap</code> 进入内核？</p>
<ul>
<li>疯狂的事情也许真的是能实现的 (这算是魔法吗？)
<ul>
<li><a href="https://www.usenix.org/conference/osdi10/flexsc-flexible-system-call-scheduling-exception-less-system-calls" target="_blank" rel="noopener noreffer">FlexSC: Flexible system call scheduling with exception-less system calls</a> (OSDI'10).</li>
</ul>
</li>
</ul>
</li>
<li>
<p>使用共享内存和内核通信！</p>
<ul>
<li>
<p>内核线程在 spinning 等待系统调用的到来</p>
</li>
<li>
<p>收到系统调用请求后立即开始执行</p>
</li>
<li>
<p>进程 spin 等待系统调用完成</p>
</li>
<li>
<p>如果系统调用很多，可以打包处理</p>
</li>
</ul>
</li>
</ul>
<h2 id="进程的地址空间管理">进程的地址空间管理</h2>
<h3 id="execve-之后">Execve 之后……</h3>
<ul>
<li>
<p>进程只有少量内存映射</p>
<ul>
<li>
<p>静态链接：代码、数据、堆栈、堆区</p>
</li>
<li>
<p>动态链接：代码、数据、堆栈、堆区、INTERP (ld.so)</p>
</li>
</ul>
</li>
<li>
<p>地址空间里剩下的部分是怎么创建的？</p>
<ul>
<li>
<p>libc.so 都没有啊……</p>
</li>
<li>
<p>创建了以后，我们还能修改它吗？</p>
<ul>
<li>肯定是能的：动态链接库可以动态加载 (M4)
<ul>
<li><b>当然是通过系统调用了</b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-7.png" title="/img/Operating System/chapter12-7.png" data-thumbnail="/img/Operating System/chapter12-7.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-8.png" title="/img/Operating System/chapter12-8.png" data-thumbnail="/img/Operating System/chapter12-8.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>没有进入<code>main</code>的时候，看不到<code>libc</code></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-9.png" title="/img/Operating System/chapter12-9.png" data-thumbnail="/img/Operating System/chapter12-9.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter12-10.png" title="/img/Operating System/chapter12-10.png" data-thumbnail="/img/Operating System/chapter12-10.png" data-sub-html="<h2> </h2>">
        
    </a><figcaption class="image-caption"><code> </code></figcaption>
    </figure>
<ul>
<li>执行到<code>main</code>的时候，<code>libc</code>被加载进来了</li>
</ul>
<h3 id="进程的地址空间-contd">进程的地址空间 (cont&rsquo;d)</h3>
<ul>
<li>
<p>进程的地址空间 = 内存里若干连续的 “段”</p>
<ul>
<li>每一段是可访问 (读/写/执行) 的内存
<ul>
<li><b>可能映射到某个文件和/或在进程间共享</b></li>
</ul>
</li>
</ul>
</li>
<li>
<p>管理进程地址空间的系统调用</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 映射
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="o">*</span><span class="nf">mmap</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prot</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">off_t</span> <span class="n">offset</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">munmap</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 修改映射权限
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">mprotect</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">length</span><span class="p">,</span> <span class="kt">int</span> <span class="n">prot</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>RTFM
<ul>
<li>说人话：<b><font color="red">状态上增加/删除/修改一段可访问的内存</font></b></li>
<li>也就是上面的示例，内存改变全靠<code>mmap</code></li>
</ul>
</li>
</ul>
<h3 id="把文件映射到进程地址空间">把文件映射到进程地址空间？</h3>
<ul>
<li>
<p>它们的确好像没有什么区别</p>
<ul>
<li>
<p>文件 = 字节序列</p>
</li>
<li>
<p>内存 = 字节序列</p>
</li>
<li>
<p>操作系统允许映射好像挺合理的……</p>
<ul>
<li>带来了很大的方便
<ul>
<li><b><code>ELF loader </code>用<code>mmap</code>非常容易实现</b>
<ul>
<li><b>解析出要加载哪部分到内存，直接<code>mmap</code>就完了</b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ readelf -l deom
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Elf file <span class="nb">type</span> is DYN <span class="o">(</span>Position-Independent Executable file<span class="o">)</span>
</span></span><span class="line"><span class="cl">Entry point 0x1040
</span></span><span class="line"><span class="cl">There are <span class="m">13</span> program headers, starting at offset <span class="m">64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Program Headers:
</span></span><span class="line"><span class="cl">  Type           Offset             VirtAddr           PhysAddr
</span></span><span class="line"><span class="cl">                 FileSiz            MemSiz              Flags  Align
</span></span><span class="line"><span class="cl">  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
</span></span><span class="line"><span class="cl">                 0x00000000000002d8 0x00000000000002d8  R      0x8
</span></span><span class="line"><span class="cl">  INTERP         0x0000000000000318 0x0000000000000318 0x0000000000000318
</span></span><span class="line"><span class="cl">                 0x000000000000001c 0x000000000000001c  R      0x1
</span></span><span class="line"><span class="cl">      <span class="o">[</span>Requesting program interpreter: /lib64/ld-linux-x86-64.so.2<span class="o">]</span>
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
</span></span><span class="line"><span class="cl">                 0x00000000000005f0 0x00000000000005f0  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000001000 0x0000000000001000 0x0000000000001000
</span></span><span class="line"><span class="cl">                 0x0000000000000145 0x0000000000000145  R E    0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000002000 0x0000000000002000 0x0000000000002000
</span></span><span class="line"><span class="cl">                 0x00000000000000c4 0x00000000000000c4  R      0x1000
</span></span><span class="line"><span class="cl">  LOAD           0x0000000000002df0 0x0000000000003df0 0x0000000000003df0
</span></span><span class="line"><span class="cl">                 0x0000000000000220 0x0000000000000228  RW     0x1000
</span></span><span class="line"><span class="cl">  DYNAMIC        0x0000000000002e00 0x0000000000003e00 0x0000000000003e00
</span></span><span class="line"><span class="cl">                 0x00000000000001c0 0x00000000000001c0  RW     0x8
</span></span><span class="line"><span class="cl">  NOTE           0x0000000000000338 0x0000000000000338 0x0000000000000338
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  NOTE           0x0000000000000368 0x0000000000000368 0x0000000000000368
</span></span><span class="line"><span class="cl">                 0x0000000000000044 0x0000000000000044  R      0x4
</span></span><span class="line"><span class="cl">  GNU_PROPERTY   0x0000000000000338 0x0000000000000338 0x0000000000000338
</span></span><span class="line"><span class="cl">                 0x0000000000000030 0x0000000000000030  R      0x8
</span></span><span class="line"><span class="cl">  GNU_EH_FRAME   0x0000000000002004 0x0000000000002004 0x0000000000002004
</span></span><span class="line"><span class="cl">                 0x000000000000002c 0x000000000000002c  R      0x4
</span></span><span class="line"><span class="cl">  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
</span></span><span class="line"><span class="cl">                 0x0000000000000000 0x0000000000000000  RW     0x10
</span></span><span class="line"><span class="cl">  GNU_RELRO      0x0000000000002df0 0x0000000000003df0 0x0000000000003df0
</span></span><span class="line"><span class="cl">                 0x0000000000000210 0x0000000000000210  R      0x1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Section to Segment mapping:
</span></span><span class="line"><span class="cl">  Segment Sections...
</span></span><span class="line"><span class="cl">   <span class="m">00</span>     
</span></span><span class="line"><span class="cl">   <span class="m">01</span>     .interp 
</span></span><span class="line"><span class="cl">   <span class="m">02</span>     .interp .note.gnu.property .note.gnu.build-id .note.ABI-tag .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn 
</span></span><span class="line"><span class="cl">   <span class="m">03</span>     .init .plt .plt.got .text .fini 
</span></span><span class="line"><span class="cl">   <span class="m">04</span>     .rodata .eh_frame_hdr .eh_frame 
</span></span><span class="line"><span class="cl">   <span class="m">05</span>     .init_array .fini_array .dynamic .got .data .bss 
</span></span><span class="line"><span class="cl">   <span class="m">06</span>     .dynamic 
</span></span><span class="line"><span class="cl">   <span class="m">07</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">08</span>     .note.gnu.build-id .note.ABI-tag 
</span></span><span class="line"><span class="cl">   <span class="m">09</span>     .note.gnu.property 
</span></span><span class="line"><span class="cl">   <span class="m">10</span>     .eh_frame_hdr 
</span></span><span class="line"><span class="cl">   <span class="m">11</span>     
</span></span><span class="line"><span class="cl">   <span class="m">12</span>     .init_array .fini_array .dynamic .got 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>readelf</code>告诉系统该进程载入的时候要把什么东西加载到哪里，<code>OS</code>通过<code>mmap</code>进行加载</li>
</ul>
<h3 id="使用-memory-mapping">使用 Memory Mapping</h3>
<p>Example 1:</p>
<ul>
<li>用 mmap 申请大量内存空间(<a href="https://jyywiki.cn/pages/OS/2022/demos/mmap-alloc.c" target="_blank" rel="noopener noreffer">mmap-alloc.c</a>)
<ul>
<li>瞬间完成</li>
<li>不妨<code>strace/gdb</code>看一下</li>
<li><code>libc</code> 的 <code>malloc/free</code> 在初始空间用完后使用 <code>sbrk/mmap</code> 申请空间</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define GiB * (1024LL * 1024 * 1024)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">volatile</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">3</span> <span class="n">GiB</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_ANONYMOUS</span> <span class="o">|</span> <span class="n">MAP_PRIVATE</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;mmap: %lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="n">uintptr_t</span><span class="p">)</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">((</span><span class="n">intptr_t</span><span class="p">)</span><span class="n">p</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">perror</span><span class="p">(</span><span class="s">&#34;cannot map&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span> <span class="n">GiB</span><span class="p">)</span> <span class="o">=</span> <span class="mi">114</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">2</span> <span class="n">GiB</span><span class="p">)</span> <span class="o">=</span> <span class="mi">514</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Read get: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">1</span> <span class="n">GiB</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Read get: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">2</span> <span class="n">GiB</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">time</span> ./mmap-alloc
</span></span><span class="line"><span class="cl">mmap: 7f091f6c8000
</span></span><span class="line"><span class="cl">Read get: <span class="m">114</span>
</span></span><span class="line"><span class="cl">Read get: <span class="m">514</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0.01s
</span></span><span class="line"><span class="cl">user    0.00s
</span></span><span class="line"><span class="cl">sys     0.00s
</span></span><span class="line"><span class="cl">cpu     47%
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace -T ./mmap-alloc
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./mmap-alloc&#34;</span>, <span class="o">[</span><span class="s2">&#34;./mmap-alloc&#34;</span><span class="o">]</span>, 0x7ffdbcd061d8 /* <span class="m">41</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.005476&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7fff0b4c4fc0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span> &lt;0.000046&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x1fcd000 &lt;0.000034&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1fcddc0<span class="o">)</span>                          <span class="o">=</span> 0x1fcddc0 &lt;0.000031&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x1fcd3c0<span class="o">)</span>      <span class="o">=</span> <span class="m">0</span> &lt;0.000027&gt;
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x1fcd690<span class="o">)</span>              <span class="o">=</span> <span class="m">4689</span> &lt;0.000037&gt;
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x1fcd6a0, 24<span class="o">)</span>          <span class="o">=</span> <span class="m">0</span> &lt;0.000027&gt;
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x1fcdd60, 0x20, 0, 0x53053053<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span> &lt;0.000024&gt;
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000026&gt;
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000038&gt;
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter12&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">43</span> &lt;0.000143&gt;
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x2d\xdd\xc2\x27\x6a\x77\x7d\x7f&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span> &lt;0.000028&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1feedc0<span class="o">)</span>                          <span class="o">=</span> 0x1feedc0 &lt;0.000043&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1fef000<span class="o">)</span>                          <span class="o">=</span> 0x1fef000 &lt;0.000047&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span> &lt;0.000043&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 3221225472, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f1dcee47000 &lt;0.000041&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0x4<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000048&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;mmap: 7f1dcee47000\n&#34;</span>, 19mmap: 7f1dcee47000
</span></span><span class="line"><span class="cl"><span class="o">)</span>    <span class="o">=</span> <span class="m">19</span> &lt;0.000067&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;Read get: 114\n&#34;</span>, 14Read get: <span class="m">114</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>         <span class="o">=</span> <span class="m">14</span> &lt;0.000050&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;Read get: 514\n&#34;</span>, 14Read get: <span class="m">514</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>         <span class="o">=</span> <span class="m">14</span> &lt;0.000046&gt;
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>mmap</code>只花了0.000041s！</li>
</ul>
<p>Example 2:</p>
<ul>
<li>用 mmap 映射整个磁盘(<a href="https://jyywiki.cn/pages/OS/2022/demos/mmap-disk.py" target="_blank" rel="noopener noreffer">mmap-disk.py</a>)
<ul>
<li>瞬间完成</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="ch">#!/usr/bin/env python3</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">mmap</span><span class="o">,</span> <span class="nn">hexdump</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;/dev/sda&#39;</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">mm</span> <span class="o">=</span> <span class="n">mmap</span><span class="o">.</span><span class="n">mmap</span><span class="p">(</span><span class="n">fp</span><span class="o">.</span><span class="n">fileno</span><span class="p">(),</span> <span class="n">prot</span><span class="o">=</span><span class="n">mmap</span><span class="o">.</span><span class="n">PROT_READ</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">128</span> <span class="o">&lt;&lt;</span> <span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">hexdump</span><span class="o">.</span><span class="n">hexdump</span><span class="p">(</span><span class="n">mm</span><span class="p">[:</span><span class="mi">512</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="memory-mapped-file-一致性">Memory-Mapped File: 一致性</h3>
<ul>
<li>但我们好像带来了一些问题……
<ul>
<li>如果把页面映射到文件
<ul>
<li>修改什么时候生效？
<ul>
<li>立即生效：那会造成巨大量的磁盘 I/O</li>
<li>unmap (进程终止) 时生效：好像又太迟了……</li>
</ul>
</li>
<li>若干个映射到同一个文件的进程？
<ul>
<li>共享一份内存？</li>
<li>各自有本地的副本？</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>请查阅手册，看看操作系统是如何规定这些操作的行为的</p>
<ul>
<li>
<p>例如阅读 <code>msync (2)</code></p>
</li>
<li>
<p>这才是操作系统真正的复杂性</p>
</li>
</ul>
</li>
</ul>
<h2 id="地址空间的隔离">地址空间的隔离</h2>
<h3 id="地址空间实现进程隔离">地址空间：实现进程隔离</h3>
<ul>
<li>
<p>每个 <code>*ptr</code> 都只能访问本进程 (状态机) 的内存</p>
<ul>
<li>
<p>除非 mmap 显示指定、映射共享文件或共享内存多线程</p>
</li>
<li>
<p>实现了操作系统最重要的功能：进程之间的隔离</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>任何一个程序都不能因为 <code>bug</code> 或恶意行为侵犯其他程序执行</p>
<ul>
<li>
<p>“连方法都没有”</p>
</li>
<li>
<p>吗……？</p>
</li>
</ul>
</li>
</ul>
<h3 id="电子游戏的上一个黄金时代">电子游戏的上一个黄金时代</h3>
<ul>
<li>电子竞技的先行者：“即时战略游戏” (Real-Time Strategy)
<ul>
<li><a href="https://www.bilibili.com/video/BV1Yq4y1G7bQ" target="_blank" rel="noopener noreffer">Command and Conquer</a> (Westwood), Starcraft (<del>Microsoft</del>), &hellip;
<ul>
<li>如果我们想 “侵犯” 游戏的执行……呢？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="前互联网时代的神器-1-金山游侠">前互联网时代的神器 (1): 金山游侠</h3>
<ul>
<li>
<p><font color="red">在进程的内存中找到代表 “金钱”、“生命” 的重要属性并且改掉</font></p>
</li>
<li>
<p>只要有访问其他进程内存和在程序上 “悬浮显示” 的 API 即可</p>
<ul>
<li>
<p>想象成是另一个进程内存的 “调试器”</p>
</li>
<li>
<p>在 Linux 中可以轻松拥有：<a href="https://jyywiki.cn/pages/OS/2022/demos/dosbox-hack.c" target="_blank" rel="noopener noreffer">dosbox-hack.c</a></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdbool.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LENGTH(arr)  (sizeof(arr) / sizeof(arr[0]))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">uint64_t</span> <span class="n">found</span><span class="p">[</span><span class="mi">4096</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="n">reset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">scan</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">uintptr_t</span> <span class="n">start</span><span class="p">,</span> <span class="n">kb</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">perm</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span> <span class="o">=</span> <span class="n">popen</span><span class="p">(</span><span class="s">&#34;pmap -x $(pidof dosbox) | tail -n +3&#34;</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">);</span> <span class="n">assert</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">reset</span><span class="p">)</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&#34;%lx&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">start</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">intptr_t</span><span class="p">)</span><span class="n">start</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&#34;%ld%*ld%*ld%s%*[^</span><span class="se">\n</span><span class="s">]s&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kb</span><span class="p">,</span> <span class="n">perm</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">perm</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;w&#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">uintptr_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">kb</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">mem</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span> <span class="n">assert</span><span class="p">(</span><span class="n">mem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">)</span> <span class="o">!=</span> <span class="p">(</span><span class="n">off_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">mem</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span> <span class="o">==</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kt">uint16_t</span> <span class="n">v</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="o">*</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">mem</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">reset</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">val</span> <span class="o">==</span> <span class="n">v</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">found</span><span class="p">))</span> <span class="n">found</span><span class="p">[</span><span class="n">n</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	  <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">start</span> <span class="o">+</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">v</span> <span class="o">!=</span> <span class="n">val</span><span class="p">)</span> <span class="n">found</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">mem</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">pclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">reset</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;There are %d match(es).</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">overwrite</span><span class="p">(</span><span class="kt">uint16_t</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">assert</span><span class="p">(</span><span class="n">lseek</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">found</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">SEEK_SET</span><span class="p">)</span> <span class="o">!=</span> <span class="p">(</span><span class="n">off_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">write</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">val</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">s</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d value(s) written.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span> <span class="o">=</span> <span class="n">popen</span><span class="p">(</span><span class="s">&#34;pidof dosbox&#34;</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">fscanf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">pid</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">sprintf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="s">&#34;/proc/%d/mem&#34;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span> <span class="n">assert</span><span class="p">(</span><span class="n">fd</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">reset</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">stdin</span><span class="p">);</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(DOSBox %d) &#34;</span><span class="p">,</span> <span class="n">pid</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="n">buf</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;q&#39;</span><span class="o">:</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;s&#39;</span><span class="o">:</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">val</span><span class="p">);</span> <span class="n">scan</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;w&#39;</span><span class="o">:</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">val</span><span class="p">);</span> <span class="n">overwrite</span><span class="p">(</span><span class="n">val</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="sc">&#39;r&#39;</span><span class="o">:</span> <span class="n">reset</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Search results reset.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="前互联网时代的神器-2-按键精灵">前互联网时代的神器 (2): 按键精灵</h3>
<ul>
<li>
<p><font color="red">大量重复固定的任务 (例如 2 秒 17 枪)</font></p>
</li>
<li>
<p>这个简单，就是给进程发送键盘/鼠标事件</p>
<ul>
<li>
<p>做个驱动；或者</p>
</li>
<li>
<p>利用操作系统/窗口管理器提供的 API</p>
</li>
<li>
<p><a href="https://github.com/jordansissel/xdotool" target="_blank" rel="noopener noreffer">xdotool</a> (我们用这玩意测试 vscode 的插件)</p>
</li>
<li>
<p><a href="https://www.kernel.org/doc/html/latest/input/input.html" target="_blank" rel="noopener noreffer">evdev</a> (我们用这玩意显示按键；仅课堂展示有效)</p>
</li>
</ul>
</li>
</ul>
<h3 id="前互联网时代的神器-3-变速齿轮">前互联网时代的神器 (3): 变速齿轮</h3>
<ul>
<li>
<p><font color="red">调整游戏的逻辑更新速度</font></p>
<ul>
<li>比如<a href="https://baike.baidu.com/item/%e5%8f%b0%e6%b9%be%e5%a4%a9%e5%a0%82%e9%b8%9f%e8%b5%84%e8%ae%af%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8/8443017" target="_blank" rel="noopener noreffer">某神秘公司</a>慢到难以忍受的跑图和战斗</li>
</ul>
</li>
<li>
<p>本质是 “欺骗” 进程的时钟</p>
<ul>
<li>
<p>源头：闹钟、睡眠、<code>gettimeofday</code></p>
</li>
<li>
<p>拦截它们需要稍稍更复杂的技术</p>
</li>
</ul>
</li>
</ul>
<h3 id="更强大的游戏外挂">更强大的游戏外挂？</h3>
<ul>
<li>
<p>游戏也是程序，也是状态机</p>
<ul>
<li>
<p>通过 API 调用 (和系统调用) 最终取得状态、修改状态</p>
</li>
<li>
<p>想象成是一个 “为这个游戏专门设计的 gdb”</p>
</li>
</ul>
</li>
</ul>
<h3 id="代码注入-hooking">代码注入 (Hooking)</h3>
<ul>
<li>
<p>我们可以改内存，也可以改代码！</p>
</li>
<li>
<p>The Light Side</p>
<ul>
<li>
<p>“软件热补丁” <a href="https://jyywiki.cn/pages/OS/2022/demos/dsu.c" target="_blank" rel="noopener noreffer">dsu.c</a> (mprotect)</p>
</li>
<li>
<p><a href="https://dl.acm.org/doi/10.1145/1519065.1519085" target="_blank" rel="noopener noreffer">Ksplice: Automatic rebootless Kernel updates</a> (EuroSys'09)</p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/mman.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span>     <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;In old function %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo_new</span><span class="p">()</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;In new function %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__func__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 48 b8 ff ff ff ff ff ff ff ff    movabs $0xffffffffffffffff,%rax
</span></span></span><span class="line"><span class="cl"><span class="c1">// ff e0                            jmpq   *%rax
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">DSU</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">old</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">new</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="cp">#define ROUNDDOWN(ptr) ((void *)(((uintptr_t)ptr) &amp; ~0xfff))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="n">size_t</span>    <span class="n">pg_size</span> <span class="o">=</span> <span class="n">sysconf</span><span class="p">(</span><span class="n">_SC_PAGESIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">pg_boundary</span> <span class="o">=</span> <span class="n">ROUNDDOWN</span><span class="p">(</span><span class="n">old</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span>         <span class="n">flags</span> <span class="o">=</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_EXEC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Dynamically updating... &#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mprotect</span><span class="p">(</span><span class="n">pg_boundary</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pg_size</span><span class="p">,</span> <span class="n">flags</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">memcpy</span><span class="p">(</span><span class="n">old</span> <span class="o">+</span>  <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;</span><span class="se">\x48\xb8</span><span class="s">&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">memcpy</span><span class="p">(</span><span class="n">old</span> <span class="o">+</span>  <span class="mi">2</span><span class="p">,</span>       <span class="o">&amp;</span><span class="n">new</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">memcpy</span><span class="p">(</span><span class="n">old</span> <span class="o">+</span> <span class="mi">10</span><span class="p">,</span> <span class="s">&#34;</span><span class="se">\xff\xe0</span><span class="s">&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">mprotect</span><span class="p">(</span><span class="n">pg_boundary</span><span class="p">,</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pg_size</span><span class="p">,</span> <span class="n">flags</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">PROT_WRITE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Done&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">DSU</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">foo_new</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">./dsu
</span></span><span class="line"><span class="cl">In old <span class="k">function</span> foo
</span></span><span class="line"><span class="cl">Dynamically updating... DoneIn new <span class="k">function</span> foo_new
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>原理同变速齿轮，修改代码，让代码跳转到自己写的部分去</p>
</li>
<li>
<p>详细版本<a href="https://zhuanlan.zhihu.com/p/425845057" target="_blank" rel="noopener noreffer">《软件动态更新技术》</a></p>
</li>
<li>
<p>The Dark Side</p>
<ul>
<li>
<p>对于外挂，代码可以<code>静态/动态/vtable/DLL...</code>注入</p>
</li>
<li>
<p><code>render(objects)</code> → <code>render_hacked(objects)</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="游戏外挂攻与防">游戏外挂：攻与防</h3>
<ul>
<li>
<p>控制/数据流完整性</p>
<ul>
<li>
<p>保护进程的完整性</p>
<ul>
<li>独立的进程/驱动做完整性验证</li>
</ul>
</li>
<li>
<p>保护隐私数据不被其他进程读写</p>
<ul>
<li>拦截向本进程的 <code>ReadProcessMemory</code> 和 <code>WriteProcessMemory</code>，发现后立即拒绝执行</li>
</ul>
</li>
<li>
<p>例子</p>
<ul>
<li><a href="https://irdeto.com/denuvo/anti-cheat/" target="_blank" rel="noopener noreffer">Denuvo Anti-Cheat</a>, <a href="https://dev.epicgames.com/docs/services/en-US/GameServices/AntiCheat/UsingAntiCheat/index.html" target="_blank" rel="noopener noreffer">Epic Anti-Cheat Interface</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>其他解决方法</p>
<ul>
<li>
<p><code>AI</code> 监控/社会工程学：如果你强得不正常，当然要盯上你</p>
</li>
<li>
<p>云/沙盒 (<code>Enclave</code>) 渲染：“计算不再信任操作系统”</p>
</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<h3 id="总结-1">总结</h3>
<ul>
<li>本次课回答的问题
<ul>
<li><strong>Q</strong>: 进程的地址空间是如何创建、如何更改的？</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Take-away messages</p>
<ul>
<li>
<p>进程的地址空间</p>
<ul>
<li>能文件关联的、带有访问权限的连续内存段
<ul>
<li>a.out, ld.so, libc.so, heap, stack, vdso</li>
</ul>
</li>
</ul>
</li>
<li>
<p>进程地址空间的管理 API</p>
<ul>
<li>mmap</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter11 操作系统上的进程</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter11/</link>
    <pubDate>Wed, 03 May 2023 15:41:15 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter11/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<ul>
<li>
<p>复习</p>
<ul>
<li>操作系统内核的启动：<code>CPU Reset</code> → <code>Firmware</code> → <code>Boot loader</code> → <code>Kernel _start()</code> → &hellip;</li>
</ul>
</li>
<li>
<p>本次课回答的问题</p>
<ul>
<li>
<p><code>Q1</code>: 操作系统启动后到底做了什么？</p>
</li>
<li>
<p><code>Q2</code>: 操作系统如何管理程序 (进程)？</p>
</li>
</ul>
</li>
<li>
<p>本次课主要内容</p>
<ul>
<li>
<p>虚拟化：操作系统上的进程</p>
</li>
<li>
<p>进程管理 <code>API</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="操作系统启动后到底做了什么">操作系统启动后到底做了什么？</h2>
<h3 id="从系统启动到第一个进程">从系统启动到第一个进程</h3>
<ul>
<li>回顾 <a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a> 的加载过程</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;am.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib-macros.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define MAX_CPU 8
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">union</span> <span class="n">task</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="n">task</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span>      <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Context</span>    <span class="o">*</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint8_t</span> <span class="n">stack</span><span class="p">[</span><span class="mi">8192</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Task</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="o">*</span><span class="n">currents</span><span class="p">[</span><span class="n">MAX_CPU</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define current currents[cpu_current()]
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// user-defined tasks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span>   <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span> <span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Thread-%s on CPU #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="k">volatile</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="n">tasks</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;A&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;B&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;D&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;E&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>操作系统会加载 “第一个程序”
<ul>
<li><code>RTFSC</code> (<code>latest Linux Kernel</code>)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/sbin/init&#34;</span><span class="p">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">      <span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/etc/init&#34;</span><span class="p">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">      <span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/bin/init&#34;</span><span class="p">)</span> <span class="o">||</span>
</span></span><span class="line"><span class="cl">      <span class="o">!</span><span class="n">try_to_run_init_process</span><span class="p">(</span><span class="s">&#34;/bin/sh&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">  	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">panic</span><span class="p">(</span><span class="s">&#34;No working init found.  Try passing init= option to kernel. &#34;</span>
</span></span><span class="line"><span class="cl">	      <span class="s">&#34;See Linux Documentation/admin-guide/init.rst for guidance.&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>$\uparrow$如果没有指定启动选项 <code>init=</code>，按照 “默认列表” 尝试一遍，如果都不行，内核就拒绝启动(<code>panic</code>的部分)</li>
<li><b>从此以后，<code>Linux Kernel</code> 就进入后台，成为 “中断/异常处理程序”</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ pstree             
</span></span><span class="line"><span class="cl">init<span class="o">(</span>Ubuntu-22.─┬─SessionLeader───Relay<span class="o">(</span>55<span class="o">)</span>───sh───sh───sh───node─┬─node─┬─zsh───pstree
</span></span><span class="line"><span class="cl">                │                                                 │      └─11*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 ├─node─┬─clangd.main───9*<span class="o">[{</span>clangd.main<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 │      ├─node───6*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 │      ├─node───7*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 │      └─11*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 ├─node───12*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                │                                                 └─10*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                ├─SessionLeader───Relay<span class="o">(</span>486<span class="o">)</span>───node───6*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                ├─SessionLeader───Relay<span class="o">(</span>495<span class="o">)</span>───node───6*<span class="o">[{</span>node<span class="o">}]</span>
</span></span><span class="line"><span class="cl">                ├─init───<span class="o">{</span>init<span class="o">}</span>
</span></span><span class="line"><span class="cl">                └─<span class="o">{</span>init<span class="o">(</span>Ubuntu-22.<span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>$\uparrow$上面是<code>wsl</code>的，和真机启动方式不太一样</li>
<li>找了一台<code>Ubuntu</code>虚拟机，这回一样了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemd─┬─ModemManager───2*<span class="o">[{</span>ModemManager<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─NetworkManager───2*<span class="o">[{</span>NetworkManager<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─ToDesk_Service───13*<span class="o">[{</span>ToDesk_Service<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─VGAuthService
</span></span><span class="line"><span class="cl">        ├─accounts-daemon───2*<span class="o">[{</span>accounts-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─acpid
</span></span><span class="line"><span class="cl">        ├─anacron
</span></span><span class="line"><span class="cl">        ├─avahi-daemon───avahi-daemon
</span></span><span class="line"><span class="cl">        ├─bluetoothd
</span></span><span class="line"><span class="cl">        ├─colord───2*<span class="o">[{</span>colord<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─cron
</span></span><span class="line"><span class="cl">        ├─cups-browsed───2*<span class="o">[{</span>cups-browsed<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─cupsd
</span></span><span class="line"><span class="cl">        ├─dbus-daemon
</span></span><span class="line"><span class="cl">        ├─dockerd─┬─containerd───7*<span class="o">[{</span>containerd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         └─8*<span class="o">[{</span>dockerd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─fwupd───4*<span class="o">[{</span>fwupd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─gdm3─┬─gdm-session-wor─┬─gdm-wayland-ses─┬─gnome-session-b───2*<span class="o">[{</span>gnome-session-b<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │      │                 │                 └─2*<span class="o">[{</span>gdm-wayland-ses<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │      │                 └─2*<span class="o">[{</span>gdm-session-wor<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │      └─2*<span class="o">[{</span>gdm3<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─geoclue───2*<span class="o">[{</span>geoclue<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─gnome-keyring-d───3*<span class="o">[{</span>gnome-keyring-d<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─irqbalance───<span class="o">{</span>irqbalance<span class="o">}</span>
</span></span><span class="line"><span class="cl">        ├─2*<span class="o">[</span>kerneloops<span class="o">]</span>
</span></span><span class="line"><span class="cl">        ├─networkd-dispat
</span></span><span class="line"><span class="cl">        ├─packagekitd───2*<span class="o">[{</span>packagekitd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─polkitd───2*<span class="o">[{</span>polkitd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─power-profiles-───2*<span class="o">[{</span>power-profiles-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─rsyslogd───3*<span class="o">[{</span>rsyslogd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─rtkit-daemon───2*<span class="o">[{</span>rtkit-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─snapd───12*<span class="o">[{</span>snapd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─switcheroo-cont───2*<span class="o">[{</span>switcheroo-cont<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─systemd─┬─<span class="o">(</span>sd-pam<span class="o">)</span>
</span></span><span class="line"><span class="cl">        │         ├─at-spi2-registr───2*<span class="o">[{</span>at-spi2-registr<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─dbus-daemon
</span></span><span class="line"><span class="cl">        │         ├─dconf-service───2*<span class="o">[{</span>dconf-service<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─evolution-addre───5*<span class="o">[{</span>evolution-addre<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─evolution-calen───8*<span class="o">[{</span>evolution-calen<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─evolution-sourc───3*<span class="o">[{</span>evolution-sourc<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─2*<span class="o">[</span>gjs───4*<span class="o">[{</span>gjs<span class="o">}]]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-session-b─┬─at-spi-bus-laun─┬─dbus-daemon
</span></span><span class="line"><span class="cl">        │         │                 │                 └─3*<span class="o">[{</span>at-spi-bus-laun<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 ├─evolution-alarm───5*<span class="o">[{</span>evolution-alarm<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 ├─gsd-disk-utilit───2*<span class="o">[{</span>gsd-disk-utilit<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 ├─update-notifier───3*<span class="o">[{</span>update-notifier<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                 └─3*<span class="o">[{</span>gnome-session-b<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-session-c───<span class="o">{</span>gnome-session-c<span class="o">}</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-shell─┬─Xwayland
</span></span><span class="line"><span class="cl">        │         │             ├─gjs───5*<span class="o">[{</span>gjs<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │             └─9*<span class="o">[{</span>gnome-shell<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-shell-cal───5*<span class="o">[{</span>gnome-shell-cal<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gnome-terminal-─┬─bash───pstree
</span></span><span class="line"><span class="cl">        │         │                 └─3*<span class="o">[{</span>gnome-terminal-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─goa-daemon───3*<span class="o">[{</span>goa-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─goa-identity-se───2*<span class="o">[{</span>goa-identity-se<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-a11y-settin───3*<span class="o">[{</span>gsd-a11y-settin<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-color───3*<span class="o">[{</span>gsd-color<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-datetime───3*<span class="o">[{</span>gsd-datetime<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-housekeepin───3*<span class="o">[{</span>gsd-housekeepin<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-keyboard───3*<span class="o">[{</span>gsd-keyboard<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-media-keys───3*<span class="o">[{</span>gsd-media-keys<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-power───3*<span class="o">[{</span>gsd-power<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-print-notif───2*<span class="o">[{</span>gsd-print-notif<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-printer───2*<span class="o">[{</span>gsd-printer<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-rfkill───2*<span class="o">[{</span>gsd-rfkill<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-screensaver───2*<span class="o">[{</span>gsd-screensaver<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-sharing───3*<span class="o">[{</span>gsd-sharing<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-smartcard───3*<span class="o">[{</span>gsd-smartcard<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-sound───3*<span class="o">[{</span>gsd-sound<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-wacom───3*<span class="o">[{</span>gsd-wacom<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gsd-xsettings───3*<span class="o">[{</span>gsd-xsettings<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-afc-volume───3*<span class="o">[{</span>gvfs-afc-volume<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-goa-volume───2*<span class="o">[{</span>gvfs-goa-volume<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-gphoto2-vo───2*<span class="o">[{</span>gvfs-gphoto2-vo<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-mtp-volume───2*<span class="o">[{</span>gvfs-mtp-volume<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfs-udisks2-vo───3*<span class="o">[{</span>gvfs-udisks2-vo<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfsd─┬─gvfsd-trash───2*<span class="o">[{</span>gvfsd-trash<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │       └─2*<span class="o">[{</span>gvfsd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfsd-fuse───5*<span class="o">[{</span>gvfsd-fuse<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─gvfsd-metadata───2*<span class="o">[{</span>gvfsd-metadata<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─ibus-portal───2*<span class="o">[{</span>ibus-portal<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─ibus-x11───2*<span class="o">[{</span>ibus-x11<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─pipewire───<span class="o">{</span>pipewire<span class="o">}</span>
</span></span><span class="line"><span class="cl">        │         ├─pipewire-media-───<span class="o">{</span>pipewire-media-<span class="o">}</span>
</span></span><span class="line"><span class="cl">        │         ├─pulseaudio───3*<span class="o">[{</span>pulseaudio<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─sh───ibus-daemon─┬─ibus-engine-lib───3*<span class="o">[{</span>ibus-engine-lib<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                  ├─ibus-extension-───3*<span class="o">[{</span>ibus-extension-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                  ├─ibus-memconf───2*<span class="o">[{</span>ibus-memconf<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         │                  └─2*<span class="o">[{</span>ibus-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─snap-store───6*<span class="o">[{</span>snap-store<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─snapd-desktop-i───snapd-desktop-i───3*<span class="o">[{</span>snapd-desktop-i<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─tracker-miner-f───5*<span class="o">[{</span>tracker-miner-f<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─vmtoolsd───3*<span class="o">[{</span>vmtoolsd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─xdg-desktop-por───5*<span class="o">[{</span>xdg-desktop-por<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         ├─2*<span class="o">[</span>xdg-desktop-por───3*<span class="o">[{</span>xdg-desktop-por<span class="o">}]]</span>
</span></span><span class="line"><span class="cl">        │         ├─xdg-document-po─┬─fusermount3
</span></span><span class="line"><span class="cl">        │         │                 └─5*<span class="o">[{</span>xdg-document-po<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        │         └─xdg-permission-───2*<span class="o">[{</span>xdg-permission-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─systemd-journal
</span></span><span class="line"><span class="cl">        ├─systemd-logind
</span></span><span class="line"><span class="cl">        ├─systemd-oomd
</span></span><span class="line"><span class="cl">        ├─systemd-resolve
</span></span><span class="line"><span class="cl">        ├─systemd-timesyn───<span class="o">{</span>systemd-timesyn<span class="o">}</span>
</span></span><span class="line"><span class="cl">        ├─systemd-udevd
</span></span><span class="line"><span class="cl">        ├─udisksd───4*<span class="o">[{</span>udisksd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─unattended-upgr───<span class="o">{</span>unattended-upgr<span class="o">}</span>
</span></span><span class="line"><span class="cl">        ├─upowerd───2*<span class="o">[{</span>upowerd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─vmtoolsd───3*<span class="o">[{</span>vmtoolsd<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ├─vmware-vmblock-───2*<span class="o">[{</span>vmware-vmblock-<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        └─wpa_supplicant
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b>操作系统只创建树根上面的进程，剩下所有的进程都是由树根上的进程创建的</b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls /sbin/init -l
</span></span><span class="line"><span class="cl">lrwxrwxrwx <span class="m">1</span> root root <span class="m">20</span> Sep <span class="m">10</span>  <span class="m">2022</span> /sbin/init -&gt; /lib/systemd/systemd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls /etc/init.d -l
</span></span><span class="line"><span class="cl">total <span class="m">88</span>
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">3740</span> Feb <span class="m">23</span>  <span class="m">2022</span> apparmor
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2915</span> May <span class="m">10</span>  <span class="m">2022</span> apport
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1175</span> Dec <span class="m">26</span>  <span class="m">2021</span> binfmt-support
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1232</span> Nov <span class="m">23</span>  <span class="m">2021</span> console-setup.sh
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">3062</span> Mar <span class="m">18</span>  <span class="m">2021</span> cron
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">3152</span> Jun <span class="m">28</span>  <span class="m">2021</span> dbus
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1748</span> Feb <span class="m">21</span>  <span class="m">2022</span> hwclock.sh
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2638</span> Oct <span class="m">30</span>  <span class="m">2021</span> irqbalance
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1479</span> Jul <span class="m">24</span>  <span class="m">2021</span> keyboard-setup.sh
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2044</span> Jan  <span class="m">8</span>  <span class="m">2021</span> kmod
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1386</span> Feb <span class="m">23</span>  <span class="m">2022</span> plymouth
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root  <span class="m">760</span> Feb <span class="m">23</span>  <span class="m">2022</span> plymouth-log
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root  <span class="m">959</span> Feb <span class="m">25</span>  <span class="m">2022</span> procps
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">4417</span> Oct <span class="m">12</span>  <span class="m">2022</span> rsync
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1222</span> Feb <span class="m">18</span>  <span class="m">2021</span> screen-cleanup
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">6871</span> Mar  <span class="m">8</span>  <span class="m">2022</span> udev
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2083</span> Sep <span class="m">19</span>  <span class="m">2021</span> ufw
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1391</span> Feb <span class="m">19</span>  <span class="m">2021</span> unattended-upgrades
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">1306</span> Feb <span class="m">21</span>  <span class="m">2022</span> uuidd
</span></span><span class="line"><span class="cl">-rwxr-xr-x <span class="m">1</span> root root <span class="m">2762</span> Oct <span class="m">19</span>  <span class="m">2021</span> x11-common
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ls /bin/sh -l
</span></span><span class="line"><span class="cl">lrwxrwxrwx <span class="m">1</span> root root <span class="m">4</span> Feb <span class="m">11</span> 05:35 /bin/sh -&gt; dash
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>程序：状态机</p>
<ul>
<li>
<p>C 代码视角：语句</p>
</li>
<li>
<p>汇编/机器代码视角：指令</p>
</li>
<li>
<p>与操作系统交互的方式：<code>syscall</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="定制最小的-linux">定制最小的 Linux</h3>
<ul>
<li>
<p>没有存储设备，只有包含两个文件的 “<code>initramfs</code>”</p>
</li>
<li>
<p><a href="https://box.nju.edu.cn/f/3f67e092e1ba441187d9/?dl=1" target="_blank" rel="noopener noreffer">linux-minimal.zip</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ tree .
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── bin
</span></span><span class="line"><span class="cl">│   └── busybox <span class="o">(</span>可以在我们的Linux里直接执行<span class="o">)</span>
</span></span><span class="line"><span class="cl">└── init
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>加上 <code>vmlinuz</code> (内核镜像) 就可以在 <code>QEMU</code> 里启动了</li>
</ul>
<hr>
<ul>
<li>
<p>可以直接在文件系统中添加静态链接的二进制文件</p>
<ul>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a></p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/logisim.c" target="_blank" rel="noopener noreffer">logisim.c</a></p>
</li>
</ul>
</li>
<li>
<p><code>Makefile</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">initramfs</span> <span class="n">run</span> <span class="n">clean</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">$(</span><span class="nv">shell</span> <span class="nv">mkdir</span> -<span class="nv">p</span> <span class="nv">build</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">initramfs</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@cd initramfs <span class="o">&amp;&amp;</span> find . -print0 <span class="p">|</span> cpio --null -ov --format<span class="o">=</span>newc <span class="p">|</span> gzip -9 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  &gt; ../build/initramfs.cpio.gz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">run</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@qemu-system-x86_64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -nographic <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -serial mon:stdio <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -m <span class="m">128</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -kernel vmlinuz <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -initrd build/initramfs.cpio.gz <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	  -append <span class="s2">&#34;console=ttyS0 quiet acpi=off&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">clean</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@rm -rf build
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装<code>qemu</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt-get install qemu
</span></span><span class="line"><span class="cl">sudo apt-get install qemu-system
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make run
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>进入<code>qemu</code> $\rightarrow$ <code>Ctrl a; c</code></p>
</li>
<li>
<p>查看状态</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sh: can<span class="s1">&#39;t access tty; job control turned off
</span></span></span><span class="line"><span class="cl"><span class="s1">/ # QEMU 6.2.0 monitor - type &#39;</span>help<span class="err">&#39;</span> <span class="k">for</span> more information
</span></span><span class="line"><span class="cl"><span class="o">(</span>qemu<span class="o">)</span> info registers 
</span></span><span class="line"><span class="cl"><span class="nv">RAX</span><span class="o">=</span>0001a94000000000 <span class="nv">RBX</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">RCX</span><span class="o">=</span><span class="m">0000000000000001</span> <span class="nv">RDX</span><span class="o">=</span>0000000000000ca2
</span></span><span class="line"><span class="cl"><span class="nv">RSI</span><span class="o">=</span><span class="m">0000000000000087</span> <span class="nv">RDI</span><span class="o">=</span><span class="m">0000000000000087</span> <span class="nv">RBP</span><span class="o">=</span>ffffffffa3c03e28 <span class="nv">RSP</span><span class="o">=</span>ffffffffa3c03e08
</span></span><span class="line"><span class="cl"><span class="nv">R8</span> <span class="o">=</span>ffff88a5c781df80 <span class="nv">R9</span> <span class="o">=</span><span class="m">0000000000000200</span> <span class="nv">R10</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">R11</span><span class="o">=</span><span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">R12</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">R13</span><span class="o">=</span>ffffffffa3c13780 <span class="nv">R14</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">R15</span><span class="o">=</span><span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">RIP</span><span class="o">=</span>ffffffffa30d564e <span class="nv">RFL</span><span class="o">=</span><span class="m">00000246</span> <span class="o">[</span>---Z-P-<span class="o">]</span> <span class="nv">CPL</span><span class="o">=</span><span class="m">0</span> <span class="nv">II</span><span class="o">=</span><span class="m">0</span> <span class="nv">A20</span><span class="o">=</span><span class="m">1</span> <span class="nv">SMM</span><span class="o">=</span><span class="m">0</span> <span class="nv">HLT</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nv">ES</span> <span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">CS</span> <span class="o">=</span><span class="m">0010</span> <span class="m">0000000000000000</span> ffffffff 00af9b00 <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> CS64 <span class="o">[</span>-RA<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">SS</span> <span class="o">=</span><span class="m">0018</span> <span class="m">0000000000000000</span> ffffffff 00cf9300 <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> DS   <span class="o">[</span>-WA<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">DS</span> <span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FS</span> <span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">GS</span> <span class="o">=</span><span class="m">0000</span> ffff88a5c7800000 <span class="m">00000000</span> <span class="m">00000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">LDT</span><span class="o">=</span><span class="m">0000</span> <span class="m">0000000000000000</span> <span class="m">00000000</span> <span class="m">00008200</span> <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> LDT
</span></span><span class="line"><span class="cl"><span class="nv">TR</span> <span class="o">=</span><span class="m">0040</span> fffffe0000003000 0000206f <span class="m">00008900</span> <span class="nv">DPL</span><span class="o">=</span><span class="m">0</span> TSS64-avl
</span></span><span class="line"><span class="cl"><span class="nv">GDT</span><span class="o">=</span>     fffffe0000001000 0000007f
</span></span><span class="line"><span class="cl"><span class="nv">IDT</span><span class="o">=</span>     fffffe0000000000 00000fff
</span></span><span class="line"><span class="cl"><span class="nv">CR0</span><span class="o">=</span><span class="m">80050033</span> <span class="nv">CR2</span><span class="o">=</span>0000000000e22c18 <span class="nv">CR3</span><span class="o">=</span>0000000003ca8000 <span class="nv">CR4</span><span class="o">=</span>000006f0
</span></span><span class="line"><span class="cl"><span class="nv">DR0</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">DR1</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">DR2</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="nv">DR3</span><span class="o">=</span><span class="m">0000000000000000</span> 
</span></span><span class="line"><span class="cl"><span class="nv">DR6</span><span class="o">=</span>00000000ffff0ff0 <span class="nv">DR7</span><span class="o">=</span><span class="m">0000000000000400</span>
</span></span><span class="line"><span class="cl"><span class="nv">EFER</span><span class="o">=</span>0000000000000d01
</span></span><span class="line"><span class="cl"><span class="nv">FCW</span><span class="o">=</span>037f <span class="nv">FSW</span><span class="o">=</span><span class="m">0000</span> <span class="o">[</span><span class="nv">ST</span><span class="o">=</span>0<span class="o">]</span> <span class="nv">FTW</span><span class="o">=</span><span class="m">00</span> <span class="nv">MXCSR</span><span class="o">=</span>00001f80
</span></span><span class="line"><span class="cl"><span class="nv">FPR0</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR1</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FPR2</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR3</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FPR4</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR5</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">FPR6</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span> <span class="nv">FPR7</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM00</span><span class="o">=</span>0000000000e20450 <span class="m">0000000000000400</span> <span class="nv">XMM01</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM02</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM03</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM04</span><span class="o">=</span>ffffffffffffffff ffffffff00000000 <span class="nv">XMM05</span><span class="o">=</span><span class="m">0000000048094038</span> <span class="m">3028201810080072</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM06</span><span class="o">=</span>0000000000ff0000 000000ff00000000 <span class="nv">XMM07</span><span class="o">=</span><span class="m">0000000400000004</span> <span class="m">0000000400000004</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM08</span><span class="o">=</span>00000000008d93e0 00000000008d93e0 <span class="nv">XMM09</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM10</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM11</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM12</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM13</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span><span class="line"><span class="cl"><span class="nv">XMM14</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span> <span class="nv">XMM15</span><span class="o">=</span><span class="m">0000000000000000</span> <span class="m">0000000000000000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="变魔术时间到">变魔术时间到</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nv">c1</span><span class="o">=</span><span class="s2">&#34;arch ash base64 cat chattr chgrp chmod chown conspy cp cpio cttyhack date dd df dmesg dnsdomainname dumpkmap echo ed egrep false fatattr fdflush fgrep fsync getopt grep gunzip gzip hostname hush ionice iostat ipcalc kbd_mode kill link linux32 linux64 ln login ls lsattr lzop makemime mkdir mknod mktemp more mount mountpoint mpstat mt mv netstat nice nuke pidof ping ping6 pipe_progress printenv ps pwd reformime resume rev rm rmdir rpm run-parts scriptreplay sed setarch setpriv setserial sh sleep stat stty su sync tar touch true umount uname usleep vi watch zcat&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">c2</span><span class="o">=</span><span class="s2">&#34;[ [[ awk basename bc beep blkdiscard bunzip2 bzcat bzip2 cal chpst chrt chvt cksum clear cmp comm crontab cryptpw cut dc deallocvt diff dirname dos2unix dpkg dpkg-deb du dumpleases eject env envdir envuidgid expand expr factor fallocate fgconsole find flock fold free ftpget ftpput fuser groups hd head hexdump hexedit hostid id install ipcrm ipcs killall last less logger logname lpq lpr lsof lspci lsscsi lsusb lzcat lzma man md5sum mesg microcom mkfifo mkpasswd nc nl nmeter nohup nproc nsenter nslookup od openvt passwd paste patch pgrep pkill pmap printf pscan&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">c3</span><span class="o">=</span><span class="s2">&#34;pstree pwdx readlink realpath renice reset resize rpm2cpio runsv runsvdir rx script seq setfattr setkeycodes setsid setuidgid sha1sum sha256sum sha3sum sha512sum showkey shred shuf smemcap softlimit sort split ssl_client strings sum sv svc svok tac tail taskset tcpsvd tee telnet test tftp time timeout top tr traceroute traceroute6 truncate ts tty ttysize udhcpc6 udpsvd unexpand uniq unix2dos unlink unlzma unshare unxz unzip uptime users uudecode uuencode vlock volname w wall wc wget which who whoami whois xargs xxd xz xzcat yes&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> cmd in <span class="nv">$c1</span> <span class="nv">$c2</span> <span class="nv">$c3</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  /bin/busybox ln -s /bin/busybox /bin/<span class="nv">$cmd</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">mkdir -p /proc <span class="o">&amp;&amp;</span> mount -t proc  none /proc
</span></span><span class="line"><span class="cl">mkdir -p /sys  <span class="o">&amp;&amp;</span> mount -t sysfs none /sys
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PS1</span><span class="o">=</span><span class="s1">&#39;(linux) &#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>试试 <code>adb shell</code> (<a href="https://landley.net/toybox/" target="_blank" rel="noopener noreffer">toybox</a>)</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter11-1.png" title="/img/Operating System/chapter11-1.png" data-thumbnail="/img/Operating System/chapter11-1.png" data-sub-html="<h2>创建链接，创建目录，挂载了一些内核的文件系统，将操作系统一些内部状态暴露给应用程序 -&gt; 变成linux</h2>">
        
    </a><figcaption class="image-caption"><code>创建链接，创建目录，挂载了一些内核的文件系统，将操作系统一些内部状态暴露给应用程序 -&gt; 变成linux</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter11-2.png" title="/img/Operating System/chapter11-2.png" data-thumbnail="/img/Operating System/chapter11-2.png" data-sub-html="<h2>命令也可以用</h2>">
        
    </a><figcaption class="image-caption"><code>命令也可以用</code></figcaption>
    </figure>
<ul>
<li>过程</li>
</ul>
<div class="mermaid" id="id-1"></div>
<h3 id="例子noilinux-lite">例子：NOILinux-lite</h3>
<ul>
<li>
<p>2021 年，<code>CCF</code> 以迅雷不及掩耳盗铃之势发布了 <code>NOILinux 2.0</code></p>
<ul>
<li>
<p><code>Ubuntu 20.04 Desktop (x86-64 only)</code></p>
</li>
<li>
<p>真就不管那些 <code>32-bit</code> 的老爷机和老爷系统的死活了？</p>
</li>
</ul>
</li>
<li>
<p>和刚才的 “最小” 系统但本质一样</p>
<ul>
<li>
<p>有更多设备 (磁盘、网卡等)</p>
</li>
<li>
<p><code>initramfs</code> 里挂载了磁盘</p>
</li>
<li>
<p>磁盘里安装了最少的编译运行环境 (<code>g++, ...</code>) 和一个<code>Web</code>服务</p>
</li>
<li>
<p><code>switch_root</code> (<code>pivot_root</code> 系统调用) 完成 “启动”</p>
</li>
</ul>
</li>
</ul>
<h3 id="小结应用程序视角的操作系统">小结：应用程序视角的操作系统</h3>
<ul>
<li><code>Linux</code> 操作系统启动流程
<ul>
<li><code>CPU Reset</code> → <code>Firmware</code> → <code>Loader</code> →<code> Kernel _start()</code> → 第一个程序 <code>/bin/init</code> → 程序 (状态机) 执行 + 系统调用</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>操作系统为 (所有) 程序提供 <code>API</code></p>
<ul>
<li>
<p>进程 (状态机) 管理</p>
<ul>
<li><b><font color="red"><code>fork, execve, exit</code> - 状态机的创建/改变/删除 ← 今天的主题</font></b></li>
</ul>
</li>
<li>
<p>存储（内存） (地址空间) 管理</p>
<ul>
<li><code>mmap</code> - 虚拟地址空间管理</li>
</ul>
</li>
<li>
<p>文件 (数据对象) 管理</p>
<ul>
<li><code>open, close, read, write</code> - 文件访问管理
<ul>
<li><code>mkdir, link, unlink</code> - 目录管理</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="fork">fork()</h2>
<h3 id="操作系统状态机的管理者">操作系统：状态机的管理者</h3>
<ul>
<li>
<p>C 程序 = 状态机</p>
<ul>
<li>
<p>初始状态：<code>main(argc, argv)</code></p>
</li>
<li>
<p>程序可以直接在处理器上执行</p>
</li>
</ul>
</li>
<li>
<p><font color="red">虚拟化：操作系统在物理内存中保存多个状态机（管理好多个状态机，每一次都可以选择一个状态机执行一步）</font></p>
</li>
<li>
<p>通过<b>虚拟内存</b>实现<b>每次 “拿出来一个执行”</b></p>
</li>
<li>
<p><b>中断后进入操作系统代码，“换一个执行”</b></p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p><font color="red"><b>除了fork的返回值<code>pid</code>，剩下的都一样，并且互相独立（第一个进程的指针访问不了第二个进程的内存）</b></font></p>
</li>
<li>
<p><b>之后进入并发状态，执行那个由操作系统决定</b></p>
</li>
</ul>
<h3 id="状态机管理创建状态机">状态机管理：创建状态机</h3>
<blockquote>
<p>如果要创建状态机，我们应该提供什么样的<code> API</code>？</p>
</blockquote>
<ul>
<li>
<p><code>UNIX</code> 的答案: <code>fork</code></p>
<ul>
<li>做一份状态机完整的复制 (内存、寄存器现场)</li>
</ul>
</li>
<li>
<p><code>int fork();</code></p>
<ul>
<li>
<p>立即复制状态机 (完整的内存)</p>
</li>
<li>
<p>新创建进程返回 0</p>
</li>
<li>
<p>执行 <code>fork</code> 的进程返回子进程的进程号</p>
</li>
</ul>
</li>
</ul>
<h3 id="fork-bomb">Fork Bomb</h3>
<ul>
<li>
<p>模拟状态机需要资源</p>
<ul>
<li>
<p>只要不停地创建进程，系统还是会挂掉的</p>
</li>
<li>
<p><code>Don't try it (or try it in docker)</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="代码解析-fork-bomb">代码解析: Fork Bomb</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">:<span class="o">(){</span> :<span class="p">|</span>:<span class="p">&amp;</span><span class="o">}</span><span class="p">;</span>:   <span class="c1"># 刚才的一行版本</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">:<span class="o">()</span> <span class="o">{</span>         <span class="c1"># 格式化一下</span>
</span></span><span class="line"><span class="cl">  : <span class="p">|</span> : <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span><span class="p">;</span> :
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">fork<span class="o">()</span> <span class="o">{</span>      <span class="c1"># bash: 允许冒号作为标识符……</span>
</span></span><span class="line"><span class="cl">  fork <span class="p">|</span> fork <span class="p">&amp;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span><span class="p">;</span> fork
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>具体过程</li>
</ul>
<div class="mermaid" id="id-3"></div>
<h3 id="这次你们记住-fork-了">这次你们记住 Fork 了！</h3>
<ul>
<li>因为状态机是复制的，因此总能找到 “父子关系”
<ul>
<li>因此有了进程树 (<code>pstree</code>)</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">systemd-+-accounts-daemon---2*<span class="o">[{</span>accounts-daemon<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-agetty
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-atd
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-automount---2*<span class="o">[{</span>automount<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-avahi-daemon---avahi-daemon
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-cron
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-dbus-daemon
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-irqbalance---<span class="o">{</span>irqbalance<span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">|</span>-lxcfs---7*<span class="o">[{</span>lxcfs<span class="o">}]</span>
</span></span><span class="line"><span class="cl">        ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="理解-fork-习题-1">理解 fork: 习题 (1)</h3>
<ul>
<li>试着拿出一张纸，写出以下程序的输出结果
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/fork-demo.c" target="_blank" rel="noopener noreffer">fork-demo.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid1</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid2</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid3</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello World from (%d, %d, %d)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">pid1</span><span class="p">,</span> <span class="n">pid2</span><span class="p">,</span> <span class="n">pid3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>参考原来的<code>OS</code>作业</li>
</ul>
<blockquote>
<p>Including the initial parent process, how many processes are created by the program shown in Figure 3.31?</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* fork a child process */</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* fork another child process */</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* and fork another */</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><div class="mermaid" id="id-4"></div>
$$
1+3+3+1=8
$$</p>
<h3 id="理解-fork-习题-2">理解 fork: 习题 (2)</h3>
<p>问以下程序的输出结果</p>
<ul>
<li>一个更好的版本: <a href="https://jyywiki.cn/pages/OS/2022/demos/fork-printf.c" target="_blank" rel="noopener noreffer">fork-printf.c</a>
<ul>
<li>用状态机的视角再试一次</li>
<li>试一试：<code>./a.out</code> v.s. <code>./a.out | cat</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/wait.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf        
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="m">8</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>why ?</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> cat
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>???</code></li>
</ul>
<blockquote>
<ul>
<li>计算机系统里没有魔法。机器永远是对的。</li>
</ul>
</blockquote>
<ul>
<li>先看一个例子<code>demo.c</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc demo.c -o demo   
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./demo
</span></span><span class="line"><span class="cl">zsh: segmentation fault  ./demo
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>没有输出<code>Hello</code></p>
</li>
<li>
<p>改一下</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc demo.c -o demo
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./demo            
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">zsh: segmentation fault  ./demo
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>联系之前的学校的实验</li>
</ul>
<p><code>main.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/wait.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pid_t</span> <span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Error!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">execl</span><span class="p">(</span><span class="s">&#34;child&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;c&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>child.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;b&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<ul>
<li>缓冲区问题</li>
</ul>
<p>在调用<code>fork()</code>前先<code>printf(&quot;a&quot;)</code>，在<code>fork()</code>后的子进程里<code>printf(&quot;b&quot;)</code>，这样结果按理来说是打印<code>&quot;ab&quot;</code>，但是运行出来反而是<code>&quot;ba&quot;</code>。 这个问题的原因是<code>c</code>语言的输出缓冲，<b>在调用<code>printf()</code>函数时，数据先被存放在缓冲区中，待缓冲区满了或者遇到了换行符<code>&quot;\n&quot;</code>时才会输出到屏幕上。</b><code>printf(&quot;a&quot;)</code>语句输出字符<code>&quot;a&quot;</code>，但由于缓冲区未满，字符<code>&quot;a&quot;</code>并没有被立即输出。<b>当程序调用<code>fork()</code>函数创建子进程时，子进程也继承了父进程的缓冲区，这时缓冲区中的数据包括字符&quot;a&quot;也被复制到了子进程的缓冲区中。</b>接着，在子进程中，<code>printf(&quot;b&quot;)</code>语句输出字符<code>&quot;b&quot;</code>，由于子进程的缓冲区已经满了，因此字符<code>&quot;a&quot;</code>和字符<code>&quot;b&quot;</code>都被输出到屏幕上，此时的输出结果是<code>&quot;ba&quot;</code>。</p>
<p>解决的方法是在<code>printf(&quot;a&quot;)</code>语句后加上<code>fflush(stdout)</code>语句，强制将缓冲区的数据输出到屏幕上，这样输出的结果就是<code>&quot;ab&quot;</code>。</p>
</blockquote>
<div class="mermaid" id="id-5"></div>
<ul>
<li>
<p><code>linebuffer</code>：遇到<code>\n</code>通过系统调用将缓冲区的内容输出</p>
</li>
<li>
<p><code>fullbuffer</code>：到达设定容量后才会将缓冲区的内容输出</p>
</li>
</ul>
<hr>
<ul>
<li>下面来分析</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> cat
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span></code></pre></td></tr></table>
</div>
</div><div class="mermaid" id="id-6"></div>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter11-3.jpg" title="/img/Operating System/chapter11-3.jpg" data-thumbnail="/img/Operating System/chapter11-3.jpg" data-sub-html="<h2>树状图</h2>">
        
    </a><figcaption class="image-caption"><code>树状图</code></figcaption>
    </figure>
<ul>
<li>另一种解决方案：<code>setbuf(stdout,NULL);</code>强行将标准输出流设置为不缓冲</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/wait.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fork</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> cat             
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">Hello
</span></span><span class="line"><span class="cl">                                                                                                                                                   
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./fork-printf <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="m">6</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="理解-fork-习题-3">理解 fork: 习题 (3)</h3>
<ul>
<li>
<p>多线程程序的某个线程执行 <code>fork()</code>，应该发生什么？</p>
<ul>
<li>这是个很有趣的问题：创造 <code>fork</code> 时创始人并没有考虑线程</li>
</ul>
</li>
<li>
<p>我们可能作出以下设计：</p>
<ul>
<li>
<p>仅有执行 <code>fork</code> 的线程被复制，其他线程 “卡死”</p>
</li>
<li>
<p>仅有执行 <code>fork</code> 的线程被复制，其他线程退出</p>
</li>
<li>
<p>所有的线程都被复制并继续执行</p>
<ul>
<li>这三种设计分别会带来什么问题？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="execve">execve()</h2>
<h3 id="状态机管理替换状态机">状态机管理：替换状态机</h3>
<blockquote>
<p>光有 <code>fork</code> 还不够，怎么 “执行别的程序”？</p>
</blockquote>
<ul>
<li><code>UNIX</code> 的答案: <code>execve</code>
<ul>
<li><b>将当前运行的状态机<font color="red">重置</font>成成另一个程序的初始状态</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">execve</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">envp</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>执行名为 <code>filename</code> 的程序</p>
</li>
<li>
<p>允许对新状态机设置参数 <code>argv</code> (v) 和环境变量 <code>envp</code> (e)，数组形式，以空指针<code>NULL</code>来结尾</p>
<ul>
<li>刚好对应了 <code>main()</code> 的参数！</li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/execve-demo.c" target="_blank" rel="noopener noreffer">execve-demo.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;/bin/bash&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;env&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span> <span class="k">const</span> <span class="n">envp</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;HELLO=WORLD&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">execve</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">argv</span><span class="p">,</span> <span class="n">envp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./execve-demo
</span></span><span class="line"><span class="cl"><span class="nv">PWD</span><span class="o">=</span>/mnt/d/work <span class="k">for</span> vscode/chapter11
</span></span><span class="line"><span class="cl"><span class="nv">HELLO</span><span class="o">=</span>WORLD
</span></span><span class="line"><span class="cl"><span class="nv">SHLVL</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="nv">_</span><span class="o">=</span>/usr/bin/env
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>printf</code>没有被执行（原来的状态机没有了）</li>
<li>参照</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ bash -c ls
</span></span><span class="line"><span class="cl">demo  demo.c  execve-demo  execve-demo.c  fork-demo  fork-demo.c  fork-printf  fork-printf.c  l.zip  linux-minimal  thread-os.c
</span></span><span class="line"><span class="cl">                                                                                                                                                   
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ bash -c env
</span></span><span class="line"><span class="cl"><span class="nv">SHELL</span><span class="o">=</span>/usr/bin/zsh
</span></span><span class="line"><span class="cl"><span class="nv">USER_ZDOTDIR</span><span class="o">=</span>/home/jungle
</span></span><span class="line"><span class="cl"><span class="nv">COLORTERM</span><span class="o">=</span>truecolor
</span></span><span class="line"><span class="cl"><span class="nv">WSL2_GUI_APPS_ENABLED</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="nv">TERM_PROGRAM_VERSION</span><span class="o">=</span>1.78.0
</span></span><span class="line"><span class="cl"><span class="nv">WSL_DISTRO_NAME</span><span class="o">=</span>Ubuntu-22.04
</span></span><span class="line"><span class="cl"><span class="nv">LESS_TERMCAP_se</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">LESS_TERMCAP_so</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">NAME</span><span class="o">=</span>LAPTOP-A7S3TAA4
</span></span><span class="line"><span class="cl"><span class="nv">PWD</span><span class="o">=</span>/mnt/d/work <span class="k">for</span> vscode/chapter11
</span></span><span class="line"><span class="cl"><span class="nv">LOGNAME</span><span class="o">=</span>jungle
</span></span><span class="line"><span class="cl"><span class="nv">_</span><span class="o">=</span>/usr/bin/env
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="环境变量">环境变量</h3>
<p>“应用程序执行的环境”</p>
<ul>
<li>
<p>使用<code>env</code>命令查看</p>
<ul>
<li><code>PATH</code>: 可执行文件搜索路径</li>
<li><code>PWD</code>: 当前路径</li>
<li><code>HOME</code>: home 目录</li>
<li><code>DISPLAY</code>: 图形输出</li>
<li><code>PS1</code>: shell 的提示符</li>
</ul>
</li>
<li>
<dl>
<dt><code>export</code></dt>
<dd>
<p>告诉 shell 在创建子进程时设置环境变量</p>
</dd>
</dl>
<ul>
<li>小技巧：<code>export ARCH=x86_64-qemu</code> 或 <code>export ARCH=native</code></li>
<li>上学期的 <code>AM_HOME</code> 终于破案了（这是南大的，邮专上学期还在写数据结构）</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ <span class="nb">export</span> <span class="nv">HELLO</span><span class="o">=</span>WORLD
</span></span><span class="line"><span class="cl">                                                                                                                                                   
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ env <span class="p">|</span> grep HELLO
</span></span><span class="line"><span class="cl"><span class="nv">HELLO</span><span class="o">=</span>WORLD
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter11-4.png" title="/img/Operating System/chapter11-4.png" data-thumbnail="/img/Operating System/chapter11-4.png" data-sub-html="<h2>第一个调用总是execve()</h2>">
        
    </a><figcaption class="image-caption"><code>第一个调用总是execve()</code></figcaption>
    </figure>
<ul>
<li>
<p>参考<a href="https://jungle430.github.io/posts/operating-system/support2/#%E4%BB%8E%E6%88%91%E4%BB%AC%E7%BB%88%E7%AB%AF%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%88%B0%E7%A8%8B%E5%BA%8F%E8%A2%AB%E8%BD%BD%E5%85%A5%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreffer">《Linux x86 Program Start Up or - How the heck do we get to main()?》</a></p>
</li>
<li>
<p>执行<code>execve(bash)</code>的调用</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f373bcba000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f373bc74000, 46367<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;/bin/bash&#34;</span>, <span class="o">[</span><span class="s2">&#34;/bin/bash&#34;</span>, <span class="s2">&#34;-c&#34;</span>, <span class="s2">&#34;env&#34;</span><span class="o">]</span>, 0x7fffa5c787c0 /* <span class="m">1</span> var */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x559dfe4ca000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffe8ef996f0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f476f6f0000
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>最终输出的<code>syscall</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;PWD=/mnt/d/work for vscode/chapt&#34;</span>..., <span class="nv">37PWD</span><span class="o">=</span>/mnt/d/work <span class="k">for</span> vscode/chapter11
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">37</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;HELLO=WORLD\n&#34;</span>, <span class="nv">12HELLO</span><span class="o">=</span>WORLD
</span></span><span class="line"><span class="cl"><span class="o">)</span>           <span class="o">=</span> <span class="m">12</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;SHLVL=0\n&#34;</span>, <span class="nv">8SHLVL</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>                <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;_=/usr/bin/env\n&#34;</span>, <span class="nv">15_</span><span class="o">=</span>/usr/bin/env
</span></span><span class="line"><span class="cl"><span class="o">)</span>        <span class="o">=</span> <span class="m">15</span>
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="环境变量path">环境变量：<code>PATH</code></h3>
<ul>
<li>可执行文件搜索路径
<ul>
<li>还记得 <code>gcc</code> 的 <code>strace</code> 结果吗？</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/local/sbin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/local/bin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/sbin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid 28369<span class="o">]</span> execve<span class="o">(</span><span class="s2">&#34;/usr/bin/as&#34;</span>, <span class="o">[</span><span class="s2">&#34;as&#34;</span>, <span class="s2">&#34;--64&#34;</span>, ...
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这个搜索顺序恰好是 <code>PATH</code> 里指定的顺序</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;&#34;</span> /usr/bin/gcc a.c
</span></span><span class="line"><span class="cl">gcc: error trying to <span class="nb">exec</span> <span class="s1">&#39;as&#39;</span>: execvp: No such file or directory
</span></span><span class="line"><span class="cl">$ <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/usr/bin/&#34;</span> gcc a.c
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b><font color="red"><code>fork</code>是状态机的复制，<code>execve</code>是状态机的重置，环境变量就是重置状态机的参数</font></b></li>
</ul>
<h2 id="_exit">_exit()</h2>
<h3 id="状态机管理终止状态机">状态机管理：终止状态机</h3>
<blockquote>
<p>有了<code> fork</code>, <code>execve</code> 我们就能自由执行任何程序了，最后只缺一个销毁状态机的函数！</p>
</blockquote>
<ul>
<li><code>UNIX</code> 的答案: <code>_exit</code>
<ul>
<li>立即摧毁状态机</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">_exit</span><span class="p">(</span><span class="kt">int</span> <span class="n">status</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>销毁当前状态机，并允许有一个返回值</p>
</li>
<li>
<p>子进程终止会通知父进程 (后续课程解释)</p>
</li>
<li>
<p>这个简单……</p>
<ul>
<li>但问题来了：多线程程序怎么办？</li>
</ul>
</li>
</ul>
<h3 id="结束程序执行的三种方法">结束程序执行的三种方法</h3>
<ul>
<li>
<p><code>exit</code> 的几种写法 (它们是<font color="red">不同</font>)</p>
<ul>
<li>
<p><code>exit(0)</code> $\rightarrow$ <code>stdlib.h</code> 中声明的<code>libc</code>函数</p>
<ul>
<li>会调用 <code>atexit</code></li>
</ul>
</li>
<li>
<p><code>_exit(0)</code> - glibc 的 syscall wrapper</p>
<ul>
<li>执行 “<code>exit_group</code>” 系统调用终止整个进程 (所有线程)
<ul>
<li>细心的同学已经在 strace 中发现了</li>
</ul>
</li>
<li>不会调用 <code>atexit</code></li>
</ul>
</li>
<li>
<p><code>syscall(SYS_exit, 0)</code></p>
<ul>
<li>执行 “<code>exit</code>” 系统调用终止当前线程</li>
<li>不会调用 <code>atexit</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="不妨试一试">不妨试一试</h3>
<ul>
<li>结束当前进程执行的四种方式
<ul>
<li><code>return</code>, <code>exit</code>, <code>_exit</code>, <code>syscall</code></li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/exit-demo.c" target="_blank" rel="noopener noreffer">exit-demo.c</a>
<ul>
<li>用<code>strace</code>观察程序的执行</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Goodbye, Cruel OS World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">atexit</span><span class="p">(</span><span class="n">func</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;exit&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;_exit&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#34;__exit&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">syscall</span><span class="p">(</span><span class="n">SYS_exit</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./exit-demo
</span></span><span class="line"><span class="cl">Goodbye, Cruel OS World!
</span></span><span class="line"><span class="cl">                                                                                                                                                              
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./exit-demo <span class="nb">exit</span>
</span></span><span class="line"><span class="cl">Goodbye, Cruel OS World!
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用<code>static</code>编译，省去链接过程，便于查看<code>strace</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./exit-demo
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./exit-demo&#34;</span><span class="o">]</span>, 0x7ffdaa2866a0 /* <span class="m">42</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffd390434e0<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x9b6000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x9b6dc0<span class="o">)</span>                           <span class="o">=</span> 0x9b6dc0
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x9b63c0<span class="o">)</span>       <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x9b6690<span class="o">)</span>               <span class="o">=</span> <span class="m">8090</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x9b66a0, 24<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x9b6d60, 0x20, 0, 0x53053053<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter11&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xfc\x1b\x9a\x3b\x0c\x0d\xf6\x62&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x9d7dc0<span class="o">)</span>                           <span class="o">=</span> 0x9d7dc0
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x9d8000<span class="o">)</span>                           <span class="o">=</span> 0x9d8000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0620, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0x7<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;Goodbye, Cruel OS World!\n&#34;</span>, 25Goodbye, Cruel OS World!
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">25</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>1<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./exit-demo _exit
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="s2">&#34;_exit&#34;</span><span class="o">]</span>, 0x7ffdcbeb2108 /* <span class="m">42</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7fff2fcb4900<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x1346000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1346dc0<span class="o">)</span>                          <span class="o">=</span> 0x1346dc0
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x13463c0<span class="o">)</span>      <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x1346690<span class="o">)</span>              <span class="o">=</span> <span class="m">8124</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x13466a0, 24<span class="o">)</span>          <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x1346d60, 0x20, 0, 0x53053053<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter11&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x1f\x9d\x12\x25\xe1\x65\xc9\x7b&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1367dc0<span class="o">)</span>                          <span class="o">=</span> 0x1367dc0
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1368000<span class="o">)</span>                          <span class="o">=</span> 0x1368000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./exit-demo _exit   
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>没有<code>Goodbye</code>了</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter11<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./exit-demo __exit
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./exit-demo&#34;</span>, <span class="s2">&#34;__exit&#34;</span><span class="o">]</span>, 0x7ffeca752f48 /* <span class="m">42</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffe37ad6940<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>Invalid argument<span class="o">)</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x15df000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x15dfdc0<span class="o">)</span>                          <span class="o">=</span> 0x15dfdc0
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x15df3c0<span class="o">)</span>      <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x15df690<span class="o">)</span>              <span class="o">=</span> <span class="m">8256</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x15df6a0, 24<span class="o">)</span>          <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x15dfd60, 0x20, 0, 0x53053053<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">uname<span class="o">({</span><span class="nv">sysname</span><span class="o">=</span><span class="s2">&#34;Linux&#34;</span>, <span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;LAPTOP-A7S3TAA4&#34;</span>, ...<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">readlink<span class="o">(</span><span class="s2">&#34;/proc/self/exe&#34;</span>, <span class="s2">&#34;/mnt/d/work for vscode/chapter11&#34;</span>..., 4096<span class="o">)</span> <span class="o">=</span> <span class="m">42</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xed\x64\xb4\xdb\x93\xb2\x77\xd0&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1600dc0<span class="o">)</span>                          <span class="o">=</span> 0x1600dc0
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x1601000<span class="o">)</span>                          <span class="o">=</span> 0x1601000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x4c1000, 16384, PROT_READ<span class="o">)</span>    <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>0<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>exit</code>只关闭一个线程，<code>_exit</code> $\rightarrow^{Syscall}$ <code>exit_group</code>会把整个所有的线程都删掉</li>
<li><code>linux</code>默认用的<code>_exit</code>，安全</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>本次课回答的问题</p>
<ul>
<li>
<p><strong>Q1</strong>: 操作系统启动后到底做了什么？</p>
</li>
<li>
<p><strong>Q2</strong>: 操作系统如何管理程序 (进程)？</p>
</li>
</ul>
</li>
<li>
<p>Take-away messages</p>
<ul>
<li>
<p>对 “操作系统” 的完整理解</p>
</li>
<li>
<p>CPU Reset → Firmware → Loader → Kernel <code>_start()</code> → 执行第一个程序 <code>/bin/init</code> → 中断/异常处理程序</p>
</li>
<li>
<p>一个最小的 Linux 系统的例子</p>
</li>
</ul>
</li>
<li>
<p>进程管理 API</p>
<ul>
<li>fork, execve, exit: 状态机的复制、重置、销毁</li>
<li>理论上就可以实现 “各种功能” 了！</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>操作系统——内存管理</title>
    <link>https://Jungle430.github.io/posts/operating-system/support3/</link>
    <pubDate>Fri, 28 Apr 2023 17:34:50 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/support3/</guid>
    <description><![CDATA[<h1 id="内存管理">内存管理</h1>
<h2 id="导读">导读</h2>
<ul>
<li>
<p>物理内存是操作系统需要管理的一个重要资源，让运行在一台机器上的多个应用程序不用“争抢”，都能随时得到想要的任意多的内存，是操作系统的想要达到的理想目标。<b>提高系统物理内存的动态使用效率，通过隔离应用的物理内存空间保证应用间的安全性，把“有限”物理内存变成“无限”虚拟内存，是操作系统的一系列重要的目标，</b>本章展现了操作系统为实现“理想”而要扩展的一系列功能</p>
<ul>
<li>通过动态内存分配，<b>提高了应用程序对内存的动态使用效率</b></li>
<li>通过页表的<b>虚实内存映射机制</b>，简化了编译器对应用的地址空间设置</li>
<li>通过页表的虚实内存映射机制，加强了应用之间，应用与内核之间的内存隔离，增强了系统安全</li>
<li>通过页表的虚实内存映射机制，可以实现空分复用（提出，但没有实现）</li>
</ul>
</li>
<li>
<p>上一章，我们分别实现了多道程序和分时多任务系统，它们的核心机制都是任务切换。由于多道程序和分时多任务系统的设计初衷不同，它们在任务切换的时机和策略也不同。有趣的一点是，任务切换机制对于应用是完全<b>透明(Transparent)</b>的，<b><font color="red">应用可以不对内核实现该机制的策略做任何假定（除非要进行某些针对性优化），甚至可以完全不知道这机制的存在</font></b></p>
</li>
<li>
<p><font color="red"><b>在大多数应用（也就是应用开发者）的视角中，它们会独占一整个 CPU 和特定（连续或不连续）的内存空间（平时写程序还真是这样）</b></font></p>
</li>
<li>
<p>当然，通过上一章的学习，我们知道<u>在现代操作系统中，出于公平性的考虑，我们极少会让独占<code>CPU</code>这种情况发生</u></p>
</li>
<li>
<p>所以应用自认为的独占<code>CPU</code>只是内核想让应用看到的一种<b>幻象(Illusion)</b>，而<code>CPU</code>计算资源被<b>时分复用(TDM, Time-Division Multiplexing)</b>的实质被内核通过恰当的抽象隐藏了起来，<b>对应用不可见</b></p>
</li>
<li>
<p>与之相对，我们目前还没有对内存管理功能进行进一步拓展，仅仅是把程序放到某处的物理内存中</p>
<ul>
<li>在内存访问方面，所有的应用都直接通过物理地址访问物理内存，这使得应用开发者需要了解繁琐的物理地址空间布局，访问内存也很不方便</li>
</ul>
</li>
<li>
<p>在上一章中，出于任务切换的需要，所有的应用都在初始化阶段被加载到内存中并同时驻留下去直到它们全部运行结束。而且，所有的应用都直接通过物理地址访问物理内存。这会带来以下问题：</p>
<ul>
<li>
<p><b>首先，内核提供给应用的内存访问接口不够透明，也不好用</b></p>
<ul>
<li>由于应用直接访问物理内存，这需要它在构建的时候就清楚所运行计算机的物理内存空间布局，还需规划自己需要被加载到哪个地址运行</li>
<li>为了避免冲突可能还需要应用的开发者们对此进行协商，这显然是一件在今天看来不够通用且极端麻烦的事情</li>
</ul>
</li>
<li>
<p><b>其次，内核并没有对应用的访存行为进行任何保护措施，每个应用都有计算机系统中整个物理内存的读写权力</b></p>
<ul>
<li>
<p>即使应用被限制在 U 特权级下运行，它还是能够造成很多麻烦：<b>比如它可以读写其他应用的数据来窃取信息或者破坏其它应用的正常运行（很危险！）</b></p>
</li>
<li>
<p>甚至它还可以修改内核的代码段来替换掉原本的 <code>trap_handler</code> 函数，来挟持内核执行恶意代码。总之，这造成系统既不安全、也不稳定</p>
</li>
</ul>
</li>
<li>
<p><b>再次，目前应用的内存使用空间在其运行前已经限定死了，内核不能灵活地给应用程序提供的运行时动态可用内存空间</b></p>
<ul>
<li><b>比如一个应用结束后，这个应用所占的空间就被释放了，但这块空间无法动态地给其它还在运行的应用使用</b></li>
</ul>
</li>
</ul>
</li>
<li>
<p>因此，为了简化应用开发，防止应用胡作非为，本章将更好地管理物理内存，并提供给应用一个抽象出来的更加透明易用、也更加安全的访存接口，这就是基于分页机制的虚拟内存</p>
<ul>
<li>
<p><b>站在应用程序运行的角度看，就是存在一个从“0”地址开始的非常大的可读/可写/可执行的地址空间(<code>Address Space</code>)</b></p>
</li>
<li>
<p>站在操作系统的角度看，每个应用被局限在分配给它的物理内存空间中运行，<b>无法读写其它应用和操作系统所在的内存空间</b></p>
</li>
</ul>
</li>
<li>
<p>实现地址空间的第一步就是实现分页机制，建立好虚拟内存和物理内存的页映射关系。此过程需要硬件支持，硬件细节与具体CPU相关，涉及地址映射机制等，相对比较复杂。总体而言，我们需要思考如下问题</p>
<ul>
<li>
<p>硬件中物理内存的范围是什么？</p>
</li>
<li>
<p>哪些物理内存空间需要建立页映射关系？</p>
</li>
<li>
<p>如何建立页表使能分页机制？</p>
</li>
<li>
<p>如何确保<code>OS</code>能够在分页机制使能前后的不同时间段中都能正常寻址和执行代码？</p>
</li>
<li>
<p>页目录表（一级）的起始地址设置在哪里？</p>
</li>
<li>
<p>二级/三级等页表的起始地址设置在哪里，需要多大空间？</p>
</li>
<li>
<p>如何设置页目录表项/页表项的内容？</p>
</li>
<li>
<p>如果要让每个任务有自己的地址空间，那每个任务是否要有自己的页表？</p>
</li>
<li>
<p>代表应用程序的任务和操作系统需要有各自的页表吗？</p>
</li>
<li>
<p>在有了页表之后，任务和操作系统之间应该如何传递数据？</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>虚拟内存（<code>Virtual memory</code>）技术概念首次由德国的柏林工业大学（<code>Technische Universität Berlin</code>）博士生 <code>Fritz-Rudolf Güntsch</code> 提出</li>
<li>在他的博士论文中设想了一台计算机，其内存地址空间大小为$ 10^5 $个字，<b>可精确映射到作为二级存储的磁鼓（大小也为$ 10^5 $个字）上</b>，<b><font color="red">应用程序读写的数据的实际位置由硬件和监控器（即操作系统）来管理和控制，并在物理主存(<code>RAM</code>)和辅存(二级存储)之间按需搬移数据</font></b></li>
<li><b><font color="red">即主存中只放置应用程序最近访问的数据，而应用程序最近不访问的数据会搬移到辅存中，在应用程序需要时再搬回内存中</font></b></li>
<li><b>这个搬移过程对应用程序是透明的</b></li>
<li>虚拟内存的设想在 1959 年变成了现实。英国曼彻斯特大学的<code>Tom Kilburn</code>教授领导的团队于 1959 年展示了他们设计的<code>Atlas</code>计算机和<code>Atlas Supervisor</code>操作系统，开创了在今天仍然普遍使用的操作系统技术：<b>分页（<code>paging</code>）技术和虚拟内存（<code>virtual memory</code>，当时称为 <code>one-level storage system</code>）。他们的核心思想中的根本性创新是区分了“地址（<code>address</code>）”和“内存位置（<code>memory location</code>）”</b>。并因此创造了三项发明：
<ul>
<li><b>地址转换：硬件自动将处理器生成的每个地址转换为其当前内存位置</b></li>
<li><b>按需分页（<code>demand paging</code>）：由硬件地址转换触发缺页中断后，由操作系统将缺失的数据页移动到主存储器中，并形成正确的地址转换映射</b></li>
<li><b>页面置换算法：检查最无用（<code>least useful</code>）的页，并将其移回二级存储中，这样可以让经常访问的数据驻留在主存中</b></li>
</ul>
</li>
<li>计算机科学家对<code>Atlas Supervisor</code>操作系统给予高度的评价。<code>Brinch Hansen</code> 认为它是操作系统史上最重大的突破。<code>Simon Lavington</code> 认为它是第一个可识别的现代操作系统</li>
</ul>
</blockquote>
<h2 id="内存管理主要做了什么">内存管理主要做了什么？</h2>
<ul>
<li>
<p><b>内存的分配与回收</b> ：对进程所需的内存进行分配和释放，<code>malloc</code> 函数：申请内存，<code>free</code> 函数：释放内存</p>
</li>
<li>
<p><b>地址转换</b> ：将程序中的虚拟地址转换成内存中的物理地址</p>
</li>
<li>
<p><b>内存扩充</b> ：当系统没有足够的内存时，利用虚拟内存技术或自动覆盖技术，从逻辑上扩充内存</p>
</li>
<li>
<p><b>内存映射</b> ： 将一个文件直接映射到进程的进程空间中，<b>这样可以通过内存指针用读写内存的办法直接存取文件内容</b>，速度更快</p>
</li>
<li>
<p><b>内存优化</b> ： 通过调整内存分配策略和回收算法来优化内存使用效率</p>
</li>
<li>
<p><b>内存安全</b> ： 保证进程之间使用内存互不干扰，避免一些恶意程序通过修改内存来破坏系统的安全性</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<h3 id="什么是内存碎片">什么是内存碎片？</h3>
<ul>
<li>
<p>内存碎片是由内存的申请和释放产生的，通常分为下面两种</p>
<ul>
<li>
<p><b>内部内存碎片(<code>Internal Memory Fragmentation</code>，简称为内部碎片)</b></p>
<ul>
<li><u>已经分配给进程使用但未被使用的内存</u></li>
<li>导致内部内存碎片的主要原因是，<u>当采用固定比例比如2的幂次方进行内存分配时，<b>进程所分配的内存可能会比其实际所需要的大</b></u>
<ul>
<li>举个例子，一个进程只需要 65 字节的内存，但为其分配了$ 128（2^7） $大小的内存，那 63 字节的内存就成为了内部内存碎片</li>
</ul>
</li>
</ul>
</li>
<li>
<p><b>外部内存碎片(<code>External Memory Fragmentation</code>，简称为外部碎片)</b></p>
<ul>
<li>
<p>由于未分配的连续内存区域太小，以至于不能满足任意进程所需要的内存分配请求，这些小片段且不连续的内存空间被称为外部碎片</p>
</li>
<li>
<p>也就是说，外部内存碎片指的是那些并为分配给进程但又不能使用的内存。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/support3-1.png" title="/img/Operating System/support3-1.png" data-thumbnail="/img/Operating System/support3-1.png">
        
    </a>
<h3 id="常见的内存管理方式有那些">常见的内存管理方式有那些？</h3>
<ul>
<li>内存管理方式可以简单分为下面两种
<ul>
<li><b>连续内存管理</b> ： 为一个用户程序分配一个连续的内存空间，<u>内存利用率一般不高</u></li>
<li><b>非连续内存管理</b> ： 允许一个程序使用的内存分布在离散或者说不相邻的内存中，<u>相对更加灵活一些</u></li>
</ul>
</li>
</ul>
<h4 id="连续内存管理">连续内存管理</h4>
<ul>
<li>
<p><b>块式管理</b>是早期计算机操作系统的一种连续内存管理方式，存在严重的内存碎片问题</p>
</li>
<li>
<p><b>块式管理会将内存分为几个固定大小的块，<font color="red">每个块中只包含一个进程</font></b>。如果程序运行需要内存的话，操作系统就分配给它一块，<b>如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了</b></p>
<ul>
<li>这些在每个块中未被利用的空间，我们称之为<b>内部内存碎片</b></li>
</ul>
</li>
<li>
<p>除了内部内存碎片之外，由于两个内存块之间可能还会有外部内存碎片，这些不连续的外部内存碎片由于太小了无法再进行分配</p>
</li>
<li>
<p>在<code>Linux</code>系统中，连续内存管理采用了 <strong>伙伴系统（<code>Buddy System</code>）算法</strong> 来实现，这是一种经典的连续内存分配算法，<b>可以有效解决外部内存碎片的问题</b></p>
<ul>
<li>
<p>伙伴系统的主要思想是将内存按 2 的幂次划分（每一块内存大小都是 2 的幂次比如$ 2^6=64 KB$）。并将相邻的内存块组合成一对伙伴（注意：<strong>必须是相邻的才是伙伴</strong>）</p>
</li>
<li>
<p><b>当进行内存分配时，伙伴系统会尝试找到大小最合适的内存块。</b>如果找到的内存块过大，就将其一分为二，分成两个大小相等的伙伴块。如果还是大的话，就继续切分，直到到达合适的大小为止</p>
</li>
<li>
<p><b>假设两块相邻的内存块都被释放，系统会将这两个内存块合并，</b>进而形成一个更大的内存块，以便后续的内存分配。这样就可以减少内存碎片的问题，提高内存利用率</p>
</li>
</ul>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/support3-2.png" title="/img/Operating System/support3-2.png" data-thumbnail="/img/Operating System/support3-2.png">
        
    </a>
<ul>
<li>虽然解决了外部内存碎片的问题，但伙伴系统仍然存在内存利用率不高的问题<b>（内部内存碎片）</b>
<ul>
<li>这主要是因为伙伴系统只能分配大小为$2^n$的内存块，因此<b>当需要分配的内存大小不是$2^n$的整数倍时，会浪费一定的内存空间</b></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-3.png" title="/img/Operating System/support3-3.png" data-thumbnail="/img/Operating System/support3-3.png" data-sub-html="<h2>如果要分配 65 大小的内存快，依然需要分配$2^7=128$大小的内存块</h2>">
        
    </a><figcaption class="image-caption">如果要分配 65 大小的内存快，依然需要分配$2^7=128$大小的内存块</figcaption>
    </figure>
<ul>
<li>对于内部内存碎片的问题，<code>Linux</code>采用<b><code>SLAB</code></b>进行解决（非重点）</li>
</ul>
<h4 id="非连续内存管理">非连续内存管理</h4>
<ul>
<li>
<p>非连续内存管理存在下面 3 种方式：</p>
<ul>
<li>
<p><b>段式管理</b> ： 以段(—段连续的物理内存)的形式管理/分配物理内存</p>
<ul>
<li>应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有<b>主程序段<code>MAIN</code>、子程序段<code>X</code>、数据段<code>D</code>及栈段<code>S</code>等</b></li>
</ul>
</li>
<li>
<p><b>页式管理</b> ： <b>把物理内存分为连续等长的物理页</b>，应用程序的虚拟地址空间划也被分为连续等长的虚拟页，现代操作系统广泛使用的一种内存管理方式</p>
</li>
<li>
<p><b>段页式管理机制</b> ： <b>结合了段式管理和页式管理的一种内存管理机制，把物理内存先分成若干段，每个段又继续分成若干大小相等的页</b></p>
</li>
</ul>
</li>
</ul>
<h4 id="虚拟内存">虚拟内存</h4>
<ul>
<li><strong>虚拟内存(<code>Virtual Memory</code>)</strong> 是计算机系统内存管理非常重要的一个技术，<u>本质上来说它只是逻辑存在的，是一个假想出来的内存空间，主要作用是作为进程访问主存（物理内存）的桥梁并简化内存管理</u></li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>总结来说，虚拟内存主要提供了下面这些能力</p>
<ul>
<li>
<p><b>隔离进程</b>：<font color="red"><b>物理内存通过虚拟地址空间访问，虚拟地址空间与进程一一对应。</b></font></p>
<ul>
<li>每个进程都认为自己拥有了整个物理内存，<u>进程之间彼此隔离，一个进程中的代码无法更改正在由另一进程或操作系统使用的物理内存</u></li>
</ul>
</li>
<li>
<p><b>提升物理内存利用率</b> ： 有了虚拟地址空间后，操作系统只需要将进程当前正在使用的部分数据或指令加载入物理内存</p>
</li>
<li>
<p><b>简化内存管理</b> ： 进程都有一个一致且私有的虚拟地址空间，程序员不用和真正的物理内存打交道，而是借助虚拟地址空间访问物理内存，从而简化了内存管理</p>
</li>
<li>
<p><b>多个进程共享物理内存</b> ： 进程在运行过程中，会加载许多操作系统的动态库。<u>这些库对于每个进程而言都是公用的，它们在内存中实际只会加载一份。这部分称为共享内存。</u></p>
</li>
<li>
<p><b>提高内存使用的安全性</b> ： 控制进程对物理内存的访问，隔壁不同进程的访问权限，提高系统的安全性</p>
</li>
<li>
<p><b>提供更大的可使用内存空间</b> ： 可以让程序拥有超过系统物理内存大小的可用内存空间。<u>这是因为当物理内存不够用时，可以用磁盘充当，将物理内存页（通常大小为$4KB$）保存到磁盘文件（会影响读写速度），数据或代码页会根据需要在物理内存与磁盘之间移动</u></p>
</li>
</ul>
</li>
</ul>
<h5 id="没有虚拟内存有什么问题">没有虚拟内存有什么问题？</h5>
<ul>
<li>
<p>如果没有虚拟内存的话，程序直接访问和操作的都是物理内存，看似少了一层中介，但多了很多问题</p>
</li>
<li>
<p>例子</p>
<ul>
<li><b>用户程序可以访问任意物理内存，可能会不小心操作到系统运行必需的内存，进而造成操作系统崩溃，严重影响系统的安全</b></li>
<li>同时运行多个程序容易崩溃。比如你想同时运行一个微信和一个 QQ 音乐，微信在运行的时候给内存地址<code>1xxx</code>赋值后，QQ 音乐也同样给内存地址<code>1xxx</code>赋值，那么 QQ 音乐对内存的赋值就会覆盖微信之前所赋的值，这就可能会造成微信这个程序会崩溃</li>
<li><b>程序运行过程中使用的所有数据或指令都要载入物理内存</b>，根据局部性原理，其中很大一部分可能都不会用到，白白占用了宝贵的物理内存资源</li>
<li>…</li>
</ul>
</li>
</ul>
<h4 id="什么是虚拟地址和物理地址">什么是虚拟地址和物理地址？</h4>
<ul>
<li>
<p><b>物理地址（<code>Physical Address</code>）</b> 是真正的物理内存中地址，更具体点来说是内存地址寄存器中的地址。<font color="red">程序中访问的内存地址不是物理地址，而是<b>虚拟地址（<code>Virtual Address</code>）</b></font></p>
</li>
<li>
<p>也就是说，我们编程开发的时候实际就是在和虚拟地址打交道。<b>比如在C语言中，指针里面存储的数值就可以理解成为内存里的一个地址，这个地址也就是我们说的<font color="red">虚拟地址</font></b></p>
</li>
<li>
<p>操作系统一般通过 CPU 芯片中的一个重要组件<b>MMU(<code>Memory Management Unit</code>，内存管理单元)</b>将虚拟地址转换为物理地址，这个过程被称为<b>地址翻译/地址转换（<code>Address Translation</code>）</b></p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>通过<code>MMU</code>将虚拟地址转换为物理地址后，再通过总线传到物理内存设备，进而完成相应的物理内存读写请求</p>
</li>
<li>
<p><code>MMU </code>将虚拟地址翻译为物理地址的主要机制有两种: <b>分段机制</b> 和 <b>分页机制</b></p>
</li>
</ul>
<h4 id="什么是虚拟地址空间和物理地址空间">什么是虚拟地址空间和物理地址空间？</h4>
<ul>
<li>虚拟地址空间是虚拟地址的集合，是虚拟内存的范围。<b>每一个进程都有一个一致且私有的虚拟地址空间</b></li>
<li>物理地址空间是物理地址的集合，是物理内存的范围</li>
</ul>
<h4 id="虚拟地址与物理内存地址是如何映射的">虚拟地址与物理内存地址是如何映射的？</h4>
<ul>
<li><code>MMU </code>将虚拟地址翻译为物理地址的主要机制有 3 种:</li>
</ul>
<ol>
<li>分段机制</li>
<li>分页机制</li>
<li>段页机制</li>
</ol>
<ul>
<li>其中，<font color="red"><b>现代操作系统广泛采用分页机制，需要重点关注！</b></font></li>
</ul>
<h4 id="分段机制">分段机制</h4>
<ul>
<li>
<p><strong>分段机制（<code>Segmentation</code>）</strong> 以段(—段 <strong>连续</strong> 的物理内存)的形式管理/分配物理内存</p>
</li>
<li>
<p>应用程序的虚拟地址空间被分为大小不等的段，段是有实际意义的，每个段定义了一组逻辑信息，例如有主程序段<code> MAIN</code>、子程序段<code> X</code>、数据段<code>D</code>及栈段<code>S</code>等</p>
</li>
</ul>
<h5 id="段表有什么用地址翻译过程是怎样的">段表有什么用？地址翻译过程是怎样的？</h5>
<ul>
<li>
<p>分段管理通过 <strong>段表（<code>Segment Table</code>）</strong> 映射虚拟地址和物理地址</p>
</li>
<li>
<p>分段机制下的虚拟地址由两部分组成</p>
<ul>
<li><strong>段号</strong> ：<font color="red">标识着该虚拟地址属于整个虚拟地址空间中的哪一个段</font></li>
<li><strong>段内偏移量</strong> ：<font color="red">相对于该段起始地址的偏移量</font></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>具体的地址翻译过程如下
<ul>
<li><code>MMU</code>首先解析得到虚拟地址中的<b>段号</b></li>
<li>通过段号去该应用程序的段表中取出对应的段信息（找到对应的段表项）</li>
<li>从段信息中取出该段的<b>起始地址（物理地址）</b>加上虚拟地址中的<b>段内偏移量</b>得到<b>最终的物理地址</b></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-4.png" title="/img/Operating System/support3-4.png" data-thumbnail="/img/Operating System/support3-4.png" data-sub-html="<h2>流程图</h2>">
        
    </a><figcaption class="image-caption">流程图</figcaption>
    </figure>
<ul>
<li><u>段表中还存有诸如段长(可用于检查虚拟地址是否超出合法范围)、段类型（该段的类型，例如代码段、数据段等）等信息</u></li>
</ul>
<hr>
<ul>
<li><b>通过段号一定要找到对应的段表项吗？得到最终的物理地址后对应的物理内存一定存在吗</b></li>
<li>不一定。段表项可能并不存在
<ul>
<li><b>段表项被删除</b> ：软件错误、软件恶意行为等情况可能会导致段表项被删除</li>
<li><b>段表项还未创建</b> ：如果系统内存不足或者无法分配到连续的物理内存块就会导致段表项无法被创建</li>
</ul>
</li>
</ul>
<h5 id="分段机制为什么会导致内存外部碎片">分段机制为什么会导致内存外部碎片？</h5>
<ul>
<li>分段机制容易出现外部内存碎片，<b>即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)</b>。从而造成物理内存资源利用率的降低</li>
</ul>
<hr>
<ul>
<li>
<p>举个例子：假设可用物理内存为 <code>5G</code> 的系统使用分段机制分配内存。现在有 4 个进程，每个进程的内存占用情况如下</p>
<ul>
<li>
<p>进程 1：0~1G（第 1 段）</p>
</li>
<li>
<p>进程 2：1~3G（第 2 段）</p>
</li>
<li>
<p>进程 3：3~4.5G（第 3 段）</p>
</li>
<li>
<p>进程 4：4.5~5G（第 4 段）</p>
</li>
</ul>
</li>
<li>
<p>此时，我们关闭了进程 1 和进程 4，则第 1 段和第 4 段的内存会被释放，空闲物理内存还有 1.5G。由于这 1.5G 物理内存并不是连续的，导致没办法将空闲的物理内存分配给一个需要 1.5G 物理内存的进程</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-5.png" title="/img/Operating System/support3-5.png" data-thumbnail="/img/Operating System/support3-5.png" data-sub-html="<h2>内存浪费</h2>">
        
    </a><figcaption class="image-caption">内存浪费</figcaption>
    </figure>
<h4 id="分页机制">分页机制</h4>
<ul>
<li>
<p><strong>分页机制（<code>Paging</code>）</strong> 把主存（物理内存）分为连续等长的物理页，应用程序的虚拟地址空间划也被分为连续等长的虚拟页。<b>现代操作系统广泛采用分页机制</b></p>
</li>
<li>
<p><font color="red"><b>注意：这里的页是连续等长的，不同于分段机制下不同长度的段</b></font></p>
</li>
</ul>
<hr>
<ul>
<li>
<p>在分页机制下，应用程序虚拟地址空间中的任意虚拟页可以被映射到物理内存中的任意物理页上，因此可以实现物理内存资源的离散分配</p>
</li>
<li>
<p>分页机制按照固定页大小分配物理内存，使得物理内存资源易于管理，可有效避免分段机制中外部内存碎片的问题</p>
</li>
</ul>
<h5 id="页表有什么用地址翻译过程是怎样的">页表有什么用？地址翻译过程是怎样的？</h5>
<ul>
<li>分页管理通过 <strong>页表（<code>Page Table</code>）</strong> 映射虚拟地址和物理地址。我这里画了一张基于单级页表进行地址翻译的示意图</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-6.png" title="/img/Operating System/support3-6.png" data-thumbnail="/img/Operating System/support3-6.png" data-sub-html="<h2>页表</h2>">
        
    </a><figcaption class="image-caption">页表</figcaption>
    </figure>
<ul>
<li>
<p>在分页机制下，每个应用程序都会有一个对应的页表</p>
</li>
<li>
<p>分页机制下的虚拟地址由两部分组成：</p>
<ul>
<li><strong>页号</strong> ：通过虚拟页号可以从页表中取出对应的物理页号</li>
<li><strong>页内偏移量</strong> ：<font color="red">物理页起始地址+页内偏移量=物理内存地址</font></li>
</ul>
</li>
<li>
<p><font color="red"><b>具体的地址翻译过程如下：</b></font></p>
<ul>
<li><code>MMU </code>首先解析得到虚拟地址中的虚拟页号</li>
<li>通过虚拟页号去<b>该应用程序的页表</b>中取出<b>对应的物理页号</b>（找到对应的页表项）</li>
<li>用该物理页号对应的物理页起始地址（物理地址）加上虚拟地址中的页内偏移量得到最终的物理地址</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>页表中还存有诸如访问标志（标识该页面有没有被访问过）、页类型（该段的类型，例如代码段、数据段等）等信息</p>
</li>
<li>
<p><strong>通过虚拟页号一定要找到对应的物理页号吗？找到了物理页号得到最终的物理地址后对应的物理页一定存在吗？</strong></p>
<ul>
<li>不一定！可能会存在 <strong>页缺失</strong> 。也就是说，物理内存中没有对应的物理页或者物理内存中有对应的物理页但虚拟页还未和物理页建立映射（对应的页表项不存在）。</li>
</ul>
</li>
</ul>
<h5 id="单级页表有什么问题为什么需要多级页表">单级页表有什么问题？为什么需要多级页表？</h5>
<ul>
<li>
<p>以 32 位的环境为例，虚拟地址空间范围共有 $2^{32}（4G）$。假设 一个页的大小是 $2^{12}（4KB）$，那页表项共有 $\frac{4G}{4K} = 2^{20}$个，每个页表项为一个地址，占用 4 字节，$2^{20} \times \frac{2^2}{1024\times1024}= 4MB$（页内地址用12位，页号用20位）。<b><font color="red">也就是说一个程序啥都不干，页表大小就得占用$4M$（页表开太小导致了地址位数太多了）</font></b></p>
</li>
<li>
<p>系统运行的应用程序多起来的话，页表的开销还是非常大的。而且，绝大部分应用程序可能只能用到页表中的几项，其他的白白浪费了</p>
</li>
<li>
<p>总结</p>
<ul>
<li><font color="red">页表必须连续存放，因此当页表很大的时候，需要占用很多个连续的页框</font></li>
<li>没有必要让整个页表常驻内存，因为进程在一段时间内可能只需要访问某几个特定的页面</li>
</ul>
</li>
<li>
<p>为了解决这个问题，操作系统引入了<b>多级页表，多级页表对应多个页表，每个页表也前一个页表相关联。</b>32 位系统一般为二级页表，64 位系统一般为四级页表。</p>
<ul>
<li>这里以二级页表为例进行介绍：二级列表分为一级页表和二级页表</li>
<li>一级页表共有 1024 个页表项，一级页表又关联二级页表，二级页表同样共有 1024 个页表项</li>
<li><b>二级页表中的一级页表项是一对多的关系</b>，二级页表按需加载（只会用到很少一部分二级页表），进而节省空间占用</li>
</ul>
</li>
<li>
<p><b>多级页表属于时间换空间的典型场景，利用增加页表查询的次数减少页表占用的空间</b></p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-7.png" title="/img/Operating System/support3-7.png" data-thumbnail="/img/Operating System/support3-7.png" data-sub-html="<h2>页表</h2>">
        
    </a><figcaption class="image-caption">页表</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-8.jpg" title="/img/Operating System/support3-8.jpg" data-thumbnail="/img/Operating System/support3-8.jpg" data-sub-html="<h2>二级页表</h2>">
        
    </a><figcaption class="image-caption">二级页表</figcaption>
    </figure>
<p>（和多级<code>cache</code>做对比，比较相似，增加访问次数来减内存，<b>多级页表通过二次切割页表不让大段的页表留在内存里面，用的时候从辅存里面调就行，这也就是节省内存的原理，也是借鉴了多级<code>cache</code>的局部性原理</b>）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/support3-9.png" title="/img/Operating System/support3-9.png" data-thumbnail="/img/Operating System/support3-9.png" data-sub-html="<h2>多级页表计算</h2>">
        
    </a><figcaption class="image-caption">多级页表计算</figcaption>
    </figure>
<h5 id="tlb-有什么用使用-tlb-之后的地址翻译流程是怎样的"><code>TLB</code> 有什么用？使用 <code>TLB</code> 之后的地址翻译流程是怎样的？</h5>
<ul>
<li>
<p>为了提高虚拟地址到物理地址的转换速度，操作系统在 <strong>页表方案</strong> 基础之上引入了 <strong>转址旁路缓存(<code>Translation Lookasjde Buffer</code>，<code>TLB</code>，也被称为<code>快表</code>)</strong></p>
</li>
<li>
<p>在主流的 <code>Arch64</code> 和 <code>x86-64</code> 体系结构下，<code>TLB</code> 属于 (<code>Memory Management Unit</code>，内存管理单元) 内部的单元，本质上就是一块高速缓存（<code>Cache</code>）</p>
</li>
<li>
<p>使用<code>TLB</code>之后的地址翻译流程是这样的：</p>
<ol>
<li>
<p>用虚拟地址中的虚拟页号作为 <code>key </code>去 <code>TLB</code> 中查询；</p>
</li>
<li>
<p>如果能查到对应的物理页的话，就不用再查询页表了，这种情况称为 <code>TLB</code> 命中（<code>TLB hit</code>)。</p>
</li>
<li>
<p>如果不能查到对应的物理页的话，还是需要去查询主存中的页表，同时将页表中的该映射表项添加到 <code>TLB </code>中，这种情况称为 <code>TLB</code> 未命中（<code>TLB miss</code>)。</p>
</li>
<li>
<p>当 <code>TLB</code> 填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</p>
</li>
</ol>
</li>
</ul>
<p>（和<code>cache</code>一样）</p>
<ul>
<li>
<p>由于页表也在主存中，因此在没有 <code>TLB</code> 之前，每次读写内存数据时 <code>CPU</code> 要访问两次主存。有了 <code>TLB</code> 之后，对于存在于 <code>TLB</code> 中的页表数据只需要访问一次主存即可。</p>
</li>
<li>
<p><code>TLB</code> 的设计思想非常简单，但命中率往往非常高，效果很好。这就是因为被频繁访问的页就是其中的很小一部分。</p>
</li>
<li>
<p>快表和我们平时经常在开发系统中使用的缓存（比如 <code>Redis</code>）很像</p>
</li>
</ul>
<h5 id="换页机制有什么用">换页机制有什么用？</h5>
<ul>
<li>
<p>换页机制的思想是当物理内存不够用的时候，操作系统选择将一些物理页的内容放到磁盘上去，等要用到的时候再将它们读取到物理内存中。也就是说，换页机制利用磁盘这种较低廉的存储设备扩展的物理内存。</p>
</li>
<li>
<p>这也就解释了一个日常使用电脑常见的问题：为什么操作系统中所有进程运行所需的物理内存即使比真实的物理内存要大一些，这些进程也是可以正常运行的，只是运行速度会变慢。</p>
</li>
<li>
<p>这同样是一种<b>时间换空间</b>的策略，你用<code>CPU</code>的计算时间，页的调入调出花费的时间，换来了一个虚拟的更大的物理内存空间来支持程序的运行。</p>
</li>
</ul>
<h5 id="什么是页缺失">什么是页缺失？</h5>
<blockquote>
<p>页缺失（<code>Page Fault</code>，又名硬错误、硬中断、分页错误、寻页缺失、缺页中断、页故障等）指的是当软件试图访问已映射在虚拟地址空间中，但是目前并未被加载在物理内存中的一个分页时，由 <code>MMU</code> 所发出的中断</p>
</blockquote>
<ul>
<li>
<p>常见的页缺失有下面这两种：</p>
<ul>
<li>
<p><strong>硬性页缺失（<code>Hard Page Fault</code>）</strong> ：物理内存中没有对应的物理页。于是，<code>Page Fault Handler</code> 会指示 <code>CPU</code> 从已经打开的磁盘文件中读取相应的内容到物理内存（把之前在磁盘的页表给调回到内存里面来），而后交由 <code>MMU</code> 建立相应的虚拟页和物理页的映射关系。</p>
</li>
<li>
<p><strong>软性页缺失（<code>Soft Page Fault</code>）</strong>：物理内存中有对应的物理页，但虚拟页还未和物理页建立映射。于是，<code>Page Fault Handler </code>会指示 <code>MMU</code> 建立相应的虚拟页和物理页的映射关系。</p>
</li>
</ul>
</li>
<li>
<p>发生上面这两种缺页错误的时候，应用程序访问的是有效的物理内存，只是出现了物理页缺失或者虚拟页和物理页的映射关系未建立的问题。如果应用程序访问的是无效的物理内存的话，还会出现 <strong>无效缺页错误（<code>Invalid Page Fault</code>）</strong></p>
<h5 id="常见的页面置换算法有哪些">常见的页面置换算法有哪些？</h5>
</li>
</ul>
<ol>
<li>
<p><strong>最佳页面置换算法（<code>OPT，Optimal</code>）</strong> ：优先选择淘汰的页面是以后永不使用的，或者是在最长时间内不再被访问的页面，这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若干页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现，只是理论最优的页面置换算法，可以作为衡量其他置换算法优劣的标准。</p>
</li>
<li>
<p><strong>先进先出页面置换算法（<code>FIFO，First In First Out</code>）</strong> : 最简单的一种页面置换算法，总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。该算法易于实现和理解，一般只需要通过一个 <code>FIFO</code> 队列即可需求。不过，它的性能并不是很好。</p>
</li>
<li>
<p><strong>最近最久未使用页面置换算法（<code>LRU ，Least Recently Used</code>）</strong> ：<code>LRU</code> 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 <code>T</code>，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。<code>LRU</code> 算法是根据各页之前的访问情况来实现，因此是易于实现的。<code>OPT</code> 算法是根据各页未来的访问情况来实现，因此是不可实现的。</p>
</li>
<li>
<p><strong>最少使用页面置换算法（<code>LFU，Least Frequently Used</code>）</strong> : 和 <code>LRU</code> 算法比较像，不过该置换算法选择的是之前一段时间内使用最少的页面作为淘汰页。</p>
</li>
<li>
<p><strong>时钟页面置换算法（<code>Clock</code>）</strong> ：可以认为是一种最近未使用算法，即逐出的页面都是最近没有使用的那个。</p>
</li>
</ol>
<hr>
<p><code>LRU </code>算法是实际使用中应用的比较多，也被认为是最接近 <code>OPT</code> 的页面置换算法。</p>
<p>不过，需要注意的是，实际应用中这些算法会被做一些改进，就比如 <code>InnoDB Buffer Pool（ InnoDB</code> 缓冲池，<code>MySQL</code> 数据库中用于管理缓存页面的机制）就改进了传统的 <code>LRU</code> 算法，使用了一种称为&quot;<code>Adaptive LRU</code>&ldquo;的算法（同时结合了<code>LRU</code>和<code>LFU</code>算法的思想）</p>
<h4 id="分页机制和分段机制有哪些共同点和区别">分页机制和分段机制有哪些共同点和区别？</h4>
<ul>
<li>
<p><strong>共同点</strong> ：</p>
<ul>
<li>
<p>都是非连续内存管理的方式</p>
</li>
<li>
<p>都采用了地址映射的方法，将虚拟地址映射到物理地址，以实现对内存的管理和保护</p>
</li>
</ul>
</li>
<li>
<p><strong>区别</strong></p>
<ul>
<li>
<p>分页机制以页面为单位进行内存管理，而分段机制以段为单位进行内存管理。页的大小是固定的，由操作系统决定，通常为 2 的幂次方。而段的大小不固定，取决于我们当前运行的程序</p>
</li>
<li>
<p>页是物理单位，即操作系统将物理内存划分成固定大小的页面，每个页面的大小通常是 2 的幂次方，例如 <code>4KB</code>、<code>8KB</code> 等等。而段则是逻辑单位，是为了满足程序对内存空间的逻辑需求而设计的，通常根据程序中数据和代码的逻辑结构来划分</p>
</li>
<li>
<p><b>分段机制容易出现外部内存碎片</b>，即在段与段之间留下碎片空间(不足以映射给虚拟地址空间中的段)。分页机制解决了外部内存碎片的问题，但仍然可能会出现内部内存碎片</p>
</li>
<li>
<p>分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息</p>
</li>
<li>
<p>分页机制采用了页表来完成虚拟地址到物理地址的映射，页表通过一级页表和二级页表来实现多级映射；而分段机制则采用了段表来完成虚拟地址到物理地址的映射，每个段表项中记录了该段的起始地址和长度信息</p>
</li>
</ul>
</li>
</ul>
<h4 id="段页机制">段页机制</h4>
<ul>
<li>
<p>结合了段式管理和页式管理的一种内存管理机制，<b><font color="red">把物理内存先分成若干段，每个段又继续分成若干大小相等的页。</font></b></p>
</li>
<li>
<p>在段页式机制下，地址翻译的过程分为两个步骤：</p>
<ol>
<li>
<p>段式地址映射。</p>
</li>
<li>
<p>页式地址映射。</p>
</li>
</ol>
</li>
</ul>
<h4 id="哈希页表">哈希页表</h4>
<ul>
<li>
<p>哈希页表（<code>Hashed Page Table</code>）是一种用于操作系统虚拟内存管理中的数据结构，用于实现虚拟地址到物理地址的映射。它将虚拟地址空间分割成一系列大小相等的页（<code>Page</code>），每个页都对应着一个物理地址页帧（<code>Page Frame</code>）</p>
</li>
<li>
<p>哈希页表的核心是一个哈希表，每个表项对应着一个虚拟地址页。每个表项包含了该页的页号和页表项（<code>Page Table Entry</code>），页表项中包含了页帧号和一些附加信息</p>
</li>
<li>
<p>哈希页表使用哈希函数将虚拟地址映射到哈希表的一个表项中。如果哈希冲突，即两个不同的虚拟地址映射到了同一个表项中，那么通常使用链表来解决冲突。具体地，哈希表的每个表项中不仅仅存储了一个页表项，还可以存储一个链表的头指针，当发生哈希冲突时，就将新的页表项插入到链表的尾部</p>
</li>
<li>
<p>通过哈希页表，操作系统可以快速地将虚拟地址映射到对应的物理地址，从而实现了虚拟内存管理的基本功能。而哈希页表的设计也充分考虑了哈希冲突的情况，通过链表解决了冲突问题，使得哈希表的性能得到了进一步的提升</p>
</li>
</ul>
<hr>
<ul>
<li>有关链表和哈希冲突（类比<code>Hash table</code>里面的链表处理手法）
<ul>
<li>在哈希表中，哈希函数将键映射到哈希表中的一个索引位置，但是不同的键可能映射到相同的索引位置，这就是哈希冲突</li>
<li>解决哈希冲突的一种方法是使用链表。具体地说，当发生哈希冲突时，将新键添加到与索引位置相对应的链表的末尾。如果发生另一个哈希冲突，就将新键添加到链表的末尾</li>
<li>当需要查找一个键时，首先将该键传递给哈希函数，然后找到相应的索引位置。然后，遍历位于该位置上的链表，以查找具有相同键的节点。如果找到了该键，就返回节点的值；否则，就返回“不存在该键”</li>
<li>因此，通过使用链表，可以在哈希表中存储具有相同哈希值的键，并且可以在需要查找具有相同哈希值的键时找到它们</li>
</ul>
</li>
</ul>
<h4 id="反向页表">反向页表</h4>
<ul>
<li>
<p>另一种减小页表大小的方法</p>
</li>
<li>
<p>由于多级页表是树形结构，虚拟空间膨胀会很快，对于大地址空间，多级页表仍会变得非常繁琐。 为了克服这个指数爆炸的效应，我们从虚拟的逻辑空间中走出来，着眼于有限的物理空间，<b>以物理地址空间为抓手建立索引。这就是页寄存器和反置页表的思路</b></p>
</li>
<li>
<p>在这种情况下，如果页面本身相对于页表项很大的话，页表的内存开销就不足为惧了</p>
</li>
<li>
<p>具体的实现方法是，让每一个物理帧都和一个页寄存器相关联。页寄存器包含如下的标志位</p>
<ul>
<li>使用位（<code>residence bit</code>）：此帧是否被进程占用</li>
<li>占用页号（<code>occupier</code>）：对应的页号<code>p</code></li>
<li>保护位（<code>protection bits</code>）</li>
</ul>
</li>
<li>
<p><b>这种方法的好处在于</b></p>
<ul>
<li>
<p><b>大大减省页表占用内存</b></p>
</li>
<li>
<p><b>页表大小与逻辑地址空间相比往往很小</b></p>
</li>
</ul>
</li>
<li>
<p><b>缺点在于其反转了逻辑，要能够依据帧号找页号（建立联系），同时在用页号查找时就相对困难</b></p>
<ul>
<li>如上的联系通过哈希的方法建立，对逻辑地址进行哈希，随后就可以在页寄存器反向建立的查找表中进行小范围查找</li>
<li>这里还可以引入快表。尽管快表功耗大</li>
<li>如果有冲突需要遍历冲突项</li>
</ul>
</li>
<li>
<p>反置页表是在页寄存器的基础上引入<code>PID</code>（进程标识）一同哈希，随后与反置页表中指定哈希值处对应验证，如果不一样就说明有冲突，继续遍历冲突项。如果<code>PID</code>和虚拟基址都相同，则找到了对应的页表。多余的开销来自于<code>hash</code>冲突。总体仍然是一个很好的思路</p>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Operating System Chapter10 状态机模型的应用</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</link>
    <pubDate>Tue, 28 Mar 2023 13:10:52 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter10/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>状态机：理论
<ul>
<li>数字电路：<a href="https://jyywiki.cn/pages/OS/2022/demos/logisim.c" target="_blank" rel="noopener noreffer">logisim.c</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/seven-seg.py" target="_blank" rel="noopener noreffer">seven-seg.py</a></li>
<li>Model checker: 理解并发程序执行的新方法</li>
</ul>
</li>
<li>状态机：实践
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a></li>
</ul>
</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 状态机模型如此有用，还能更有用一点吗？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>终于做完了铺垫，是时候让你感受到 “真正的力量” 了
<ul>
<li>都是没用的内容，当我口胡就行了</li>
</ul>
</li>
</ul>
<h2 id="状态机理解我们的世界">状态机：理解我们的世界</h2>
<h3 id="哲--学探讨">哲 ♂ 学探讨</h3>
<ul>
<li>
<p>我们的物理世界是 “确定规则” 的状态机吗？</p>
<ul>
<li>
<p>宏观物理世界近似于 deterministic 的状态机 (经典力学)</p>
</li>
<li>
<p>微观世界可能是 non-deterministic 的 (量子力学)</p>
</li>
</ul>
</li>
</ul>
<p>把物理世界建模成基本粒子的运动</p>
<ul>
<li><a href="https://playgameoflife.com/" target="_blank" rel="noopener noreffer">Conway&rsquo;s game of life</a> $\Longrightarrow$ <b>Turing Complete</b></li>
</ul>
<h3 id="哲--学探讨-contd">哲 ♂ 学探讨 (cont&rsquo;d)</h3>
<p>可以在这个模型上严肃地定义很多概念：预测未来、时间旅行……</p>
<ul>
<li>成为你理解物理 (和计算机) 世界的参考</li>
</ul>
<hr>
<ul>
<li>例子
<ul>
<li>Cellular automata 不支持 “时间旅行”
<ul>
<li>怎么添加一个公理使它可以支持？
<ul>
<li>平行宇宙</li>
<li>如果世界线需要合并？可以<a href="https://www.scientificamerican.com/article/time-travel-simulation-resolves-grandfather-paradox/" target="_blank" rel="noopener noreffer">收敛于某个分布</a></li>
</ul>
</li>
</ul>
</li>
<li>Cellular automata 不支持 “预测外来”
<ul>
<li>能否添加一个 syscall 使它支持？
<ul>
<li><a href="https://www.scottaaronson.com/papers/philos.pdf" target="_blank" rel="noopener noreffer">Why philosophers should care about computational complexity, Ch. 10</a> (<b>jyy 强烈推荐，解释部分在10th-section</b>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="状态机模型理解编译器和现代-cpu">状态机模型：理解编译器和现代 CPU</h3>
<ul>
<li>编译器：源代码$S$(状态机) → 二进制代码$C$(状态机)</li>
</ul>
<p>$$
C=compile(S)
$$</p>
<ul>
<li>
<p>编译 (优化) 的正确性 (Soundness):</p>
<ul>
<li><font color="red"><em>S</em> 与 <em>C</em> 的可观测行为严格一致</font> （二进制落实到硬件也是如此，严格一致不是句句对应，而是状态机一致，比如一个时钟周期内执行两条指令 $\Longrightarrow$ <font color="red">instruction-level parallelism</font>）
<ul>
<li>system calls; volatile variable loads/stores; termination</li>
</ul>
</li>
</ul>
</li>
<li>
<p>超标量 (superscalar)/乱序执行处理器</p>
<ul>
<li>
<p>允许在状态机上 “跳跃”</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/ilp-demo.c" target="_blank" rel="noopener noreffer">ilp-demo.c</a></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOOP 1000000000ul
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rax;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rsi;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rdx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%rcx;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r10;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r8;&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s">&#34;mov $1, %%r9;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">:::</span><span class="s">&#34;rax&#34;</span><span class="p">,</span> <span class="s">&#34;rdi&#34;</span><span class="p">,</span> <span class="s">&#34;rsi&#34;</span><span class="p">,</span> <span class="s">&#34;rdx&#34;</span><span class="p">,</span> <span class="s">&#34;rcx&#34;</span><span class="p">,</span> <span class="s">&#34;r10&#34;</span><span class="p">,</span> <span class="s">&#34;r8&#34;</span><span class="p">,</span> <span class="s">&#34;r9&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">loop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">LOOP</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ips</span> <span class="o">=</span> <span class="n">inst</span> <span class="o">/</span> <span class="p">((</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.2lfG instructions/s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ips</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在优化下执行的效果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ screenfetch            
</span></span><span class="line"><span class="cl">..............                                  
</span></span><span class="line"><span class="cl">            ..,<span class="p">;</span>:ccc,.                           kali@kali
</span></span><span class="line"><span class="cl">          ......<span class="s1">&#39;&#39;&#39;;lxO.                         OS: Kali Linux 
</span></span></span><span class="line"><span class="cl"><span class="s1">.....&#39;&#39;&#39;&#39;..........,:ld;                         Kernel: x86_64 Linux 6.0.0-kali3-amd64
</span></span></span><span class="line"><span class="cl"><span class="s1">           .&#39;</span><span class="p">;;;</span>:::<span class="p">;</span>,,.x,                        Uptime: 49m
</span></span><span class="line"><span class="cl">      ..<span class="s1">&#39;&#39;&#39;.            0Xxoc:,.  ...            Packages: 2707
</span></span></span><span class="line"><span class="cl"><span class="s1">  ....                ,ONkc;,;cokOdc&#39;</span>,.          Shell: zsh 5.9
</span></span><span class="line"><span class="cl"> .                   OMo           <span class="s1">&#39;:ddo.        Resolution: 1714x874
</span></span></span><span class="line"><span class="cl"><span class="s1">                    dMc               :OO;       DE: Xfce
</span></span></span><span class="line"><span class="cl"><span class="s1">                    0M.                 .:o.     WM: Xfwm4
</span></span></span><span class="line"><span class="cl"><span class="s1">                    ;Wd                          WM Theme: Kali-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                     ;XO,                        GTK Theme: Kali-Dark [GTK2]
</span></span></span><span class="line"><span class="cl"><span class="s1">                       ,d0Odlc;,..               Icon Theme: Flat-Remix-Blue-Dark
</span></span></span><span class="line"><span class="cl"><span class="s1">                           ..&#39;</span>,<span class="p">;</span>:cdOOd::,.       Font: Cantarell <span class="m">11</span>
</span></span><span class="line"><span class="cl">                                    .:d<span class="p">;</span>.<span class="s1">&#39;:;.    Disk: 19G / 80G (26%)
</span></span></span><span class="line"><span class="cl"><span class="s1">                                       &#39;</span>d,  .<span class="s1">&#39;   CPU: AMD Ryzen 9 5900HX with Radeon Graphics @ 4x 3.294GHz
</span></span></span><span class="line"><span class="cl"><span class="s1">                                         ;l   .. GPU: VMware SVGA II Adapter
</span></span></span><span class="line"><span class="cl"><span class="s1">                                          .o     RAM: 1501MiB / 1972MiB
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            c   
</span></span></span><span class="line"><span class="cl"><span class="s1">                                            .&#39;</span>  
</span></span><span class="line"><span class="cl">                                             .  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo   
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo                      
</span></span><span class="line"><span class="cl">19.06G instructions/s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.38G instructions/s
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./ilp-demo
</span></span><span class="line"><span class="cl">19.19G instructions/s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>优化过后，<b>每一个时钟周期可以执行远远超过一条指令</b></li>
</ul>
<h2 id="查看状态机执行">查看状态机执行</h2>
<h3 id="trace-和调试器">Trace 和调试器</h3>
<ul>
<li>
<p>程序执行 = 状态机执行</p>
<ul>
<li>我们能不能 “hack” 进这个状态机
<ul>
<li>观察状态机的执行
<ul>
<li>strace/gdb</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>甚至记录和<font color="red">改变</font>状态机的执行</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./ilp-demo 
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffe10420e10 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b2c000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b16000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4935000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb495b000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7f9eb495b000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4ab0000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4ab0000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b03000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b03000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7f9eb4b09000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4b09000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7f9eb4932000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7f9eb4932740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7f9eb4932a10<span class="o">)</span>         <span class="o">=</span> <span class="m">5644</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7f9eb4932a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7f9eb4933060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b03000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55de2e4dc000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7f9eb4b5e000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7f9eb4b16000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>1796473<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>514062681<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x2a\x03\xa3\xe2\x7d\xa4\x84\x07&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55de2e4e2000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55de2e503000<span class="o">)</span>                     <span class="o">=</span> 0x55de2e503000
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.52G instructions/s\n&#34;</span>, 2219.52G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span>
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>strace</code>调试最小的Hello OS，可以清楚地看到系统调用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace ./minimal
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./minimal&#34;</span>, <span class="o">[</span><span class="s2">&#34;./minimal&#34;</span><span class="o">]</span>, 0x7ffefc958480 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;\33[01;31mHello, OS World\33[0m\n&#34;</span>, 28Hello, OS World
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">28</span>
</span></span><span class="line"><span class="cl">exit<span class="o">(</span>1<span class="o">)</span>                                 <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">1</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>-T看每一个系统调用花费的时间</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ strace -T ./ilp-demo
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./ilp-demo&#34;</span>, <span class="o">[</span><span class="s2">&#34;./ilp-demo&#34;</span><span class="o">]</span>, 0x7ffdfd498e18 /* <span class="m">55</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000258&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000005&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c980a000 &lt;0.000113&gt;
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>No such file or directory<span class="o">)</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>89062, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000077&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 89062, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97f4000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0Ps\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0755, <span class="nv">st_size</span><span class="o">=</span>1922136, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000076&gt;
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 1970000, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9613000 &lt;0.000084&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c9639000, 1396736, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x26000<span class="o">)</span> <span class="o">=</span> 0x7fb9c9639000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c978e000, 339968, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x17b000<span class="o">)</span> <span class="o">=</span> 0x7fb9c978e000 &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e1000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1ce000<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e1000 &lt;0.000060&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fb9c97e7000, 53072, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c97e7000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fb9c9610000 &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7fb9c9610740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7fb9c9610a10<span class="o">)</span>         <span class="o">=</span> <span class="m">8876</span> &lt;0.000071&gt;
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7fb9c9610a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span> &lt;0.000097&gt;
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7fb9c9611060, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000109&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c97e1000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000079&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55a0fcb07000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000072&gt;
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fb9c983c000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000073&gt;
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000074&gt;
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7fb9c97f4000, 89062<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span> &lt;0.000094&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>876239<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000075&gt;
</span></span><span class="line"><span class="cl">clock_gettime<span class="o">(</span>CLOCK_PROCESS_CPUTIME_ID, <span class="o">{</span><span class="nv">tv_sec</span><span class="o">=</span>0, <span class="nv">tv_nsec</span><span class="o">=</span>511881481<span class="o">})</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000199&gt;
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>1, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFCHR<span class="p">|</span>0600, <span class="nv">st_rdev</span><span class="o">=</span>makedev<span class="o">(</span>0x88, 0<span class="o">)</span>, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> &lt;0.000090&gt;
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\x6e\x63\x59\xe8\xb3\xfe\x8a\x8d&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span> &lt;0.000143&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55a0fd277000 &lt;0.000106&gt;
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55a0fd298000<span class="o">)</span>                     <span class="o">=</span> 0x55a0fd298000 &lt;0.000052&gt;
</span></span><span class="line"><span class="cl">write<span class="o">(</span>1, <span class="s2">&#34;19.57G instructions/s\n&#34;</span>, 2219.57G instructions/s
</span></span><span class="line"><span class="cl"><span class="o">)</span> <span class="o">=</span> <span class="m">22</span> &lt;0.000085&gt;
</span></span><span class="line"><span class="cl">exit_group<span class="o">(</span>0<span class="o">)</span>                           <span class="o">=</span> ?
</span></span><span class="line"><span class="cl">+++ exited with <span class="m">0</span> +++
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter10-1.png" title="/img/Operating System/chapter10-1.png" data-thumbnail="/img/Operating System/chapter10-1.png" data-sub-html="<h2>gdb layout src</h2>">
        
    </a><figcaption class="image-caption"><code>gdb layout src</code></figcaption>
    </figure>
<ul>
<li>注意为了让<code>layout src</code>能够成功显示，编译时需要使用<code>gcc</code>的<code>-g</code>编译选项</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O2 ilp-demo.c -o ilp-demo -g  
</span></span><span class="line"><span class="cl">                                                                                                                                            
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gdb ilp-demo                     
</span></span><span class="line"><span class="cl">GNU gdb <span class="o">(</span>Debian 13.1-2<span class="o">)</span> 13.1
</span></span><span class="line"><span class="cl">Copyright <span class="o">(</span>C<span class="o">)</span> <span class="m">2023</span> Free Software Foundation, Inc.
</span></span><span class="line"><span class="cl">License GPLv3+: GNU GPL version <span class="m">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;
</span></span><span class="line"><span class="cl">This is free software: you are free to change and redistribute it.
</span></span><span class="line"><span class="cl">There is NO WARRANTY, to the extent permitted by law.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show copying&#34;</span> and <span class="s2">&#34;show warranty&#34;</span> <span class="k">for</span> details.
</span></span><span class="line"><span class="cl">This GDB was configured as <span class="s2">&#34;x86_64-linux-gnu&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;show configuration&#34;</span> <span class="k">for</span> configuration details.
</span></span><span class="line"><span class="cl">For bug reporting instructions, please see:
</span></span><span class="line"><span class="cl">&lt;https://www.gnu.org/software/gdb/bugs/&gt;.
</span></span><span class="line"><span class="cl">Find the GDB manual and other documentation resources online at:
</span></span><span class="line"><span class="cl">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">For help, <span class="nb">type</span> <span class="s2">&#34;help&#34;</span>.
</span></span><span class="line"><span class="cl">Type <span class="s2">&#34;apropos word&#34;</span> to search <span class="k">for</span> commands related to <span class="s2">&#34;word&#34;</span>...
</span></span><span class="line"><span class="cl">Reading symbols from ilp-demo...
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> start
</span></span><span class="line"><span class="cl">Temporary breakpoint <span class="m">1</span> at 0x1060: file ilp-demo.c, line 22.
</span></span><span class="line"><span class="cl">Starting program: /home/kali/chapter9/ilp-demo 
</span></span><span class="line"><span class="cl"><span class="o">[</span>Thread debugging using libthread_db enabled<span class="o">]</span>
</span></span><span class="line"><span class="cl">Using host libthread_db library <span class="s2">&#34;/lib/x86_64-linux-gnu/libthread_db.so.1&#34;</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Temporary breakpoint 1, main <span class="o">()</span> at ilp-demo.c:22
</span></span><span class="line"><span class="cl"><span class="m">22</span>        clock_t <span class="nv">st</span> <span class="o">=</span> clock<span class="o">()</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> layout src
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="应用-1-time-travel-debugging">应用 (1): Time-Travel Debugging</h3>
<ul>
<li>
<p>程序执行是随时间 “前进” 的$s_0 \rightarrow s_1 \rightarrow s_2 \rightarrow \dots$</p>
</li>
<li>
<p>能否在时间上 “后退”？ (time-travel)</p>
<ul>
<li>经常 gdb 不小心 step 过了，从头再来……</li>
<li>记录所有的$s_i$，就能实现任意的 time-traveling</li>
</ul>
</li>
</ul>
<blockquote>
<p>凉性循环，看一会<code>rust</code></p>
</blockquote>
<ul>
<li>记录所有$s_i$的开销太大（$s_i$由内存+寄存器组成）
<ul>
<li>但<font color="red">一条指令的side-effect通常有限</font></li>
</ul>
</li>
</ul>
<h3 id="应用-1-time-travel-debugging-contd">应用 (1): Time-Travel Debugging (cont&rsquo;d)</h3>
<ul>
<li>
<p>gdb 的隐藏功能 (大家读过 gdb 的手册了吗？)</p>
<ul>
<li>
<p><code>record full</code> - 开始记录</p>
</li>
<li>
<p><code>record stop</code> - 结束记录</p>
</li>
<li>
<p><code>reverse-step</code>/<code>reverse-stepi</code> - “时间旅行调试”</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>例子：调试 <a href="https://jyywiki.cn/pages/OS/2022/demos/rdrand.c" target="_blank" rel="noopener noreffer">rdrand.c</a>
<ul>
<li>Reverse execution 不是万能的
<ul>
<li><b><font color="red">有些复杂的指令 (<code>syscall</code>) 无法保证</font></b> $\Longrightarrow$ <code>record and replay</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="n">val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;rdrand %0&#34;</span><span class="o">:</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;rdrand returns %016lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>asm volatile (&quot;rdrand %0&quot;: &quot;=r&quot;(val));</code>使用了 <code>GCC</code> 内联汇编（<code>Inline Assembly</code>）的语法，使用 Intel 的 RDRAND 指令生成一个随机数，并将该随机数保存到变量 <code>val</code> 中。</p>
<p>具体来说，<code>%0</code> 表示占位符，用来代表第一个输入或输出操作数，这里是 <code>val</code>。而 <code>=r</code> 则表示将 <code>val</code> 寄存器中的值作为输出值，同时通知编译器该变量会被修改。</p>
<p>因此，该代码使用 RDRAND 生成一个随机数，并将其保存到 <code>val</code> 变量中。最后通过 <code>printf</code> 打印出该随机数。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ gcc -O1 rdrand.c -g -o rdrand   
</span></span><span class="line"><span class="cl">                                                                                         
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns d8112baa2a77dd3e
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns 106671f827a8f49e                                                           
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ ./rdrand
</span></span><span class="line"><span class="cl">rdrand returns 04adc0b810ec0565
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>volatile</code>提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，告诉编译器对该变量不做优化，都会直接从变量内存地址中读取数据，从而可以提供对特殊地址的稳定访问。</p>
<p>如果没有<code>volatile</code>关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。（简洁的说就是：<code>volatile</code>关键词影响编译器编译的结果，用<code>volatile</code>声明的变量表示该变量随时可能发生变化，与该变量有关的运算，不要进行编译优化，以免出错）</p>
</blockquote>
<ul>
<li>更改之后进行<code>gdb</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint64_t</span> <span class="k">volatile</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">114514</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;rdrand %0&#34;</span><span class="o">:</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">val</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;rdrand returns %016lx</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>每一次的调试结果都不一样，那我们应该如何复现<code>BUG</code>？
<ul>
<li>打开记录模式</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> record full
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter10-2.png" title="/img/Operating System/chapter10-2.png" data-thumbnail="/img/Operating System/chapter10-2.png" data-sub-html="<h2>on wsl</h2>">
        
    </a><figcaption class="image-caption"><code>on wsl</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-3.png" title="/img/Operating System/chapter10-3.png" data-thumbnail="/img/Operating System/chapter10-3.png" data-sub-html="<h2>layout asm</h2>">
        
    </a><figcaption class="image-caption"><code>layout asm</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-4.png" title="/img/Operating System/chapter10-4.png" data-thumbnail="/img/Operating System/chapter10-4.png" data-sub-html="<h2>rax值相同</h2>">
        
    </a><figcaption class="image-caption"><code>rax值相同</code></figcaption>
    </figure>
<ul>
<li><code>val</code>的值已经改变，如何向上回溯？
<ul>
<li>使用<code>rsi</code>往回执行</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-5.png" title="/img/Operating System/chapter10-5.png" data-thumbnail="/img/Operating System/chapter10-5.png" data-sub-html="<h2>rsi</h2>">
        
    </a><figcaption class="image-caption"><code>rsi</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter10-6.png" title="/img/Operating System/chapter10-6.png" data-thumbnail="/img/Operating System/chapter10-6.png" data-sub-html="<h2>返回旧值</h2>">
        
    </a><figcaption class="image-caption"><code>返回旧值</code></figcaption>
    </figure>
<h3 id="应用-2-record--replay">应用 (2): Record &amp; Replay</h3>
<ul>
<li>在程序执行时记录信息，结束后重现程序的行为
<ul>
<li>确定的程序不需要任何记录
<ul>
<li>假设$s_0$执行 1,000,000 条确定的指令后得到$s^{`}$
<ul>
<li>那么只要记录$s_0$和1,000,000</li>
<li>就能通过“再执行一次” 推导出$s^{`}$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>记录：[指令数（确定指令） + 结果（非确定指令）] $\times n$</li>
</ul>
<h3 id="应用-2-record--replay-contd">应用 (2): Record &amp; Replay (cont&rsquo;d)</h3>
<ul>
<li>
<p><code>Record &amp; Replay</code>: 只需记录 <code>non-deterministic</code> 的指令的<font color="red">效果</font></p>
</li>
<li>
<p>(单线程) 应用程序</p>
<ul>
<li>syscall, rdrand, rdtsc, &hellip;</li>
<li>rr (Mozilla)
<ul>
<li><a href="https://jyywiki.cn/OS/2022/slides/10.slides" target="_blank" rel="noopener noreffer">To catch a failure: The record-and-replay approach to debugging</a> (CACM'20)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>(单处理器) 操作系统</p>
<ul>
<li>
<p>mmio, in, out, rdrand, rdtsc, 中断, &hellip;</p>
</li>
<li>
<p>QEMU (<code>-icount shift=auto,rr=record,rrfile=replay.bin</code>)</p>
<ul>
<li><a href="https://jyywiki.cn/OS/2022/slides/10.slides" target="_blank" rel="noopener noreffer">ReVirt: Enabling intrusion analysis through virtual-machine logging and replay</a> (OSDI'02, Best Paper 🏅)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="采样状态机执行">采样状态机执行</h2>
<h3 id="关于性能优化">关于性能优化</h3>
<blockquote>
<p>Premature optimization is the root of all evil. (D. E. Knuth)</p>
</blockquote>
<ul>
<li>
<p>那到底怎么样才算 <code>mature</code> 呢？</p>
<ul>
<li>
<p>状态机的执行需要时间；对象需要占用空间</p>
</li>
<li>
<p>需要理解好 “时间花在哪里”、“什么对象占用了空间”</p>
</li>
</ul>
</li>
<li>
<p>我们需要真实执行的<font color="red">性能摘要</font>！</p>
<ul>
<li>
<p>本质的回答：“为了做某件事到底花去了多少资源”</p>
</li>
<li>
<p>简化的回答：“一段时间内资源的消耗情况”</p>
</li>
</ul>
</li>
</ul>
<h3 id="profiler-和性能摘要">Profiler 和性能摘要</h3>
<blockquote>
<p><b>性能摘要需要对程序执行性能影响最小（不能因为这个进程过多影响你检测的程序）</b>，往往不需要 full trace。</p>
</blockquote>
<ul>
<li><b><font color="red">隔一段时间 （比如一毫秒）“暂停” 程序、观察状态机的执行</font></b>
<ul>
<li><b>中断</b>就可以做到</li>
<li>将状态 [<em>s</em>→<em>s</em>′] “记账”
<ul>
<li>执行的语句</li>
<li>函数调用栈</li>
<li>服务的请求</li>
</ul>
</li>
<li>得到统计意义的性能摘要</li>
</ul>
</li>
</ul>
<hr>
<p>例子：Linux Kernel perf (支持硬件 PMU) - <a href="https://jyywiki.cn/pages/OS/2022/demos/ilp-demo.c" target="_blank" rel="noopener noreffer">ilp-demo.c</a></p>
<ul>
<li>perf list, perf stat (-e), perf record, perf report</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOOP 1000000000ul
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LOOP</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;mov $1, %%rax;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rdi;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rsi;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rdx;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%rcx;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r10;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r8;&#34;</span>
</span></span><span class="line"><span class="cl">                 <span class="s">&#34;mov $1, %%r9;&#34;</span> <span class="o">::</span>
</span></span><span class="line"><span class="cl">                     <span class="o">:</span> <span class="s">&#34;rax&#34;</span><span class="p">,</span> <span class="s">&#34;rdi&#34;</span><span class="p">,</span> <span class="s">&#34;rsi&#34;</span><span class="p">,</span> <span class="s">&#34;rdx&#34;</span><span class="p">,</span> <span class="s">&#34;rcx&#34;</span><span class="p">,</span> <span class="s">&#34;r10&#34;</span><span class="p">,</span> <span class="s">&#34;r8&#34;</span><span class="p">,</span> <span class="s">&#34;r9&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">st</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">loop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">clock_t</span> <span class="n">ed</span> <span class="o">=</span> <span class="n">clock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">inst</span> <span class="o">=</span> <span class="n">LOOP</span> <span class="o">*</span> <span class="p">(</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000000000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">double</span> <span class="n">ips</span> <span class="o">=</span> <span class="n">inst</span> <span class="o">/</span> <span class="p">((</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">)</span> <span class="o">*</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">CLOCKS_PER_SEC</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%.2lfG instructions/s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ips</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>安装<code>perf</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>/mnt/d/work <span class="k">for</span> vscode/chapter10<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ sudo apt install linux-tools-common
</span></span><span class="line"><span class="cl"><span class="o">[</span>sudo<span class="o">]</span> password <span class="k">for</span> jungle: 
</span></span><span class="line"><span class="cl">Reading package lists... Done
</span></span><span class="line"><span class="cl">Building dependency tree... Done
</span></span><span class="line"><span class="cl">Reading state information... Done
</span></span><span class="line"><span class="cl">The following NEW packages will be installed:
</span></span><span class="line"><span class="cl">  linux-tools-common
</span></span><span class="line"><span class="cl"><span class="m">0</span> upgraded, <span class="m">1</span> newly installed, <span class="m">0</span> to remove and <span class="m">48</span> not upgraded.
</span></span><span class="line"><span class="cl">Need to get <span class="m">295</span> kB of archives.
</span></span><span class="line"><span class="cl">After this operation, <span class="m">812</span> kB of additional disk space will be used.
</span></span><span class="line"><span class="cl">Get:1 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 linux-tools-common all 5.15.0-69.76 <span class="o">[</span><span class="m">295</span> kB<span class="o">]</span>
</span></span><span class="line"><span class="cl">Fetched <span class="m">295</span> kB in 0s <span class="o">(</span><span class="m">4448</span> kB/s<span class="o">)</span>           
</span></span><span class="line"><span class="cl">debconf: unable to initialize frontend: Dialog
</span></span><span class="line"><span class="cl">debconf: <span class="o">(</span>Dialog frontend requires a screen at least <span class="m">13</span> lines tall and <span class="m">31</span> columns wide.<span class="o">)</span>
</span></span><span class="line"><span class="cl">debconf: falling back to frontend: Readline
</span></span><span class="line"><span class="cl">Selecting previously unselected package linux-tools-common.
</span></span><span class="line"><span class="cl"><span class="o">(</span>Reading database ... <span class="m">81634</span> files and directories currently installed.<span class="o">)</span>
</span></span><span class="line"><span class="cl">Preparing to unpack .../linux-tools-common_5.15.0-69.76_all.deb ...
</span></span><span class="line"><span class="cl">Unpacking linux-tools-common <span class="o">(</span>5.15.0-69.76<span class="o">)</span> ...
</span></span><span class="line"><span class="cl">Setting up linux-tools-common <span class="o">(</span>5.15.0-69.76<span class="o">)</span> ...
</span></span><span class="line"><span class="cl">Processing triggers <span class="k">for</span> man-db <span class="o">(</span>2.10.2-1<span class="o">)</span> ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实际中的性能优化">实际中的性能优化</h3>
<ul>
<li>
<p>你们遇到的大部分情况</p>
<ul>
<li>
<p>二八定律：80% 的时间消耗在非常集中的几处代码</p>
</li>
<li>
<p><code>L1 (pmm)</code>: 小内存分配时的 <code>lock contention</code></p>
<ul>
<li><code>profiler</code> 直接帮你解决问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>工业界遇到的大部分情况
<ul>
<li>木桶效应：每个部分都已经 tune 到局部最优了
<ul>
<li>剩下的部分要么 profiler 信息不完整，要么就不好解决</li>
<li>(工程师整天都对着 profiler 看得头都大了)</li>
<li><a href="https://cacm.acm.org/magazines/2016/6/202665-the-flame-graph/fulltext" target="_blank" rel="noopener noreffer">The flame graph（火焰图）</a> (CACM'16)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="model-checkerverifier">Model Checker/Verifier</h2>
<h3 id="model-checker-的威力大家已经知道了">Model Checker 的威力大家已经知道了</h3>
<ul>
<li>
<p>150 行代码的 <a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py" target="_blank" rel="noopener noreffer">model-checker.py</a></p>
<ul>
<li>
<p>证完所有《操作系统》课上涉及的并发程序</p>
</li>
<li>
<p>复现 OSTEP 教科书上的并发 bug (条件变量错误唤醒)</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>一些真正的 model checkers</p>
<ul>
<li>
<p><a href="https://lamport.azurewebsites.net/tla/tla.html" target="_blank" rel="noopener noreffer">TLA+</a> by Leslie Lamport;</p>
</li>
<li>
<p><a href="https://ti.arc.nasa.gov/tech/rse/vandv/jpf/" target="_blank" rel="noopener noreffer">Java PathFinder (JFP)</a> 和<a href="http://spinroot.com/" target="_blank" rel="noopener noreffer">SPIN</a></p>
<ul>
<li>它们都喜欢用 Peterson 算法做 tutorial 😁</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="model-checker-不仅是并发">Model Checker: 不仅是并发</h3>
<ul>
<li>任何 “<code>non-deterministic</code>” 的状态机都可以检查</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">u32</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rdrand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">u32</span> <span class="n">y</span> <span class="o">=</span> <span class="n">rdrand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span> <span class="o">==</span> <span class="mi">65</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">bug</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> <span class="c1">// 可能空指针吗？
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>更高效的 <code>Model Checker</code>: “将相似状态合并”
<ul>
<li><a href="https://dl.acm.org/doi/10.5555/1855741.1855756" target="_blank" rel="noopener noreffer">KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs</a> (OSDI'08, Best Paper 🏅)</li>
<li>基于 <code>LLVM bitcode</code> 解释器实现</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>本次课回答的问题
<ul>
<li><strong>Q</strong>: 状态机的视角给了我们什么？</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Take-away messages</p>
<ul>
<li>
<p>编程 (状态机) 就是全世界</p>
</li>
<li>
<p>状态机可以帮我们</p>
<ul>
<li>建立物理世界的公理体系
<ul>
<li>理解调试器、<code>Trace, profiler</code></li>
<li>自动分析程序的执行 (<code>model checker</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter9 操作系统的状态机模型</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter9/</link>
    <pubDate>Sat, 25 Mar 2023 23:21:44 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter9/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>并发……就这么……讲完了……
<ul>
<li>理解的方式：“玩一玩” 示例代码</li>
</ul>
</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 听说操作系统也是程序。那到底是鸡生蛋还是蛋生鸡？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>软件和硬件的桥梁</li>
<li>操作系统的加载和初始化</li>
<li>AbstractMachine 代码导读</li>
</ul>
<h2 id="自己动手写操作系统">自己动手写操作系统</h2>
<h3 id="时事热评">时事热评</h3>
<p><a href="https://www.bilibili.com/video/BV14T4y1D7y8" target="_blank" rel="noopener noreffer">小学生写了三个月的操作系统是什么样的？</a></p>
<ul>
<li>看到 i386 就知道了嘛</li>
</ul>
<h3 id="本学期的-oslabs">本学期的 OSLabs</h3>
<p>热身实验</p>
<ul>
<li>Lab0 (amgame): 熟悉代码框架</li>
</ul>
<hr>
<p>正经实验</p>
<ul>
<li>
<p>Lab1 (pmm): Physical memory management</p>
<ul>
<li>多处理器 (bare-metal) 上的 kalloc/free</li>
</ul>
</li>
<li>
<p>Lab2 (kmt): Kernel multi-threading</p>
<ul>
<li>中断和异常驱动的上下文 (线程) 切换</li>
</ul>
</li>
<li>
<p>Lab3 (uproc): User processes</p>
<ul>
<li>虚拟地址空间、用户态进程和系统调用</li>
</ul>
</li>
<li>
<p>Lab4 (vfs): Virtual file system</p>
<ul>
<li>devfs, procfs, 简单的文件系统；ELF 加载器</li>
</ul>
</li>
</ul>
<h3 id="大学的真正意义">大学的真正意义</h3>
<blockquote>
<p>将已有的知识和方法重新消化，为大家建立好 “台阶”，在有限的时间里迅速<font color="red">赶上数十年来建立起的学科体系</font></p>
</blockquote>
<hr>
<ul>
<li>
<p>例子：破除 “写操作系统很难”、“写操作系统很牛” 的错误认识</p>
<ul>
<li>
<p>操作系统真的就是个 C 程序</p>
</li>
<li>
<p>你只是需要 “被正确告知” 一些额外的知识</p>
<ul>
<li>然后写代码、吃苦头</li>
<li>从而建立正确的 “专业世界观”</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="例子">例子</h3>
<ul>
<li>
<p>“专业世界观” 的例子 (这些都没啥，paper 都发不了)</p>
<ul>
<li>
<p>写 x86 模拟器的时候，不知道哪条指令错了，怎么办？</p>
</li>
<li>
<p>做操作系统实验的时候，如果遇到神秘 CPU Reset，怎么办？</p>
</li>
<li>
<p>做实验做不下去的时候，该实现什么工具？</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>“专业世界观” 的学习方法</p>
<ul>
<li>
<p>经典研究论文 (OSDI, SOSP, ATC, EuroSys, &hellip;)</p>
</li>
<li>
<p>久经考验的经典教学材料 (xv6, OSTEP, CSAPP, &hellip;)</p>
</li>
<li>
<p>海量的开源工具 (GNU 系列, qemu, gdb, &hellip;)</p>
</li>
<li>
<p>第三方资料，慎用 (tutorials, osdev wiki, &hellip;)</p>
</li>
</ul>
</li>
</ul>
<h2 id="硬件和软件的桥梁">硬件和软件的桥梁</h2>
<h3 id="c-程序">C 程序</h3>
<ul>
<li>
<p>我们已经知道如何写一个 “最小” 的 C 程序了：</p>
<ul>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a></p>
</li>
<li>
<p>不需要链接任何库，就能在操作系统上运行</p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_write</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>   <span class="c1">// write(
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="c1">//   fd=1,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span>        <span class="o">%</span><span class="n">rsi</span>   <span class="c1">//   buf=st,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>   <span class="c1">//   count=ed-st
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">syscall</span>                 <span class="c1">// );
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_exit</span><span class="p">,</span>  <span class="o">%</span><span class="n">rax</span>   <span class="c1">// exit(
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="c1">//   status=1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">syscall</span>                 <span class="c1">// );
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>“程序 = 状态机” 没问题</p>
</li>
<li>
<p>带来更多的疑问</p>
<ul>
<li><font color="red">但谁创建的这个状态机？？？</font>
<ul>
<li>当然是操作系统了……呃…… $\Longrightarrow$ 参考<a href="https://jungle430.github.io/posts/operating-system/support2/#%E4%BB%8E%E6%88%91%E4%BB%AC%E7%BB%88%E7%AB%AF%E6%95%B2%E5%9B%9E%E8%BD%A6%E5%88%B0%E7%A8%8B%E5%BA%8F%E8%A2%AB%E8%BD%BD%E5%85%A5%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreffer">从我们终端敲回车到程序被载入执行的过程中发生了什么？</a></li>
</ul>
</li>
<li><font color="red">这个程序可以在没有操作系统的硬件上运行吗？</font>
<ul>
<li>“启动” 状态机是由 “加载器” 完成的</li>
<li>加载器也是一段程序 (状态机)</li>
<li>这个程序由是由谁加载的？</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>kali㉿kali<span class="o">)</span>-<span class="o">[</span>~/chapter9<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ file minimal
</span></span><span class="line"><span class="cl">minimal: ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="bare-metal-与程序员的约定">Bare-metal 与程序员的约定</h3>
<ul>
<li>
<p>计算机硬件运行的时候也是状态机</p>
</li>
<li>
<p>为了让计算机能<font color="red">运行任何我们的程序</font>，一定存在软件/硬件的约定</p>
</li>
</ul>
<hr>
<ul>
<li>
<p><b>CPU reset</b> 后，处理器处于某个<b>确定的状态</b></p>
<ul>
<li><b>PC 指针</b>一般指向一段 <font color="blue">memory-mapped ROM</font>
<ul>
<li>ROM 存储了厂商提供的 firmware (固件)</li>
</ul>
</li>
<li>处理器的大部分特性处于关闭状态
<ul>
<li>缓存、虚拟存储、……</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Firmware (固件，厂商提供的代码)</p>
<ul>
<li>将用户数据加载到内存
<ul>
<li>例如存储介质上的第二级 loader (加载器)</li>
<li>或者直接加载操作系统 (嵌入式系统)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="x86-family-cpu-reset-行为">x86 Family: CPU Reset 行为</h3>
<ul>
<li>
<p>CPU Reset (<a href="https://software.intel.com/en-us/articles/intel-sdm" target="_blank" rel="noopener noreffer">Intel® 64 and IA-32 Architectures Software Developer’s Manual</a>, Volume 3A/3B)</p>
</li>
<li>
<p>寄存器会有初始状态</p>
<ul>
<li>
<p><code>EIP = 0x0000fff0</code></p>
</li>
<li>
<p><code>CR0 = 0x60000010</code></p>
<ul>
<li>16-bit 模式 $\Longrightarrow$ 2010年前的老电脑会兼容老接口和老的操作系统</li>
</ul>
</li>
<li>
<p><code>EFLAGS = 0x00000002</code></p>
</li>
<li>
<p>interrupt disabled（中断关闭）</p>
</li>
</ul>
</li>
<li>
<p>TFM (5,000 页 by 2019)</p>
<ul>
<li>最需要的 Volume 3A 只有 468 页</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-1.png" title="/img/Operating System/chapter9-1.png" data-thumbnail="/img/Operating System/chapter9-1.png" data-sub-html="<h2>friendly manual</h2>">
        
    </a><figcaption class="image-caption"><code>friendly manual</code></figcaption>
    </figure>
<ul>
<li>让<code>qemu</code>模拟器停在第一条指令上，和上面的手册对照，会发现和手册一致</li>
</ul>
<h3 id="cpu-reset-之后发生了什么">CPU Reset 之后：发生了什么？</h3>
<ul>
<li>
<p>《计算机系统基础》：<font color="red">不仅是程序，整个计算机系统也是一个状态机</font></p>
<ul>
<li>
<p>从 PC (<code>CS:IP</code>) 指针处取指令、译码、执行……</p>
</li>
<li>
<p>从 firmware 开始执行</p>
<ul>
<li><code>ffff0</code>(PC初始化的值) 通常是一条向 firmware 跳转的 jmp 指令</li>
</ul>
</li>
</ul>
</li>
<li>
<p>厂商会在<code>ROW</code>里面放好写死的代码（Only-read）</p>
</li>
<li>
<p>Firmware: <a href="https://www.zhihu.com/question/21672895" target="_blank" rel="noopener noreffer">BIOS vs. UEFI</a></p>
<ul>
<li>
<p>都是主板/主板上外插设备的软件抽象</p>
<ul>
<li>支持系统管理程序运行</li>
</ul>
</li>
<li>
<p>Legacy BIOS (Basic I/O System)</p>
</li>
<li>
<p>UEFI (Unified Extensible Firmware Interface)</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-2.png" title="/img/Operating System/chapter9-2.png" data-thumbnail="/img/Operating System/chapter9-2.png" data-sub-html="<h2>BIOS</h2>">
        
    </a><figcaption class="image-caption"><code>BIOS</code></figcaption>
    </figure>
<h3 id="legacy-bios-约定">Legacy BIOS: 约定</h3>
<p><b>Firmware 必须提供机制，将用户数据载入内存</b></p>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>Legacy BIOS 把<b>第一个可引导设备的第一个扇区加载到物理内存的 <code>7c00</code> 位置</b>，这也是我们Fireware和OS之间的第一次，也是唯一一次握手</p>
<ul>
<li>
<p>此时处理器处于 16-bit 模式</p>
</li>
<li>
<p>规定 <code>CS:IP = 0x7c00</code>, <code>(R[CS] &lt;&lt; 4) | R[IP] == 0x7c00</code></p>
<ul>
<li>
<p>可能性1：<code>CS = 0x07c0, IP = 0</code></p>
</li>
<li>
<p>可能性2：<code>CS = 0, IP = 0x7c00</code></p>
</li>
</ul>
</li>
<li>
<p>其他没有任何约束</p>
</li>
</ul>
</li>
<li>
<p>Windows启动模式：老的Windows的A，B盘都是软盘，BIOS先去软盘里面读前512个<code>bytes</code>，看最后两个byte是否为<code>55aa</code>（大端），如果是就加载这块磁盘，否则读下一块，如果都不是就启动失败。读完A/B盘之后引导到C盘，这也是为什么今天的Windows操作系统C盘是系统盘的原因</p>
</li>
<li>
<p>Firmware做的事情（以BIOS为例）</p>
</li>
</ul>
<div class="mermaid" id="id-2"></div>
<h3 id="能不能看一下代码">能不能看一下代码？</h3>
<blockquote>
<p>Talk is cheap. Show me the code. ——Linus Torvalds</p>
</blockquote>
<ul>
<li>
<p>有没有可能我们真的去看从 CPU Reset 以后每一条指令的执行？</p>
</li>
<li>
<p><font color="red">计算机系统公理：你想到的就一定有人做到</font></p>
</li>
<li>
<p>模拟方案：QEMU</p>
<ul>
<li>传奇黑客、天才程序员 <a href="https://www.zhihu.com/question/28388113" target="_blank" rel="noopener noreffer">Fabrice Bellard</a> 的杰作（其他:ffmpeg)
<ul>
<li><a href="https://www.usenix.org/legacy/publications/library/proceedings/usenix05/tech/freenix/full_papers/bellard/bellard.pdf" target="_blank" rel="noopener noreffer">QEMU, A fast and portable dynamic translator</a> (USENIX ATC'05)</li>
<li>Android Virtual Device, VirtualBox, &hellip; 背后都是 QEMU</li>
</ul>
</li>
</ul>
</li>
<li>
<p>真机方案：JTAG (Joint Test Action Group) debugger</p>
<ul>
<li>一系列 (物理) 调试寄存器，可以实现 gdb 接口 (!!!)</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-3.png" title="/img/Operating System/chapter9-3.png" data-thumbnail="/img/Operating System/chapter9-3.png" data-sub-html="<h2>ffmpeg</h2>">
        
    </a><figcaption class="image-caption"><code>ffmpeg</code></figcaption>
    </figure>
<h3 id="调试-qemu-确认-firmware-的行为">调试 QEMU: 确认 Firmware 的行为</h3>
<blockquote>
<p>亲眼确认 Firmware 到底是不是会加载启动盘第一个扇区到 <code>0x7c00</code> 内存位置！</p>
</blockquote>
<p>调试 QEMU 模拟器</p>
<ul>
<li>
<p>查看 CPU Reset 后的寄存器</p>
<ul>
<li><code>info registers</code></li>
</ul>
</li>
<li>
<p>查看<code>0x7c00</code>内存的加载</p>
<ul>
<li><code>watch *0x7c00</code> - 《计算机系统基础》的良苦用心</li>
<li>查看当前指令 <code>x/i ($cs * 16 + $rip)</code></li>
<li>打印内存 <code>x/16xb 0x7c00</code></li>
</ul>
</li>
<li>
<p>进入<code>0x7c00</code>代码的执行</p>
<ul>
<li><code>b *0x7c00</code>, <code>c</code> (撒花！我们一会再回来)</li>
</ul>
</li>
</ul>
<h3 id="鸡和蛋的问题解决">鸡和蛋的问题解决</h3>
<ul>
<li>
<p>有个原始的鸡：Firmware</p>
<ul>
<li>
<p>代码直接存在于硬件里</p>
</li>
<li>
<p>CPU Reset 后 Firmware 会执行</p>
<ul>
<li>加载 512 字节到内存 (Legacy Boot)
<ul>
<li>然后功成身退</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Firmware 的另一用处</p>
<ul>
<li>放置一些 “绝对安全的代码”
<ul>
<li><a href="https://jyywiki.cn/pages/OS/manuals/BIOS-interrupts.pdf" target="_blank" rel="noopener noreffer">BIOS 中断</a> (Hello World 是如何被打印的)</li>
<li>如果加载失败将错误信息打印出来</li>
<li>ARM Trusted Firmware
<ul>
<li>Boot-Level 1, 2, 3.1, 3.2, 3.3</li>
<li><a href="https://www.denx.de/wiki/U-Boot" target="_blank" rel="noopener noreffer">U-Boot</a>: the universal boot loader</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="小插曲firmware-的病毒-1998">小插曲：Firmware 的病毒 (1998)</h3>
<ul>
<li>
<p>Firmware 通常是只读的 (当然……)</p>
</li>
<li>
<p>Intel 430TX (Pentium) 芯片组允许<font color="red">写入 Flash ROM</font></p>
<ul>
<li>
<p>只要向 Flash BIOS 写入特定序列，Flash ROM 就变为可写</p>
<ul>
<li>留给 firmware 更新的通道</li>
</ul>
</li>
<li>
<p>要得到这个序列其实并不困难</p>
<ul>
<li>似乎文档里就有 🤔 Boom……</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p><a href="https://zh.wikipedia.org/zh-tw/CIH%E7%97%85%E6%AF%92" target="_blank" rel="noopener noreffer">CIH</a> 的作者陈盈豪被逮捕，但并未被定罪</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-4.gif" title="/img/Operating System/chapter9-4.gif" data-thumbnail="/img/Operating System/chapter9-4.gif" data-sub-html="<h2>病毒代码结尾的CIH</h2>">
        
    </a><figcaption class="image-caption">病毒代码结尾的<code>CIH</code></figcaption>
    </figure>
<h3 id="今天的-firmware-uefi">今天的 Firmware: UEFI</h3>
<ul>
<li>
<p>IBM PC 所有设备/BIOS 中断是有 specification 的 (成就了 “兼容机”)</p>
</li>
<li>
<p>今天的 boot loader 面临麻烦得多的硬件：</p>
<ul>
<li>指纹锁、不知名厂商生产网卡上的网络启动、USB 上的蓝牙转接器连接的蓝牙键盘、……</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter9-5.png" title="/img/Operating System/chapter9-5.png" data-thumbnail="/img/Operating System/chapter9-5.png" data-sub-html="<h2>UEFI</h2>">
        
    </a><figcaption class="image-caption"><code>UEFI</code></figcaption>
    </figure>
<h3 id="uefi-上的操作系统加载">UEFI 上的操作系统加载</h3>
<ul>
<li>
<p>标准化的加载流程</p>
<ul>
<li>
<p>盘必须按 GPT (GUID Partition Table) 方式格式化</p>
</li>
<li>
<p>预留一个 FAT32 分区 (lsblk/fdisk 可以看到)</p>
</li>
<li>
<p>Firmware 加载任意大小的 PE 可执行文件<code>.efi</code></p>
<ul>
<li>
<p>没有 legacy boot 512 字节限制</p>
</li>
<li>
<p>EFI 应用可以返回 firmware</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>更好的程序支持</p>
<ul>
<li>
<p>设备驱动框架</p>
</li>
<li>
<p>更多的功能，例如 Secure Boot，只能启动 “信任” 的操作系统</p>
</li>
</ul>
</li>
</ul>
<h2 id="操作系统的状态机模型">操作系统的状态机模型</h2>
<h3 id="操作系统-的状态机已经启动">“操作系统” 的状态机已经启动</h3>
<ul>
<li>Firmware 和 boot loader 共同完成 “操作系统的加载”
<ul>
<li>初始化全局变量和栈；分配堆区 (<code>heap</code>)</li>
<li>为 <code>main</code> 函数传递参数
<ul>
<li>谁给操作系统传递了参数？</li>
<li>如何实现参数传递？</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>进入 C 代码之后</p>
<ul>
<li>
<p>完全遵循 C 语言的形式语义</p>
</li>
<li>
<p>但有一些行为 “补充” —— AbstractMachine API</p>
</li>
</ul>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<h3 id="操作系统是个-c-程序">操作系统：是个 C 程序</h3>
<ul>
<li>一个迷你 “操作系统” <a href="https://jyywiki.cn/pages/OS/2022/demos/thread-os.c" target="_blank" rel="noopener noreffer">thread-os.c</a>
<ul>
<li>make 会得到一个 “磁盘镜像”，好像魔法一样
<ul>
<li>就跟你们第一次用 IDE 的时候按一个键就可以编译运行一样</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>thread-os.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;am.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;klib-macros.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define MAX_CPU 8
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">union</span> <span class="n">task</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">union</span> <span class="n">task</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span>      <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Context</span>    <span class="o">*</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="kt">uint8_t</span> <span class="n">stack</span><span class="p">[</span><span class="mi">8192</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Task</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="o">*</span><span class="n">currents</span><span class="p">[</span><span class="n">MAX_CPU</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define current currents[cpu_current()]
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// user-defined tasks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span>   <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span> <span class="n">atomic_xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Thread-%s on CPU #%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="n">unlock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="k">volatile</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Task</span> <span class="n">tasks</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;A&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;B&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;C&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;D&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;E&#34;</span><span class="p">,</span> <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">func</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">cte_init</span><span class="p">(</span><span class="n">on_interrupt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Task</span> <span class="o">*</span><span class="n">task</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Area</span> <span class="n">stack</span>    <span class="o">=</span> <span class="p">(</span><span class="n">Area</span><span class="p">)</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">task</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">kcontext</span><span class="p">(</span><span class="n">stack</span><span class="p">,</span> <span class="n">task</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">task</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">task</span><span class="o">-&gt;</span><span class="n">next</span>    <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">tasks</span><span class="p">)];</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mpe_init</span><span class="p">(</span><span class="n">mp_entry</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="abstractmachine-对-c-程序语义-做出的扩充">AbstractMachine 对 “C 程序语义” 做出的扩充</h3>
<ul>
<li>
<p>TRM + MPE</p>
<ul>
<li>
<p>完全等同于多线程 (处理器相当于线程) - L1/native</p>
</li>
<li>
<p>IOE API: 完全是普通的库函数</p>
<ul>
<li>同一设备的数据竞争 = undefined behavior</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>CTE</p>
<ul>
<li>
<p>允许创建多个执行流 (类比协程) - M2</p>
</li>
<li>
<p>yield 主动切换；会被中断被动打断</p>
</li>
<li>
<p><code>on_interrupt</code> 会拦截到中断事件</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>VME</p>
<ul>
<li>
<p>允许创建一个 “经过地址翻译的执行模式”</p>
</li>
<li>
<p>通过 CTE API 管理</p>
</li>
</ul>
</li>
<li>
<p>有关中断代码</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Context</span> <span class="o">*</span><span class="nf">on_interrupt</span><span class="p">(</span><span class="n">Event</span> <span class="n">ev</span><span class="p">,</span> <span class="n">Context</span> <span class="o">*</span><span class="n">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">Task</span> <span class="n">tasks</span><span class="p">[];</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">current</span><span class="p">)</span> <span class="n">current</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tasks</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>          <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">current</span> <span class="o">=</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">while</span> <span class="p">((</span><span class="n">current</span> <span class="o">-</span> <span class="n">tasks</span><span class="p">)</span> <span class="o">%</span> <span class="n">cpu_count</span><span class="p">()</span> <span class="o">!=</span> <span class="n">cpu_current</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">current</span><span class="o">-&gt;</span><span class="n">context</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mp_entry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">iset</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">yield</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">iset</span><span class="p">(</span><span class="kt">bool</span> <span class="n">enable</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">extern</span> <span class="n">sigset_t</span> <span class="n">__am_intr_sigmask</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// NOTE: sigprocmask does not supported in multithreading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="n">sigprocmask</span><span class="p">(</span><span class="n">enable</span> <span class="o">?</span> <span class="nl">SIG_UNBLOCK</span> <span class="p">:</span> <span class="n">SIG_BLOCK</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">__am_intr_sigmask</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="rtfsc-时间">RTFSC 时间</h2>
<h3 id="0-生成镜像和启动虚拟机">(0) 生成镜像和启动虚拟机</h3>
<blockquote>
<p>如果使用 “土办法”，你很可能被淹没在 Makefile 中</p>
<ul>
<li>读懂 Makefile 需要 STFW, RTFM，大量的精力</li>
<li>虽然花点时间读是值得的，但很可能读了很久都没读到重要的地方</li>
</ul>
</blockquote>
<ul>
<li>
<p>花一点时间想 “应该怎么做”</p>
<ul>
<li>
<p>花几分钟创建一个小工具：“AbstractMachine 构建理解工具”</p>
<ul>
<li>UNIX Philosophy: keep it simple, stupid</li>
<li>everything is a file; write things to work together using text interface</li>
</ul>
</li>
<li>
<p><em>Get out of your comfort zone</em></p>
</li>
</ul>
</li>
</ul>
<p>Abstract-Machine 通过脚本+重定向可以转化为<a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/abstract-machine-Makefile.html" target="_blank" rel="noopener noreffer">HTML代码</a>进行阅读</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿jungle-virtual-machine<span class="o">)</span>-<span class="o">[</span>~/deom1/abstract-machine<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ sudo apt install python3-markdown
</span></span><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿jungle-virtual-machine<span class="o">)</span>-<span class="o">[</span>~/deom1/abstract-machine<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cat Makefile <span class="p">|</span> sed <span class="s1">&#39;s/^\([^#]\)/    \1/g&#39;</span> <span class="p">|</span> markdown_py &gt; Makefile.html
</span></span></code></pre></td></tr></table>
</div>
</div><p>注：使用了自动化工具<a href="https://python-markdown.github.io" target="_blank" rel="noopener noreffer">python3-markdown</a></p>
<h3 id="0-生成镜像和启动虚拟机-contd">(0) 生成镜像和启动虚拟机 (cont&rsquo;d)</h3>
<ul>
<li>观察 AbstractMachine 程序编译过程的正确方法：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">make -nB <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> grep -ve <span class="s1">&#39;^\(\#\|echo\|mkdir\|make\)&#39;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> sed <span class="s2">&#34;s#</span><span class="nv">$AM_HOME</span><span class="s2">#\$AM_HOME#g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> sed <span class="s2">&#34;s#</span><span class="nv">$PWD</span><span class="s2">#.#g&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="p">|</span> vim -
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Command line tricks</p>
<ul>
<li><code>make -nB</code> (RTFM)</li>
<li>grep: 文本过滤，省略了一些干扰项
<ul>
<li>echo (提示信息), mkdir (目录建立), make (sub-goals)</li>
</ul>
</li>
<li>sed: 让输出更易读
<ul>
<li>将绝对路径替换成相对路径</li>
</ul>
</li>
<li>vim: 更舒适的编辑/查看体验</li>
</ul>
</li>
<li>
<p>部分<code>make -nB</code>的输出信息</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl"><span class="gh"># Building hello-image [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/deom/build/x86_64-qemu/ <span class="err">&amp;&amp;</span> echo + CC main.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/deom/build/x86_64-qemu/main.o /home/jungle/deom1/deom/main.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/deom/build/x86_64-qemu/ <span class="err">&amp;&amp;</span> echo + CC say.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/deom/build/x86_64-qemu/say.o /home/jungle/deom1/deom/say.c
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/am archive
</span></span><span class="line"><span class="cl"><span class="gh"># Building am-archive [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + AS src/x86/qemu/start64.S
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -MMD -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -m64 -fPIC -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/start64.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/start64.S
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + AS src/x86/qemu/trap64.S
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -MMD -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -m64 -fPIC -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trap64.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/trap64.S
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/trm.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trm.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/trm.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/cte.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/cte.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/cte.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/ioe.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/ioe.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/vme.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/vme.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/vme.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ <span class="err">&amp;&amp;</span> echo + CC src/x86/qemu/mpe.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/deom/../abstract-machine/am/src -I/home/jungle/deom1/abstract-machine/am/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/mpe.o /home/jungle/deom1/abstract-machine/am/src/x86/qemu/mpe.c
</span></span><span class="line"><span class="cl">echo + AR &#34;-&gt;&#34; build/am-x86_64-qemu.a
</span></span><span class="line"><span class="cl">ar rcs /home/jungle/deom1/abstract-machine/am/build/am-x86_64-qemu.a /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/start64.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trap64.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/trm.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/cte.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/vme.o /home/jungle/deom1/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/mpe.o
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/klib archive
</span></span><span class="line"><span class="cl"><span class="gh"># Building klib-archive [x86_64-qemu]
</span></span></span><span class="line"><span class="cl"><span class="gh"></span>mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/stdio.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdio.o /home/jungle/deom1/abstract-machine/klib/src/stdio.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/int64.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/int64.o /home/jungle/deom1/abstract-machine/klib/src/int64.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/string.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/string.o /home/jungle/deom1/abstract-machine/klib/src/string.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/cpp.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/cpp.o /home/jungle/deom1/abstract-machine/klib/src/cpp.c
</span></span><span class="line"><span class="cl">mkdir -p /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/ <span class="err">&amp;&amp;</span> echo + CC src/stdlib.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -std=gnu11 -O2 -MMD -Wall -Werror -I/home/jungle/deom1/abstract-machine/klib/include -I/home/jungle/deom1/deom/../abstract-machine/am/include/ -I/home/jungle/deom1/deom/../abstract-machine/klib/include/ -D__ISA__=\&#34;x86_64\&#34; -D__ISA_X86_64__ -D__ARCH__=x86_64-qemu -D__ARCH_X86_64_QEMU -D__PLATFORM__=qemu -D__PLATFORM_QEMU -DARCH_H=\&#34;arch/x86_64-qemu.h\&#34; -fno-asynchronous-unwind-tables -fno-builtin -fno-stack-protector -Wno-main -U_FORTIFY_SOURCE -m64 -fPIC -mno-sse -c -o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdlib.o /home/jungle/deom1/abstract-machine/klib/src/stdlib.c
</span></span><span class="line"><span class="cl">echo + AR &#34;-&gt;&#34; build/klib-x86_64-qemu.a
</span></span><span class="line"><span class="cl">ar rcs /home/jungle/deom1/abstract-machine/klib/build/klib-x86_64-qemu.a /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdio.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/int64.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/string.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/cpp.o /home/jungle/deom1/abstract-machine/klib/build/x86_64-qemu/src/stdlib.o
</span></span><span class="line"><span class="cl">echo + LD &#34;-&gt;&#34; build/hello-x86_64-qemu.elf
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-ld -melf_x86_64 -N -Ttext-segment=0x00100000 -o /home/jungle/deom1/deom/build/hello-x86_64-qemu.elf --start-group /home/jungle/deom1/deom/build/x86_64-qemu/main.o /home/jungle/deom1/deom/build/x86_64-qemu/say.o /home/jungle/deom1/deom/../abstract-machine/am/build/am-x86_64-qemu.a /home/jungle/deom1/deom/../abstract-machine/klib/build/klib-x86_64-qemu.a --end-group
</span></span><span class="line"><span class="cl">echo \# Creating image [x86_64-qemu]
</span></span><span class="line"><span class="cl">make -s -C /home/jungle/deom1/deom/../abstract-machine/am/src/x86/qemu/boot
</span></span><span class="line"><span class="cl">echo + CC start.S main.c
</span></span><span class="line"><span class="cl">x86_64-linux-gnu-gcc -static -m32 -fno-pic -Os -nostdlib -Ttext 0x7c00 -I/home/jungle/deom1/deom/../abstract-machine/am/src -o bootblock.o start.S main.c
</span></span><span class="line"><span class="cl">python3 genboot.py bootblock.o
</span></span><span class="line"><span class="cl">echo + CREATE &#34;-&gt;&#34; build/hello-x86_64-qemu
</span></span><span class="line"><span class="cl">( cat /home/jungle/deom1/deom/../abstract-machine/am/src/x86/qemu/boot/bootblock.o; head -c 1024 /dev/zero; cat /home/jungle/deom1/deom/build/hello-x86_64-qemu.elf ) &gt; /home/jungle/deom1/deom/build/hello-x86_64-qemu
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="0-生成镜像和启动虚拟机-contd-1">(0) 生成镜像和启动虚拟机 (cont&rsquo;d)</h3>
<p>想要看得更清楚一些？</p>
<ul>
<li><code>:%s/ /\r /g</code>
<ul>
<li>每一个命令就像 “一句话”</li>
</ul>
</li>
</ul>
<hr>
<p>编译</p>
<ul>
<li><code>-std=gnu11</code>, <code>m64</code>, <code>-mno-sse</code>, <code>-I</code>, <code>-D</code>, &hellip; (这对你配置 vscode 很重要)</li>
</ul>
<p>链接</p>
<ul>
<li><code>-melf_x86_64</code>, <code>-N</code>, <code>-Ttext-segment=0x00100000</code></li>
<li>链接了需要的库 (<code>am-x86_64-qemu.a</code>, <code>klib-x86_64-qemu.a</code>)</li>
</ul>
<p>彩蛋</p>
<ul>
<li><code>make html</code></li>
</ul>
<h3 id="1-启动加载器-boot-loader">(1) 启动加载器 (Boot Loader)</h3>
<p>512 字节中的代码，假设了镜像格式 (真正的的加载器有很多 stages)</p>
<ul>
<li>16-bit → 32-bit</li>
<li>ELF32/64 的加载器
<ul>
<li>按照约定的磁盘镜像格式加载</li>
</ul>
</li>
</ul>
<p>代码讲解：</p>
<ul>
<li><code>am/src/x86/qemu/boot/start.S</code>和<code>main.c</code>
<ul>
<li>它们都可以调试！</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">elf32</span><span class="o">-&gt;</span><span class="n">e_machine</span> <span class="o">==</span> <span class="n">EM_X86_64</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">((</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">elf64</span><span class="o">-&gt;</span><span class="n">e_entry</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">((</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)())(</span><span class="kt">uint32_t</span><span class="p">)</span><span class="n">elf32</span><span class="o">-&gt;</span><span class="n">e_entry</span><span class="p">)();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 操作系统也是程序，它如何用状态机如何定义？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>一切皆可调试 (包括 firmware)
<ul>
<li>理解操作系统是如何被启动的</li>
<li>学会使用 gdb (必备生存技能)</li>
</ul>
</li>
<li>操作系统也是程序
<ul>
<li>AbstractMachine 扩展了程序的语义，仅此而已</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter8 并发 bug 和应对</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter8/</link>
    <pubDate>Fri, 17 Mar 2023 13:48:22 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter8/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>并发编程的基本工具：线程库、互斥和同步</li>
<li>并发编程的应用场景：高性能计算、数据中心、网页/移动应用</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 并发编程那么难，我写出 bug 怎么办？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>应对 bug (和并发 bug) 的方法</li>
<li>死锁和数据竞争</li>
</ul>
<h2 id="应对-bug-的方法">应对 Bug 的方法</h2>
<h3 id="基本思路否定你自己">基本思路：否定你自己</h3>
<blockquote>
<p>虽然不太愿意承认，但始终假设自己的代码是错的。</p>
</blockquote>
<p>然后呢？</p>
<ul>
<li>做好测试</li>
<li>检查哪里错了</li>
<li>再检查哪里错了</li>
<li>再再检查哪里错了
<ul>
<li>(把任何你认为 “不对” 的情况都检查一遍)</li>
</ul>
</li>
</ul>
<h3 id="bug-多的根本原因编程语言的缺陷">Bug 多的根本原因：编程语言的缺陷</h3>
<blockquote>
<p>软件是需求 (规约) 在计算机数字世界的<b>投影</b>（关于变量的更多内容丢失了，只映射了一部分）</p>
</blockquote>
<p>只管 “翻译” 代码，不管和实际需求 (规约) 是否匹配</p>
<ul>
<li>可以加入assert来进行证明</li>
</ul>
<hr>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/alipay.c" target="_blank" rel="noopener noreffer">alipay.c</a>的例子
<ul>
<li>变量 <code>balance</code> 代表 “余额”</li>
<li>怎么看 withdraw 以后 0 → 18446744073709551516 都不对</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// unexpected delays
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Talipay</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Alipay_withdraw</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;balance = %lu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">balance</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>三十年后的编程语言和编程方法？</p>
<ul>
<li>Annotation verifier (<a href="https://dafny-lang.github.io/dafny/" target="_blank" rel="noopener noreffer">Dafny</a>)</li>
<li>Specification mining (<a href="http://plse.cs.washington.edu/daikon/" target="_blank" rel="noopener noreffer">Daikon</a>)</li>
<li><a href="https://dl.acm.org/doi/10.1145/113446.113468" target="_blank" rel="noopener noreffer">Refinement types</a></li>
<li><a href="https://link.springer.com/article/10.1007/s10009-012-0249-7" target="_blank" rel="noopener noreffer">Program sketching</a>……</li>
</ul>
<h3 id="更实在的方法防御性编程">更实在的方法：防御性编程</h3>
<blockquote>
<p>把程序需要满足的条件用 <code>assert</code> 表达出来 $\Longrightarrow$ <b>和上面的防御性编程相对应</b></p>
</blockquote>
<p>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>、二叉树的旋转</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define A 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define B 2
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define BARRIER __sync_synchronize()
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">nested</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_long</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d threads in the critical section @ count=%ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">cnt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="k">volatile</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">turn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TA</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">B</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span> <span class="c1">// &lt;- this is critcal for x86
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">y</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">B</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TB</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">x</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">A</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TB</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter8-1.jpg" title="/img/Operating System/chapter8-1.jpg" data-thumbnail="/img/Operating System/chapter8-1.jpg" data-sub-html="<h2>二叉树的旋转，维护的一些方法assert(y-&gt;parent == x&#39;-&gt;parent &amp;&amp; y-&gt;left == x &amp;&amp; y-&gt;right == c);</h2>">
        
    </a><figcaption class="image-caption">二叉树的旋转，维护的一些方法<code>assert(y-&gt;parent == x'-&gt;parent &amp;&amp; y-&gt;left == x &amp;&amp; y-&gt;right == c);</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-2.png" title="/img/Operating System/chapter8-2.png" data-thumbnail="/img/Operating System/chapter8-2.png" data-sub-html="<h2>assert就是最有效的防御手段,相当于assert(i == 1);</h2>">
        
    </a><figcaption class="image-caption"><code>assert</code>就是最有效的防御手段,相当于<code>assert(i == 1);</code></figcaption>
    </figure>
<ul>
<li>
<p>把assert写出来，你也就知道怎么写代码了</p>
</li>
<li>
<p><font color="red"><b>！！！面试的时候能写出干净利落的assert代码是一个重要的加分项，对增强代码的逻辑性和可读性以及debug都有很大帮助 $\Longrightarrow$ 没有人能够写出完美的代码，代码部分和assert是互相印证的，使得代码的可靠性上升了一个数量级</b></font></p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-3.gif" title="/img/Operating System/chapter8-3.gif" data-thumbnail="/img/Operating System/chapter8-3.gif" data-sub-html="<h2>即使是Linus Torvalds声称自己的代码没有bug最后也被打脸</h2>">
        
    </a><figcaption class="image-caption">即使是<a href="https://en.wikipedia.org/wiki/Linus_Torvalds" target="_blank" rel="noopener noreffer">Linus Torvalds</a>声称自己的代码没有bug最后也被打脸</figcaption>
    </figure>
<ul>
<li>assert不一定需要绝对的正确，比如在上面的支付宝，如果测试过程中金额较小，我们完全可以使用<code>assert(balance &lt;= 100000);</code>这样的代码</li>
<li>还可以有这样的assert</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">pid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">ptr</span> <span class="n">in</span> <span class="n">heap</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">pid</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">pid</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这些assert看起来和我们的现实世界的逻辑并没有关系，但是它防止了$Memory\ Error\newline$</li>
</ul>
<h3 id="防御性编程和规约给我们的启发">防御性编程和规约给我们的启发</h3>
<ul>
<li>你知道很多变量的<font color="red">含义</font></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define CHECK_INT(x, cond) \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ({ panic_on(!((x) cond), &#34;int check fail: &#34; #x &#34; &#34; #cond); })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define CHECK_HEAP(ptr) \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ({ panic_on(!IN_RANGE((ptr), heap)); })
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>变量有 “typed annotation”</p>
<ul>
<li>
<p><code>CHECK_INT(waitlist-&gt;count, &gt;= 0);</code></p>
</li>
<li>
<p><code>CHECK_INT(pid, &lt; MAX_PROCS);</code></p>
</li>
<li>
<p><code>CHECK_HEAP(ctx-&gt;rip); CHECK_HEAP(ctx-&gt;cr3);</code></p>
</li>
</ul>
</li>
<li>
<p>变量含义改变 → 发生奇怪问题 (overflow, memory error, &hellip;)</p>
<ul>
<li><font color="red"><b>不要小看这些检查</b></font>，它们在底层编程 (M2, L1, &hellip;) 时非常常见。尤其是C语言“裸奔”写OS内核，既没有语言层面的保护，也没有OS内核的保护（因为你写的就是这玩意），所以这些检查尤其重要！</li>
<li>这些检查逐渐就从C语言演变成了集成度和安全性更高的一些C++标准库还有Rust的编译器（检查很严格，每次编译都直接叫跌）</li>
<li>在虚拟机神秘重启/卡住/&hellip;前发出警报</li>
</ul>
</li>
</ul>
<h2 id="并发-bug死锁-deadlock">并发 Bug：死锁 (Deadlock)</h2>
<h3 id="死锁-deadlock">死锁 (Deadlock)</h3>
<blockquote>
<p>A deadlock is a state in which each member of a group is waiting for another member, including itself, to take action.</p>
</blockquote>
<ul>
<li>出现线程 “互相等待” 的情况</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-4.jpg" title="/img/Operating System/chapter8-4.jpg" data-thumbnail="/img/Operating System/chapter8-4.jpg" data-sub-html="<h2> 互相在等待（你等我，我等你，我等我自己）</h2>">
        
    </a><figcaption class="image-caption"><code> 互相在等待（你等我，我等你，我等我自己）</code></figcaption>
    </figure>
<h3 id="aa-deadlock">AA-Deadlock</h3>
<ul>
<li>
<p>假设你的 spinlock 不小心发生了中断</p>
<ul>
<li>
<p>在不该打开中断的时候开了中断</p>
</li>
<li>
<p>在不该切换的时候执行了 <code>yield()</code></p>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">os_run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list_lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xxx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">xxx</span><span class="p">);</span> <span class="c1">// ---------+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>                          <span class="c1">//    |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                           <span class="c1">//    |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">on_interrupt</span><span class="p">()</span> <span class="p">{</span>      <span class="c1">//    |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list_lock</span><span class="p">);</span>   <span class="c1">// &lt;--+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">list_lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>lock关闭中断，而unlock打开中断。<b>上面的程序上了两把锁，却在只开一把锁的情况下打开了中断。$\Longrightarrow$ 中断需要等第一把锁释放，第一个unlock执行需要等中断返回才能执行完毕</b>。</li>
</ul>
<div class="mermaid" id="id-1"></div>
<h3 id="abba-deadlock">ABBA-Deadlock</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上锁的顺序很重要……</p>
<ul>
<li>
<p>swap本身看起来没有问题</p>
<ul>
<li><code>swap(1, 2)</code>; <code>swap(2, 3)</code>, <code>swap(3, 1)</code> → 死锁 $\Longrightarrow$ 如果三个并发执行并同时🔒住了1，2，3，那就和哲学家问题里面所有人都拿起左手的叉子一样变成了死锁</li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/philosopher.c" target="_blank" rel="noopener noreffer">philosopher.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 3
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">sem_t</span> <span class="n">locks</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tphilosopher</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">lhs</span> <span class="o">=</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="n">id</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">id</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">lhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">rhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">SEM_INIT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tphilosopher</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="避免死锁死锁产生的四个必要条件">避免死锁（死锁产生的四个必要条件）</h3>
<ul>
<li>
<p>死锁产生的四个<b>必要条件</b> (<a href="https://en.wikipedia.org/wiki/Edward_G._Coffman,_Jr." target="_blank" rel="noopener noreffer">Edward G. Coffman</a>, 1971):</p>
<ul>
<li>
<p><b>互斥</b>：一个资源每次只能被一个进程使用（例如🔒）</p>
</li>
<li>
<p><b>请求与保持</b>：一个进程请求资阻塞时，不释放已获得的资源（比如失败版的哲学家吃饭，右手拿叉子被阻塞的时候不会把左手拿到的叉子释放掉）</p>
</li>
<li>
<p><b>不剥夺</b>：进程已获得的资源不能强行剥夺（🔒没有优先级，获得之后任何人都拿不走）</p>
</li>
<li>
<p><b>循环等待</b>：若干进程之间形成<b>头尾相接的循环等待资源</b>关系（参考AA-Deadlock里面的mermaid图像以及十字路口的图像）。例子：有一组等待进程 <code>{P0, P1,..., Pn}</code>， <code>P0</code> 等待的资源被 <code>P1</code> 占有，<code>P1</code> 等待的资源被 <code>P2</code> 占有，&hellip;&hellip;，<code>Pn-1</code> 等待的资源被 <code>Pn</code> 占有，<code>Pn</code> 等待的资源被 <code>P0</code> 占有 $\rightarrow$ <b>画圈了</b></p>
</li>
</ul>
</li>
<li>
<p><b>注意 ⚠️</b> ：这四个条件是产生死锁的 <b>必要条件</b> ，也就是说只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁</p>
</li>
</ul>
<p>$$
\begin{align}
&amp;Deadlock \rightarrow Four\ conditions\newline
&amp;Deadlock \nleftarrow Four\ conditions\newline
\end{align}
$$</p>
<blockquote>
<p>“理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和解除死锁。所以，在系统设计、进程调度等方面<b>注意如何不让这四个必要条件成立，如何确定资源的合理分配算法，避免进程永久占据系统资源</b>。此外，也要防止进程在处于等待状态的情况下占用资源。因此，对资源的分配要给予合理的规划。” ——Bullshit $\Longrightarrow$ <font color="orange">经典教科书废话，这四个条件想要破除非常困难</font></p>
</blockquote>
<h3 id="写一个模拟产生死锁的代码">写一个模拟产生死锁的代码</h3>
<div class="mermaid" id="id-2"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">sync</span>::<span class="p">{</span><span class="n">Arc</span><span class="p">,</span><span class="w"> </span><span class="n">Mutex</span><span class="p">},</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">thread</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">time</span>::<span class="n">Duration</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">y1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">y</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">y2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">y</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">handle1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x1</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;handle1 has own x: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">thread</span>::<span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y1</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;handle1 has own y: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">y</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">handle2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">y2</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;handle2 has own y: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">y</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">thread</span>::<span class="n">sleep</span><span class="p">(</span><span class="n">Duration</span>::<span class="n">from_secs</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x2</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;handle2 has own x: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">x</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">handle1</span><span class="p">.</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">handle2</span><span class="p">.</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeadLockDemo</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Object</span> <span class="n">resource1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span><span class="c1">//资源 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Object</span> <span class="n">resource2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">();</span><span class="c1">//资源 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">resource1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;get resource1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;waiting get resource2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">resource2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;get resource2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">},</span> <span class="s">&#34;线程 1&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">new</span> <span class="n">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">resource2</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;get resource2&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">try</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">1000</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;waiting get resource1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="kd">synchronized</span> <span class="o">(</span><span class="n">resource1</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">()</span> <span class="o">+</span> <span class="s">&#34;get resource1&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">},</span> <span class="s">&#34;线程 2&#34;</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="避免死锁-contd">避免死锁 (cont&rsquo;d)</h3>
<ul>
<li>
<p>AA-Deadlock</p>
<ul>
<li>
<p>AA 型的死锁容易检测，及早报告，及早修复</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/spinlock-xv6.c" target="_blank" rel="noopener noreffer">spinlock-xv6.c</a> 中的各种防御性编程</p>
<ul>
<li><code>if (holding(lk)) panic();</code> $\Longrightarrow$ 如果这把🔒在上🔒的时候，线程已经得到了🔒，直接就panic()，然后crush。防止出现死🔒之后自己到处找，这种编程模式能够迅速帮你定位自己的缺陷和bug。</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Mutual exclusion spin locks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;types.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;param.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;memlayout.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;spinlock.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;riscv.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;proc.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;defs.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">initlock</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Acquire the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Loops (spins) until the lock is acquired.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">acquire</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">push_off</span><span class="p">();</span> <span class="c1">// disable interrupts to avoid deadlock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="n">holding</span><span class="p">(</span><span class="n">lk</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;acquire&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// On RISC-V, sync_lock_test_and_set turns into an atomic swap:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   a5 = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   s1 = &amp;lk-&gt;locked
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   amoswap.w.aq a5, a5, (s1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span><span class="p">(</span><span class="n">__sync_lock_test_and_set</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Tell the C compiler and the processor to not move loads or stores
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// past this point, to ensure that the critical section&#39;s memory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// references happen strictly after the lock is acquired.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// On RISC-V, this emits a fence instruction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Record info about lock acquisition for holding() and debugging.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">=</span> <span class="n">mycpu</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Release the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">release</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">holding</span><span class="p">(</span><span class="n">lk</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;release&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Tell the C compiler and the CPU to not move loads or stores
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// past this point, to ensure that all the stores in the critical
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// section are visible to other CPUs before the lock is released,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// and that loads in the critical section occur strictly before
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// the lock is released.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// On RISC-V, this emits a fence instruction.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// Release the lock, equivalent to lk-&gt;locked = 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// This code doesn&#39;t use a C assignment, since the C standard
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// implies that an assignment might be implemented with
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// multiple store instructions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// On RISC-V, sync_lock_release turns into an atomic swap:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   s1 = &amp;lk-&gt;locked
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">//   amoswap.w zero, zero, (s1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">__sync_lock_release</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">pop_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Check whether this cpu is holding the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1">// Interrupts must be off.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="nf">holding</span><span class="p">(</span><span class="k">struct</span> <span class="n">spinlock</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">r</span> <span class="o">=</span> <span class="p">(</span><span class="n">lk</span><span class="o">-&gt;</span><span class="n">locked</span> <span class="o">&amp;&amp;</span> <span class="n">lk</span><span class="o">-&gt;</span><span class="n">cpu</span> <span class="o">==</span> <span class="n">mycpu</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// push_off/pop_off are like intr_off()/intr_on() except that they are matched:
</span></span></span><span class="line"><span class="cl"><span class="c1">// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
</span></span></span><span class="line"><span class="cl"><span class="c1">// are initially off, then push_off, pop_off leaves them off.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">push_off</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">old</span> <span class="o">=</span> <span class="n">intr_get</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">intr_off</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">mycpu</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">mycpu</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">intena</span> <span class="o">=</span> <span class="n">old</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">mycpu</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span>
</span></span><span class="line"><span class="cl"><span class="nf">pop_off</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">cpu</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">mycpu</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">intr_get</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;pop_off - interruptible&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic</span><span class="p">(</span><span class="s">&#34;pop_off&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">c</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">-&gt;</span><span class="n">noff</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">intena</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">intr_on</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>ABBA-Deadlock</p>
<ul>
<li>
<p>任意时刻系统中的锁都是有限的</p>
</li>
<li>
<p>严格<b>按照固定的顺序获得所有锁</b> (lock ordering; 消除 “循环等待”)</p>
<ul>
<li>
<p><b>比如说有X,A,B,C四把🔒，无论如何都要给这四把🔒排一下顺序</b></p>
<div class="mermaid" id="id-3"></div>
</li>
</ul>
</li>
<li>
<p><b>任何一个线程想要获得其中的任何几把🔒，都必须要按照排好的顺序来</b></p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">//------&gt; √ ＜（＾－＾）＞
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">lock</span><span class="p">(</span><span class="n">A</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">//-----&gt; × 
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>遇事不决可视化：<a href="https://jyywiki.cn/pages/OS/2022/demos/lock-ordering.py" target="_blank" rel="noopener noreffer">lock-ordering.py</a></p>
</li>
<li>
<p>进而证明$@thread-T_1:A \rightarrow B \rightarrow C;@thread-T_2:B \rightarrow C$是安全的</p>
<ul>
<li>“在任意时刻总是有获得 “最靠后” 锁的可以继续执行”
<ul>
<li><b>即使有许多线程的情况下，总会有一个跑的最快的线程（也就是🔒的位置最靠右/编号最大，只有🔒最大的线程才能获得下一把🔒 $\Longrightarrow$ <font color="red">即使后面的线程都卡死了，最前面的线程仍然“畅通无阻“。</font><font color="orange">最大的线程走进临界区以后，它就会把所有的🔒都给释放掉。</font></b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">LockOrdering</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locks</span> <span class="o">=</span> <span class="p">[</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tryacquire</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lk</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locks</span><span class="p">[</span><span class="n">lk</span><span class="p">],</span> <span class="n">seen</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">locks</span><span class="p">[</span><span class="n">lk</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">seen</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">lk</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locks</span><span class="p">[</span><span class="n">lk</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_negative</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">pass</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可视化<a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/lock-ordering.html" target="_blank" rel="noopener noreffer">lock-ordering.html</a></li>
</ul>
<hr>
<ul>
<li>总结：两条技术
<ol>
<li>防御编程 $\Longrightarrow$ AA-Deadlock</li>
<li>lock-order $\Longrightarrow$ ABBA-Deadlock</li>
</ol>
</li>
</ul>
<h4 id="八股补充">八股补充</h4>
<ul>
<li>
<p>死锁四大必要条件上面都已经列出来了，很显然，<b>只要破坏四个必要条件中的任何一个就能够预防死锁的发生</b></p>
</li>
<li>
<p>破坏第一个条件<strong>互斥条件</strong>：使得资源是可以同时访问的，这是种简单的方法，<b>磁盘就可以用这种方法管理</b>，但是我们要知道，有很多资源<strong>往往是不能同时访问的</strong>，<u>所以这种做法在大多数的场合是行不通的</u></p>
</li>
<li>
<p>破坏第三个条件<strong>非抢占</strong>（<b>加入了优先级，可以剥夺互斥资源</b>）：也就是说可以采用<strong>剥夺式调度算法</strong>，但剥夺式调度方法目前一般仅适用于主存资源<strong>和</strong>处理器资源的分配，并不适用于所有的资源，会导致<strong>资源利用率下降</strong></p>
</li>
</ul>
<h5 id="策略">策略</h5>
<ul>
<li><b>考虑破坏第二个条件和第四个条件</b></li>
</ul>
<ol>
<li><b>静态分配策略</b></li>
</ol>
<p><b>静态分配策略可以破坏死锁产生的第二个条件（占有并等待）。</b></p>
<p>所谓静态分配策略，就是指一个进程必须在执行前就申请到它所需要的全部资源，并且知道它所要的资源都得到满足之后才开始执行。进程要么占有所有的资源然后开始执行，要么不占有资源，不会出现占有一些资源等待一些资源的情况。（类似于哲学家吃饭的问题里面，一次性拿左右手餐具）</p>
<p>静态分配策略逻辑简单，实现也很容易，但这种策略<b>严重地降低了资源利用率</b>。$\Longrightarrow$ 因为在每个进程所占有的资源中，有些资源是在比较靠后的执行时间里采用的，甚至有些资源是在额外的情况下才使用的，这样就可能造成一个进程占有了一些<b>几乎不用的资源而使其他需要该资源的进程产生等待</b>的情况（没有拿全资源，占着拿到的资源不干活）</p>
<ol start="2">
<li><b>层次分配策略</b></li>
</ol>
<p><b>层次分配策略破坏了产生死锁的第四个条件(循环等待)。</b></p>
<p>在层次分配策略下，所有的资源被分成了多个层次，一个进程得到某一次的一个资源后，它只能再申请较高一层的资源；当一个进程要释放某层的一个资源时，必须先释放所占用的较高层的资源，按这种策略，是不可能出现循环等待链的，因为那样的话，就出现了已经申请了较高层的资源，反而去申请了较低层的资源，不符合层次分配策略。参考<a href="#%e9%81%bf%e5%85%8d%e6%ad%bb%e9%94%81-contd" rel="">避免死锁 (cont&rsquo;d)</a></p>
<h3 id="lock-ordering-应用-linux-kernel-rmapc">Lock Ordering: 应用 (Linux Kernel: rmap.c)</h3>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-5.png" title="/img/Operating System/chapter8-5.png" data-thumbnail="/img/Operating System/chapter8-5.png" data-sub-html="<h2>Linux Kernel：rmap.c中的Lock Ordering</h2>">
        
    </a><figcaption class="image-caption">Linux Kernel：rmap.c中的<code>Lock Ordering</code></figcaption>
    </figure>
<h3 id="但是你又-naive-了">但是……你又 Naive 了……</h3>
<blockquote>
<p>Textbooks will tell you that if you always lock in the same order, you will never get this kind of deadlock. <b><em>Practice will tell you that this approach doesn&rsquo;t scale</em>:</b> when I create a new lock, I don&rsquo;t understand enough of the kernel to figure out where in the 5000 lock hierarchy it will fit.</p>
<p><b>The best locks are encapsulated</b>: they <em>never get exposed in headers</em>, and are <em>never held around calls to non-trivial functions outside the same file</em>. You can read through this code and see that it will never deadlock, because it never tries to grab another lock while it has that one. People using your code don&rsquo;t even need to know you are using a lock.</p>
<p>—— <em><a href="https://www.kernel.org/doc/html/latest/kernel-hacking/locking.html" target="_blank" rel="noopener noreffer">Unreliable Guide to Locking</a></em> by Rusty Russell</p>
</blockquote>
<ul>
<li>我们稍后回到这个问题，继续看更多的 bugs</li>
</ul>
<h3 id="补充银行家算法">补充：银行家算法</h3>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-11.png" title="/img/Operating System/chapter8-11.png" data-thumbnail="/img/Operating System/chapter8-11.png" data-sub-html="<h2>算法实现</h2>">
        
    </a><figcaption class="image-caption"><code>算法实现</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-11.png" title="/img/Operating System/chapter8-11.png" data-thumbnail="/img/Operating System/chapter8-11.png" data-sub-html="<h2>其他补充</h2>">
        
    </a><figcaption class="image-caption"><code>其他补充</code></figcaption>
    </figure>
<p>银行家算法详情可见：<a href="https://blog.csdn.net/qq_33414271/article/details/80245715" target="_blank" rel="noopener noreffer">《一句话+一张图说清楚——银行家算法》</a></p>
<h2 id="并发-bug数据竞争-data-race-longrightarrow-不上锁不就没有死锁了吗">并发 Bug：数据竞争 (Data Race) $\Longrightarrow$ 不上锁不就没有死锁了吗？</h2>
<h3 id="数据竞争">数据竞争</h3>
<blockquote>
<p><font color="red"><b>不同的线程</b></font>同时访问<font color="red"><b>同一段内存</b></font>，且<font color="red"><b>至少有一个是写</b></font>。</p>
</blockquote>
<div class="mermaid" id="id-4"></div>
<ul>
<li>两个内存访问在 “赛跑”，<b>“跑赢” 的操作先执行</b> $\Longrightarrow$ 程序最终的结果与谁跑赢有关 $\Longrightarrow$ 计组中和的“读后写”与“写后读”有关的流水线排序问题
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>: 内存访问都在赛跑
<ul>
<li><a href="https://www.felixcloutier.com/x86/mfence" target="_blank" rel="noopener noreffer">MFENCE</a>：<del>如何留下最少的 fence，依然保证算法正确？</del></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数据竞争-contd">数据竞争 (cont&rsquo;d)</h3>
<ul>
<li>
<p>Peterson 算法告诉大家：</p>
<ul>
<li>
<p><font color="red">你们写不对无锁的并发程序</font></p>
</li>
<li>
<p>所以事情反而简单了</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>用互斥锁保护好共享数据</p>
<p>消灭一切数据竞争</p>
</blockquote>
<div class="mermaid" id="id-5"></div>
<h3 id="数据竞争例子">数据竞争：例子</h3>
<ul>
<li>以下代码概括了你们遇到数据竞争的大部分情况
<ul>
<li>不要笑，你们的 bug 几乎都是这两种情况的变种</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Case #1: 上错了锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">thread1</span><span class="p">()</span> <span class="p">{</span> <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">thread2</span><span class="p">()</span> <span class="p">{</span> <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// Case #2: 忘记上锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">thread1</span><span class="p">()</span> <span class="p">{</span> <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">thread2</span><span class="p">()</span> <span class="p">{</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="更多类型的并发-bug">更多类型的并发 Bug</h2>
<h3 id="程序员花式犯错">程序员：花式犯错</h3>
<ul>
<li>
<p>回顾我们实现并发控制的工具</p>
<ul>
<li>
<p>互斥锁 (lock/unlock) - 原子性</p>
</li>
<li>
<p>条件变量 (wait/signal) - 同步</p>
</li>
</ul>
</li>
<li>
<p>忘记上锁——原子性违反 (Atomicity Violation, AV)</p>
</li>
<li>
<p>忘记同步——顺序违反 (Order Violation, OV)</p>
</li>
<li>
<p>Empirical study: 在 105 个并发 bug 中 (non-deadlock/deadlock)</p>
<ul>
<li>
<p>MySQL (14/9), Apache (13/4), Mozilla (41/16), OpenOffice (6/2)</p>
</li>
<li>
<p><font color="red">97% 的非死锁并发 bug 都是 AV 或 OV</font></p>
</li>
</ul>
</li>
</ul>
<h3 id="原子性违反-av">原子性违反 (AV)</h3>
<ul>
<li>“ABA”
<ul>
<li>我以为一段代码没啥事呢，但被人强势插入了</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-6.png" title="/img/Operating System/chapter8-6.png" data-thumbnail="/img/Operating System/chapter8-6.png" data-sub-html="<h2>ABA</h2>">
        
    </a><figcaption class="image-caption"><code>ABA</code></figcaption>
    </figure>
<h3 id="原子性违反-contd">原子性违反 (cont&rsquo;d)</h3>
<ul>
<li>有时候上锁也不解决问题
<ul>
<li>“TOCTTOU” - time of check to time of use</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-7.png" title="/img/Operating System/chapter8-7.png" data-thumbnail="/img/Operating System/chapter8-7.png" data-sub-html="<h2>TOCTTOU</h2>">
        
    </a><figcaption class="image-caption"><code>TOCTTOU</code></figcaption>
    </figure>
<ul>
<li><a href="https://www.usenix.org/legacy/events/fast05/tech/full_papers/wei/wei.pdf" target="_blank" rel="noopener noreffer">TOCTTOU vulnerabilities in UNIX-style file systems: An anatomical study</a>(FAST'05)</li>
</ul>
<h3 id="顺序违反-ov">顺序违反 (OV)</h3>
<ul>
<li>“BA”
<ul>
<li>怎么就没按我预想的顺序来呢？
<ul>
<li>例子：concurrent use after free</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter8-8.png" title="/img/Operating System/chapter8-8.png" data-thumbnail="/img/Operating System/chapter8-8.png" data-sub-html="<h2>BA</h2>">
        
    </a><figcaption class="image-caption"><code>BA</code></figcaption>
    </figure>
<h2 id="应对并发-bug-的方法">应对并发 Bug 的方法</h2>
<h3 id="完全一样的基本思路否定你自己">完全一样的基本思路：否定你自己</h3>
<blockquote>
<p>还是得<font color="red">始终假设自己的代码是错的</font></p>
</blockquote>
<ul>
<li>
<p>然后呢？</p>
<ul>
<li>
<p>做好测试</p>
</li>
<li>
<p>检查哪里错了</p>
</li>
<li>
<p>再检查哪里错了</p>
</li>
<li>
<p>再再检查哪里错了</p>
<ul>
<li>(把任何你认为 “不对” 的情况都检查一遍)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>例如：用 lock ordering 彻底避免死锁？</p>
<ul>
<li>你想多了：并发那么复杂，程序员哪能充分测试啊</li>
</ul>
</li>
</ul>
<h3 id="lockdep-运行时的死锁检查">Lockdep: 运行时的死锁检查</h3>
<p>Lockdep 规约 (Specification)</p>
<ul>
<li>为每一个锁确定唯一的 “allocation site”
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/lock-site.c" target="_blank" rel="noopener noreffer">lock-site.c</a></li>
<li>assert: 同一个 allocation site 的锁存在全局唯一的上锁顺序</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">lock</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">locked</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">site</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">lock_t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define STRINGIFY(s) #s
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TOSTRING(s)  STRINGIFY(s)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define LOCK_INIT() \
</span></span></span><span class="line"><span class="cl"><span class="cp">  ( (lock_t) { .locked = 0, .site = __FILE__ &#34;:&#34; TOSTRING(__LINE__), } )
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">lock_t</span> <span class="n">lk1</span> <span class="o">=</span> <span class="n">LOCK_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">lock_t</span> <span class="n">lk2</span> <span class="o">=</span> <span class="n">LOCK_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;LOCK   %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lk</span><span class="o">-&gt;</span><span class="n">site</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;UNLOCK %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lk</span><span class="o">-&gt;</span><span class="n">site</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">some_object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock_t</span> <span class="n">lock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">object_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">some_object</span> <span class="o">*</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">obj</span><span class="o">-&gt;</span><span class="n">lock</span> <span class="o">=</span> <span class="n">LOCK_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">some_object</span> <span class="o">*</span><span class="n">obj</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">some_object</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">object_init</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">obj</span><span class="o">-&gt;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter8-9.png" title="/img/Operating System/chapter8-9.png" data-thumbnail="/img/Operating System/chapter8-9.png" data-sub-html="<h2>ChatGPT</h2>">
        
    </a><figcaption class="image-caption"><code>ChatGPT</code></figcaption>
    </figure>
<ul>
<li>检查方法：printf
<ul>
<li>记录所有观察到的上锁顺序，例如</li>
</ul>
</li>
</ul>
<p>$$
[x,y,z] \Longrightarrow x \rightarrow y,x\rightarrow z,y\rightarrow z
$$</p>
<ul>
<li>
<p>检查是否存在$x ⇝ y ∧ y ⇝ x$</p>
</li>
<li>
<p><font color="red">维护一个图，图里面不能有环（有环就违反了Lock-Order）</font></p>
</li>
<li>
<p><a href="https://jyywiki.cn/OS/OS_Lockdep" target="_blank" rel="noopener noreffer">Lockdep 的实现</a></p>
<ul>
<li>Since Linux Kernel 2.6.17, also in <a href="https://gitee.com/openharmony" target="_blank" rel="noopener noreffer">OpenHarmony</a>!</li>
</ul>
</li>
</ul>
<h3 id="threadsanitizer-运行时的数据竞争检查">ThreadSanitizer: 运行时的数据竞争检查</h3>
<ul>
<li>
<p>为所有事件建立 happens-before 关系图 $\Longrightarrow$ 图论</p>
<ul>
<li>
<p>Program-order + release-acquire</p>
</li>
<li>
<p>对于发生在不同线程且至少有一个是写的$x,y$检查</p>
</li>
</ul>
</li>
</ul>
<p>$$
x ≺ y ∨ y ≺ x
$$</p>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/359545.359563" target="_blank" rel="noopener noreffer">Time, clocks, and the ordering of events in a distributed system</a></li>
</ul>
<h3 id="更多的检查动态程序分析">更多的检查：动态程序分析</h3>
<ul>
<li>
<p>在事件发生时记录</p>
<ul>
<li>
<p>Lockdep: lock/unlock</p>
</li>
<li>
<p>ThreadSanitizer: 内存访问 + lock/unlock</p>
</li>
</ul>
</li>
<li>
<p>解析记录检查问题</p>
<ul>
<li>Lockdep: $x ⇝ y ∧ y ⇝ x$</li>
<li>ThreadSanitizer: $x \nprec y ∧ y \nprec x$</li>
</ul>
</li>
<li>
<p>付出的代价和权衡</p>
<ul>
<li>
<p>程序执行变慢</p>
</li>
<li>
<p>但更容易找到 bug (因此在测试环境中常用)</p>
</li>
</ul>
</li>
</ul>
<h3 id="动态分析工具sanitizers">动态分析工具：Sanitizers</h3>
<ul>
<li>
<p>没用过 lint/sanitizers？</p>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/AddressSanitizer.html" target="_blank" rel="noopener noreffer">AddressSanitizer</a> (asan); <a href="https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany" target="_blank" rel="noopener noreffer">(paper)</a>: 非法内存访问</p>
<ul>
<li>Buffer (heap/stack/global) overflow, use-after-free, use-after-return, double-free, &hellip;</li>
<li>Demo: <a href="https://jyywiki.cn/pages/OS/2022/demos/uaf.c" target="_blank" rel="noopener noreffer">uaf.c</a>; <a href="https://www.kernel.org/doc/html/latest/dev-tools/kasan.html" target="_blank" rel="noopener noreffer">kasan</a></li>
</ul>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" target="_blank" rel="noopener noreffer">ThreadSanitizer</a> (tsan): 数据竞争</p>
<ul>
<li>Demo: <a href="https://jyywiki.cn/pages/OS/2022/demos/fish.c" target="_blank" rel="noopener noreffer">fish.c</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>; <a href="https://github.com/google/ktsan" target="_blank" rel="noopener noreffer">ktsan</a></li>
</ul>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/MemorySanitizer.html" target="_blank" rel="noopener noreffer">MemorySanitizer</a> (msan): 未初始化的读取</p>
</li>
<li>
<p><a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" target="_blank" rel="noopener noreffer">UBSanitizer</a> (ubsan): undefined behavior</p>
<ul>
<li>Misaligned pointer, signed integer overflow, &hellip;</li>
<li>Kernel 会带着 <code>-fwrapv</code> 编译</li>
</ul>
</li>
<li>
<p>示例：test.c</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -g test.c -fsanitize<span class="o">=</span>address -o <span class="nb">test</span> <span class="o">&amp;&amp;</span> ./test
</span></span><span class="line"><span class="cl"><span class="o">=================================================================</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span><span class="nv">37384</span><span class="o">==</span>ERROR: AddressSanitizer: heap-use-after-free on address 0x602000000010 at pc 0x55c0a903b213 bp 0x7ffe5d50fcd0 sp 0x7ffe5d50fcc8
</span></span><span class="line"><span class="cl">WRITE of size <span class="m">4</span> at 0x602000000010 thread T0
</span></span><span class="line"><span class="cl">    <span class="c1">#0 0x55c0a903b212 in main /home/kali/chapter7/test.c:7</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#1 0x7f8416046189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2 0x7f8416046244 in __libc_start_main_impl ../csu/libc-start.c:381</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#3 0x55c0a903b0b0 in _start (/home/kali/chapter7/test+0x10b0)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">0x602000000010 is located <span class="m">0</span> bytes inside of 4-byte region <span class="o">[</span>0x602000000010,0x602000000014<span class="o">)</span>
</span></span><span class="line"><span class="cl">freed by thread T0 here:
</span></span><span class="line"><span class="cl">    <span class="c1">#0 0x7f84162b76a8 in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:52</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#1 0x55c0a903b1db in main /home/kali/chapter7/test.c:6</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2 0x7f8416046189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">previously allocated by thread T0 here:
</span></span><span class="line"><span class="cl">    <span class="c1">#0 0x7f84162b89cf in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:69</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#1 0x55c0a903b18a in main /home/kali/chapter7/test.c:4</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#2 0x7f8416046189 in __libc_start_call_main ../sysdeps/nptl/libc_start_call_main.h:58</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SUMMARY: AddressSanitizer: heap-use-after-free /home/kali/chapter7/test.c:7 in main
</span></span><span class="line"><span class="cl">Shadow bytes around the buggy address:
</span></span><span class="line"><span class="cl">  0x0c047fff7fb0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7fc0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7fd0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7fe0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>
</span></span><span class="line"><span class="cl">  0x0c047fff7ff0: <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="nv">00</span>
</span></span><span class="line"><span class="cl"><span class="o">=</span>&gt;0x0c047fff8000: fa fa<span class="o">[</span>fd<span class="o">]</span>fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">  0x0c047fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
</span></span><span class="line"><span class="cl">Shadow byte legend <span class="o">(</span>one shadow byte represents <span class="m">8</span> application bytes<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  Addressable:           <span class="m">00</span>
</span></span><span class="line"><span class="cl">  Partially addressable: <span class="m">01</span> <span class="m">02</span> <span class="m">03</span> <span class="m">04</span> <span class="m">05</span> <span class="m">06</span> <span class="m">07</span> 
</span></span><span class="line"><span class="cl">  Heap left redzone:       fa
</span></span><span class="line"><span class="cl">  Freed heap region:       fd
</span></span><span class="line"><span class="cl">  Stack left redzone:      f1
</span></span><span class="line"><span class="cl">  Stack mid redzone:       f2
</span></span><span class="line"><span class="cl">  Stack right redzone:     f3
</span></span><span class="line"><span class="cl">  Stack after <span class="k">return</span>:      f5
</span></span><span class="line"><span class="cl">  Stack use after scope:   f8
</span></span><span class="line"><span class="cl">  Global redzone:          f9
</span></span><span class="line"><span class="cl">  Global init order:       f6
</span></span><span class="line"><span class="cl">  Poisoned by user:        f7
</span></span><span class="line"><span class="cl">  Container overflow:      <span class="nb">fc</span>
</span></span><span class="line"><span class="cl">  Array cookie:            ac
</span></span><span class="line"><span class="cl">  Intra object redzone:    bb
</span></span><span class="line"><span class="cl">  ASan internal:           fe
</span></span><span class="line"><span class="cl">  Left alloca redzone:     ca
</span></span><span class="line"><span class="cl">  Right alloca redzone:    <span class="nv">cb</span>
</span></span><span class="line"><span class="cl"><span class="o">==</span><span class="nv">37384</span><span class="o">==</span>ABORTING
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter8-10.png" title="/img/Operating System/chapter8-10.png" data-thumbnail="/img/Operating System/chapter8-10.png" data-sub-html="<h2>检查sum.c的thread</h2>">
        
    </a><figcaption class="image-caption"><code>检查sum.c的thread</code></figcaption>
    </figure>
<h2 id="这不就是防御性编程吗">这不就是防御性编程吗？</h2>
<ul>
<li>只不过不需要我亲自动手把代码改得乱七八糟了……</li>
</ul>
<h3 id="我们也可以buffer-overrun-检查">我们也可以！Buffer Overrun 检查</h3>
<ul>
<li>
<p>Canary (金丝雀) 对一氧化碳非常敏感</p>
<ul>
<li>用生命预警矿井下的瓦斯泄露 (since 1911)</li>
</ul>
</li>
<li>
<p>计算机系统中的 canary</p>
<ul>
<li>“牺牲” 一些内存单元，来预警 memory error 的发生
<ul>
<li>(程序运行时没有动物受到实质的伤害)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="canary-的例子保护栈空间-m2l2">Canary 的例子：保护栈空间 (M2/L2)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define MAGIC 0x55555555
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BOTTOM (STK_SZ / sizeof(u32) - 1)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">stack</span> <span class="p">{</span> <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="n">STK_SZ</span><span class="p">];</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">canary_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">stack</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">u32</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CANARY_SZ</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ptr</span><span class="p">[</span><span class="n">BOTTOM</span> <span class="o">-</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAGIC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">canary_check</span><span class="p">(</span><span class="k">struct</span> <span class="n">stack</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">u32</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">CANARY_SZ</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic_on</span><span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">BOTTOM</span> <span class="o">-</span> <span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">MAGIC</span><span class="p">,</span> <span class="s">&#34;underflow&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">panic_on</span><span class="p">(</span><span class="n">ptr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">MAGIC</span><span class="p">,</span> <span class="s">&#34;overflow&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="烫烫烫屯屯屯和葺葺葺">烫烫烫、屯屯屯和葺葺葺</h3>
<ul>
<li>
<p>msvc 中 debug mode 的 guard/fence/canary</p>
<ul>
<li>
<p>未初始化栈: <code>0xcccccccc</code></p>
</li>
<li>
<p>未初始化堆: <code>0xcdcdcdcd</code></p>
</li>
<li>
<p>对象头尾: <code>0xfdfdfdfd</code></p>
</li>
<li>
<p>已回收内存: <code>0xdddddddd</code></p>
</li>
</ul>
</li>
<li>
<p><code>(b'**\xcc**' * 80).decode('gb2312')</code></p>
</li>
</ul>
<blockquote>
<p>手持两把锟斤拷，口中疾呼烫烫烫</p>
<p>脚踏千朵屯屯屯，笑看万物锘锘锘</p>
<p>(它们一直在无形中保护你)</p>
</blockquote>
<h3 id="防御性编程低配版-lockdep">防御性编程：低配版 Lockdep</h3>
<ul>
<li>不必大费周章记录什么上锁顺序
<ul>
<li>统计当前的 spin count
<ul>
<li>如果超过某个明显不正常的数值 (1,000,000,000) 就报告</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">spin_cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">spin_cnt</span><span class="o">++</span> <span class="o">&gt;</span> <span class="n">SPIN_LIMIT</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Too many spin @ %s:%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FILE__</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>配合调试器和线程 backtrace 一秒诊断死锁</li>
</ul>
<h3 id="防御性编程低配版-sanitizer-l1">防御性编程：低配版 Sanitizer (L1)</h3>
<ul>
<li>内存分配要求<code>malloc and free</code>：已分配内存$S=[l_0,r_0) \cup [l_1,r_1) \cup &hellip;$
<ul>
<li>$kalloc(S)$返回的$[l,r)$ 必须满足$[l,r) \cup S = \empty$
<ul>
<li>thread-local allocation + 并发的 free 还蛮容易弄错的</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// allocation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">u32</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">panic_on</span><span class="p">(((</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">MAGIC</span><span class="p">,</span> <span class="s">&#34;double-allocation&#34;</span><span class="p">);</span><span class="c1">//分配的时候看到了malloc颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">MAGIC</span><span class="p">;</span> <span class="c1">//刷上malloc颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// free
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">u32</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">alloc_size</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">panic_on</span><span class="p">(((</span><span class="n">u32</span> <span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">)[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;double-free&#34;</span><span class="p">);</span><span class="c1">//分配的时候看到了free颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//刷上free颜色
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="补充死锁检测--进程-资源分配图">补充：死锁检测 | 进程-资源分配图</h3>
<ul>
<li>
<p>操作系统中的每一刻时刻的<strong>系统状态</strong>都可以用<strong>进程-资源分配图</strong>来表示，进程-资源分配图是描述进程和资源申请及分配关系的一种有向图，可用于<strong>检测系统是否处于死锁状态</strong></p>
</li>
<li>
<p><b>用一个方框表示每一个资源类，方框中的黑点表示该资源类中的各个资源，每个键进程用一个圆圈表示，</b>用<strong>有向边</strong>来表示<strong>进程申请资源和资源被分配的情况</strong></p>
</li>
<li>
<p>进程-资源分配图中存在环路并不一定是发生了死锁。因为循环等待资源仅仅是死锁发生的必要条件，而不是充分条件</p>
</li>
<li>
<p><b>死锁检测步骤</b></p>
</li>
</ul>
<ol>
<li>如果进程-资源分配图中无环路，则此时系统没有发生死锁</li>
<li>如果进程-资源分配图中有环路，<b>且每个资源类仅有一个资源</b>，则系统中已经发生了死锁</li>
<li>如果进程-资源分配图中有环路，且涉及到的资源类有多个资源，此时系统未必会发生死锁。如果能在进程-资源分配图中找出一个<strong>既不阻塞又非独立的进程</strong> ，该进程能够在有限的时间内归还占有的资源，也就是把边给消除掉了，重复此过程，直到能在有限的时间内<strong>消除所有的边</strong> ，则不会发生死锁，否则会发生死锁。(消除边的过程类似于<strong>拓扑排序</strong>)</li>
</ol>
<ul>
<li><b>死锁的解除</b></li>
</ul>
<p>当死锁检测程序检测到存在死锁发生时，应设法让其解除，让系统从死锁状态中恢复过来，常用的解除死锁的方法有以下四种：</p>
<ol>
<li><strong>立即结束所有进程的执行，重新启动操作系统</strong> ：这种方法简单，但以前所在的工作全部作废，损失很大。</li>
<li><strong>撤销涉及死锁的所有进程，解除死锁后继续运行</strong> ：这种方法能彻底打破<strong>死锁的循环等待</strong>条件，但将付出很大代价，例如有些进程可能已经计算了很长时间，由于被撤销而使产生的部分结果也被消除了，再重新执行时还要再次进行计算。</li>
<li><strong>逐个撤销涉及死锁的进程，回收其资源直至死锁解除。</strong></li>
<li><strong>抢占资源</strong> ：从涉及死锁的一个或几个进程中抢占资源，把夺得的资源再分配给涉及死锁的进程直至死锁解除</li>
</ol>
<h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何拯救人类不擅长的并发编程？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>常见的并发 bug
<ul>
<li>死锁、数据竞争、原子性/顺序违反</li>
</ul>
</li>
<li>不要盲目相信自己：检查、检查、检查
<ul>
<li>防御性编程：检查</li>
<li>动态分析：打印 + 检查</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter7 真实世界的并发编程</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter7/</link>
    <pubDate>Wed, 15 Mar 2023 13:26:02 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter7/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>并发编程的基本工具：线程库、互斥和同步</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 什么样的任务是需要并行/并发的？它们应该如何实现？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>高性能计算中的并发编程</li>
<li>数据中心里的并发编程</li>
<li>我们身边的并发编程</li>
</ul>
<h2 id="高性能计算中的并发编程">高性能计算中的并发编程</h2>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/359327.359336" target="_blank" rel="noopener noreffer">CRAY-1 Supercomputer</a>, 1976 @ 138 MFLOPS, SIMD Processor</li>
</ul>
<h3 id="高性能计算程序特点">高性能计算程序：特点</h3>
<blockquote>
<p>“A technology that harnesses the power of supercomputers or computer clusters to solve complex problems requiring massive computation.” (IBM)</p>
</blockquote>
<ul>
<li>
<p>以计算为中心</p>
<ul>
<li>
<p>系统模拟：天气预报、能源、分子生物学</p>
</li>
<li>
<p>人工智能：神经网络训练</p>
</li>
<li>
<p>矿厂：纯粹的 hash 计算</p>
</li>
<li>
<p><a href="http://www.hpc100.cn/top100/20/" target="_blank" rel="noopener noreffer">HPC-China 100</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="高性能计算主要挑战">高性能计算：主要挑战</h3>
<p>计算任务如何分解</p>
<ul>
<li>
<p>计算图需要容易并行化</p>
<ul>
<li>机器-线程两级任务分解</li>
</ul>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"> <span class="o">*</span> <span class="k">if</span> <span class="n">array1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">array2</span><span class="p">[</span><span class="n">y</span><span class="p">],</span><span class="n">we</span> <span class="n">can</span> <span class="n">know</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span> <span class="n">form</span> <span class="n">the</span> <span class="s">&#34;decreasing and conquer&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="o">*</span> <span class="n">so</span> <span class="n">we</span> <span class="n">should</span> <span class="n">make</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="o">*</span> <span class="k">else</span> <span class="n">array1</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="n">array2</span><span class="p">[</span><span class="n">y</span><span class="p">],</span><span class="n">we</span> <span class="n">can</span> <span class="n">know</span> <span class="n">that</span> <span class="n">it</span> <span class="n">is</span> <span class="n">form</span> <span class="n">the</span> <span class="s">&#34;divide and conquer&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="o">*</span> <span class="n">so</span> <span class="n">we</span> <span class="n">should</span> <span class="n">make</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>计算图</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-1.jpg" title="/img/Operating System/chapter7-1.jpg" data-thumbnail="/img/Operating System/chapter7-1.jpg" data-sub-html="<h2>计算图（看依赖关系，表明了计算的顺序限制）</h2>">
        
    </a><figcaption class="image-caption">计算图（看依赖关系，表明了计算的顺序限制）</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-2.jpg" title="/img/Operating System/chapter7-2.jpg" data-thumbnail="/img/Operating System/chapter7-2.jpg" data-sub-html="<h2>看成有向图进行拓扑排序，确定计算顺序。可以看出矩阵规模小的时候并行度很低，不如单线程计算。但是矩阵规模大的时候就要考虑并行计算了</h2>">
        
    </a><figcaption class="image-caption">看成有向图进行拓扑排序，确定计算顺序。<br>可以看出矩阵规模小的时候并行度很低，不如单线程计算。但是矩阵规模大的时候就要考虑并行计算了</figcaption>
    </figure>
<ul>
<li>
<p>生产者-消费者解决一切</p>
<ul>
<li><a href="https://hpc-tutorials.llnl.gov/mpi/" target="_blank" rel="noopener noreffer">MPI</a> - “a specification for the developers and users of message passing libraries”, <a href="https://www.openmp.org/" target="_blank" rel="noopener noreffer">OpenMP</a> - “multi-platform shared-memory parallel programming in C/C++ and Fortran”</li>
</ul>
</li>
<li>
<p><a href="https://web.mit.edu/dimitrib/www/pdc.html" target="_blank" rel="noopener noreffer">Parallel and Distributed Computation: Numerical Methods</a>（与高性能计算有关）</p>
</li>
</ul>
<p>线程间如何通信</p>
<ul>
<li>通信不仅发生在节点/线程之间，还发生在任何共享内存访问</li>
<li>还记得被 <a href="https://jyywiki.cn/pages/OS/2022/demos/mem-ordering.c" target="_blank" rel="noopener noreffer">mem-ordering.c</a> 支配的恐惧吗？</li>
</ul>
<p><font color="red"><b>模拟计算：现实中的物理世界就是并发的</b></font></p>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/mandelbrot.c" target="_blank" rel="noopener noreffer">mandelbrot.c</a> (embarrassingly parallel)<font color="orange">环境有点难配，这个程序在kali上面的运行速度要比乌班图快</font>。线程数越多，运行速度越快。而且我们会发现线程会将区域划分，然后只负责自己那一部分的区域。（由于区域间没有关联，这个问题很容易进行划分和并行）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-3.png" title="/img/Operating System/chapter7-3.png" data-thumbnail="/img/Operating System/chapter7-3.png" data-sub-html="<h2>最终效果</h2>">
        
    </a><figcaption class="image-caption">最终效果</figcaption>
    </figure>
<h2 id="数据中心里的并发编程">数据中心里的并发编程</h2>
<h3 id="数据中心程序特点">数据中心程序：特点</h3>
<blockquote>
<p>“A network of computing and storage resources that enable the delivery of shared applications and data.” (CISCO)</p>
</blockquote>
<p>以数据 (存储) 为中心</p>
<ul>
<li>从互联网搜索 (Google)、社交网络 (Facebook/Twitter) 起家</li>
<li>支撑各类互联网应用：微信/QQ/支付宝/游戏/网盘/……</li>
</ul>
<p>算法/系统对 HPC 和数据中心的意义</p>
<ul>
<li>你有 1,000,000 台服务器</li>
<li>如果一个算法/实现能快 1%，就能省 10,000 台服务器
<ul>
<li>参考：$NJU$对面一套房 ≈ 50 台服务器 (不计运维成本)</li>
</ul>
</li>
</ul>
<h3 id="数据中心主要挑战">数据中心：主要挑战</h3>
<p>多副本情况下的<b>高可靠</b>、<b>低延迟</b>数据访问</p>
<div class="mermaid" id="id-1"></div>
<p><b>为了可靠性（做数据恢复）每个数据在多个服务器里面都有副本</b></p>
<p>其中的计算机称为$Key-value-storage$<code>{key : value}</code>，<font color="red"><b>是现在分布式系统的最流行的模型</b></font></p>
<ul>
<li>在服务海量地理分布请求的前提下
<ul>
<li>数据要保持一致 $\Longrightarrow$ 多个副本都要跟着变动(Consistency)</li>
<li>服务时刻保持可用 (Availability)</li>
<li>容忍机器离线 (Partition tolerance)</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-4.png" title="/img/Operating System/chapter7-4.png" data-thumbnail="/img/Operating System/chapter7-4.png" data-sub-html="<h2>量子纠缠</h2>">
        
    </a><figcaption class="image-caption">量子纠缠</figcaption>
    </figure>
<h3 id="这门课的问题如何用好一台计算机">这门课的问题：如何用好一台计算机？</h3>
<p>如何用一台 (可靠的) 计算机<b>尽可能多地服务并行的请求</b></p>
<ul>
<li>关键指标：QPS, tail latency, &hellip;</li>
</ul>
<p>我们有的工具</p>
<ul>
<li>线程 (threads)
<ul>
<li>线程的切换需要代价<font color="purple"><b>（从一个状态机切换到另一个状态机 $\Longrightarrow$ 保存PC，保存所有寄存器（空间开销），压栈，陷入管态等）</b></font></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kr">thread</span><span class="p">(</span><span class="n">start</span> <span class="o">=</span> <span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">println</span><span class="p">(</span><span class="s">&#34;${Thread.currentThread()} has run.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b>协程 (coroutines)</b>
<ul>
<li><code>code: co_yield ==&gt; asm: call &lt;co_yield&gt;</code> $\Longrightarrow$ <font color="red"><b>实际上是函数调用</b></font>。只需要进行<font color="red"><b>一部分栈和一部分寄存器</b></font>的操作</li>
<li>多个可以保存/恢复的执行流 (<a href="https://jyywiki.cn/OS/2022/labs/M2" target="_blank" rel="noopener noreffer">M2 - libco</a>)</li>
<li><b>比线程更轻量 (完全没有系统调用，也就没有操作系统状态)</b></li>
</ul>
</li>
</ul>
<h3 id="数据中心协程和线程">数据中心：协程和线程</h3>
<ul>
<li>数据中心简化模型</li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p>数据中心</p>
<ul>
<li>
<p>同一时间有数千/数万个请求到达服务器</p>
</li>
<li>
<p>计算部分</p>
<ul>
<li><b>需要利用好多处理器</b>
<ul>
<li>线程 → <b><font color="red">这就是我擅长的 (Mandelbrot Set)</font>，但是每一个线程都会占用相当可观的操作系统资源<font color="orange">（需要挂PC，保存状态等，开销比协程大的多）</font></b></li>
<li>协程 → <b>一人出力，他人摸鱼 $\Longrightarrow$ <font color="red">（协程不受操作系统调度，一个线程里面一次只能运行一个协程）例如协程碰到read(),就会反过来阻塞对应的线程</font></b></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>I/O 部分</p>
<ul>
<li>会在系统调用上 block (例如请求另一个服务或读磁盘)
<ul>
<li>协程 → 一人干等，他人围观</li>
<li>线程 → 每个线程都占用可观的操作系统资源</li>
</ul>
</li>
</ul>
</li>
<li>
<p>(这个问题比你想象的复杂，例如虚拟机)</p>
</li>
</ul>
<h3 id="go-和-goroutine">Go 和 Goroutine</h3>
<blockquote>
<p>Go: 小孩子才做选择，多处理器并行和轻量级并发<b><font color="red">我全都要</font></b>！</p>
</blockquote>
<p><b>Goroutine: 概念上是线程，实际是线程和协程的混合体</b> $\Longrightarrow$ 解决了高并发$I/O$的问题</p>
<div class="mermaid" id="id-3"></div>
<ul>
<li>
<p><b>即利用的协程的高效性，又通过一定的机制防止协程造成的阻塞</b></p>
</li>
<li>
<p>调度器会帮助你管理好<b>Goroutine</b></p>
</li>
<li>
<p>同时并行执行的最多也只有一个CPU和一个线程</p>
<ul>
<li><font color="red"><b>一个CPU都不会在两个go线程之间切换，省掉了切换CPU线程的时间，运行和切换的都是协程</b></font></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>每个 CPU 上有一个 Go Worker，自由调度 goroutines</li>
<li>执行到 blocking API 时 (例如 sleep, read)
<ul>
<li>Go Worker 偷偷改成 non-blocking 的版本
<ul>
<li>成功 → 立即继续执行</li>
<li>失败 → 立即 yield 到另一个需要 CPU 的 goroutine
<ul>
<li>太巧妙了！CPU 和操作系统全部用到 100%</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>例子</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/fib.go" target="_blank" rel="noopener noreffer">fib.go</a>; <a href="https://books.studygolang.com/gopl-zh/ch9/ch9-08.html" target="_blank" rel="noopener noreffer"><em>The Go Programming Language</em> (ch 9.8)</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Example from &#34;The Go Programming Language&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">go</span> <span class="nf">spinner</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="kd">const</span> <span class="nx">n</span> <span class="p">=</span> <span class="mi">45</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fibN</span> <span class="o">:=</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="c1">// slow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\rFibonacci(%d) = %d\n&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">fibN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">spinner</span><span class="p">(</span><span class="nx">delay</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="s">`-\|/`</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\r%c&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">delay</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nx">x</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">x</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="nf">fib</span><span class="p">(</span><span class="nx">x</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>go spinner(100 * time.Millisecond)</code>概念是线程，实现是协程</p>
</li>
<li>
<p><code>spinner</code>实践上会被调度到另外一个CPU上面执行</p>
</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/chapter7-5.png" title="/img/Operating System/chapter7-5.png" data-thumbnail="/img/Operating System/chapter7-5.png">
        
    </a>
<h3 id="现代编程语言上的系统编程">现代编程语言上的系统编程</h3>
<blockquote>
<p>Do not communicate by sharing memory; instead, share memory by communicating. ——<em>Effective Go</em></p>
</blockquote>
<p><font color="red">共享内存 = 万恶之源</font></p>
<ul>
<li>在奇怪调度下发生的各种并发 bugs
<ul>
<li>条件变量：broadcast 性能低，不 broadcast 容易错</li>
<li>信号量：在管理多种资源时就没那么好用了</li>
</ul>
</li>
</ul>
<hr>
<p><b>既然生产者-消费者能解决绝大部分问题，提供一个 API 不就好了？</b></p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/producer-consumer.go" target="_blank" rel="noopener noreffer">producer-consumer.go</a>
<ul>
<li>缓存为 0 的 channel 可以用来同步 <font color="red"><b>(先到者等待)</b></font></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">stream</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">n</span> <span class="p">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">produce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;produce&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">stream</span> <span class="o">&lt;-</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">consume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">x</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">stream</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;consume&#34;</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="nf">produce</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nf">consume</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>stream &lt;- i</code> $\Longrightarrow$ 把i丢进channel</li>
<li><code>x := &lt;- stream</code> $\Longrightarrow$ 把i从channel中拉出来</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/chapter7-6.png" title="/img/Operating System/chapter7-6.png" data-thumbnail="/img/Operating System/chapter7-6.png">
        
    </a>
<a class="lightgallery" href="/img/Operating%20System/chapter7-7.png" title="/img/Operating System/chapter7-7.png" data-thumbnail="/img/Operating System/chapter7-7.png">
        
    </a>
<h3 id="补充rust利用原子互斥锁的并发编程">补充：Rust利用原子互斥锁的并发编程</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="p">{</span><span class="n">mpsc</span><span class="p">,</span><span class="w"> </span><span class="n">Arc</span><span class="p">,</span><span class="w"> </span><span class="n">Mutex</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="p">{</span><span class="n">thread</span><span class="p">,</span><span class="w"> </span><span class="n">vec</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">tx</span><span class="p">,</span><span class="w"> </span><span class="n">rx</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mpsc</span>::<span class="n">channel</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">txs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">handles</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="fm">vec!</span><span class="p">[];</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">0</span><span class="o">..</span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">txs</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="n">tx</span><span class="p">.</span><span class="n">clone</span><span class="p">())));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">txs</span><span class="p">.</span><span class="n">into_iter</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">counter</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">hand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">number</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">count</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="kd">let</span><span class="w"> </span><span class="n">sender</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">i</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="o">*</span><span class="n">number</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Send the number: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="o">*</span><span class="n">number</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">sender</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="o">*</span><span class="n">number</span><span class="p">).</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">handles</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">handle</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">for</span><span class="w"> </span><span class="n">received</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">rx</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="fm">println!</span><span class="p">(</span><span class="s">&#34;Received: {}&#34;</span><span class="p">,</span><span class="w"> </span><span class="n">received</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">count</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">if</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">10</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">break</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">handles</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">i</span><span class="p">.</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">handle</span><span class="p">.</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="我们身边的并发编程">我们身边的并发编程</h2>
<h3 id="web-20-时代-1999">Web 2.0 时代 (1999)</h3>
<p>人与人之间联系更加紧密的互联网</p>
<ul>
<li>“Users were encouraged to provide content, rather than just viewing it.”</li>
<li>你甚至可以找到一些 “Web 3.0”/Metaverse 的线索</li>
</ul>
<hr>
<p>是什么成就了今天的 Web 2.0?</p>
<ul>
<li><font color="red"><b>浏览器中的并发编程</b></font>：Ajax (Asynchronous JavaScript + XML)</li>
<li>HTML (DOM Tree) + CSS 代表了你能看见的一切
<ul>
<li>通过 JavaScript 可以改变它</li>
<li>通过 JavaScript 可以建立连接本地和服务器</li>
<li>你就拥有了全世界！</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-8.png" title="/img/Operating System/chapter7-8.png" data-thumbnail="/img/Operating System/chapter7-8.png" data-sub-html="<h2>浏览器中的DOM Tree</h2>">
        
    </a><figcaption class="image-caption">浏览器中的<code>DOM Tree</code></figcaption>
    </figure>
<h3 id="人机交互程序特点和主要挑战">人机交互程序：特点和主要挑战</h3>
<ul>
<li>
<p>特点：不太复杂</p>
<ul>
<li>
<p>既没有太多计算</p>
<ul>
<li>DOM Tree 也不至于太大 (大了人也看不过来)</li>
<li>DOM Tree 怎么画浏览器全帮我们搞定了</li>
</ul>
</li>
<li>
<p>也没有太多 I/O</p>
<ul>
<li>就是一些网络请求<b>（调用的快，返回的慢）</b></li>
</ul>
</li>
</ul>
</li>
<li>
<p>挑战：程序员多 $\Longrightarrow$<b>（后面非科班，设计师，原画师这样的群体也会参与进来）</b></p>
<ul>
<li>
<p><b><font color="red">零基础</font>的人你让他整共享内存上的多线程</b></p>
</li>
<li>
<p>恐怕我们现在用的到处都是 bug 吧？？？</p>
</li>
</ul>
</li>
</ul>
<h3 id="单线程--事件模型">单线程 + 事件模型</h3>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-9.jpg" title="/img/Operating System/chapter7-9.jpg" data-thumbnail="/img/Operating System/chapter7-9.jpg" data-sub-html="<h2>单线程&#43;事件模型，事件一旦开始执行就必须执行到结束 $\Longrightarrow$ 这样就避免了并发bug</h2>">
        
    </a><figcaption class="image-caption">单线程+事件模型，事件一旦开始执行就必须执行到结束 $\Longrightarrow$ <b><code>这样就避免了并发bug</code></b></figcaption>
    </figure>
<ul>
<li>
<p>但是事件里面请求网络的时候要注意成功和失败的处理方法。<b>因为网络是有延迟而且不稳定的，不能因为请求网络失败就导致在对应的事件里面堵死</b></p>
</li>
<li>
<p>尽可能少但又足够的并发</p>
<ul>
<li>
<p>一个线程、全局的事件队列、<b><font color="red">按序执行 (run-to-complete)</font></b>，<b>没有lock，编写容易</b></p>
</li>
<li>
<p>耗时的 API (Timer, Ajax, &hellip;) 调用会立即返回</p>
<ul>
<li>条件满足时向队列里增加一个事件</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://xxx.yyy.zzz/login&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span> <span class="p">{</span> <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://xxx.yyy.zzz/cart&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-10.jpg" title="/img/Operating System/chapter7-10.jpg" data-thumbnail="/img/Operating System/chapter7-10.jpg" data-sub-html="<h2>请求成功的情况</h2>">
        
    </a><figcaption class="image-caption">请求成功的情况</figcaption>
    </figure>
<h3 id="异步事件模型">异步事件模型</h3>
<ul>
<li>
<p>并发模型简单了很多</p>
<ul>
<li>函数的执行是原子的 (不能并行，减少了并发 bug 的可能性)</li>
</ul>
</li>
<li>
<p><b>API 依然可以并行（由浏览器后台帮你搞定并行）</b></p>
<ul>
<li>适合网页这种 “大部分时间花在渲染和网络请求” 的场景
<ul>
<li>JavaScript 代码只负责 “描述” <code>DOM Tree</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>坏处</p>
<ul>
<li>Callback hell (祖传屎山)
<ul>
<li>刚才的代码嵌套 5 层，可维护性已经接近于零了</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="异步编程promise">异步编程：Promise</h3>
<blockquote>
<p>导致 callback hell 的本质：人类脑袋里想的是 “流程图”，看到的是 “回调”。</p>
</blockquote>
<ul>
<li>The Promise object represents the <em>eventual completion</em> (or failure) of an asynchronous operation and its resulting value.</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter7-11.png" title="/img/Operating System/chapter7-11.png" data-thumbnail="/img/Operating System/chapter7-11.png" data-sub-html="<h2>Promise: 流程图的构造方法 (Mozilla-MDN Docs)</h2>">
        
    </a><figcaption class="image-caption">Promise: 流程图的构造方法 (Mozilla-MDN Docs)</figcaption>
    </figure>
<h3 id="promise-描述-workflow-的-嵌入式语言">Promise: 描述 Workflow 的 “嵌入式语言”</h3>
<p>Chaining</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">loadScript</span><span class="p">(</span><span class="s2">&#34;/article/promise-chaining/one.js&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="nx">script</span> <span class="p">=&gt;</span> <span class="nx">loadScript</span><span class="p">(</span><span class="s2">&#34;/article/promise-chaining/two.js&#34;</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="nx">script</span> <span class="p">=&gt;</span> <span class="nx">loadScript</span><span class="p">(</span><span class="s2">&#34;/article/promise-chaining/three.js&#34;</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span> <span class="nx">script</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// scripts are loaded, we can use functions declared there
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">})</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-12.png" title="/img/Operating System/chapter7-12.png" data-thumbnail="/img/Operating System/chapter7-12.png" data-sub-html="<h2>代码描述</h2>">
        
    </a><figcaption class="image-caption">代码描述</figcaption>
    </figure>
<p>Fork-join</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;B&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span> <span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">resolve</span><span class="p">(</span><span class="s1">&#39;C&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">]).</span><span class="nx">then</span><span class="p">(</span> <span class="nx">res</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-13.png" title="/img/Operating System/chapter7-13.png" data-thumbnail="/img/Operating System/chapter7-13.png" data-sub-html="<h2>代码描述</h2>">
        
    </a><figcaption class="image-caption">代码描述</figcaption>
    </figure>
<h3 id="async-await-even-better">Async-Await: Even Better</h3>
<p>async function</p>
<ul>
<li>总是返回一个 <code>Promise</code> object</li>
<li><code>async_func()</code> - fork</li>
</ul>
<hr>
<p>await promise</p>
<ul>
<li><code>await promise</code> - join</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="nx">A</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/hello/a&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">B</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/hello/b&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">C</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;/hello/c&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">hello</span> <span class="o">=</span> <span class="kr">async</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="kr">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">A</span><span class="p">(),</span> <span class="nx">B</span><span class="p">(),</span> <span class="nx">C</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl"><span class="nx">hello</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">alert</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;fetch failed!&#39;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter7-14.png" title="/img/Operating System/chapter7-14.png" data-thumbnail="/img/Operating System/chapter7-14.png" data-sub-html="<h2>代码描述</h2>">
        
    </a><figcaption class="image-caption">代码描述</figcaption>
    </figure>
<h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 什么样的任务是需要并行/并发的？它们应该如何实现？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>并发编程的真实应用场景
<ul>
<li><b>高性能计算 (注重任务分解): 生产者-消费者 (MPI/OpenMP)</b></li>
<li><b>数据中心 (注重系统调用): 线程-协程 (Goroutine)</b></li>
<li><b>人机交互 (注重易用性): 事件-流图 (Promise)</b></li>
</ul>
</li>
<li>编程工具的发展突飞猛进
<ul>
<li>自 Web 2.0 以来，开源社区改变了计算机科学的学习方式</li>
<li>希望每个同学都有一个<font color="red"><b> “主力现代编程语言”</b></font>
<ul>
<li>Modern C++, Rust, Javascript, &hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter6 并发控制：同步</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter6/</link>
    <pubDate>Fri, 10 Mar 2023 20:32:20 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter6/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-10 20:48</p>
<p>在洲的提醒下，✋才发现原来租国外电话号那个网站可以有访问<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a>的教程，之前首尔线和美国线都因为反IP给ban了，这网站都没仔细看，真是血亏</p>
</div>
        </div>
    </div>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>互斥：自旋锁、互斥锁、futex</li>
<li><del>是时候面对真正的并发编程了</del></li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: <b>如何在多处理器上协同多个线程完成任务？</b></li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>典型的同步问题：<b>生产者-消费者</b>；哲学家吃饭</li>
<li>同步的实现方法：信号量、条件变量</li>
</ul>
<h2 id="线程同步">线程同步</h2>
<h3 id="同步-synchronization">同步 (Synchronization)</h3>
<ul>
<li>
<p><b>两个或两个以上随时间变化的量在变化过程中保持一定的<u>相对关系</u></b></p>
</li>
<li>
<p>iPhone/iCloud 同步 (手机 vs 电脑 vs 云端)</p>
</li>
<li>
<p>变速箱同步器 (合并快慢速齿轮)</p>
</li>
<li>
<p>同步电机 (转子与磁场速度一致)</p>
</li>
<li>
<p>同步电路 (所有触发器在边沿同时触发)</p>
</li>
</ul>
<hr>
<ul>
<li><b>异步 (Asynchronous) = 不同步</b>
<ul>
<li>上述很多例子都有异步版本 (异步电机、异步电路、异步线程)</li>
</ul>
</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-11 14:00</p>
<p>乌班图打赢复活赛成功 $\Longrightarrow$ 大爹复活博客<a href="https://blog.csdn.net/ningmengzhihe/article/details/127295333" target="_blank" rel="noopener noreffer">《GParted给ubuntu系统磁盘resize大小时候出现cannot resize read-only file system解决办法》</a></p>
<p>下午继续拿着乌班图听课</p>
</div>
        </div>
    </div>
<h3 id="并发程序中的同步">并发程序中的同步</h3>
<ul>
<li>
<p><b>并发程序的步调很难保持 “<font color="red">完全</font>一致”</b></p>
<ul>
<li><b>线程同步：<font color="red">在某个时间点共同达到互相已知的状态</font></b>，（先整完的等另一个</li>
</ul>
</li>
<li>
<p>再次把线程想象成我们自己</p>
<ul>
<li>NPY：等我洗个头就出门/等我打完这局游戏就来</li>
<li>舍友：等我修好这个 bug 就吃饭</li>
<li>导师：等我出差回来就讨论这个课题</li>
<li>jyy：<del>等我成为卷王就躺平</del>
<ul>
<li><font color="red"><b>“先到先等”</b></font></li>
</ul>
</li>
</ul>
</li>
<li>
<p>目标：写线程模拟上面的过程，比如A线程代表你打游戏，B线程代表你舍友修bug，这两个线程要做的是在你打完游戏，舍友修完bug之后一起去干饭</p>
</li>
</ul>
<h3 id="生产者-消费者问题学废你就赢了">生产者-消费者问题：学废你就赢了</h3>
<blockquote>
<p><b><font color="red">99% 的实际并发问题都可以用生产者-消费者解决。</font></b></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <code>printf</code> 前后增加代码，使得打印的括号序列满足</p>
<ul>
<li>一定是某个合法括号序列的<b>前缀</b></li>
<li>括号<b>嵌套的深度</b>不超过$n$
<ul>
<li>$n=3$, <code>((())())(((</code> 合法</li>
<li>$n=3$, <code>(((())))</code>, <code>(()))</code> 不合法</li>
</ul>
</li>
<li>同步
<ul>
<li><b>等到有空位（嵌套层数不多）再打印左括号</b></li>
<li><b>等到能配对时再打印右括号</b></li>
</ul>
</li>
</ul>
<h4 id="生产者-消费者问题分析">生产者-消费者问题：分析</h4>
<ul>
<li>
<p>为什么叫 “生产者-消费者” 而不是 “括号问题”？</p>
<ul>
<li>
<p><b>左括号：生产资源 (任务)、放入队列</b></p>
</li>
<li>
<p><b>右括号：从队列取出资源 (任务) 执行</b></p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>能否用互斥锁实现括号问题？</p>
<ul>
<li>左括号：嵌套深度 (队列) 不足$n$时才能打印</li>
<li>右括号：嵌套深度 (队列) &gt; 1时才能打印</li>
</ul>
</li>
<li>
<p><font color="red">当然是等到满足条件时再打印了</font>：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc.c" target="_blank" rel="noopener noreffer">pc.c</a></p>
<ul>
<li><font color="red">用互斥锁保持条件成立</font></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">mutex_t</span> <span class="n">lk</span> <span class="o">=</span> <span class="n">MUTEX_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tproduce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tconsume</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>压力测试的检查当然不能少：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc-check.py" target="_blank" rel="noopener noreffer">pc-check.py</a> $\Longrightarrow$ <b>学一门脚本语言来做自动化检测（很重要！），总比$OJ$给你报错你不知道错在哪里好很多</b></li>
<li>少面向OJ编程（真正的project没有这玩意儿）</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-1.png" title="/img/Operating System/chapter6-1.png" data-thumbnail="/img/Operating System/chapter6-1.png" data-sub-html="<h2>有时间看一看</h2>">
        
    </a><figcaption class="image-caption">有时间看一看</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">limit</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">count</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">100000</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">count</span> <span class="o">&lt;=</span> <span class="n">limit</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s1"> Ok.&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>Model checker 当然也不能少 (留作习题)</p>
</li>
<li>
<p>管道通信+自动化脚本检测</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> 2023-03-11 15:21:02 ⌚  jungle-virtual-machine in ~/chapter6
</span></span><span class="line"><span class="cl">○ → ./pc <span class="m">3</span> <span class="p">|</span> python3 pc-check.py <span class="m">3</span>
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-11 15:23:26 ⌚  jungle-virtual-machine in ~/chapter6
</span></span><span class="line"><span class="cl">○ → ./pc <span class="m">3</span> <span class="p">|</span> python3 pc-check.py <span class="m">2</span>
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/home/jungle/chapter6/pc-check.py&#34;</span>, line 9, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    assert <span class="m">0</span> &lt;<span class="o">=</span> count &lt;<span class="o">=</span> limit
</span></span><span class="line"><span class="cl">AssertionError
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="补充利用rust的自旋锁实现上述问题">补充：利用<code>Rust</code>的自旋锁实现上述问题</h3>
<ul>
<li><code>lib.rs</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">io</span>::<span class="n">Write</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>::<span class="n">sync</span>::<span class="p">{</span><span class="n">Arc</span><span class="p">,</span><span class="w"> </span><span class="n">Mutex</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">use</span><span class="w"> </span><span class="n">std</span>:<span class="err">🧵</span>:<span class="p">{</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">JoinHandle</span><span class="p">};</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">counter</span>: <span class="nc">Arc</span><span class="o">&lt;</span><span class="n">Mutex</span><span class="o">&lt;</span><span class="kt">u32</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">max</span>: <span class="kt">u32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">channel</span>: <span class="nb">Vec</span><span class="o">&lt;</span><span class="n">JoinHandle</span><span class="o">&lt;</span><span class="p">()</span><span class="o">&gt;&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">impl</span><span class="w"> </span><span class="n">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">new</span><span class="p">(</span><span class="n">n</span>: <span class="kt">u32</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nc">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">new</span><span class="p">(</span><span class="n">Mutex</span>::<span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">Produceconsume</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">counter</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">max</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="n">channel</span>: <span class="nc">vec</span><span class="o">!</span><span class="p">[],</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">produce</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">counter</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">max</span><span class="p">;</span><span class="w"> </span><span class="c1">// 将 max 复制到闭包中，避免对 self 进行 Move
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">hand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counter</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">max</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">+=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="fm">print!</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">std</span>::<span class="n">io</span>::<span class="n">stdout</span><span class="p">().</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">consume</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">counter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Arc</span>::<span class="n">clone</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">.</span><span class="n">counter</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">hand</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">thread</span>::<span class="n">spawn</span><span class="p">(</span><span class="k">move</span><span class="w"> </span><span class="o">||</span><span class="w"> </span><span class="k">loop</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">count</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">counter</span><span class="p">.</span><span class="n">lock</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="k">if</span><span class="w"> </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="k">continue</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w"> </span><span class="k">else</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="o">*</span><span class="n">count</span><span class="w"> </span><span class="o">-=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="fm">print!</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                    </span><span class="n">std</span>::<span class="n">io</span>::<span class="n">stdout</span><span class="p">().</span><span class="n">flush</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">});</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">hand</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">join</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">while</span><span class="w"> </span><span class="o">!</span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">is_empty</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="bp">self</span><span class="p">.</span><span class="n">channel</span><span class="p">.</span><span class="n">pop</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">join</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>main.rs</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="line"><span class="cl"><span class="k">use</span><span class="w"> </span><span class="n">rust_practice</span>::<span class="n">Produceconsume</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">fn</span> <span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">args</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">std</span>::<span class="n">env</span>::<span class="n">args</span><span class="p">().</span><span class="n">skip</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">assert_eq!</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">len</span><span class="p">(),</span><span class="w"> </span><span class="mi">1</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">n</span>: <span class="kt">u32</span> <span class="o">=</span><span class="w"> </span><span class="n">args</span><span class="p">.</span><span class="n">next</span><span class="p">().</span><span class="n">unwrap</span><span class="p">().</span><span class="n">parse</span><span class="p">().</span><span class="n">unwrap</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="fm">assert_ne!</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="w"> </span><span class="mi">0</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">pac</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Produceconsume</span>::<span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">_</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="mi">1</span><span class="o">..</span><span class="mi">100</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pac</span><span class="p">.</span><span class="n">produce</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="n">pac</span><span class="p">.</span><span class="n">consume</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">pac</span><span class="p">.</span><span class="n">join</span><span class="p">();</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>压力测试</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">┌──<span class="o">(</span>jungle㉿LAPTOP-A7S3TAA4<span class="o">)</span>-<span class="o">[</span>~/some_address<span class="o">]</span>
</span></span><span class="line"><span class="cl">└─$ cargo run <span class="m">3</span> <span class="p">|</span> python3 checker.py <span class="m">3</span>
</span></span><span class="line"><span class="cl">    Finished dev <span class="o">[</span>unoptimized + debuginfo<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.09s
</span></span><span class="line"><span class="cl">     Running <span class="sb">`</span>target/debug/rust_practice 3<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl">^CTraceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/mnt/d/work for vscode/rust_practice/checker.py&#34;</span>, line 6, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    <span class="k">for</span> ch in sys.stdin.read<span class="o">(</span>n<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;/usr/lib/python3.10/codecs.py&#34;</span>, line 319, in decode
</span></span><span class="line"><span class="cl">    def decode<span class="o">(</span>self, input, <span class="nv">final</span><span class="o">=</span>False<span class="o">)</span>:
</span></span><span class="line"><span class="cl">KeyboardInterrupt
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>互斥锁太难了（<code>Rust</code>写着就很难），有时间再看吧😭</li>
</ul>
<h2 id="条件变量万能同步方法">条件变量：万能同步方法</h2>
<h3 id="同步问题分析">同步问题：分析</h3>
<blockquote>
<p>任何同步问题都<b><font color="red">有先来先等待的条件</font></b></p>
</blockquote>
<ul>
<li>
<p>线程 join (<a href="https://jyywiki.cn/pages/OS/2022/demos/thread.h" target="_blank" rel="noopener noreffer">thread.h</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a>)</p>
<ul>
<li>等所有线程结束后继续执行，否则等待</li>
</ul>
</li>
<li>
<p>NPY 的例子</p>
<ul>
<li>打完游戏且洗完头后继续执行 <code>date()</code>，否则等待</li>
</ul>
</li>
<li>
<p>生产者/消费者问题</p>
<ul>
<li>左括号：深度$k &lt; n$时<code>printf</code>，否则等待</li>
<li>右括号：$k &gt; 0$时<code>printf</code>，否则等待
<ul>
<li>再看一眼 <a href="https://jyywiki.cn/pages/OS/2022/demos/pc.c" target="_blank" rel="noopener noreffer">pc.c</a> $\Longrightarrow$ thread每次停下来都要执行“<b>上🔒 $\rightarrow$ <b><font color="orange">让我看看！</font></b>(资源，好康的东西) $\rightarrow$ 执行或解🔒</b>”（代码：<code>retry:mutex_lock(&amp;lk);if (count == 0) {mutex_unlock(&amp;lk);goto retry;}</code>）浪费了时间，能不能优化掉“<b>上🔒 $\rightarrow$ <b><font color="orange">让我看看！</font></b>$\rightarrow$ 执行或解🔒</b>”的时间？</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-2.png" title="/img/Operating System/chapter6-2.png" data-thumbnail="/img/Operating System/chapter6-2.png" data-sub-html="<h2>jyy的thread库通过ChatGPT看起来舒服多了</h2>">
        
    </a><figcaption class="image-caption">jyy的thread库通过ChatGPT看起来舒服多了</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-3.png" title="/img/Operating System/chapter6-3.png" data-thumbnail="/img/Operating System/chapter6-3.png" data-sub-html="<h2>join也告诉你在干啥了</h2>">
        
    </a><figcaption class="image-caption">join也告诉你在干啥了</figcaption>
    </figure>
<ul>
<li>
<p>目前理解：<code>join() = while(!terminated_all);</code></p>
</li>
<li>
<p>我们想要做的：<b>将“上🔒 $\rightarrow$ <b><font color="orange">让我看看！</font></b>$\rightarrow$ 执行或解🔒”变成“看完了，资源不对，那就睡觉（悲”</b>（代码：<code>mutex_lock(&amp;lk);if (count == 0){mutex_unlock_and_sleep(&amp;lk);}</code>），也就是“半自旋”$\Longrightarrow$ 休眠</p>
<ul>
<li>同时，另一个thread在执行<b>完该做的任务后要叫醒休眠的线程</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="c1">//finish my work
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">wake_up</span><span class="p">(</span><span class="n">other_thread</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="conditional-variables-条件变量-cv">Conditional Variables (条件变量, CV)</h3>
<ul>
<li>
<p>条件变量 API</p>
<ul>
<li>wait(cv, mutex) 💤
<ul>
<li>调用时必须保证已经获得 mutex</li>
<li>释放 mutex、进入睡眠状态</li>
</ul>
</li>
</ul>
</li>
<li>
<p>signal/notify(cv) 💬 私信：走起</p>
<ul>
<li>如果有线程正在等待 cv，则唤醒其中一个线程</li>
</ul>
</li>
<li>
<p>broadcast/notifyAll(cv) 📣 所有人：走起</p>
<ul>
<li>唤醒全部正在等待 cv 的线程（呃呃呃，原来去年cyd的Java教的就是这玩意啊，🐮魔差点写死✌）</li>
</ul>
</li>
</ul>
<h3 id="条件变量实现生产者-消费者">条件变量：实现生产者-消费者</h3>
<ul>
<li>改良代码</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="n">cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span> <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">--</span><span class="p">;</span> <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>压力测试：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.c" target="_blank" rel="noopener noreffer">pc-cv.c</a>；模型检验：<a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.py" target="_blank" rel="noopener noreffer">pc-cv.py</a></p>
<ul>
<li>(Small scope hypothesis)</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-4.png" title="/img/Operating System/chapter6-4.png" data-thumbnail="/img/Operating System/chapter6-4.png" data-sub-html="<h2>我自己的疑问</h2>">
        
    </a><figcaption class="image-caption">我自己的疑问</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-5.png" title="/img/Operating System/chapter6-5.png" data-thumbnail="/img/Operating System/chapter6-5.png" data-sub-html="<h2>继续提问</h2>">
        
    </a><figcaption class="image-caption">继续提问</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-6.png" title="/img/Operating System/chapter6-6.png" data-thumbnail="/img/Operating System/chapter6-6.png" data-sub-html="<h2>继续提问</h2>">
        
    </a><figcaption class="image-caption">继续提问</figcaption>
    </figure>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.c" target="_blank" rel="noopener noreffer">pc-cv.c</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">mutex_t</span> <span class="n">lk</span> <span class="o">=</span> <span class="n">MUTEX_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">cond_t</span> <span class="n">cv</span> <span class="o">=</span> <span class="n">COND_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tproduce</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tconsume</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span> <span class="n">count</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tproduce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tconsume</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>观察</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tproduce</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tconsume</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>i &lt; 1</code>的时候没问题，而<code>i &lt; 8</code>的时候就出了问题</p>
</li>
<li>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.py" target="_blank" rel="noopener noreffer">pc-cy.py</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ProducerConsumer</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">log</span><span class="p">,</span> <span class="n">waits</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tryacquire</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">,</span> <span class="n">seen</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">seen</span> <span class="o">==</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span> <span class="c1"># mutex_lock()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># cond_wait</span>
</span></span><span class="line"><span class="cl">                <span class="n">_</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;1&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;1&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span> <span class="o">+</span> <span class="s1">&#39;(&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c1"># cond_signal</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span> <span class="c1"># mutex_unlock()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tc1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">_</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;2&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="s1">&#39;2&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tc2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">_</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;3&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="s1">&#39;3&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">():</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_negative</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">log</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="s1">&#39;)&#39;</span><span class="p">:</span> <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>过程解读（上面的pc-cv.c）</li>
</ul>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>从生成者开始往下走，<b>一个生成材料生成成功，而消费过程执行了两次</b> $\Longrightarrow$ 寄了！</p>
<ul>
<li><b>为什么呢：同类唤醒了同类，这是错误的</b></li>
<li><b>需要两个条件变量，保证只能唤醒异类</b>，课后自己阅读相关材料</li>
</ul>
</li>
<li>
<p><a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/pc-cv.html" target="_blank" rel="noopener noreffer">可视化</a></p>
</li>
</ul>
<h3 id="条件变量正确的打开方式">条件变量：正确的打开方式</h3>
<ul>
<li>需要<b><font color="red">等待条件满足时</font></b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">cond</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">assert</span><span class="p">(</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1">// 互斥锁保证了在此期间条件 cond 总是成立
</span></span></span><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><b><font color="red">其他线程条件可能被满足时</font></b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>修改 <a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.c" target="_blank" rel="noopener noreffer">pc-cv.c</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/pc-cv.py" target="_blank" rel="noopener noreffer">pc-cv.py</a> $if \rightarrow while\ and\ signal \rightarrow boardcast\newline$</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-8.png" title="/img/Operating System/chapter6-8.png" data-thumbnail="/img/Operating System/chapter6-8.png" data-sub-html="<h2>两者区别</h2>">
        
    </a><figcaption class="image-caption">两者区别</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-9.png" title="/img/Operating System/chapter6-9.png" data-thumbnail="/img/Operating System/chapter6-9.png" data-sub-html="<h2>为什么要唤醒全部线程的原因。总算搞明白为什么之前只改$if \rightarrow while$的情况下程序会卡死</h2>">
        
    </a><figcaption class="image-caption">为什么要唤醒全部线程的原因。总算搞明白为什么之前只改$if \rightarrow while$的情况下程序会卡死</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">2023-03-11 20:47:45 ⌚  jungle-virtual-machine in ~/chapter6
</span></span><span class="line"><span class="cl">○ → ./pc-cv <span class="m">3</span> <span class="p">|</span> python3 pc-check.py <span class="m">3</span>
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span><span class="line"><span class="cl"><span class="m">100000</span> Ok.
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>运行成功！</li>
<li>问大爹ChatGPT</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-7.png" title="/img/Operating System/chapter6-7.png" data-thumbnail="/img/Operating System/chapter6-7.png" data-sub-html="<h2>if是假睡眠，只能睡一次，下一次就会苏醒，而while才是真睡眠，只有条件满足时才苏醒</h2>">
        
    </a><figcaption class="image-caption"><code>if</code>是<b>假睡眠</b>，只能睡一次，下一次就会苏醒，而<code>while</code>才是<b>真睡眠</b>，只有条件满足时才苏醒</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">pthread_mutex_t</span> <span class="n">lock</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">pthread_cond_t</span> <span class="n">cond</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">thread_func</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">data</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Thread %d: data = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">arg</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_t</span> <span class="n">tid1</span><span class="p">,</span> <span class="n">tid2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_cond_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_func</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_func</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">data</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid2</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pthread_mutex_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">pthread_cond_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="条件变量实现并行计算">条件变量：实现并行计算</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">job</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">run</span><span class="p">)(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="n">job</span> <span class="o">*</span><span class="n">job</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="o">!</span> <span class="p">(</span><span class="n">job</span> <span class="o">=</span> <span class="n">get_job</span><span class="p">())</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">job</span><span class="o">-&gt;</span><span class="n">run</span><span class="p">(</span><span class="n">job</span><span class="o">-&gt;</span><span class="n">arg</span><span class="p">);</span> <span class="c1">// 不需要持有锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                      <span class="c1">// 可以生成新的 job
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                      <span class="c1">// 注意回收分配的资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>下面开始将最长公共子串的dp算法，视频断了，这个之前博客里面有<a href="https://jungle430.github.io/posts/data-structures-and-algorithms/dynamic-programming/#longest-common-subsequence-by-dynamic-programming" target="_blank" rel="noopener noreffer">《Dynamic Programming》</a>回去复习</li>
<li>视频中断，但是大致听出来优化的方法，因为上面的最长公共子串的计算是<b>有一定顺序</b>的，我们需要先算$depth$比较浅的，然后再算$depth$比较浅的 $\Longrightarrow$ <font color="red">是不是和上面的生成者，消费者问题有着相似的地方？</font><b>我们可以将这个想法分配给不同的线程，利用sleep和notify来保持相对的一个顺序来对我们之前的算法做优化！（注意利用上面的job库）</b></li>
<li>研究这道题<a href="https://leetcode.cn/problems/building-h2o" target="_blank" rel="noopener noreffer">$H_20$生成</a></li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Pause<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Pause in 2023-03-11 21:30</p>
<p>感觉这节课内容好™️的多，已经不是仅仅就限制于一个一个算法了</p>
<p>去年cyd的<code>Java</code>上面讲的Thread那些东西终于开始理解了，而不是像当时那样在宿舍瞎🐔8️⃣写<code>Thread</code></p>
<p>感谢<a href="https://github.com/derecknowayback" target="_blank" rel="noopener noreffer">Dereck Chen</a>推荐的两篇有关<code>xv6</code>锁的文章<a href="https://zhuanlan.zhihu.com/p/352699414" target="_blank" rel="noopener noreffer">《Chapter 6: Locking》</a>和<a href="https://zhuanlan.zhihu.com/p/353400345" target="_blank" rel="noopener noreffer">《Chapter 6.5: More Tools, Examples and Deadlocks》</a>，一定找时间好好看</p>
<p>感谢洲帮我找到了用台湾线上<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a>的方法</p>
</div>
        </div>
    </div>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-12 11:30</p>
<p>👀✋今天薄纱你这章</p>
</div>
        </div>
    </div>
<h3 id="条件变量更古怪的习题面试题">条件变量：更古怪的习题/面试题</h3>
<p>有三种线程，分别打印 <code>&lt;</code>, <code>&gt;</code>, 和 <code>_</code></p>
<ul>
<li>对这些线程进行同步，使得打印出的序列总是 <code>&lt;&gt;&lt;_</code> 和 <code>&gt;&lt;&gt;_</code> 组合</li>
</ul>
<hr>
<p>使用条件变量，只要回答三个问题：</p>
<ul>
<li>打印 “<code>&lt;</code>” 的条件？</li>
<li>打印 “<code>&gt;</code>” 的条件？</li>
<li>打印 “<code>_</code>” 的条件？
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/fish.c" target="_blank" rel="noopener noreffer">fish.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LENGTH(arr) (sizeof(arr) / sizeof(arr[0]))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">enum</span> <span class="p">{</span> <span class="n">A</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">E</span><span class="p">,</span> <span class="n">F</span><span class="p">,</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">rule</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="n">ch</span><span class="p">,</span> <span class="n">to</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">rule</span> <span class="n">rules</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">A</span><span class="p">,</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span> <span class="n">B</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">B</span><span class="p">,</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span> <span class="n">C</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">C</span><span class="p">,</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span> <span class="n">D</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">A</span><span class="p">,</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span> <span class="n">E</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">E</span><span class="p">,</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">,</span> <span class="n">F</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">F</span><span class="p">,</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">,</span> <span class="n">D</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="n">D</span><span class="p">,</span> <span class="sc">&#39;_&#39;</span><span class="p">,</span> <span class="n">A</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">current</span> <span class="o">=</span> <span class="n">A</span><span class="p">,</span> <span class="n">quota</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">pthread_mutex_t</span> <span class="n">lk</span>   <span class="o">=</span> <span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">pthread_cond_t</span>  <span class="n">cond</span> <span class="o">=</span> <span class="n">PTHREAD_COND_INITIALIZER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">next</span><span class="p">(</span><span class="kt">char</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">LENGTH</span><span class="p">(</span><span class="n">rules</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">rule</span> <span class="o">*</span><span class="n">rule</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">rules</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">rule</span><span class="o">-&gt;</span><span class="n">from</span> <span class="o">==</span> <span class="n">current</span> <span class="o">&amp;&amp;</span> <span class="n">rule</span><span class="o">-&gt;</span><span class="n">ch</span> <span class="o">==</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="n">rule</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fish_before</span><span class="p">(</span><span class="kt">char</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">next</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">quota</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// can proceed only if (next(ch) &amp;&amp; quota)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pthread_cond_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">quota</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fish_after</span><span class="p">(</span><span class="kt">char</span> <span class="n">ch</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">quota</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">current</span> <span class="o">=</span> <span class="n">next</span><span class="p">(</span><span class="n">ch</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_cond_broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cond</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">char</span> <span class="n">roles</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;.&lt;&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;___&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">fish_thread</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">role</span> <span class="o">=</span> <span class="n">roles</span><span class="p">[</span><span class="n">id</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fish_before</span><span class="p">(</span><span class="n">role</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">putchar</span><span class="p">(</span><span class="n">role</span><span class="p">);</span> <span class="c1">// can be long; no lock protection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">fish_after</span><span class="p">(</span><span class="n">role</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">strlen</span><span class="p">(</span><span class="n">roles</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">fish_thread</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="信号量">信号量</h2>
<h3 id="复习互斥锁和更衣室管理">复习：互斥锁和更衣室管理</h3>
<p>操作系统 = 更衣室管理员</p>
<ul>
<li>先到的人 (线程)
<ul>
<li>成功获得手环，进入游泳馆</li>
<li><code>*lk = 🔒</code>，系统调用直接返回</li>
</ul>
</li>
<li>后到的人 (线程)
<ul>
<li>不能进入游泳馆，排队等待</li>
<li>线程放入等待队列，执行线程切换 (yield)</li>
</ul>
</li>
<li>洗完澡出来的人 (线程)
<ul>
<li>交还手环给管理员；管理员把手环再交给排队的人</li>
<li>如果等待队列不空，从等待队列中取出一个线程允许执行</li>
<li>如果等待队列为空，<code>*lk = ✅</code></li>
</ul>
</li>
<li>管理员 (OS) 使用自旋锁确保自己处理手环的过程是原子的</li>
</ul>
<h3 id="更衣室管理">更衣室管理</h3>
<p>完全没有必要限制手环的数量——让更多同学可以进入更衣室</p>
<ul>
<li>管理员可以持有任意数量的手环 (更衣室容量上限)
<ul>
<li>先进入更衣室的同学先得到</li>
<li>手环用完后才需要等同学出来</li>
</ul>
</li>
</ul>
<h3 id="更衣室管理-by-ew-dijkstra">更衣室管理 (by E.W. Dijkstra)</h3>
<p>做一点扩展——线程可以任意 “变出” 一个手环</p>
<ul>
<li>把手环看成是令牌</li>
<li>得到令牌的可以进入执行</li>
<li>可以随时创建令牌</li>
</ul>
<a class="lightgallery" href="/img/Operating%20System/chapter6-10.gif" title="/img/Operating System/chapter6-10.gif" data-thumbnail="/img/Operating System/chapter6-10.gif">
        
    </a>
<p>“手环” = “令牌” = “一个资源” = “信号量” (semaphore)</p>
<ul>
<li>P(&amp;sem) - prolaag = try + decrease; wait; down; in
<ul>
<li>等待一个手环后返回</li>
<li>如果此时管理员手上有空闲的手环，立即返回</li>
</ul>
</li>
<li>V(&amp;sem) - verhoog = increase; post; up; out
<ul>
<li>变出一个手环，送给管理员</li>
</ul>
</li>
<li>信号量的行为建模: <a href="https://jyywiki.cn/pages/OS/2022/demos/sem.py" target="_blank" rel="noopener noreffer">sem.py</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Semaphore</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">token</span><span class="p">,</span> <span class="n">waits</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;&#39;</span> <span class="c1"># 从一把🔑变成了好多把🔑，token现在是一个计数器</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">P</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tid</span><span class="p">):</span> <span class="c1"># 拿🔑</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">token</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>   <span class="c1"># 有超过一把🔑，🔑-1，自己得到了一把🔑</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">token</span> <span class="o">-=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="n">tid</span> <span class="c1"># 没有🔑就只能把自己放在等待队列里面，等到别人把我唤醒</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">V</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span> <span class="c1"># 交付🔑</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="c1"># 如果有人在等待队列里面，直接唤醒他（不需要通过管理员）</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">token</span> <span class="o">+=</span> <span class="mi">1</span> <span class="c1"># 如果无人等待直接把手环交给管理员</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">P</span><span class="p">(</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="s1">&#39;1&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">        <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">V</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">P</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="s1">&#39;2&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span> <span class="k">pass</span>
</span></span><span class="line"><span class="cl">        <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">        <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">V</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://github.com/Jungle430/check-for-NJU-OS/blob/main/sem.html" target="_blank" rel="noopener noreffer">model-checker</a></li>
</ul>
<h3 id="信号量实现生产者-消费者">信号量：实现生产者-消费者</h3>
<p>信号量设计的重点</p>
<ul>
<li>考虑 “手环” (每一单位的 “<font color="red"><b>资源</b></font>”) 是什么，谁创造？谁获取？
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/pc-sem.c" target="_blank" rel="noopener noreffer">pc-sem.c</a></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">producer</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>   <span class="c1">// P()返回 -&gt; 得到手环 （检测包里面是否还有空位，有空位就加入）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;(&#34;</span><span class="p">);</span> <span class="c1">// 假设线程安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fill</span><span class="p">);</span> <span class="c1">//打印就就相当于向包里放一个东西
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">consumer</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fill</span><span class="p">);</span> <span class="c1">//检测包里面是否还有东西
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;)&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span> <span class="c1">//把包里面的一个东西给吃掉了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">//非常对称优美！
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在 “<font color="red"><b>一单位资源</b></font>” 明确的问题上更好用</li>
<li>”凭空创造🔑“而不是像之前那样使用”配对的手环“，程序的正确性更加危险。。。</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-11.png" title="/img/Operating System/chapter6-11.png" data-thumbnail="/img/Operating System/chapter6-11.png" data-sub-html="<h2>回去就翻csapp</h2>">
        
    </a><figcaption class="image-caption">回去就翻<code>csapp</code></figcaption>
    </figure>
<blockquote>
<p>ChatGPT生成的一些代码</p>
<p>生产者-消费者问题是一个经典的并发问题，描述了一个生产者和一个消费者在共享资源的环境中的互动。生产者生成一些产品并将它们放入一个共享缓冲区，消费者从共享缓冲区中取出产品并将其消费。为了确保生产者和消费者之间的正确互动，需要使用信号量来实现同步和互斥。</p>
</blockquote>
<p>C++实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;mutex&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;condition_variable&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;queue&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;chrono&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdlib&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;ctime&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;atomic&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;semaphore.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">int</span> <span class="n">BUFFER_SIZE</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 定义信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">sem_t</span> <span class="n">empty</span><span class="p">,</span> <span class="n">full</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">producer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">data</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待空缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 添加数据到缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">buffer</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Producer &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; produced data &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;, buffer size is &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 发信号量通知有新数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">consumer</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">milliseconds</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">+</span> <span class="mi">1000</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 等待有数据的信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 从缓冲区中取出数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">buffer</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Consumer &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">id</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; consumed data &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;, buffer size is &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">buffer</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 发信号量通知有空缓冲区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">sem_post</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化随机种子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">srand</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="p">(</span><span class="k">nullptr</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sem_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">BUFFER_SIZE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sem_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 创建生产者和消费者线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">producer1</span><span class="p">(</span><span class="n">producer</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">producer2</span><span class="p">(</span><span class="n">producer</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">consumer1</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="kr">thread</span> <span class="n">consumer2</span><span class="p">(</span><span class="n">consumer</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 运行一段时间后结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep_for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">chrono</span><span class="o">::</span><span class="n">seconds</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 通知线程结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">producer1</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">producer2</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">consumer1</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">consumer2</span><span class="p">.</span><span class="n">detach</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 销毁信号量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">sem_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">empty</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sem_destroy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">full</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter6-12.png" title="/img/Operating System/chapter6-12.png" data-thumbnail="/img/Operating System/chapter6-12.png" data-sub-html="<h2>例子1</h2>">
        
    </a><figcaption class="image-caption"><code>例子1</code></figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-13.png" title="/img/Operating System/chapter6-13.png" data-thumbnail="/img/Operating System/chapter6-13.png" data-sub-html="<h2>例子2</h2>">
        
    </a><figcaption class="image-caption"><code>例子2</code></figcaption>
    </figure>
<h2 id="哲学家吃饭问题e-w-dijkstra-1960">哲♂️学家吃饭问题(E. W. Dijkstra, 1960)</h2>
<p>哲学家 (线程) 有时思考，有时吃饭</p>
<ul>
<li><b>吃饭需要同时得到左手和右手的叉子</b></li>
<li>当叉子被其他人占有时，必须等待，如何完成同步？
<ul>
<li><a href="https://leetcode.cn/problems/the-dining-philosophers" target="_blank" rel="noopener noreffer">如何用互斥锁/信号量实现？</a></li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter6-14.jpg" title="/img/Operating System/chapter6-14.jpg" data-thumbnail="/img/Operating System/chapter6-14.jpg" data-sub-html="<h2>哲♂️学家</h2>">
        
    </a><figcaption class="image-caption">哲♂️学家</figcaption>
    </figure>
<h3 id="失败与成功的尝试">失败与成功的尝试</h3>
<p>失败的尝试</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/philosopher.c" target="_blank" rel="noopener noreffer">philosopher.c</a> (如何解决？)</li>
<li>这里面使用了信号量</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 3
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">sem_t</span> <span class="n">locks</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tphilosopher</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">lhs</span> <span class="o">=</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="n">id</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">id</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span> <span class="c1">//拿左边的叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">lhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">P</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span> <span class="c1">//拿右边的叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;T%d Got %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">rhs</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">lhs</span><span class="p">]);</span> <span class="c1">//放回左叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">V</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">rhs</span><span class="p">]);</span> <span class="c1">//放回右叉子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//将锁初始化为1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">SEM_INIT</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locks</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tphilosopher</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>上面的程序会卡死（都拿左叉子的时候执行拿右叉子的动作的时候会一直<code>wait</code>直到有人<code>notify</code>它，可是这个场景下没人<code>notify</code>它 $\Longrightarrow$ 程序死锁）</li>
</ul>
<blockquote>
<p>这段代码实现了经典的哲学家就餐问题（Dining Philosophers Problem）。在这个问题中，有 $N$ 个哲学家和 $N$ 个叉子，每个哲学家需要同时拿到两个相邻的叉子才能吃饭，但是叉子一次只能被一个哲学家拿走，因此当所有哲学家都拿起一个叉子时，就会出现死锁。这段代码使用信号量来避免死锁，具体来说，每个叉子对应一个信号量，哲学家先尝试获取左边的叉子，如果获取不到则等待，否则再尝试获取右边的叉子。获取到两个叉子后，哲学家吃完后将两个叉子都放回原处，再次尝试获取叉子。由于每个哲学家只允许同时持有一个叉子，因此不会出现死锁。</p>
<p>在代码中，首先使用 <code>SEM_INIT</code> 函数将所有锁初始化为1，表示所有叉子都没有被占用。然后使用 <code>create</code> 函数创建 $N$ 个哲学家线程，每个线程执行 <code>Tphilosopher</code> 函数，即尝试获取叉子。在 <code>Tphilosopher</code> 函数中，首先获取左边的叉子，然后获取右边的叉子，如果两个叉子都获取到了，就吃饭，并将两个叉子都放回原处，再次循环。在获取和放回叉子时，使用 <code>P</code> 和 <code>V</code> 函数操作信号量，其中 <code>P</code> 表示获取锁，如果锁已经被占用，则阻塞等待，直到锁被释放；<code>V</code> 表示释放锁，将锁的值加1，唤醒一个等待锁的线程。</p>
<hr>
<p>上面的代码存在死锁的问题，原因是当所有的哲学家同时拿起自己左边的叉子后，会发生死锁。</p>
<p>具体来说，假设当前所有的哲学家都拿起了自己左边的叉子，那么每个哲学家都在等待自己的右边的叉子被释放，以便拿起右边的叉子。但是右边的叉子已经被邻座的哲学家拿走了，他们也在等待他们左边的叉子被释放。这种情况下，所有哲学家都无法继续执行，进入了死锁状态。</p>
<p>为了避免死锁，可以使用以下方法之一：</p>
<ol>
<li>将某个哲学家的左右叉子同时拿起来，这样他就可以开始进餐了，避免了所有哲学家都拿起自己左边的叉子导致的死锁。</li>
<li>改变某些哲学家的拿叉子顺序，例如先拿右边的叉子再拿左边的叉子，避免了所有哲学家都拿起自己左边的叉子导致的死锁。</li>
</ol>
<p>来自带爹<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a></p>
</blockquote>
<ul>
<li>成功的尝试 (万能的方法)</li>
<li><b>OS哲学：通用 $&gt;$ 小聪明</b>（⬛✋：别装🅱️！）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">avail</span><span class="p">[</span><span class="n">lhs</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">avail</span><span class="p">[</span><span class="n">rhs</span><span class="p">]))</span> <span class="p">{</span> <span class="c1">//左右手的叉子都在的时候才能吃饭，否则等着
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">wait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">avail</span><span class="p">[</span><span class="n">lhs</span><span class="p">]</span> <span class="o">=</span> <span class="n">avail</span><span class="p">[</span><span class="n">rhs</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">//一下子拿两个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">avail</span><span class="p">[</span><span class="n">lhs</span><span class="p">]</span> <span class="o">=</span> <span class="n">avail</span><span class="p">[</span><span class="n">rhs</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">//一下子还回去两个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">broadcast</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mutex</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><font color="red">与上面那个失败的例子相比，这个程序里面的哲♂️学家<b>一看看左右两边的叉子</b>，<b>拿取和归还也是按双</b>，不会再像前面那样一个一个拿，最后造成死锁的情况</font>。</li>
</ul>
<h3 id="忘了信号量让一个人集中管理叉子吧">忘了信号量，让一个人集中管理叉子吧！</h3>
<p>“Leader/follower” - 生产者/消费者</p>
<ul>
<li>分布式系统中非常常见的解决思路 (HDFS, &hellip;)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tphilosopher</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">send_request</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">EAT</span><span class="p">);</span> <span class="c1">//向waiter请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">P</span><span class="p">(</span><span class="n">allowed</span><span class="p">[</span><span class="n">id</span><span class="p">]);</span> <span class="c1">// waiter 会把叉子递给哲学家（这个过程需要等）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">philosopher_eat</span><span class="p">();</span> <span class="c1">//干饭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">send_request</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">DONE</span><span class="p">);</span> <span class="c1">//发请求归还
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Twaiter</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span> <span class="o">=</span> <span class="n">receive_request</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">EAT</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">DONE</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter6-13.png" title="/img/Operating System/chapter6-13.png" data-thumbnail="/img/Operating System/chapter6-13.png" data-sub-html="<h2>和上面的例子很像，用一个服务员做总管理</h2>">
        
    </a><figcaption class="image-caption"><code>和上面的例子很像，用一个服务员做总管理</code></figcaption>
    </figure>
<ul>
<li>这个是一个<b>集中式算法</b>，要比<b>分布式算法</b>更容易整对,<code>Twaiter</code>是一个调度器</li>
</ul>
<h3 id="忘了那些复杂的同步算法吧">忘了那些复杂的同步算法吧！</h3>
<ul>
<li>
<p>你可能会觉得，管叉子的人是性能瓶颈</p>
<ul>
<li>
<p>一大桌人吃饭，每个人都叫服务员的感觉</p>
</li>
<li>
<p>$Premature\ optimization\ is\ the\ root\ of\ all\ evil\ (D. E. Knuth)\newline$</p>
</li>
<li>
<p><b>与数据结构不同，OS更多考虑现实情况</b></p>
</li>
</ul>
</li>
<li>
<p><font color="red"><b>抛开 workload 谈优化就是耍流氓</b></font></p>
<ul>
<li>
<p>吃饭的时间通常远远大于请求服务员的时间</p>
</li>
<li>
<p>如果一个 manager 搞不定，可以分多个 (fast/slow path)（多个服务员+总服务员，每个服务员都有一把叉子）</p>
<ul>
<li>把系统设计好，使集中管理不成为瓶颈
<ul>
<li><a href="https://www.usenix.org/conference/nsdi20/presentation/brooker" target="_blank" rel="noopener noreffer">Millions of tiny databases</a> (NSDI'20)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何在多处理器上协同多个线程完成任务？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>实现同步的方法
<ul>
<li>条件变量、信号量；生产者-消费者问题</li>
<li>Job queue 可以实现几乎任何并行算法</li>
</ul>
</li>
<li>不要 “自作聪明” 设计算法，小心求证</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>END<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>in 2023-03-12 15:30</p>
<p>这章好™️的难，感觉是本门课听到目前为止除了第三章以外最吃力的一节课之一了，可能也和前置知识缺失有关（毕竟不是南大✋）</p>
<ul>
<li>
<p>而且发现有很多东西要看了</p>
<ul>
<li>
<p>《CSAPP》第12章</p>
</li>
<li>
<p>《UNIX环境高级编程》第15章（之前<a href="https://z217blog.cn" target="_blank" rel="noopener noreffer">z217</a>学长就推荐了这本书）</p>
</li>
<li>
<p>C++多线程部分的标准库，不然力扣的题做不了，而且后面这个还要用</p>
</li>
</ul>
</li>
</ul>
<p><del>有时间赶紧看(bushi</del></p>
</div>
        </div>
    </div>
<h2 id="补充进程调度scheduling">补充：进程调度$(Scheduling)$</h2>
<blockquote>
<p>参考<b>清华大学</b>$rCore$课程资料——<a href="http://rcore-os.cn/rCore-Tutorial-Book-v3/chapter5/4scheduling.html" target="_blank" rel="noopener noreffer">进程调度</a>——补充于2023-4-15</p>
</blockquote>
<h3 id="导读">导读</h3>
<ul>
<li>
<p>计算机内存中<b><u>可执行的程序个数大于处理器个数时</u></b>，这些程序可通过共享处理器来完成各自的任务。而操作系统负责让它们能够<b><u>高效合理地共享处理器资源</u></b>，这就引入了调度（<code>scheduling</code>）这个概念。进程调度（也称处理器调度）是进程管理的重要组成部分。</p>
</li>
<li>
<p>调度的一般定义</p>
<ul>
<li>在一定的约束条件下，把<b>有限的资源</b>在时间上分配给若干个任务，以<b>满足或优化一个或多个性能指标</b>。</li>
<li>对于计算机系统而言，就是在一台计算机中运行了多个进程，操作系统把有限的处理器在时间上分配给各个进程，以满足或优化进程执行的性能指标。</li>
</ul>
</li>
<li>
<p>核心问题：<b>操作系统如何通过进程调度来提高进程和系统的性能</b></p>
</li>
<li>
<p>细化为子问题</p>
<ul>
<li>运行进程的约束条件是啥？</li>
<li>有哪些调度策略和算法？</li>
<li>调度的性能指标是啥？</li>
<li>如何评价调度策略和算法？</li>
</ul>
</li>
</ul>
<h3 id="批处理系统的调度">批处理系统的调度</h3>
<ul>
<li>在批处理系统下，应用<b>以科学计算为主，I/O操作较少，</b>且I/O操作主要集中在应用开始和结束的一小段时间，应用的执行时间主要消耗在占用处理器进行计算上，且应用的大致执行时间一般可以预估到。</li>
</ul>
<h4 id="约束条件">约束条件</h4>
<ul>
<li>批处理系统中的进程有如下一些约束/前提条件：</li>
</ul>
<ol>
<li>每个进程<b><u>同时到达</u></b>。</li>
<li>每个进程的执行时间相同。（为了贴合实际也可以改变一些约束条件，比如将条件2改为：<code>每个进程的执行时间不同</code>）</li>
<li>进程的执行时间是<b>已知的</b>。</li>
<li>进程在整个执行过程期间很少执行I/O操作。（可理解为在操作系统调度过程中，<b><u>可以忽略进程执行I/O操作的开销</u></b>）</li>
<li>进程在执行过程中<b>不会被抢占</b>。</li>
</ol>
<h4 id="性能指标">性能指标</h4>
<ul>
<li>
<p>我们还需给出性能指标，用于衡量，比较和评价不同的调度策略。对于批处理系统中的一般应用而言，可以只有一个性能指标：周转时间（<code>turn around time</code>），即进程完成时间与进程到达时间的差值：$T_{周转时间}=T_{完成时间}-T_{到达时间}$</p>
</li>
<li>
<p>由于前提条件1 明确指出<b>所有进程在同一时间到达</b>， 所以$T_{到达时间}=0$，因此$T_{周转时间}=T_{完成时间}-T_{到达时间}=T_{完成时间}$。除了总的周转时间，我们还需要关注平均周转时间这样的统计值：</p>
</li>
</ul>
<p>$$
T_{平均周转时间}=\frac{\sum_{i=1}^{就绪进程个数} T_{周转时间_i}}{就绪进程个数}
$$</p>
<ul>
<li><font color="red"><b>对于单个进程而言，平均周转时间是一个更值得关注的性能指标</b></font></li>
</ul>
<h4 id="先来先服务">先来先服务</h4>
<ul>
<li>
<p>先来先服务（<code>first-come first-severd</code>，也称<code>First-in first-out</code>，先进先出）调度策略的基本思路就是<b><u>按进程请求处理器的先后顺序来使用处理器</u></b>。在具体实现上，操作系统首先会建立一个<b>就绪调度队列（简称就绪队列）</b>和一个<b>等待队列（也称阻塞队列）</b>。</p>
</li>
<li>
<p>大致的调度过程如下</p>
<ul>
<li>操作系统每次执行调度时，都是从就绪队列的<b>队头</b>取出一个进程来执行</li>
<li><b>当一个应用被加载到内存，并创建对应的进程，设置进程为<font color="red">就绪进程</font></b>，按进程到达的先后顺序，把进程放入<b><font color="red">就绪调度队列</font></b>的队尾</li>
<li>当正在运行的进程<b>主动放弃</b>处理器时，操作系统会把该进程放到<b>就绪队列<font color="red">末尾</font></b>，并从<b>就绪队列<font color="red">头</font></b>取出一个进程执行</li>
<li>当正在运行的进程<b>执行完毕</b>时，操作系统会<font color="red"><b>回收该进程所在资源</b></font>，并从<b>就绪队列<font color="red">头</font></b>取出一个进程执行</li>
<li>当正在运行的进程需要<b>等待某个事件或资源时</b>，操作系统会把该进程<b>从<font color="red">就绪队列</font>中移出，放到<font color="red">等待队列</font>中（<font color="orange">此时这个进程从就绪进程变成等待进程</font>），并从<font color="red">就绪队列头</font>取出下一个进程执行</b></li>
<li>当等待进程所<b>等待的某个事件出现或等待的资源得到满足时</b>，操作系统会把该进程<font color="red"><b>转为就绪进程</b></font>，并会把该进程<b>从<font color="red">等待队列</font>中移出，并放到<font color="red">就绪队列末尾</font></b></li>
</ul>
</li>
<li>
<p>该调度策略的优点是简单，容易实现。对于满足1~5约束条件的执行环境，用这个调度策略的平均周转时间性能指标也很好。如果在一个在较长的时间段内，每个进程都能结束，那么公平性这个指标也是能得到保证的</p>
</li>
<li>
<p>操作系统不会主动打断进程的运行</p>
</li>
</ul>
<h4 id="最短作业优先">最短作业优先</h4>
<ul>
<li>
<p>满足1~5的约束条件的执行环境太简化和理想化了，在实际系统中，每个应用的执行时间很可能不同，所以约束条件2“每个进程的执行时间相同”就不合适了。如果把约束条件2改为 <b>“每个进程的执行时间不同”</b>，那么在采用先来先服务调度策略的系统中，<b><u>可能就会出现短进程不得不等长进程结束后才能运行的现象，导致短进程的等待时间太长，且系统的平均周转时间也变长了</u></b></p>
</li>
<li>
<p>假设有两个进程$P_A、P_B$，它们大致同时到达，但$P_A$稍微快一点，进程$P_A$执行时间为100，进程$P_B$的执行时间为20。如果操作系统采用<b>先来先服务</b>的调度策略，进程的平均周转时间为：$\frac{P_A周转时间+P_B周转时间}{2}=\frac {100+120}{2} = 110$</p>
</li>
<li>
<p>但如果操作系统先调度进程$P_B$，那么进程的平均周转时间为：$\frac{P_B周转时间+P_A周转时间}{2}=\frac {20+120}{2} = 70$</p>
</li>
<li>
<p>可以看到，<b>如果采用先来先服务调度策略，<font color="red">执行时间短的进程（简称短进程）可被排在执行时间长的进程（长进程）后面，导致进程的平均周转时间变长</font>（长进程首先执行导致了后面的进程等待时间过长）</b></p>
</li>
<li>
<p>为应对短进程不得不等长进程结束后才能运行的问题，我们可以想到一个调度的方法：<b>优先让短进程执行。这就是<font color="red">最短作业优先（<code>Shortest Job First</code>，简称<code>SJF</code>）</font>调度策略。其实上面让PB先执行的调度方法，就是采用了最短作业优先策略</b>。</p>
</li>
<li>
<p>在更新约束条件2的前提下，如果我们把平均周转时间作为唯一的性能指标，那么SJF是一个最优调度算法</p>
</li>
<li>
<p>虽然SJF调度策略在理论上表现很不错，但在具体实现中，<b>需要对处于就绪队列上的进程按执行时间进行排序，这会引入一定的调度执行开销</b>。<u>而且如果进一步放宽约束，贴近实际情况，SJF就会显现出它的<code>不足</code></u>。如果我们放宽约束条件1：</p>
</li>
</ul>
<ol>
<li>每个进程可以在不同时间到达</li>
</ol>
<blockquote>
<p>那么可能会发生一种情况，当前正在运行的进程还需 $k$ 执行时间才能完成，这时来了一个执行时间为 $h$ 的进程，且 $h &lt; K$ ，但根据<code>约束条件5</code>，<b>操作系统不能强制切换正在运行的进程</b>。所以，在这种情况下，最短作业优先的<b>含义就不是那么确切了</b>，<b>而且在理论上，SJF也就不是最优调度算法了</b></p>
</blockquote>
<ul>
<li>例如，操作系统采用SJF调度策略（不支持抢占进程），有两个进程，$P_A$在时间0到达，执行时间为100， $P_B$在时间20到达，执行时间为20，那么周转时间为</li>
</ul>
<p>$$
(P_A执行结束-P_A开始执行)+(P_B执行结束-P_B开始执行)=(100-0)+(120-20)=200
$$</p>
<p>平均周转时间：$\frac{200}{2}=100$</p>
<h3 id="交互式系统的调度">交互式系统的调度</h3>
<ul>
<li>交互式系统是指支持人机交互和各种$I/O$交互的计算机系统。可抢占任务执行的分时多任务操作系统对人机交互性和$I/O$及时响应更加友好，对进程特征的约束条件进一步放宽，进程的<b>可抢占特性</b>需要我们重新思考如何调度</li>
</ul>
<h4 id="约束条件-1">约束条件</h4>
<ul>
<li>交互式系统中的进程有如下一些约束/前提条件：</li>
</ul>
<ol>
<li>每个进程可<b>不同时间到达</b></li>
<li>每个进程的<b>执行时间不同</b></li>
<li>进程的执行时间是已知的</li>
<li><b>进程在整个执行过程期间会执行$I/O$操作</b></li>
<li><b>进程在执行过程中会被抢占</b></li>
</ol>
<ul>
<li>相对于批处理操作系统，约束条件4发生了变化，<font color="red"><b>这意味着在进程执行过程中，操作系统不能忽视其I/O操作</b></font>。约束条件5也发生了改变，即<b><font color="red">进程可以被操作系统随时打断和抢占</font></b></li>
</ul>
<h4 id="性能指标-1">性能指标</h4>
<ul>
<li>操作系统支持任务/进程被抢占的一个重要目标是提高用户的交互性体验和减少$I/O$响应时间。用户希望计算机系统能及时响应他发出的$I/O$请求（如键盘、鼠标等），但平均周转时间这个性能指标不足以反映人机交互或$I/O$响应的性能。所以，我们需要定义新的性能指标 – 响应时间（<code>response time</code>）：</li>
</ul>
<p>$$
T_{响应时间}=T_{首次执行}-T_{到达时间}
$$</p>
<ul>
<li>而对应的平均响应时间是：</li>
</ul>
<p>$$
T_{平均响应时间}=\frac{T_{响应时间}}{就绪进程个数}
$$</p>
<blockquote>
<p>例如，操作系统采用<code>SJF</code>调度策略（不支持抢占进程），有两个进程，$P_A$在时间0到达，执行时间为100， $P_B$在时间20到达，执行时间为20，那么$P_A$的响应时间为0，$P_B$为80，平均响应时间为 40 。</p>
</blockquote>
<h4 id="最短完成时间优先stcf">最短完成时间优先（<code>STCF</code>）</h4>
<ul>
<li>
<p>由于约束条件5表示了操作系统允许抢占，那么我们就可以实现一种<font color="red">支持进程抢占</font>的<b>改进型<code>SJF</code>调度策略</b>，即<b>最短完成时间优先（<code>Shortest Time to Complet First</code>）调度策略</b>。</p>
</li>
<li>
<p>基于前述的例子，操作系统采用STCF调度策略，有两个进程，PA在时间0到达，执行时间为100， PB在时间20到达，执行时间为20，那么周转时间为<b>（注意这里面PB可以抢占PA了，所以PA的完成时间变成了$100+20=120$）</b>：</p>
</li>
</ul>
<p>$$
\begin{align}
&amp;(120 - 0) + (40 - 20) = 140\newline
&amp;T_{平均周转时间}=\frac{140}{2}=70\newline
\end{align}
$$</p>
<ul>
<li>
<p>平均周转时间为 70 。可以看到，如果采用<code>STCF</code>调度策略，相比于<code>SJF</code>调度策略，<b>在<font color="red">周转时间</font>这个性能指标上得到了改善</b></p>
</li>
<li>
<p><b>但对于<font color="red">响应时间</font>而言，可能就不这么好了</b>。考虑一个例子，有两个用户发出了执行两个进程的请求，且两个进程大约同时到达，PA和PB的执行时间都为20。我们发现，无论操作系统采用FIFO/SJF/STCF中的哪一种调度策略，<u>某一个用户不得不等待20个时间单位后，才能让他的进程开始执行，这是一个非常不好的交互体验</u>。从性能指标上看，响应时间比较差。 这就引入了新的问题：<b><u>操作系统如何支持看重响应时间这一指标的应用程序？</u></b></p>
</li>
</ul>
<h4 id="基于时间片的轮转">基于时间片的轮转</h4>
<ul>
<li>
<p>如果操作系统分给每个运行的进程的运行时间是一个足够小的时间片（<code>time slice，quantum</code>），<b>时间片一到，就<font color="red">抢占当前进程并切换到另外一个进程执行。</font></b></p>
</li>
<li>
<p>这样进程以时间片为单位轮流占用处理器执行。<b><u>对于交互式进程而言，就有比较大的机会在较短的时间内执行，从而有助于减少响应时间</u></b>。</p>
</li>
<li>
<p>这种调度策略称为轮转（<code>Round-Robin</code>，简称<code>RR</code>）调度，即<b><u><font color="red">基本思路就是从就绪队列头取出一个进程，让它运行一个时间片，然后把它放回到队列尾，再从队列头取下一个进程执行，周而复始</font></u></b></p>
</li>
</ul>
<hr>
<ul>
<li>在具体实现上，需要考虑时间片的大小，一般时间片的大小会设置为<b>时钟中断的时间间隔的整数倍</b>。比如，时钟中断间隔为1ms，时间片可设置为10ms，两个用户发出了执行两个进程的请求，且两个进程大约同时到达，PA和PB的执行时间都为20s(即20,000ms)。如果采用轮转调度，那么进程的响应时间为</li>
</ul>
<blockquote>
<p>0+10 = 10ms</p>
</blockquote>
<ul>
<li>平均响应时间为：</li>
</ul>
<blockquote>
<p>$\frac{0+10}{2} = 5ms$</p>
</blockquote>
<ul>
<li>这两个值都远小于采用之前介绍的三种调度策略的结果</li>
<li>直观上可以进一步发现，如果我们进一步<b>减少时间片的大小</b>，那么采用轮转调度策略会得到<b>更好的响应时间</b>。但其实这是<b><font color="red">有潜在问题的，因为每次进程切换是有切换代价的</font></b>，参考之前介绍的进程切换的实现，可以看到，进程切换涉及多个寄存器的保存和回复操作，页表的切换操作等。</li>
</ul>
<blockquote>
<p>如果进程切换的时间开销是0.5ms，时间片设置为1ms，那么会有大约50%的时间用于进程切换，这样进程实际的整体执行时间就大大减少了</p>
</blockquote>
<ul>
<li>
<p>所以，<b>我们需要通过在响应时间和进程切换开销之间进行权衡</b>。不能把时间片设置得太小，且让响应时间在用户可以接受的范围内</p>
</li>
<li>
<p>看来轮转调度对于响应时间这个指标很友好。但<b>如果用户也要考虑周转时间这个指标</b>，那轮转调度就变得不行了</p>
</li>
</ul>
<blockquote>
<p>还是上面的例子，我们可以看到，PA和PB两个进程<b>几乎都在40s左右才结束</b>，这意味着平均周转时间为：</p>
<p>$\frac{40+40}{2}=40s$</p>
</blockquote>
<ul>
<li>这大于基于<code>SJF</code>的平均周转时间：</li>
</ul>
<blockquote>
<p>$\frac{(20 - 0) + (40 - 0)}{2} = 30s$</p>
</blockquote>
<ul>
<li>
<p>如果活跃进程的数量增加，我们会发现轮转调度的平均周转时间会进一步加强。也许有同学会说，那我们可以通过调整时间片，把时间片拉长，这样就会减少平均周转时间了。但这样又会把响应时间也给增大了。而且如果把时间片无限拉长，轮转调度就变成了<code>FCFS</code>调度了。</p>
</li>
<li>
<p>到目前为止，我们看到以<code>SJF</code>为代表的调度策略对周转时间这个性能指标很友好，<u>而以轮转调度为代表的调度策略对响应时间这个性能指标很友好。但鱼和熊掌难以兼得</u>。</p>
</li>
</ul>
<h3 id="通用计算机系统的调度">通用计算机系统的调度</h3>
<blockquote>
<p>个人计算机和互联网的发展推动了计算机的广泛使用，并出现了新的特点，内存越来越大，各种I/O设备成为计算机系统的基本配置，一般用户经常和随时使用交互式应用（如字处理、上网等），驻留在内存中的应用越来越多，应用的启动时间和执行时间无法提前知道。而且很多情况下，处理器大部分时间处于空闲状态，在等待用户或其它各种外设的输入输出操作。</p>
</blockquote>
<h4 id="约束条件-2">约束条件</h4>
<ul>
<li>这样，我们的约束条件也随之发生了新的变化：</li>
</ul>
<ol>
<li>每个进程可<b>不同时间到达</b></li>
<li>每个进程的<b>执行时间不同</b></li>
<li><b>进程的启动时间和执行时间是未知的</b></li>
<li><b>进程在整个执行过程期间会执行I/O操作</b></li>
<li><b>进程在执行过程中会被抢占</b></li>
</ol>
<ul>
<li>可以看到，其中的第3点改变了，导致进程的特点也发生了变化。有些进程为<b><font color="red">I/O密集型</font>的进程，大多数时间用于等待外设I/O操作的完成，需要进程能及时响应。有些进程是<font color="red">CPU密集型</font>的，大部分时间占用处理器进行各种计算，不需要及时响应。</b>还有一类<b><font color="red">混合型</font></b>特点的进程，它在不同的执行阶段有I/O密集型或CPU密集型的特点。这使得我们的调度策略需要能够根据进程的动态运行状态进行调整，以应对各种复杂的情况。</li>
</ul>
<h4 id="性能指标-2">性能指标</h4>
<ul>
<li>
<p>如果把各个进程运行时间的公平性考虑也作为性能指标，那么我们就需要定义何为公平。我们先给出一个公平的描述性定义：<b>在一个时间段内，操作系统对每个<font color="red">处于就绪状态</font>的进程均匀分配<font color="red">占用处理器的时间</font></b></p>
</li>
<li>
<p>这里需要注意，<u>为了提高一个性能指标，可能会以牺牲其他性能指标作为代价。所以，调度策略需要综合考虑和权衡各个性能指标。在其中<b>找到一个折衷或者平衡</b></u></p>
</li>
</ul>
<h4 id="多级反馈队列调度">多级反馈队列调度</h4>
<ul>
<li>
<p>在无法提前知道进程执行时间的前提下，如何设计一个能同时减少响应时间和周转时间的调度策略是一个挑战</p>
</li>
<li>
<p>不过计算机科学家早就对此进行深入分析并提出了了解决方案</p>
</li>
<li>
<p>在1962年，<code>MIT</code>的计算机系教授$Fernando\ Jose\ Corbato$(1990年图灵奖获得者)首次提出多级反馈队列（$Multi-level\ Feedback\ Queue$，简称<code>MLFQ</code>）调度策略，并用于当时的<code>CTSS</code>（兼容时分共享系统）操作系统中</p>
</li>
<li>
<p><code>Corbato</code>教授的思路很巧妙，用四个字来总结，就是<b>以史为鉴</b></p>
<ul>
<li><b>根据进程过去一段的执行特征来预测其未来一段时间的执行情况，并以此假设为依据来动态设置进程的优先级</b>，调度子系统选择优先级最高的进程执行。这里可以看出，<b>进程有了优先级的属性，而且进程的优先级是可以根据过去行为的反馈来动态调整的，不同优先级的进程位于不同的就绪队列中</b></li>
</ul>
</li>
</ul>
<h5 id="固定优先级的多级无反馈队列">固定优先级的多级无反馈队列</h5>
<ul>
<li>
<p><code>MLFQ</code>调度策略的关键在于如何设置优先级。<font color="orange"><b>一旦设置进程的好优先级，<code>MLFQ</code>总是优先执行唯有高优先级就绪队列中的进程</b></font>。<b>对于挂在同一优先级就绪队列中的进程，采用<font color="red">轮转调度策略</font></b></p>
</li>
<li>
<p>先考虑简单情况下，如果我们提前知道某些进程是<code>I/O</code>密集型的，某些进程是<code>CPU</code>密集型的，那么我们可以给<b><code>I/O</code>密集型设置高优先级</b>，而<b><code>CPU</code>密集型进程设置低优先级</b>。这样就绪队列就变成了两个，一个包含<code>I/O</code>密集型进程的高优先级队列，一个是处理器密集型的低优先级队列</p>
</li>
<li>
<p><b><font color="red">那我们如何调度呢？MLFQ调度策略是先查看高优先级队列中是否有就绪进程，如果有，就执行它，然后基于时间片进行轮转。由于位于此高优先级队列中的进程都是I/O密集型进程，所以它们很快就会处于阻塞状态（进入阻塞队列），等待I/O设备的操作完成，这就会导致高优先级队列中没有就绪进程</font></b></p>
</li>
<li>
<p>在高优先级队列没有就绪进程的情况下，<code>MLFQ</code>调度策略就会从低优先级队列中选择CPU密集型就绪进程，同样按照时间片轮转的方式进行调度</p>
<ul>
<li>
<p>如果在<code>CPU</code>密集型进程执行过程中，某个<code>I/O</code>密集型进程所等待的<code>I/O</code>设备的操作完成了，那么操作系统会打断<code>CPU</code>密集型进程的执行，以及时响应该中断，并让此<code>I/O</code>密集型进程从阻塞状态变成就绪态，重新接入到高优先级队列的尾部</p>
</li>
<li>
<p>这时调度子系统会优先选择高优先级队列中的进程执行，从而抢占了<code>CPU</code>密集型进程的执行</p>
</li>
</ul>
</li>
<li>
<p>这样，我们就得到了<code>MLFQ</code>的基本设计规则</p>
</li>
</ul>
<ol>
<li>如果进程<code>PA</code>的优先级 &gt; <code>PB</code>的优先级，抢占并运行<code>PA</code></li>
<li>如果进程<code>PA</code>的优先级 = <code>PB</code>的优先级，轮转运行<code>PA</code>和<code>PB</code></li>
</ol>
<ul>
<li>但还是有些假设过于简单化了，比如：</li>
</ul>
<ol>
<li>通常情况下，<b>操作系统并不能提前知道进程是<code>I/O</code>密集型还是<code>CPU</code>密集型的</b></li>
<li><b><code>I/O</code>密集型进程的密集程度不一定一样</b>，所以把它们放在一个高优先级队列中体现不出差异</li>
<li>进程在不同的执行阶段会有不同的特征，<b>可能前一阶段是<code>I/O</code>密集型，后一阶段又变成了<code>CPU</code>密集型</b></li>
</ol>
<ul>
<li>而在进程执行过程中固定进程的优先级，将难以应对上述情况</li>
</ul>
<h5 id="可降低优先级的多级反馈队列">可降低优先级的多级反馈队列</h5>
<ul>
<li>
<p>改进的MLFQ调度策略需要<b>感知进程的过去执行特征</b>，并<b>根据这种特征来预测进程的未来特征</b></p>
<ul>
<li><u>如果进程在过去一段时间是<code>I/O</code>密集型特征，就调高进程的优先级</u></li>
<li><u>如果进程在过去一段时间是<code>CPU</code>密集型特征，就降低进程的优先级</u></li>
</ul>
</li>
<li>
<p>由于会动态调整进程的优先级，所以，操作系统首先需要以优先级的数量来建立多个队列</p>
<ul>
<li>这个数量是一个经验值，比如<code>Linux</code>操作系统设置了140个优先级</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>如何动态调整进程的优先级？</p>
<ul>
<li>
<p>首先，我们假设新创建的进程是<code>I/O</code>密集型的，可以<b>把它设置为最高优先级</b></p>
</li>
<li>
<p>接下来根据它的执行表现来调整其优先级。如果在分配给它的时间配额内，<b>它睡眠或等待<code>I/O</code>事件完成而主动放弃了处理器</b>，<u>操作系统预测它接下来的时间配额阶段很大可能还是具有<code>I/O</code>密集型特征，所以就保持其优先级不变</u></p>
</li>
<li>
<p><u>如果进程用完了分配给它的时间配额，操作系统预测它接下来有很大可能还是具有<code>CPU</code>密集型特征，就会降低其优先级</u></p>
<ul>
<li>这里的时间配额的具体值是一个<b>经验值</b>，<u>一般是时间片的整数倍</u></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p><u>如果一个进程的执行时间小于分配给它的一个或几个时间配额</u>，我们把这样的进程称为<b>短进程</b>。那么这个短进程会以比较高的优先级迅速地结束</p>
</li>
<li>
<p>而如果一个进程有大量的<code>I/O</code>操作，那么一般情况下，<b>它会在时间配额结束前主动放弃处理器，进入等待状态，一旦被唤醒，会以原有的高优先级继续执行</b></p>
</li>
<li>
<p>如果一个进程的执行时间远大于几个时间配额，我们把这样的进程称为<b>长进程</b>。那么这个常进程经过一段时间后，会处于优先级<b>最底部</b>的队列，<u>只有在没有高优先级进程就绪的情况下，它才会继续执行，从而不会影响交互式进程的响应时间</u></p>
</li>
</ul>
<hr>
<ul>
<li>这样，我们进一步扩展了<code>MLFQ</code>的基本规则</li>
</ul>
<ol start="3">
<li>
<p>创建进程并让进程首次进入就绪队列时，设置进程的优先级为<b>最高优先级</b></p>
</li>
<li>
<p>进程<b>用完其时间配额后，就会降低其优先级</b></p>
</li>
</ol>
<hr>
<ul>
<li>虽然这样的调度看起来对短进程、<code>I/O</code>密集型进程或长进程的支持都还不错。但这样的调度只有降低优先级的操作，对于某些情况还是会应对不足</li>
</ul>
<ol>
<li>
<p>一个进程先执行了一段比较长时间的<code>CPU</code>密集型任务，导致它到了底部优先级队列，然后它在下一阶段执行<code>I/O</code>密集型任务，但被其他高优先级任务阻挡了，难以减少响应时间</p>
</li>
<li>
<p>在计算机系统中有大量的交互型进程，虽然每个进程执行时间短，但它们还是会持续地占用处理器，追导致位于低优先级的长进程一直无法执行，出现饥饿（<code>starvation</code>）现象</p>
</li>
</ol>
<ul>
<li>这主要是调度策略还缺少提升优先级的灵活规则</li>
</ul>
<h5 id="可提升降低优先级的多级反馈队列">可提升/降低优先级的多级反馈队列</h5>
<ul>
<li>
<p>对于可降低优先级的多级反馈队列调度策略难以解决的上述情况1和2，我们需要考虑如何提升某些进程的优先级</p>
</li>
<li>
<p>一个可以简单实现的优化思路是，<u>每过一段时间，周期性地把所有进程的优先级都设置为最高优先级</u></p>
<ul>
<li>
<p>这样长进程不会饿死</p>
</li>
<li>
<p>而被降到最低优先级的进程，如果当前处于I/O密集型任务，至少在一段时间后，会重新减少其响应时间</p>
</li>
</ul>
</li>
<li>
<p>不过这个“一段时间”的具体值如何设置？看起来又是一个经验值。这样，我们又扩展了<code>MLFQ</code>的基本规则</p>
</li>
</ul>
<ol start="5">
<li>经过一段时间，把所有就绪进程重新加入最高优先级队列</li>
</ol>
<hr>
<ul>
<li>
<p>但这样就彻底解决问题了吗？其实还不够，<u>比如对于优先级低且处于I/O密集型任务的进程，必须等待一段时间后，才能重新加入到最高优先级，才能减少响应时间。<b>难道这样的进程不能不用等待一段时间吗？</b></u></p>
</li>
<li>
<p>而对于长进程，如果有不少长进程位于最低优先级，一下子把它们都提升为最高优先级，就可能影响本来处于最高优先级的交互式进程的响应时间。看来，第5条规则还有进一步改进的空间，提升优先级的方法可以更灵活一些</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>先看长进程，可以发现，所谓长进程“饥饿”，是指<b>它有很长时间没有得到执行了</b></p>
</li>
<li>
<p><u>如果我们能够统计其在就绪态没有被执行的等待时间长度，就可以基于这个动态变量来逐步提升其优先级</u></p>
<ul>
<li>比如每过一段时间，查看就绪进程的等待时间（进程在就绪态的等待时间）长度，让其等待时间长度与其优先级成反比，从而能够逐步第动态提升长进程的优先级</li>
</ul>
</li>
<li>
<p>再看优先级低且处于<code>I/O</code>密集型任务的进程，可以发现，它也有很长时间没有得到执行的特点，这可以通过上面的逐步提升优先级的方法获得执行的机会，并在执行<code>I/O</code>操作并处于等待状态，但此时的优先级还不够高</p>
</li>
<li>
<p>但操作系统在<code>I/O</code>操作完成的中断处理过程中，统计其<code>I/O</code>等待时间（进程在阻塞态下的等待时间），<b>该进程的<code>I/O</code>等待时间越长，那么其优先级的提升度就越高，这可以使其尽快到达最高优先级</b></p>
</li>
</ul>
<hr>
<ul>
<li>这样根据就绪等待时间和阻塞等待时间来提升进程的优先级，可以比较好第应对上面的问题。我们可以改进第5条规则：</li>
</ul>
<ol start="5">
<li>定期统计进程在就绪态/阻塞态的等待时间，<b><font color="red">等待时间越长，其优先级的提升度就越高</font></b></li>
</ol>
<ul>
<li><b><font color="red">对于就绪态等待时间对应的优先级提升度一般时小于阻塞态等待时间对应的优先级提升度，从而让调度策略优先调度当前具有I/O密集型任务的进程</font></b></li>
</ul>
<blockquote>
<p>经过我们总结出来的<code>MLFQ</code>调度规则，使得操作系统不需要对进程的运行方式有先验知识，而是通过观测和统计进程的运行特征来给出对应的优先级，使得操作系统能灵活支持各种运行特征的应用在计算机系统中高效执行</p>
</blockquote>
<h4 id="公平份额调度">公平份额调度</h4>
<blockquote>
<p>在大公司的数据中心中有着大量的计算机服务器，给互联网上的人们提供各种各样的服务。在这样的服务器中，有着相对个人计算机而言更加巨大的内存和强大的计算处理能力，给不同用户提供服务的各种进程的数量也越来越多。<b>这个时候，面向用户或进程相对的公平性就是不得不考虑的一个问题，甚至时要优先考虑的性能指标</b>。比如，在提供云主机的数据中心中，用户可能会希望分配20%的处理器时间给<code>Windows</code>虚拟机，80%的处理器时间给<code>Linux</code>系统，如果采用公平份额调度的方式可以更简单高效</p>
</blockquote>
<ul>
<li>从某种程度上看，<code>MLFQ</code>调度策略总提到的优先级就是对公平性的一种划分方式，有些进程优先级高，会更快地得到处理器执行，所分配到的处理器时间也多一些。<u>但<code>MLFQ</code>并不是把公平性放在第一位</u></li>
</ul>
<hr>
<ul>
<li>
<p>我们就可以设计出另外一类调度策略 – 公平份额（$Fair\ Share$，又称为 比例份额，$Proportional\ Share$）调度。其<b>基本思路是基于每个进程的重要性<font color="red">（即优先级）的比例关系，</font>分配给该进程<font color="red">同比例</font>的处理器执行时间</b></p>
</li>
<li>
<p>在1993~1994年，<code>MIT</code>的计算机系博士生$Carl\ A.\ Waldspurger$ 和他的导师$ William\ E.\ Weihl$提出了与众不同的调度策略：彩票调度（$Lottery\ Scheduling$）和步长调度（$Stride\ Scheduling$）。它们都属于公平份额调度策略。彩票调度很有意思，它是从经济学的的彩票行为中吸取营养，模拟了购买彩票和中奖的随机性，给每个进程发彩票，进程优先级越高，所得到的彩票就越多；然后每隔一段时间（如，一个时间片），举行一次彩票抽奖，抽出来的号属于哪个进程，哪个进程就能运行。</p>
<ul>
<li>
<p>例如，计算机系统中有两个进程PA和PB，优先级分别为2和8，这样它们分别拥有2张（编号为0-1）和8张彩票（编号为2-9），按照彩票调度策略，操作系统会分配PA大约20%的处理器时间，而PB会分配到大约80%的处理器时间</p>
</li>
<li>
<p>这个彩票调度的优势有两点</p>
<ul>
<li><b>第一点是可以解决饥饿问题</b>，即使某个低优先级进程获得的彩票比较少，但经过比较长的时间，按照概率，会有获得处理器执行的时间片</li>
<li><b>第二点是调度策略的实现开销小</b>，因为它不像之前的调度策略，还需要记录、统计、排序、查找历史信息（如统计就绪态等待时间等），彩票调度几乎不需要记录任何历史信息，只需生产一个随机数，然后查找该随机数应该属于那个进程即可</li>
</ul>
</li>
</ul>
</li>
<li>
<p>但彩票调度虽然想法新颖，但有一个问题：如何为进程分配彩票？</p>
<ul>
<li>如果创建进程的用户清楚进程的优先级，并给进程分配对应比例的彩票，那么看起来这个问题就解决了</li>
<li>但彩票调度是在运行时的某个时刻产生一个随机值，并看这个随机值属于当前正在运行中的进程集合中的哪一个进程</li>
<li><b>而用户无法预知，未来的这个时刻，他创建的进程与当时的那些进程之间的优先级相对关系，这会导致公平性不一定能得到保证</b></li>
</ul>
</li>
<li>
<p>另外一个问题是，基于概率的操作方法的随机性会带来不确定性，特别是在一个比较短的时间段里面，进程间的优先级比例关系与它们获得的处理器执行时间的比例关系之间有比较大的偏差，只有在执行时间很长的情况下，它们得到的处理器执行时间比例会比较接近优先级比例</p>
</li>
</ul>
<blockquote>
<ul>
<li>
<p>能否用彩票来表示各种计算机资源的份额？</p>
</li>
<li>
<p>彩票调度中的彩票表示了进程<b>所占处理器时间</b>的相对比例，那么能否用彩票来表示进程<b>占用内存或其他资源</b>的相对比例？</p>
</li>
</ul>
</blockquote>
<ul>
<li>为了解决彩票调度策略中的偶然出现不准确的进程执行时间比例的问题。<code>Waldspurger</code>等进一步提出了步长调度（<code>Stride Scheduling</code>）。这是一个确定性的公平配额调度策略
<ul>
<li>其基本思路是：每个进程有一个步长（<code>Stride</code>）属性值，这个值与进程优先级成反比，操作系统会定期记录每个进程的总步长，即行程（<code>pass</code>），并选择拥有最小行程值的进程运行</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>例如，计算机系统中有两个进程PA和PB几乎同时到达，优先级分别为2和8，用一个预设的大整数（如1000）去除以优先级，就可获得对应的步长</li>
<li>这样它们的步长分别是500和125在具体执行时，先选择PA执行，它在执行了一个时间片后，其行程为500；在接下来的4个时间片，将选择执行行程少的PB执行，它在连续执行执行4个时间片后，其形成也达到了500</li>
<li>并这样周而复始地执行下去，直到进程执行结束。，按照步长调度调度策略，操作系统会分配PA大约20%的处理器时间，而PB会分配到大约80%的处理器时间</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>比较一下这两种调度策略，可以看出<b>彩票调度算法只能在一段比较长的时间后，基于概率上实现优先级等比的时间分配，而步长调度算法可以在每个调度周期后做到准确的优先级等比的时间分配</b></li>
<li>但彩票算法的优势是几乎不需要全局信息，这<b>在合理处理新加入的进程时很精炼</b></li>
<li>比如一个新进程开始执行时，按照步长调度策略，其行程值为0，那么该进程将在一段比较长的时间内一直占用处理器执行，这就有点不公平了</li>
<li><b>如果要设置一个合理的进程值，就需要全局地统计每个进程的行程值，这就带来了比较大的执行开销。但彩票调度策略不需要统计每个进程的彩票数，只需用新进程的票数更新全局的总票数即可</b></li>
</ul>
</blockquote>
<h3 id="实时计算机系统的调度">实时计算机系统的调度</h3>
<blockquote>
<p>计算机系统的应用领域非常广泛，如机器人、物联网、军事、工业控制等。在这些领域中，要求计算机系统能够实时响应，如果采用上述调度方式，不能满足这些需求，这对操作系统提出了新的挑战</p>
</blockquote>
<ul>
<li>
<p>这里，我们首先需要理解实时的含义。实时计算机系统通常可以分为硬实时（<code>Hard Real Time</code>）和软实时（<code>Soft Real Time</code>）两类，硬实时是指任务完成时间必须在绝对的截止时间内，如果超过意味着错误和失败，可能导致严重后果。软实时是指任务完成时间尽量在绝对的截止时间内，偶尔超过可以接受</p>
</li>
<li>
<p><b>实时的任务是由一组进程来实现，其中每个进程的行为是可预测和提前确定的。</b>这些进程称为<b>实时进程</b>，它们的<b>执行时间一般较短</b>。<b>支持实时任务的操作系统称为实时操作系统</b></p>
</li>
</ul>
<h4 id="约束条件-3">约束条件</h4>
<ul>
<li>
<p><b>实时计算机系统</b>是一种以确定的时间范围起到主导作用的计算机系统，<b>一旦外设发给计算机一个事件（如时钟中断、网络包到达等），计算机<font color="red">必须在一个确定时间范围内做出响应</font></b></p>
</li>
<li>
<p>实时计算机系统中的事件可以按照响应方式进一步分类为周期性（以规则的时间间隔发生）事件或非周期性（发生时间不可预知）事件。一个系统可能要响应多个周期性事件流。根据每个事件需要处理时间的长短，系统甚至有可能无法处理完所有的事件</p>
</li>
<li>
<p>这样，实时计算机系统的约束条件也随之发生了新的变化：</p>
</li>
</ul>
<ol>
<li>每个进程<b>可不同时间到达</b></li>
<li>每个进程的<b>执行时间不同</b></li>
<li><b>进程的启动时间和执行时间是未知的</b></li>
<li><b>进程在整个执行过程期间会执行I/O操作</b></li>
<li><b>进程在执行过程中会被抢占</b></li>
<li><b>进程的行为是可预测和提前确定的，<font color="red">即进程在独占处理器的情况下，执行时间的上限是可以提前确定的</font></b></li>
<li>触发进程运行的事件需要进程实时响应，即<b><font color="red">进程要在指定的绝对截止时间内完成对各种事件的处理</font></b></li>
</ol>
<ul>
<li>这里主要增加了第6和7点。第6点说明了实时进程的特点，第7点说明了操作系统调度的特点</li>
</ul>
<h4 id="性能指标-3">性能指标</h4>
<ul>
<li>
<p>对于实时计算机系统而言，进程的周转时间快和响应时间低这样的性能指标并不是最主要的，<b><font color="red">进程要在指定的绝对的截止时间内完成是第一要务</font></b></p>
</li>
<li>
<p>这里首先需要理解实时计算机系统的可调度性。如果有$m$个周期事件，事件$i$以周期时间$P_i$ 发生，并需要$C_i$ 时间处理一个事件，那么计算机系统可以处理任务量（也称负载）的条件是：</p>
</li>
</ul>
<p>$$
SUM(\frac{C_i}{P_i}) \le 1
$$</p>
<ul>
<li>
<p><b><font color="red">能满足这个条件的实时计算机系统是可实时调度的</font></b></p>
</li>
<li>
<p>满足这个条件的实时系统称为是可调度的。例如，一个具有两个周期性事件的计算机系统，其事件周期分别是20ms、80ms。如果这些事件分别需要10ms、20ms来进行处理，那么该计算机系统是可实时调度的，因为</p>
</li>
</ul>
<p>$$
\frac {10}{20} + \frac{20}{80} = 0.75 \le 1
$$</p>
<ul>
<li>如果再增加第三个周期事件，其周期是100ms，需要50ms的时间来处理，我们可以看到</li>
</ul>
<p>$$
\frac {10}{20} + \frac{20}{80} + \frac{50}{100} = 1.25 \ge 1
$$</p>
<ul>
<li>这说明该计算机系统是<b>不可实时调度的</b></li>
</ul>
<hr>
<ul>
<li>
<p>实时计算机系统的调度策略/算法可以是静态或动态的</p>
<ul>
<li>
<p><b>静态调度在进程开始运行之前就作出调度决策</b></p>
</li>
<li>
<p><b>动态调度要在运行过程中进行调度决策</b></p>
</li>
<li>
<p><b>只有在预知进程要所完成的工作时间上限以及必须满足的截止时间等全部信息时，静态调度才能工作</b></p>
</li>
<li>
<p><b>而动态调度则不需要这些前提条件</b></p>
</li>
</ul>
</li>
</ul>
<h4 id="速率单调调度">速率单调调度</h4>
<ul>
<li>
<p>速率单调调度（$Rate\ Monotonic\ Scheduling，RMS$）算法是由刘炯朗（$Chung\ Laung\ Liu$）教授和$James\ W.\ Layland$在1973年提出的</p>
</li>
<li>
<p>该算法的基本思想是根据进程响应事件的执行周期的长短来设定进程的优先级，即<b><font color="red">执行周期越短的进程优先级越高</font></b></p>
</li>
<li>
<p>操作系统在调度过程中，<b><font color="red">选择优先级最高的就绪进程执行，高优先级的进程会抢占低优先级的进程</font></b></p>
</li>
</ul>
<hr>
<ul>
<li>该调度算法有如下的前提假设</li>
</ul>
<ol>
<li>每个周期性进程<b>必须在其执行周期内完成</b>，以完成对周期性事件的响应</li>
<li><b><font color="red">进程执行不依赖于任何其他进程</font></b></li>
<li><b><font color="red">进程的优先级在执行前就被确定，执行期间不变</font></b></li>
<li><b>进程可被抢占</b></li>
</ol>
<ul>
<li>
<p>可以看出，<code>RMS</code>调度算法在每个进程执行前就分配给进程一个固定的优先级，<b><font color="red">优先级等比于进程所响应的事件发生的周期频率</font></b></p>
</li>
<li>
<p>即<b>进程优先级与进程执行的速率（单位时间内运行进程的次数）成线性关系</b>，这正是为什么将其称为速率单调的原因</p>
</li>
<li>
<p><b><font color="red">例如，必须每20ms运行一次（每秒要执行50次）的进程的优先级为50，必须每50ms运行一次（每秒20次）的进程的优先级为20</font></b></p>
</li>
<li>
<p><code>Liu</code>和<code>Layland</code>证明了在<b><font color="orange">静态实时调度算法中，RMS是最优的</font></b></p>
</li>
<li>
<p><b>任务执行中间既不接收新的进程，也不进行优先级的调整或进行CPU抢占</b></p>
</li>
<li>
<p><b>因此这种算法的优点是系统消耗小，缺点是不灵活。一旦该系统的任务决定了，就不能再接收新的任务</b></p>
</li>
<li>
<p>采用抢占的、静态优先级的策略，调度周期性任务</p>
</li>
</ul>
<h4 id="edf调度">EDF调度</h4>
<ul>
<li>
<p>另一个典型的实时调度算法是最早截止时间优先（$Earliest\ Deadline\ First，EDF$）算法，其基本思想是根据进程的截止时间来确定任务的优先级</p>
<ul>
<li>
<p><b>截止时间越早，其优先级就越高</b></p>
</li>
<li>
<p><b>如果进程的截止期相同，则处理时间短的进程优先级高</b></p>
</li>
<li>
<p>操作系统在调度过程中，选择优先级最高的就绪进程执行，<b>高优先级的进程会抢占低优先级的进程</b></p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>该调度算法有如下的前提假设</li>
</ul>
<ol>
<li>进程可以是<b>周期性或非周期性的</b></li>
<li><b>进程执行不依赖于任何其他进程</b></li>
<li>进程的优先级在执行过程中会基于进程的截止期<b>动态变化</b></li>
<li>进程可被抢占</li>
</ol>
<hr>
<ul>
<li>
<p><code>EDF</code>调度算法按照进程的截止时间的早晚来分配优先级，<b>截止时间越近的进程优先级越高</b></p>
</li>
<li>
<p><b>操作系统在进行进程调度时，会根据各个进程的截止时间重新计算进程优先级</b>，并选择优先级最高的进程执行，即操作系统总是优先运行最紧迫的进程</p>
</li>
<li>
<p>在不同时刻，两个周期性进程的截止时间的早晚关系可能会变化，所以<b><code>EDF</code>调度算法是一种<font color="red">动态优先级调度算法</font></b></p>
</li>
</ul>
<h4 id="实时调度实例">实时调度实例</h4>
<blockquote>
<ul>
<li>系统中有三个周期性进程PA、PB和PC，它们在一开始就处于就绪状态，它们的执行周期分别是20ms、50ms和100ms</li>
<li>它们响应事件的处理时间分别为5ms、20ms和25ms</li>
</ul>
</blockquote>
<ul>
<li>
<p>操作系统需要考虑如何调度PA、PB和PC，以确保它们在周期性的截止时间（最终时限，即当前执行周期的绝对时间）到来前都能完成各自的任务</p>
</li>
<li>
<p>计算可调度性</p>
</li>
</ul>
<p>$$
\frac{5}{20} + \frac{20}{50} + \frac{25}{100} = 0.25 + 0.4 + 0.25 = 0.9 \le 1
$$</p>
<ul>
<li>可以看到处理器在理论上有10%的空闲时间，不会被超额执行，所以找到一个合理的调度应该是可能的</li>
</ul>
<hr>
<ul>
<li>
<p><code>RMS</code>调度算法</p>
</li>
<li>
<p>由于进程的优先级只与进程的执行周期成线性关系，所以三个进程的优先级分别为50、20和10</p>
</li>
<li>
<p>调度执行过程</p>
<ul>
<li>
<p>t=0：在t=0时刻，优先级最高的PA先执行（PA的第一个周期开始），并在5ms时完成</p>
</li>
<li>
<p>t=5：在PA完成后，PB接着执行</p>
</li>
<li>
<p>t=20：在执行到20ms时（PA的第二个周期开始），PA抢占PB并再次执行，直到25m时结束</p>
</li>
<li>
<p>t=25：然后被打断的PB继续执行，直到30ms时结束</p>
</li>
<li>
<p>t=30：接着PC开始执行（PC的第一个周期开始）</p>
</li>
<li>
<p>t=40：在执行到40ms时（PA的第三个周期开始），PA抢占PC并再次执行，直到45ms结束</p>
</li>
<li>
<p>t=45：然后被打断的PC继续执行</p>
</li>
<li>
<p>t=50：然后在50ms时（PB的第二个周期），PB抢占PC并再次执行</p>
</li>
<li>
<p>t=60：然后在60ms时（PA的第四个周期开始），PA抢占PB并再次执行，直到65ms时结束</p>
</li>
<li>
<p>t=65：接着PB继续执行，并在80ms时结束</p>
</li>
<li>
<p>t=80：接着PA继续抢占PC（PA的第五个周期开始），在85ms时结束</p>
</li>
<li>
<p>t=85：然后PC再次执行，在90ms时结束</p>
</li>
</ul>
</li>
<li>
<p>这样，在100ms的时间内，PA执行了5个周期任务，PB执行了2个周期任务，PC执行了1个周期任务。在下一个100ms的时间内，上述过程再次重复</p>
</li>
</ul>
<hr>
<ul>
<li>对于<code>EDF</code>调度算法而言，具有如下的调度执行过程
<ul>
<li>t=0：首先选择截止时间最短的PA，所以它先执行（PA的第一个周期开始），并在5ms时完成</li>
<li>t=5：在PA完成后，截止时间第二的PB接着执行</li>
<li>t=20：在执行到20ms时（PA的第二个周期开始），PA截止时间40ms小于PB截止时间50ms，所以抢占PB并再次执行，直到25m时结束</li>
<li>t=25：然后被打断的PB继续执行，直到30ms时结束</li>
<li>t=30：接着PC开始执行（PC的第一个周期开始）</li>
<li>t=40：在执行到40ms时（PA的第三个周期开始），PA截止时间40ms小于PC截止时间100ms，PA抢占PC并再次执行，直到45ms结束</li>
<li>t=45：然后被打断的PC继续执行</li>
<li>t=50：然后在50ms时（PB的第二个周期），PB截止时间100ms小于等于PC截止时间100ms，PB抢占PC并再次执行</li>
<li>t=60：然后在60ms时（PA的第四个周期开始），PA截止时间80ms小于PB截止时间100ms，PA抢占PB并再次执行，直到65ms时结束</li>
<li>t=65：接着PB继续执行，并在80ms时结束</li>
<li>t=80：接着PA截止时间100ms小于等于PC截止时间100ms，PA继续抢占PC（PA的第五个周期开始），在85ms时结束</li>
<li>t=85：然后PC再次执行，在90ms时结束</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>上述例子的一个有趣的现象是，虽然RMS调度算法与EDF的调度策略不同，但它们的调度过程是一样的。注意，这不是普遍现象，也有一些例子会出现二者调度过程不同的情况，甚至RMS调度无法满足进程的时限要求，而EDF能满足进程的时限要求</li>
</ul>
<h3 id="多处理器计算机系统的调度">多处理器计算机系统的调度</h3>
<blockquote>
<p>在2000年前，多处理器计算机的典型代表是少见的高端服务器和超级计算机，但到了2000年后，单靠提高处理器的频率越来越困难，而芯片的集成度还在进一步提升，所以在一个芯片上集成多个处理器核成为一种自然的选择。到目前位置，在个人计算机、以手机为代表的移动终端上，多核处理器（<code>Multi Core</code>）已成为一种普遍的现象，多个处理器核能够并行执行，且可以共享<code>Cache</code>和内存</p>
</blockquote>
<h4 id="约束条件-4">约束条件</h4>
<ul>
<li>
<p>为了理解多处理器调度需要解决的新问题，我们需要理解单处理器计算机与多处理器计算机的基本区别</p>
<ul>
<li>
<p>对于多处理器计算机而言，每个处理器核心会有共享的<code>Cache</code>，也会有它们私有的<code>Cache</code>，而各自的私有<code>Cache</code>中的数据有硬件来保证数据的<code>Cache</code>一致性（也称缓存一致性）</p>
</li>
<li>
<p>简单地说，位于不同私有<code>Cache</code>中的有效数据（是某一内存单元的值）要保证是相同的，这样处理器才能取得正确的数据，保证计算的正确性，这就是<code>Cache</code>一致性的基本含义</p>
</li>
<li>
<p>保证一致性的控制逻辑是由硬件来完成的，对操作系统和应用程序而言，是透明的</p>
</li>
</ul>
</li>
<li>
<p>在共享<code>Cache</code>和内存层面，由于多个处理器可以并行访问位于共享<code>Cache</code>和内存中的共享数据，所以需要有后面章节讲解的同步互斥机制来保证程序执行的正确性</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>基本思路</p>
</li>
<li>
<p>以给创建的新子进程设置进程号为例</p>
<ul>
<li>
<p>在单处理器情况下，操作系统用一个整型全局变量保存当前可用进程号，初始值为 0 。给新进程设置新进程号的过程很简单：</p>
<ul>
<li>新进程号= 当前可用进程号</li>
<li>当前可用进程号 = 当前可用进程号 + 1</li>
</ul>
</li>
<li>
<p>在多处理器情况下，假设两个位于不同处理器上的进程都发起了创建子进程的系统调用请求，操作系统可以并行地执行创建两个子进程，而且需要给子进程设置一个新的进程号。如果没有一些同步互斥的手段，那么可能出现如下的情况:</p>
</li>
<li>
<p>$t_o:ID_{PA} = CurlD\ and \ ID_{PB} = CurlD\newline t_1: CurlD = CurlD+1\ and\ CurlD= CurlD + 1$</p>
</li>
<li>
<p>这样两个新进程的进程号就是一样的了，这就会在后续的执行中出现各种问题。为了正确处理共享变量，就需要用类似互斥锁（<code>Mutex</code>）的方法，让在不同处理器上执行的控制流互斥地访问共享变量，这样就能解决正确性问题</p>
</li>
<li>
<p>所以，对于多处理器下运行的进程而言，新增加了如下的假设条件</p>
<ul>
<li>运行在不同处理器上的多个进程可用并行执行，<b><font color="red">但对于共享资源/变量的处理，需要有同步互斥等机制的正确性保证</font></b></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="性能指标-4">性能指标</h4>
<ul>
<li>这里的性能指标与之前描述的基于单处理器的通用计算机系统一样，主要是周转时间、响应时间和公平性</li>
</ul>
<h4 id="单队列调度">单队列调度</h4>
<ul>
<li>
<p>对于多处理器系统而言，两个进程数量多于处理器个数，我们希望每个处理器都执行进程</p>
</li>
<li>
<p>这一点是之前单处理器调度不会碰到的情况。单处理器的调度只需不断地解答：“接下来应该运行哪个进程？”，而在多处理机中，<b>调度还需解答一个问题：<font color="red">“要运行的进程在哪一个CPU上运行？”</font></b>。这就增加了调度的复杂性</p>
</li>
<li>
<p>如果我们直接使用单处理器调度的数据结构，其中的重点就是放置就绪进程的就绪队列或其他与调度相关的数据结构。<b><font color="red">那么这些数据结构就是需要互斥访问的共享数据</font></b></p>
</li>
<li>
<p>为简化分析过程，我们以轮转调度采用的单就绪队列为例，<b><font color="red">面向多处理器的单队列调度的策略逻辑没有改变，只是在读写/修改就绪队列等共享数据时，需要用同步互斥的一些操作保护起来，确保对这些共享数据访问的正确性</font></b></p>
</li>
<li>
<p>采用单队列调度的一个好处是，<b>它支持自动负载平衡，因为决不会出现一个CPU空闲而其他CPU过载的情况</b></p>
</li>
</ul>
<h5 id="处理器亲和性">处理器亲和性</h5>
<ul>
<li>另外，还需考虑的一个性能问题是调度中的处理器亲和性（也称缓存亲和性、调度亲和性）问题</li>
<li>其基本思想是，<b>尽量使一个进程在它前一次运行过的同一个CPU上运行</b></li>
<li>其原因是，现代的处理器都有私有Cache，基于局部性的考虑，如果操作系统在下次调度时要给该进程选择处理器，会优先选择该进程上次执行所在的处理器，从而使得Cache中缓存的数据可重用，提高了进程执行的局部性</li>
</ul>
<h4 id="多队列调度">多队列调度</h4>
<ul>
<li>
<p>如果处理器的个数较多，频繁对共享数据执行同步互斥操作的开销会很大</p>
</li>
<li>
<p>为此，能想到的一个方法是，还是保持单处理器调度策略的基本逻辑，但把就绪队列或和他与调度相关的数据结构按处理器个数<b>复制</b>多份，这样操作系统在绝大多数情况下，只需访问本处理器绑定的调度相关数据结构，就可用完成调度操作</p>
</li>
<li>
<p>这样在一个调度控制框架下就包含<b>多个调度队列</b></p>
</li>
<li>
<p>当要把一个新进程或被唤醒的进程放入就绪队列时，<b>操作系统可根据一些启发式方法（如随机选择某个处理器上的就绪队列或选择就绪进程数量最少的就绪队列）来放置进程到某个就绪队列</b></p>
</li>
<li>
<p>操作系统通过访问本处理器上的调度相关数据结构，就可以选择出要执行的进程，<b>这样就避免了开销大的同步互斥操作</b></p>
</li>
</ul>
<hr>
<ul>
<li>多队列调度比单队列调度具有更好的可扩展性，多队列的数量会随着处理器的增加而增加，也具有良好的缓存亲和度。当多队列调度也有它自己的问题：负载均衡（<code>Load Balance</code>）问题</li>
</ul>
<blockquote>
<ul>
<li>考虑如下的例子，在一个有4个进程，两个处理器的计算机系统中，有两个就绪队列，PA和PB在就绪队列Q1，PC和PD在就绪队列Q2</li>
<li>如果采用基于轮转调度的多队列调度，那么两个处理器可以均匀地让4给进程分时使用处理器。这是一种理想的情况</li>
<li><b>如果进程PB结束，而调度不进行进一步的干预，那么就会出现PA独占处理器1</b>，PC和PD分时共享处理器2</li>
<li><b>如果PA也结束了，而调度还不进行进一步的干预，那么（<code>Load Imbalance</code>）就会出现</b>——处理器1空闲，而处理器2繁忙的情况，这就是典型的负载不均衡（<code>Load Imbalance</code>）的现象了。这就没有达到轮转调度的意图</li>
</ul>
</blockquote>
<ul>
<li>
<p>所以<b>多队列调度需要解决负载不均衡</b>的问题</p>
<ul>
<li>
<p>一个简单的思路就是<b>允许进程根据处理器的负载情况从一个处理器迁移到另外一个处理器上</b></p>
<ul>
<li>对于上面的例子，如果是处理器1空闲，处理器2繁忙的而情况，操作系统只需把处理器2上的进程分一半，迁移到处理器1即可</li>
</ul>
</li>
<li>
<p>当如果是处理器1上运行了PA，处理器2上运行了PC和PD，这就需要统计每个进程的执行时间，根据进程的执行时间，让进程在两个处理器间不停的迁移，达到在一定时间段内，每个进程所占用的处理器时间大致相同，这就达到了轮转调度的意图，并达到了负载均衡</p>
</li>
</ul>
</li>
<li>
<p>比如下面的调度方式</p>
</li>
</ul>
<p>$$
\begin{align}
&amp;处理器1：A\rightarrow A\rightarrow C \rightarrow A \rightarrow A \rightarrow C \rightarrow \dots \newline
&amp;处理器2：C\rightarrow D\rightarrow D\rightarrow C\rightarrow D \rightarrow D \rightarrow \dots \newline
&amp;或者是：\newline
&amp;处理器1：A\rightarrow C\rightarrow A \rightarrow A \rightarrow C \rightarrow A \rightarrow \dots \newline
&amp;处理器2：C\rightarrow D\rightarrow D\rightarrow C\rightarrow D \rightarrow D \rightarrow \dots \newline
\end{align}
$$</p>
<ul>
<li>
<p>当然，这个例子是一种简单的理想情况，实际的多处理器计算机系统中运行的进程行为会很复杂，除了并行执行，还有同步互斥执行、各种/O操作等，这些都会对调度策略产生影响</p>
</li>
<li>
<p><u>如果需要了解实际的操作系统调度策略和算法，建议阅读关于<code>UNIX</code>、<code>Linux</code>、<code>Windows</code>和各种<code>RTOS</code>等操作系统内核的书籍和文章，其中有关于这些操作系统的调度策略和算法的深入讲解</u></p>
</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Completed<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">2023-4-16 Finished at 23:43 PM</div>
        </div>
    </div>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter5 并发控制：互斥</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter5/</link>
    <pubDate>Wed, 08 Mar 2023 17:23:11 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter5/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-08 17:30</p>
<p>继续看，并发真™️👨</p>
</div>
        </div>
    </div>
<h2 id="overview">Overview</h2>
<p>复习</p>
<ul>
<li>状态机、状态机、状态机</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何在多处理器上实现线程互斥？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>自旋锁的实现</li>
<li>互斥锁的实现</li>
</ul>
<h2 id="共享内存上的互斥">共享内存上的互斥</h2>
<h3 id="回顾并发编程">回顾：并发编程</h3>
<p>理解并发的工具</p>
<ul>
<li>线程 = 人 (大脑能完成局部存储和计算)</li>
<li>共享内存 = 物理世界 (物理世界天生并行)</li>
<li>一切都是状态机</li>
</ul>
<h3 id="回顾互斥算法">回顾：互斥算法</h3>
<p>互斥 (mutual exclusion)，“互相排斥”</p>
<ul>
<li>实现 <code>lock_t</code> 数据结构和 <code>lock/unlock</code> API:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">lock_t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">(</span><span class="n">lock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>一把 “排他性” 的锁——对于锁对象 <code>lk</code></p>
<ul>
<li>如果某个线程持有锁，则其他线程的 <code>lock</code> 不能返回</li>
</ul>
<h3 id="在共享内存上实现互斥">在共享内存上实现互斥</h3>
<p>失败的尝试</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/mutex-bad.py" target="_blank" rel="noopener noreffer">mutex-bad.py</a></li>
</ul>
<hr>
<p>(部分) 成功的尝试</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a></li>
</ul>
<hr>
<p>实现互斥的根本困难：不能同时读/写共享内存</p>
<ul>
<li>load (环顾四周) 的时候不能写，只能 “看一眼就把眼睛闭上”
<ul>
<li>看到的东西马上就过时了</li>
</ul>
</li>
<li>store (改变物理世界状态) 的时候不能读，只能 “闭着眼睛动手”
<ul>
<li>也不知道把什么改成了什么</li>
</ul>
</li>
<li>这是<del>简单、粗暴 (稳定)、有效</del>的《操作系统》课</li>
</ul>
<h2 id="自旋锁-spin-lock">自旋锁 (Spin Lock)</h2>
<h3 id="解决问题的两种方法">解决问题的两种方法</h3>
<blockquote>
<p>提出算法、解决问题 (Dekker/Peterson/&hellip;&rsquo;s Protocols)</p>
</blockquote>
<p>或者……</p>
<blockquote>
<p>改变假设 (软件不够，硬件来凑$\Longrightarrow$ x86架构的风格，软件指令做不好直接写一个指令集让硬件这么做hhh)</p>
</blockquote>
<hr>
<p>假设硬件能为我们提供一条 “瞬间完成” 的读 + 写指令</p>
<ul>
<li>请所有人闭上眼睛，看一眼 (load)，然后贴上标签 (store)
<ul>
<li>如果多人同时请求，硬件选出一个 “胜者”</li>
<li>“败者” 要等 “胜者” 完成后才能继续执行</li>
</ul>
</li>
</ul>
<h3 id="x86-原子操作lock-指令前缀">x86 原子操作：<code>LOCK</code> 指令前缀</h3>
<p>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/sum-atomic.c" target="_blank" rel="noopener noreffer"><code>sum-atomic.c</code></a></p>
<ul>
<li><code>sum = 200000000</code></li>
</ul>
<hr>
<p>Atomic exchange (load + store)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">xchg</span><span class="p">(</span><span class="k">volatile</span> <span class="kt">int</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">newval</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span> <span class="p">(</span><span class="s">&#34;lock xchg %0, %1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">:</span> <span class="s">&#34;+m&#34;</span><span class="p">(</span><span class="o">*</span><span class="n">addr</span><span class="p">),</span> <span class="s">&#34;=a&#34;</span><span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;1&#34;</span><span class="p">(</span><span class="n">newval</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><b>重点就是asm内联汇编那句，这里是“一气呵成”的</b></p>
</li>
<li>
<p>更多的原子指令：<a href="https://en.cppreference.com/w/cpp/header/stdatomic.h" target="_blank" rel="noopener noreffer">stdatomic.h</a> (C11)</p>
</li>
</ul>
<h3 id="用-xchg-实现互斥也就是自旋锁的本质实现过程">用 <code>xchg</code> 实现互斥（也就是自旋锁的本质实现过程）</h3>
<ul>
<li>xchg在之前的<a href="https://jungle430.github.io/posts/operating-system/support2" target="_blank" rel="noopener noreffer">文章</a>中有提到过</li>
</ul>
<p>如何协调宿舍若干位同学上厕所问题？</p>
<ul>
<li>在厕所门口放一个桌子 (共享变量)
<ul>
<li>初始时，桌上是 🔑</li>
</ul>
</li>
</ul>
<hr>
<p>实现互斥的协议</p>
<ul>
<li>想上厕所的同学 (一条 xchg 指令)
<ul>
<li>天黑请闭眼</li>
<li>看一眼桌子上有什么 (🔑 或 🔞)</li>
<li>把 🔞 放到桌上 (覆盖之前有的任何东西)</li>
<li>天亮请睁眼；看到 🔑 才可以进厕所哦</li>
</ul>
</li>
<li>出厕所的同学
<ul>
<li>把 🔑 放到桌上</li>
</ul>
</li>
</ul>
<h3 id="实现互斥自旋锁">实现互斥：自旋锁</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">table</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">got</span> <span class="o">=</span> <span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">table</span><span class="p">,</span> <span class="n">NOPE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">got</span> <span class="o">==</span> <span class="n">NOPE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">got</span> <span class="o">==</span> <span class="n">YES</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">table</span><span class="p">,</span> <span class="n">YES</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">lock</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span> <span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">unlock</span><span class="p">()</span> <span class="p">{</span> <span class="n">xchg</span><span class="p">(</span><span class="o">&amp;</span><span class="n">locked</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>重要的还是xchg这个东西，保证那一步是原子性的，就没有其他事情了</li>
</ul>
<h3 id="实现互斥自旋锁-contd">实现互斥：自旋锁 (cont&rsquo;d)</h3>
<p>并发编程：千万小心</p>
<ul>
<li>做详尽的测试 (在此省略，你们做 Labs 就知道了)</li>
<li>尽可能地证明 (<a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py" target="_blank" rel="noopener noreffer">model-checker.py</a> 和 <a href="https://jyywiki.cn/pages/OS/2022/demos/spinlock.py" target="_blank" rel="noopener noreffer">spinlock.py</a>)</li>
</ul>
<hr>
<p>原子指令的模型</p>
<ul>
<li>保证之前的 store 都写入内存</li>
<li>保证 load/store 不与原子指令乱序</li>
</ul>
<h3 id="原子指令的诞生bus-lock-80486">原子指令的诞生：Bus Lock (80486)</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-09 10:00</p>
<p>早起开完SB大会，✋接着看</p>
<p>咖啡机里面的咖啡真提神，估计下午毛概得狠狠睡一把</p>
</div>
        </div>
    </div>
<ul>
<li>486 (20-50MHz) 就支持 <code>dual-socket</code> 了</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter5-1.jpg" title="/img/Operating System/chapter5-1.jpg" data-thumbnail="/img/Operating System/chapter5-1.jpg" data-sub-html="<h2>80486</h2>">
        
    </a><figcaption class="image-caption">80486</figcaption>
    </figure>
<div class="mermaid" id="id-1"></div>
<ul>
<li>
<p>如果CPU1需要执行<code>add x, 1</code>，那么需要分成3步</p>
<ul>
<li>从memory里面load</li>
<li>再把这个值add 1之后先放入一个内部的寄存器里</li>
<li>再store把m的值写回内存里</li>
</ul>
</li>
<li>
<p>为什么486时代会诞生<b>LOCK</b>这样的指令呢？</p>
<ul>
<li>因为涉及了两个CPU面对同一个memory的状况，所以需要对memory进行lock的操作</li>
</ul>
</li>
<li>
<p>设计方法</p>
<ul>
<li>x86的指令集有指令的前缀（比如<code>rep</code>），我们让<code>lock</code>也变成一个<b>指令前缀</b></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">lock + |指令|
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><u>当CPU开始读指令的时候，它会先读到lock指令，这个时候就上锁（也即是对应的CPU拿到了总线的锁）</u></li>
<li><u>等到CPU拿到总线的锁之后，它会再执行后面的部分</u></li>
<li><u>把有关指令执行完成之后再把锁释放掉</u></li>
</ul>
<h4 id="负担">负担</h4>
<ul>
<li><b>今天的CPU与memory之间都有各自的cache，而且cache已经和CPU集成在一个元件上面了，而且是多级cache</b></li>
<li><b>486时代仅仅只有外面的一块cache（而且这块cache在主板上），所以说只要CPU拿到了总线🔒的控制权，就把自己和外面的一切隔离开了</b></li>
</ul>
<div class="mermaid" id="id-2"></div>
<ul>
<li>
<p><b>多级cache会使得lock变得很麻烦</b></p>
</li>
<li>
<p>例子：一个数据在两个CPU的cache里面都有副本</p>
</li>
</ul>
<div class="mermaid" id="id-3"></div>
<ul>
<li><b>这个时候如果CPU1要lock访问m的话，就要将cache21里面的m副本“踢掉”</b> $\Longrightarrow$ 也就是今天inter一个很大的历史包袱：缓存的一致性 $\Longrightarrow$ 解决方案：将所有的cache用总线连接起来</li>
</ul>
<div class="mermaid" id="id-4"></div>
<ul>
<li>一旦其中有一个数据需要被lock，那么总线需要遍历一遍所有CPU的cache，如果发现了该数据的副本，就要将该数据从其他CPU的cache里面“踢掉”，<b>这是很浪费时间的</b></li>
</ul>
<h3 id="lock-指令的现代实现">Lock 指令的现代实现</h3>
<p>在 L1 cache 层保持一致性 (ring/mesh bus)</p>
<ul>
<li>相当于每个 cache line 有分别的锁</li>
<li>store(x) 进入 L1 缓存即保证对其他处理器可见
<ul>
<li>但要小心 store buffer 和乱序执行</li>
</ul>
</li>
</ul>
<hr>
<p>L1 cache line 根据状态进行协调</p>
<ul>
<li>M (Modified), 脏值</li>
<li>E (Exclusive), 独占访问</li>
<li>S (Shared), 只读共享</li>
<li>I (Invalid), 不拥有 cache line</li>
</ul>
<h3 id="risc-v-另一种原子操作的设计">RISC-V: 另一种原子操作的设计</h3>
<p>考虑常见的原子操作：</p>
<ul>
<li>atomic test-and-set
<ul>
<li><code>reg = load(x); if (reg == XX) { store(x, YY); }</code></li>
</ul>
</li>
<li>lock xchg
<ul>
<li><code>reg = load(x); store(x, XX);</code></li>
</ul>
</li>
<li>lock add
<ul>
<li><code>t = load(x); t++; store(x, t);</code></li>
</ul>
</li>
</ul>
<hr>
<p><b>它们的本质都是</b></p>
<ol>
<li>load</li>
<li>exec (处理器本地寄存器的运算)</li>
<li>store</li>
</ol>
<h3 id="load-reservedstore-conditional-lrsc">Load-Reserved/Store-Conditional (LR/SC)</h3>
<ul>
<li>LR: 在内存上标记 reserved (盯上你了)，中断、其他处理器写入都会导致标记消除
<ul>
<li><b>我先读，读完之后在这个物品上面做一个标记</b></li>
<li><b>标记一直在物品上，同时在做本地的计算</b></li>
<li><b>本地计算算完了，该写了</b></li>
<li><b>写的时候要先检测标记，只有标记还在的时候才可以写，否则返回fail，只能再次尝试重新上锁写入</b></li>
</ul>
</li>
<li><u>本地内存的计算不重要，重要的是<b>共享内存的计算</b></u></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">lr.w rd, (rs1)
</span></span><span class="line"><span class="cl">  rd = M[rs1]
</span></span><span class="line"><span class="cl">  reserve M[rs1]
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<ul>
<li>SC: 如果 “盯上” 未被解除，则写入</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sc.w rd, rs2, (rs1)
</span></span><span class="line"><span class="cl">  if still reserved:
</span></span><span class="line"><span class="cl">    M[rs1] = rs2
</span></span><span class="line"><span class="cl">    rd = 0
</span></span><span class="line"><span class="cl">  else:
</span></span><span class="line"><span class="cl">    rd = nonzero
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="compare-and-swap-的-lrsc-实现">Compare-and-Swap 的 LR/SC 实现</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">cas</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmp_val</span><span class="p">,</span> <span class="kt">int</span> <span class="n">new_val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">old_val</span> <span class="o">=</span> <span class="o">*</span><span class="n">addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">old_val</span> <span class="o">==</span> <span class="n">cmp_val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">addr</span> <span class="o">=</span> <span class="n">new_val</span><span class="p">;</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cas:
</span></span><span class="line"><span class="cl">  lr.w  t0, (a0)       # Load original value.
</span></span><span class="line"><span class="cl">  bne   t0, a1, fail   # Doesn’t match, so fail.
</span></span><span class="line"><span class="cl">  sc.w  t0, a2, (a0)   # Try to update.
</span></span><span class="line"><span class="cl">  bnez  t0, cas        # Retry if store-conditional failed.
</span></span><span class="line"><span class="cl">  li a0, 0             # Set return to success.
</span></span><span class="line"><span class="cl">  jr ra                # Return.
</span></span><span class="line"><span class="cl">fail:
</span></span><span class="line"><span class="cl">  li a0, 1             # Set return to failure.
</span></span><span class="line"><span class="cl">  jr ra                # Return
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>lr，sc还可以检测🔒的拥堵程度</li>
</ul>
<h4 id="lrsc-的硬件实现">LR/SC 的硬件实现</h4>
<ul>
<li>
<p>BOOM (Berkeley Out-of-Order Processor)</p>
</li>
<li>
<p><a href="https://github.com/riscv-boom/riscv-boom" target="_blank" rel="noopener noreffer">riscv-boom</a></p>
</li>
<li>
<p><a href="https://github.com/riscv-boom/riscv-boom/blob/master/src/main/scala/lsu/dcache.scala#L655" target="_blank" rel="noopener noreffer">lsu/dcache.scala</a></p>
</li>
<li>
<p>留意s2_sc_fail的条件</p>
<ul>
<li>s2 是流水线 Stage 2</li>
</ul>
</li>
<li>
<p>(yzh 扒出的代码)</p>
</li>
</ul>
<h2 id="互斥锁-mutex-lock">互斥锁 (Mutex Lock)</h2>
<h3 id="自旋锁的缺陷">自旋锁的缺陷</h3>
<ul>
<li>
<p>性能问题 (0)</p>
<ul>
<li>自旋 (共享变量) 会触发<b>处理器间的缓存同步，延迟增加（总线遍历cache踢副本）</b></li>
</ul>
</li>
<li>
<p>性能问题 (1)</p>
<ul>
<li>
<p>除了进入临界区的线程，其他处理器上的线程都在空转<b>（看自旋锁的实现代码，没有拿到🔒的线程在空转死循环）</b></p>
<ul>
<li>会造成多CPU机器利用率过低的问题（就有🔒的在工作）</li>
</ul>
</li>
<li>
<p><b>争抢锁的处理器越多，利用率越低</b></p>
</li>
</ul>
</li>
<li>
<p>性能问题 (2)</p>
<ul>
<li>获得自旋锁的线程<b>可能被操作系统切换出去（出现在单CPU时间片轮转的条件下，轮转时间片导致拿🔒的线程休眠，相当于你拿着🔒回宿舍睡觉，全教室的人只能等着你 $\Longrightarrow$ 还在死循环里面空转）</b>
<ul>
<li>操作系统不 “感知” 线程在做什么</li>
<li>(但为什么不能呢？) $\Longrightarrow$ 课后思考</li>
</ul>
</li>
</ul>
</li>
<li>
<p><b>实现 100% 的资源浪费</b></p>
</li>
</ul>
<div class="mermaid" id="id-5"></div>
<h3 id="scalability-性能的新维度">Scalability: 性能的新维度</h3>
<blockquote>
<p><u>同一份计算任务，时间 (CPU cycles) 和空间 (mapped memory) 会随处理器数量的增长而变化</u>。</p>
<p><b>注意和数据结构里面的计算数据量n区别，这里面衡量的标准是依据处理器的数量而定的</b></p>
</blockquote>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/sum-scalability.c" target="_blank" rel="noopener noreffer">sum-scalability.c</a>，<a href="https://jyywiki.cn/pages/OS/2022/demos/stat.py" target="_blank" rel="noopener noreffer">stat.py</a></li>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/thread-sync.h" target="_blank" rel="noopener noreffer">thread-sync.h</a></li>
<li>严谨的统计很难
<ul>
<li>CPU 动态功耗（散热跟不上只能做一峰⌚真👨（悲 ）</li>
<li>系统中的其他进程</li>
<li>……</li>
</ul>
</li>
<li><a href="https://www.cse.unsw.edu.au/~gernot/benchmarking-crimes.html" target="_blank" rel="noopener noreffer">Benchmarking crimes</a></li>
</ul>
<p>sum-scalability.c，里面用的就是<b>自旋锁</b>，在自旋锁的保护下执行sum++</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread-sync.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 10000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">spinlock_t</span> <span class="n">lock</span> <span class="o">=</span> <span class="n">SPIN_INIT</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">n</span><span class="p">,</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">spin_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">spin_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lock</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">nthread</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">  <span class="n">n</span> <span class="o">=</span> <span class="n">N</span> <span class="o">/</span> <span class="n">nthread</span><span class="p">;</span> <span class="c1">//nthread是线程数量，n就是平摊下来每个线程要执行的sum++（也就是🔒）的数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nthread</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">sum</span> <span class="o">==</span> <span class="n">n</span> <span class="o">*</span> <span class="n">nthread</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>自旋锁的实现(来自<code>thread-sync.h</code>)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">spin_lock</span><span class="p">(</span><span class="n">spinlock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">intptr_t</span> <span class="n">value</span> <span class="o">=</span> <span class="n">atomic_xchg</span><span class="p">(</span><span class="n">lk</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">spin_unlock</span><span class="p">(</span><span class="n">spinlock_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_xchg</span><span class="p">(</span><span class="n">lk</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-09 15:20</p>
<p>绷不住直接😪了，睡醒继续</p>
</div>
        </div>
    </div>
<ul>
<li>运行</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc sum-scalability.c -O2 -lpthread
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:25:37 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.043s
</span></span><span class="line"><span class="cl">user    0m0.016s
</span></span><span class="line"><span class="cl">sys     0m0.021s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:25:40 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.229s
</span></span><span class="line"><span class="cl">user    0m0.337s
</span></span><span class="line"><span class="cl">sys     0m0.071s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:25:44 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.337s
</span></span><span class="line"><span class="cl">user    0m0.393s
</span></span><span class="line"><span class="cl">sys     0m0.166s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:26:21 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m1.316s
</span></span><span class="line"><span class="cl">user    0m2.176s
</span></span><span class="line"><span class="cl">sys     0m0.288s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 15:26:35 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m1.230s
</span></span><span class="line"><span class="cl">user    0m2.040s
</span></span><span class="line"><span class="cl">sys     0m0.255s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>现象：<b>同样的工作量，线程越多，效率越低</b></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter5-2.jpg" title="/img/Operating System/chapter5-2.jpg" data-thumbnail="/img/Operating System/chapter5-2.jpg" data-sub-html="<h2>图像</h2>">
        
    </a><figcaption class="image-caption">图像</figcaption>
    </figure>
<h3 id="自旋锁的使用场景">自旋锁的使用场景</h3>
<ul>
<li><b>两个重要的约束</b>
<ul>
<li>临界区几乎不“拥堵”$\Longrightarrow$ <b>几乎就只有一个线程进入临界区</b> $\Longrightarrow$ 这样争抢🔒的状况就会很少</li>
<li>持有自旋锁时禁止执行流切换 $\Longrightarrow$ 翻译成上面的人话就是禁止拿着🔒回宿舍😴 $\Longrightarrow$ <b>但是，我们的应用程序是做不到这一点的（如果应用程序能够防止自己在时间片轮转的时候被切出去，那么一个while(1);就能让电脑崩溃，操作系统是绝对禁止这样的事情的）</b></li>
</ul>
</li>
</ul>
<h4 id="使用场景操作系统内核的并发数据结构-短临界区">使用场景：操作系统内核的并发数据结构 (短临界区)</h4>
<ul>
<li><b>操作系统可以关闭中断和抢占</b> $\Longrightarrow$ 这就是和应用程序不一样的地方
<ul>
<li>保证锁的持有者在很短的时间内可以释放锁</li>
</ul>
</li>
<li>(如果是虚拟机呢&hellip;😂)
<ul>
<li>PAUSE 指令会触发 VM Exit $\Longrightarrow$ 防止有故障把物理机给卡死</li>
</ul>
</li>
<li>但依旧很难做好
<ul>
<li><a href="https://www.usenix.org/conference/osdi10/analysis-linux-scalability-many-cores" target="_blank" rel="noopener noreffer">An analysis of Linux scalability to many cores</a> (OSDI'10) （10年paper，吐槽Linux内核的自旋锁有多烂）</li>
</ul>
</li>
</ul>
<h3 id="实现线程--长临界区的互斥">实现线程 + 长临界区的互斥</h3>
<blockquote>
<p>作业那么多，与其干等 Online Judge 发布，不如把自己 (CPU) 让给其他作业 (线程) 执行？</p>
<p><u>说白了就是有事情卡住了就去干别的，别就瞎🐔8️⃣干等着这一件事（这也就是比自旋锁高明的地方）</u></p>
</blockquote>
<p>“让” 不是 C 语言代码可以做到的 (C 代码只能计算)</p>
<ul>
<li>
<p>把锁的实现放到操作系统里就好啦！$\Longrightarrow$ 系统调用</p>
<ul>
<li>
<p><code>syscall(SYSCALL_lock, &amp;lk);</code></p>
<ul>
<li><b>试图获得 <code>lk</code>，但如果失败，<u>就切换到其他线程</u> $\Longrightarrow$ 这个就是精髓</b></li>
</ul>
</li>
<li>
<p><code>syscall(SYSCALL_unlock, &amp;lk);</code></p>
<ul>
<li><b>释放 <code>lk</code>，如果有等待锁的线程就唤醒</b></li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>Update in 2023-03-09 19:15</p>
<p>干拌面吃完真撑的慌，下回还是吃汤面</p>
<p>晚上看完</p>
</div>
        </div>
    </div>
<h3 id="实现线程--长临界区的互斥-contd">实现线程 + 长临界区的互斥 (cont&rsquo;d)</h3>
<ul>
<li>
<p><b>操作系统 = 更衣室管理员</b></p>
</li>
<li>
<p>先到的人 (线程)</p>
<ul>
<li>成功获得手环，进入游泳馆</li>
<li><code>*lock = 🔒</code>，系统调用直接返回</li>
</ul>
</li>
<li>
<p>后到的人 (线程)</p>
<ul>
<li>不能进入游泳馆，排队等待</li>
<li><b>线程放入等待队列，执行线程切换 (yield)</b></li>
</ul>
</li>
<li>
<p>洗完澡出来的人 (线程)</p>
<ul>
<li>
<p>交还手环给管理员；管理员把手环再交给排队的人</p>
</li>
<li>
<p><b>如果等待队列不空，从等待队列中取出一个线程允许执行</b></p>
</li>
<li>
<p><b>如果等待队列为空，<code>*lock = ✅</code></b></p>
</li>
</ul>
</li>
<li>
<p><b><font color="red">管理员 (OS) 使用<u>自旋锁</u>确保自己处理手环的过程是原子的</font></b></p>
</li>
</ul>
<h2 id="futex--spin--mutex">Futex = Spin + Mutex</h2>
<h3 id="关于互斥的一些分析">关于互斥的一些分析</h3>
<ul>
<li>
<p>自旋锁 (线程直接共享 locked)</p>
<ul>
<li>
<p>更快的 fast path</p>
<ul>
<li>xchg 成功 → 立即进入临界区，开销很小</li>
</ul>
</li>
<li>
<p>更慢的 slow path</p>
<ul>
<li>xchg 失败 → 浪费 CPU 自旋等待（交换一些不是🔒，没用的东西）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>睡眠（互斥）锁 (通过系统调用访问 locked)</p>
<ul>
<li>
<p>更快的 slow path</p>
<ul>
<li>上锁失败线程不再占用 CPU</li>
</ul>
</li>
<li>
<p>更慢的 fast path</p>
<ul>
<li>即便上锁成功也需要<u>进出内核 (syscall)</u> $\Longrightarrow$ 速度相对比较慢</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="futex-fast-userspace-mutexes">Futex: Fast Userspace muTexes</h3>
<blockquote>
<p>解决方案：全都要</p>
</blockquote>
<div class="mermaid" id="id-6"></div>
<ul>
<li>
<p><b><font color="red">性能优化的最常见技巧</font></b></p>
<ul>
<li>看 average (frequent) case 而不是 worst case $\Longrightarrow$ <b>这里是和算法题做对比，算法题要保证所有可能的情况都可以被高效计算（worst case），而操作系统要求的则是大部分情况都可以被快速处理，少数的情况处理地慢也可以（average）</b></li>
</ul>
</li>
<li>
<p>POSIX 线程库中的互斥锁 (<code>pthread_mutex</code>) $\Longrightarrow$ 两种🔒的好处都得了</p>
</li>
<li>
<p>我们将<a href="https://jyywiki.cn/pages/OS/2022/demos/sum-scalability.c" target="_blank" rel="noopener noreffer">sum-scalability.c</a>里面的自旋锁换成互斥锁</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">mutex_t</span> <span class="n">lock</span> <span class="o">=</span> <span class="n">MUTEX_INIT</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>互斥锁的实现（通过syscall）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mutex_lock</span><span class="p">(</span><span class="n">mutex_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span>   <span class="p">{</span> <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="n">lk</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">mutex_unlock</span><span class="p">(</span><span class="n">mutex_t</span> <span class="o">*</span><span class="n">lk</span><span class="p">)</span> <span class="p">{</span> <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="n">lk</span><span class="p">);</span> <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>编译+测试</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> 2023-03-09 20:11:45 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → gcc sum-scalability.c -O2 -lpthread
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:06 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.065s
</span></span><span class="line"><span class="cl">user    0m0.037s
</span></span><span class="line"><span class="cl">sys     0m0.019s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:12 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.180s
</span></span><span class="line"><span class="cl">user    0m0.121s
</span></span><span class="line"><span class="cl">sys     0m0.185s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:26 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.179s
</span></span><span class="line"><span class="cl">user    0m0.156s
</span></span><span class="line"><span class="cl">sys     0m0.152s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:16:28 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.106s
</span></span><span class="line"><span class="cl">user    0m0.100s
</span></span><span class="line"><span class="cl">sys     0m0.039s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 2023-03-09 20:20:18 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → <span class="nb">time</span> ./a.out <span class="m">64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">real    0m0.087s
</span></span><span class="line"><span class="cl">user    0m0.056s
</span></span><span class="line"><span class="cl">sys     0m0.060s
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><b>可以看到当线程数量变多的时候，<code>pthread_mutex</code>处理的效率要远高于自旋锁</b></p>
</li>
<li>
<p>观察系统调用 (strace) $\Longrightarrow$ 太长了就复制一段</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">2023-03-09 20:11:24 ⌚  jungle-virtual-machine in ~/chapter5
</span></span><span class="line"><span class="cl">○ → strace -f ./a.out <span class="m">64</span>
</span></span><span class="line"><span class="cl">execve<span class="o">(</span><span class="s2">&#34;./a.out&#34;</span>, <span class="o">[</span><span class="s2">&#34;./a.out&#34;</span>, <span class="s2">&#34;64&#34;</span><span class="o">]</span>, 0x7ffe8bbc7370 /* <span class="m">64</span> vars */<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d83eca4000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>0x3001 /* ARCH_??? */, 0x7ffcb38f0700<span class="o">)</span> <span class="o">=</span> -1 EINVAL <span class="o">(</span>无效的参数<span class="o">)</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8192, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56b2a000
</span></span><span class="line"><span class="cl">access<span class="o">(</span><span class="s2">&#34;/etc/ld.so.preload&#34;</span>, R_OK<span class="o">)</span>      <span class="o">=</span> -1 ENOENT <span class="o">(</span>没有那个文件或目录<span class="o">)</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/etc/ld.so.cache&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>76495, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 76495, PROT_READ, MAP_PRIVATE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56b17000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">openat<span class="o">(</span>AT_FDCWD, <span class="s2">&#34;/lib/x86_64-linux-gnu/libc.so.6&#34;</span>, O_RDONLY<span class="p">|</span>O_CLOEXEC<span class="o">)</span> <span class="o">=</span> <span class="m">3</span>
</span></span><span class="line"><span class="cl">read<span class="o">(</span>3, <span class="s2">&#34;\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0&gt;\0\1\0\0\0P\237\2\0\0\0\0\0&#34;</span>..., 832<span class="o">)</span> <span class="o">=</span> <span class="m">832</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0&#34;</span>..., 48, 848<span class="o">)</span> <span class="o">=</span> <span class="m">48</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\4\0\0\0\24\0\0\0\3\0\0\0GNU\0i8\235HZ\227\223\333\350s\360\352,\223\340.&#34;</span>..., 68, 896<span class="o">)</span> <span class="o">=</span> <span class="m">68</span>
</span></span><span class="line"><span class="cl">newfstatat<span class="o">(</span>3, <span class="s2">&#34;&#34;</span>, <span class="o">{</span><span class="nv">st_mode</span><span class="o">=</span>S_IFREG<span class="p">|</span>0644, <span class="nv">st_size</span><span class="o">=</span>2216304, ...<span class="o">}</span>, AT_EMPTY_PATH<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">pread64<span class="o">(</span>3, <span class="s2">&#34;\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0&#34;</span>..., 784, 64<span class="o">)</span> <span class="o">=</span> <span class="m">784</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 2260560, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_DENYWRITE, 3, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56800000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda56828000, 1658880, PROT_READ<span class="p">|</span>PROT_EXEC, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x28000<span class="o">)</span> <span class="o">=</span> 0x7fda56828000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda569bd000, 360448, PROT_READ, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x1bd000<span class="o">)</span> <span class="o">=</span> 0x7fda569bd000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda56a15000, 24576, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_DENYWRITE, 3, 0x214000<span class="o">)</span> <span class="o">=</span> 0x7fda56a15000
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>0x7fda56a1b000, 52816, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_FIXED<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56a1b000
</span></span><span class="line"><span class="cl">close<span class="o">(</span>3<span class="o">)</span>                                <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 12288, PROT_READ<span class="p">|</span>PROT_WRITE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda56b14000
</span></span><span class="line"><span class="cl">arch_prctl<span class="o">(</span>ARCH_SET_FS, 0x7fda56b14740<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">set_tid_address<span class="o">(</span>0x7fda56b14a10<span class="o">)</span>         <span class="o">=</span> <span class="m">4614</span>
</span></span><span class="line"><span class="cl">set_robust_list<span class="o">(</span>0x7fda56b14a20, 24<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rseq<span class="o">(</span>0x7fda56b150e0, 0x20, 0, 0x53053053<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fda56a15000, 16384, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x55d83cf2f000, 4096, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fda56b64000, 8192, PROT_READ<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">prlimit64<span class="o">(</span>0, RLIMIT_STACK, NULL, <span class="o">{</span><span class="nv">rlim_cur</span><span class="o">=</span>8192*1024, <span class="nv">rlim_max</span><span class="o">=</span>RLIM64_INFINITY<span class="o">})</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">munmap<span class="o">(</span>0x7fda56b17000, 76495<span class="o">)</span>           <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rt_sigaction<span class="o">(</span>SIGRT_1, <span class="o">{</span><span class="nv">sa_handler</span><span class="o">=</span>0x7fda568918f0, <span class="nv">sa_mask</span><span class="o">=[]</span>, <span class="nv">sa_flags</span><span class="o">=</span>SA_RESTORER<span class="p">|</span>SA_ONSTACK<span class="p">|</span>SA_RESTART<span class="p">|</span>SA_SIGINFO, <span class="nv">sa_restorer</span><span class="o">=</span>0x7fda56842520<span class="o">}</span>, NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">rt_sigprocmask<span class="o">(</span>SIG_UNBLOCK, <span class="o">[</span>RTMIN RT_1<span class="o">]</span>, NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, 0<span class="o">)</span> <span class="o">=</span> 0x7fda55fff000
</span></span><span class="line"><span class="cl">mprotect<span class="o">(</span>0x7fda56000000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">getrandom<span class="o">(</span><span class="s2">&#34;\xc0\x0d\x30\x79\xa6\xc0\x9a\x32&#34;</span>, 8, GRND_NONBLOCK<span class="o">)</span> <span class="o">=</span> <span class="m">8</span>
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55d83eca4000
</span></span><span class="line"><span class="cl">brk<span class="o">(</span>0x55d83ecc5000<span class="o">)</span>                     <span class="o">=</span> 0x55d83ecc5000
</span></span><span class="line"><span class="cl">rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>, <span class="o">[]</span>, 8<span class="o">)</span>   <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda567ff910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda567ff910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda55fff000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda567ff640<span class="o">}</span>strace: Process <span class="m">4615</span> <span class="nv">attached</span>
</span></span><span class="line"><span class="cl"> <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4615<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4615</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> rseq<span class="o">(</span>0x7fda567fffe0, 0x20, 0, 0x53053053 &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... rseq resumed&gt;<span class="o">)</span>         <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> set_robust_list<span class="o">(</span>0x7fda567ff920, <span class="m">24</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda557fe000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... set_robust_list resumed&gt;<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda557ff000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>, <span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda55ffe910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda55ffe910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda557fe000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda55ffe640<span class="o">}</span>strace: Process <span class="m">4616</span> <span class="nv">attached</span>
</span></span><span class="line"><span class="cl"> <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4616<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4616</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> rseq<span class="o">(</span>0x7fda55ffefe0, 0x20, 0, 0x53053053 &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... rseq resumed&gt;<span class="o">)</span>         <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> set_robust_list<span class="o">(</span>0x7fda55ffe920, <span class="m">24</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda54ffd000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... set_robust_list resumed&gt;<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda54ffe000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;<span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda557fd910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda557fd910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda54ffd000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda557fd640<span class="o">}</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, 1<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl">strace: Process <span class="m">4617</span> attached
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... clone3 resumed&gt; <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4617<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4617</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> rseq<span class="o">(</span>0x7fda557fdfe0, 0x20, 0, 0x53053053 &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... rseq resumed&gt;<span class="o">)</span>         <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> set_robust_list<span class="o">(</span>0x7fda557fd920, <span class="m">24</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda547fc000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... set_robust_list resumed&gt;<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda547fd000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;<span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda54ffc910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda54ffc910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda547fc000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda54ffc640<span class="o">}</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... clone3 resumed&gt; <span class="o">=</span>&gt; <span class="o">{</span><span class="nv">parent_tid</span><span class="o">=[</span>4618<span class="o">]}</span>, 88<span class="o">)</span> <span class="o">=</span> <span class="m">4618</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_SETMASK, <span class="o">[]</span>, NULL, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mmap<span class="o">(</span>NULL, 8392704, PROT_NONE, MAP_PRIVATE<span class="p">|</span>MAP_ANONYMOUS<span class="p">|</span>MAP_STACK, -1, <span class="m">0</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mmap resumed&gt;<span class="o">)</span>         <span class="o">=</span> 0x7fda53ffb000
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> mprotect<span class="o">(</span>0x7fda53ffc000, 8388608, PROT_READ<span class="p">|</span>PROT_WRITE &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... mprotect resumed&gt;<span class="o">)</span>     <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4617<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> rt_sigprocmask<span class="o">(</span>SIG_BLOCK, ~<span class="o">[]</span>,  &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> &lt;... rt_sigprocmask resumed&gt;<span class="o">[]</span>, 8<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4614<span class="o">]</span> clone3<span class="o">({</span><span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, <span class="nv">child_tid</span><span class="o">=</span>0x7fda547fb910, <span class="nv">parent_tid</span><span class="o">=</span>0x7fda547fb910, <span class="nv">exit_signal</span><span class="o">=</span>0, <span class="nv">stack</span><span class="o">=</span>0x7fda53ffb000, <span class="nv">stack_size</span><span class="o">=</span>0x7fff00, <span class="nv">tls</span><span class="o">=</span>0x7fda547fb640<span class="o">}</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> futex<span class="o">(</span>0x55d83cf30060, FUTEX_WAKE_PRIVATE, <span class="m">1</span> &lt;unfinished ...&gt;
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4615<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> -1 EAGAIN <span class="o">(</span>资源暂时不可用<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>pid  4616<span class="o">]</span> &lt;... futex resumed&gt;<span class="o">)</span>        <span class="o">=</span> <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>里面有很多类似73行的语句<code>[pid  4616] futex(0x55d83cf30060, FUTEX_WAIT_PRIVATE, 2, NULL &lt;unfinished ...&gt;</code></li>
</ul>
<blockquote>
<p><strong>一、什么是futex？</strong></p>
<p>futex是Fast Userspace muTEX的缩写，该机制是由Rusty Russell、Hubertus Franke和Mathew Kirkwood在2.5.7版本的内核中引入，虽然名字中有互斥锁（mutex）的含义，但实际它是一种用于用户空间应用程序的通用同步工具（基于futex可以在userspace实现互斥锁、读写锁、condition variable等同步机制）。Futex组成包括：</p>
<ul>
<li>内核空间的等待队列</li>
<li>用户空间层的32-bit futex word（所有平台都是32bit，包括64位平台）</li>
</ul>
<p><b>在没有竞争的场景下，锁的获取和释放性能都非常高，不需要内核的参与，仅仅是通过用户空间的原子操作来修改futex word的状态即可</b>。在有竞争的场景下，如果线程无法获取futex锁，那么把自己放入到 wait queue中（陷入内核，有系统调用的开销），而在owner task释放锁的时候，如果检测到有竞争（等待队列中有阻塞任务），就会通过系统调用来唤醒等待队列中的任务，使其恢复执行，继续去持锁。如果没有竞争，那么也无需陷入内核。</p>
<p>摘自：<a href="https://zhuanlan.zhihu.com/p/568678633" target="_blank" rel="noopener noreffer">《什么是futex？》</a></p>
</blockquote>
<blockquote>
<p>Futex（Fast Userspace Mutex）是一种用户空间锁，它是Linux内核提供的一种同步原语，用于控制多个进程或线程之间的访问共享资源。Futex主要用于实现更高级别的同步原语，例如条件变量和读写锁。Futex提供了一种低开销的锁机制，当锁被持有时，它可以避免将线程或进程阻塞在内核空间。</p>
<p>在Futex中，锁的状态保存在用户空间中，而不是内核空间中，当线程或进程需要获取锁时，它会尝试将锁的状态从“未锁定”改为“锁定”状态。如果成功，线程或进程就可以访问共享资源。如果锁已被其他线程或进程占用，则它将在用户空间内忙等待，直到锁被释放。</p>
<p>Futex还支持一些其他的操作，例如等待一个特定的值或比较并交换值，这些操作可以用于实现条件变量和读写锁等高级别的同步原语。由于Futex的低开销和高效性，它成为了Linux系统中许多高级别同步原语的基础。</p>
<p>来自<a href="https://openai.com/blog/chatgpt" target="_blank" rel="noopener noreffer">ChatGPT</a></p>
</blockquote>
<ul>
<li>
<p><b>如果我们仔细观察就会发现，futex调用的数量远远小于lock和unlock的数量</b></p>
</li>
<li>
<p>gdb 调试</p>
<ul>
<li><code>set scheduler-locking on</code>, <code>info threads</code>, <code>thread X</code></li>
</ul>
</li>
</ul>
<h3 id="futex-fast-userspace-mutexes-contd">Futex: Fast Userspace muTexes (cont&rsquo;d)</h3>
<p>先在用户空间自旋</p>
<ul>
<li>如果获得锁，直接进入</li>
<li>未能获得锁，系统调用</li>
<li>解锁以后也需要系统调用
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/futex.py" target="_blank" rel="noopener noreffer">futex.py</a></li>
<li>更好的设计可以在 fast-path 不进行系统调用</li>
</ul>
</li>
</ul>
<p>futex.py</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Futex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span><span class="p">,</span> <span class="n">waits</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">tryacquire</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Test-and-set (cmpxchg)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Same effect, but more efficient than xchg</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">release</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>     <span class="c1"># User</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;1&#39;</span> <span class="c1"># Kernel</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;1&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>      <span class="c1"># Kernel</span>
</span></span><span class="line"><span class="cl">                    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>                         <span class="c1"># User</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>                            <span class="c1"># User</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>                    <span class="c1"># Kernel</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;2&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;2&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t3</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">tryacquire</span><span class="p">()</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span> <span class="o">+</span> <span class="s1">&#39;3&#39;</span>
</span></span><span class="line"><span class="cl">                <span class="k">while</span> <span class="s1">&#39;3&#39;</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">waits</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t3</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t3&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;yellow&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">[</span><span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;t3&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>python代码的优势：如果你想让一句代码原子执行——&gt;加入<code>yield breakpoint()</code></p>
</li>
<li>
<p><code>python3 model-checker.py futex.py | python3 visualize.py -t &gt; a.html </code>重定向，可视化</p>
</li>
<li>
<p><a href="https://github.com/Jungle430/check-for-NJU-OS" target="_blank" rel="noopener noreffer">样例仓库</a></p>
</li>
</ul>
<hr>
<p>RTFM (劝退)</p>
<ul>
<li>futex (7), futex (2)</li>
<li><a href="https://lwn.net/Articles/360699/" target="_blank" rel="noopener noreffer">A futex overview and update</a> (LWN)</li>
<li><a href="https://jyywiki.cn/pages/OS/manuals/futexes-are-tricky.pdf" target="_blank" rel="noopener noreffer">Futexes are tricky</a> (论 model checker 的重要性) $\Longrightarrow$ <u>同时也提示我们从最简单的写起，千万不要觉得自己行就装🖊搞大的</u></li>
<li>(我们不讲并发算法)</li>
</ul>
<h2 id="总结">总结</h2>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何在多处理器系统上实现互斥？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>软件不够，硬件来凑 (自旋锁)</li>
<li>用户不够，内核来凑 (互斥锁)
<ul>
<li><b><font color="red">找到你依赖的假设，并大胆地打破它</font></b></li>
</ul>
</li>
<li>Fast/slow paths: 性能优化的重要途径</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter4 理解并发程序执行</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter4/</link>
    <pubDate>Mon, 06 Mar 2023 19:34:15 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter4/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="typeit"><div id="id-1" class=""></div></div>
<p>晚上看的，<b>Peterson</b>算法好™️的👨，证明等过两天有时间给看了</div>
        </div>
    </div>
<h2 id="理解并发程序执行">理解并发程序执行</h2>
<h3 id="复习">复习</h3>
<ul>
<li>一般程序执行</li>
</ul>
<div class="mermaid" id="id-2"></div>
<p>线程的栈帧会用一个<code>list</code>来存放</p>
<ul>
<li>多线程</li>
</ul>
<div class="mermaid" id="id-3"></div>
<p>T1,T2随机来回转换执行</p>
<ul>
<li><b>并发程序 = 多个执行流、共享内存的<u>状态机</u></b></li>
</ul>
<h3 id="画状态机理解并发程序">画状态机理解并发程序</h3>
<blockquote>
<p><u>互斥：保证两个线程不能同时执行一段代码</u></p>
</blockquote>
<ul>
<li>插入 “神秘代码”，使得 <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> (或者任意其他代码) 能够正常工作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 神秘代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">sum</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 神秘代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>可以通过<code>__sync_synchronize();</code>来保证原子操作</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 或 int t = x;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__sync_synchronize</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><code>__sync_synchronize();</code>是GCC内置函数的一种，用于在编写多线程程序时确保在内存操作之前和之后的指令都不会被重排。</p>
<p>具体来说，这个函数是一个内存栅栏，用于告诉编译器不要把本条指令前面和后面的内存操作顺序交换，也就是防止编译器进行指令重排，保证在这个函数之前和之后的内存操作按照代码中的顺序执行。</p>
<p>这个函数在实现多线程锁、原子操作等场景中经常被使用，以确保线程间的同步和一致性。</p>
</blockquote>
<h4 id="失败的尝试">失败的尝试</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">locked</span> <span class="o">!=</span> <span class="n">UNLOCK</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">locked</span> <span class="o">=</span> <span class="n">LOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// critical section
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>原因</p>
<ul>
<li>看到的状态到真正做下一件事之间的状态是否被人改了？（<u>看到的东西仅仅只是一个历史，离做还有几个周期，而做是根据这个<b>“历史”</b>的状态来决定的</u>）$\Longrightarrow$ 和人眼看着东西对比，人眼是<b>一直在看的</b>，而CPU并行执行程序的时候，看这个指令执行完了之后可能CPU会去执行另一个线程的几条指令，这种情况下相当于这个人<b>看完后闭上眼睛等了几秒</b>，然后根据几秒前所看的东西来判断自己要干啥，<b>可是这个东西在前几秒可能已经让另一个线程的某些指令改过了</b></li>
<li><b>处理器默认不保证 load + store 的原子性（单操作可以保证）</b></li>
</ul>
</li>
<li>
<p>一种失败的情况</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define LOCK 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UNLOCK 0
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nl">retry</span><span class="p">:</span>  <span class="c1">//T2在这个时候也执行到了locked != UNLOCK的判断，而lock = LOCK,T2也进去了，没锁住！
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">if</span> <span class="p">(</span><span class="n">locked</span> <span class="o">!=</span> <span class="n">UNLOCK</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//&lt;--------------------------------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">goto</span> <span class="n">retry</span><span class="p">;</span>                                        <span class="c1">//  |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>                                                    <span class="c1">//  |  
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">locked</span> <span class="o">=</span> <span class="n">LOCK</span><span class="p">;</span>       <span class="c1">//T1执行到了这里 此时locked = UNLOCK-|
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">sum</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">locked</span> <span class="o">=</span> <span class="n">UNLOCK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="正确性不明的奇怪尝试-peterson-算法">正确性不明的奇怪尝试 (<code>Peterson</code> 算法)</h4>
<ul>
<li>
<p>A 和 B 争用厕所的包厢</p>
</li>
<li>
<p>想进入包厢之前，A/B 都要先举起自己的旗子</p>
<ul>
<li>A 确认旗子举好以后，往厕所门上贴上 <b>“B 正在使用”</b> 的标签</li>
<li>B 确认旗子举好以后，往厕所门上贴上 <b>“A 正在使用”</b> 的标签</li>
</ul>
</li>
<li>
<p>然后<b>如果对方的旗子举起来，且门上的名字不是自己</b>，等待</p>
<ul>
<li>否则可以进入包厢</li>
</ul>
</li>
<li>
<p><b>出包厢后，放下自己的旗子</b></p>
</li>
<li>
<p>示例代码：<a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-simple.c" target="_blank" rel="noopener noreffer">peterson-simple.c</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define A 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define B 2
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">nested</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_long</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="k">volatile</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TA</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=1 */</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=2 */</span> <span class="n">turn</span> <span class="o">=</span> <span class="n">B</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=3 */</span> <span class="k">while</span> <span class="p">(</span><span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">turn</span> <span class="o">==</span> <span class="n">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=4 */</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TB</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=1 */</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=2 */</span> <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=3 */</span> <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">turn</span> <span class="o">==</span> <span class="n">A</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/* PC=4 */</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TB</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>有关上面的原子操作：</p>
<p>这段代码定义了两个原子变量 <code>nested</code> 和 <code>count</code>，并实现了一个临界区 <code>critical_section()</code>。</p>
<p>在 <code>critical_section()</code> 中，首先通过调用 <code>atomic_fetch_add(&amp;count, 1)</code> 将 <code>count</code> 原子变量的值加 1 并返回当前的值，保存在 <code>cnt</code> 中。</p>
<p>然后通过调用 <code>atomic_fetch_add(&amp;nested, 1)</code> 将 <code>nested</code> 原子变量的值加 1，同时检查原子变量 <code>nested</code> 是否为 0。由于 <code>nested</code> 的初始值为 0，因此这里可以通过 <code>assert</code> 断言来验证。</p>
<p>最后通过调用 <code>atomic_fetch_add(&amp;nested, -1)</code> 将 <code>nested</code> 原子变量的值减 1。</p>
<p>整个 <code>critical_section()</code> 实现了一个简单的临界区，其中 <code>nested</code> 原子变量用于保证临界区同时只能被一个线程访问，而 <code>count</code> 原子变量用于记录临界区的进入次数。</p>
<hr>
<p>在给 <code>nested</code> 这个 <code>atomic_int</code> 对象赋初值为 0 的情况下，断言 <code>assert(atomic_fetch_add(&amp;nested, 1) == 0)</code> 是可以通过的。</p>
<p>这是因为 <code>atomic_fetch_add()</code> 函数是原子的，它会将 <code>nested</code> 的值加 1，并返回增加前的值。在这个代码中，<code>nested</code> 初始值为 0，然后通过 <code>atomic_fetch_add(&amp;nested, 1)</code> 将其增加为 1，并<font color="red">返回增加前的值</font> 0。因此，断言 <code>assert(atomic_fetch_add(&amp;nested, 1) == 0)</code> 会成功通过，因为 <code>atomic_fetch_add()</code> 返回的值与断言中的比较值相等。</p>
<p>需要注意的是，<code>atomic_int</code> 是 C++ 标准库提供的原子类型，用于在多线程环境下进行原子操作，确保线程安全性。在多线程环境下，原子操作是不会被中断的，因此可以保证 <code>atomic_int</code> 类型对象的操作不会发生竞态条件等问题。但仍然需要谨慎使用，并根据具体情况考虑是否需要使用其他同步机制，如互斥锁、条件变量等。</p>
</blockquote>
<h4 id="petersons-protocol-verified-">Peterson&rsquo;s Protocol Verified 🎖</h4>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="typeit"><div id="id-4" class=""></div></div>
<p>原来证明和判断可以用状态🌳来证明（和全数学相比可能不严谨，但是从CS的角度来说够用了）</p>
<p>先😴，回来再看</p>
</div>
        </div>
    </div>
<blockquote>
<p>我们 (在完全不理解算法的前提下) 证明了 Sequential 内存模型下 Peterson&rsquo;s Protocol 的 Safety。它能够实现互斥。</p>
</blockquote>
<ul>
<li>“<a href="https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf" target="_blank" rel="noopener noreffer">Myths about the mutual exclusion problem</a>” (IPL, 1981，<code>Peterson</code>算法论文，<u>终于给了一个对于我们来说理解起来<b>相对</b>容易的一个算法</u>)</li>
<li>之前有关锁的一些复杂算法：<a href="https://jyywiki.cn/pages/OS/2022/demos/dekker.py" target="_blank" rel="noopener noreffer">dekker.py</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Dekker</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">=</span> <span class="p">[</span><span class="kc">False</span><span class="p">,</span> <span class="kc">False</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">this</span><span class="p">,</span> <span class="n">another</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">another</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">pass</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="n">another</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">this</span><span class="p">,</span> <span class="n">another</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">another</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">                    <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="n">another</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                        <span class="k">pass</span>
</span></span><span class="line"><span class="cl">                    <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="n">another</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="n">this</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>一些现状
<ul>
<li>今天有非常坚 (内) 实 (卷) 的理论体系</li>
<li>小心编译器和多处理器硬件（编译器优化，CPU指令流水线优化）
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-barrier.c" target="_blank" rel="noopener noreffer">peterson-barrier.c</a>（<b>改良版，防止编译器优化造成的结果和预期不符</b>）</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define A 1
</span></span></span><span class="line"><span class="cl"><span class="cp">#define B 2
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define BARRIER __sync_synchronize()
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">nested</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">atomic_long</span> <span class="n">count</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">critical_section</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d threads in the critical section @ count=%ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">cnt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">atomic_fetch_add</span><span class="p">(</span><span class="o">&amp;</span><span class="n">nested</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="k">volatile</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">turn</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TA</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">B</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span> <span class="c1">// &lt;- this is critcal for x86
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">y</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">B</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">TB</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="n">A</span><span class="p">;</span>                <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">x</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>         <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">turn</span> <span class="o">!=</span> <span class="n">A</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>  <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">critical_section</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                   <span class="n">BARRIER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TA</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">TB</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>课后思考：<b>哪些 barrier 是多余的吗？</b></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define BARRIER __sync_synchronize() </span><span class="c1">//重点研究这个宏的作用
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="自动-画状态机理解并发程序">(自动) 画状态机理解并发程序</h3>
<div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>Update<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><div class="typeit"><div id="id-5" class=""></div></div>
<p>体育课累歇逼了，晚上给看完</div>
        </div>
    </div>
<ul>
<li>
<p>并发算法的设计困境</p>
<ul>
<li>
<p>不敢不画：谁知道有什么奇怪情况会发生？</p>
</li>
<li>
<p>不敢乱画：画错了就都完了</p>
</li>
</ul>
</li>
<li>
<p>解决方法</p>
<ul>
<li>让电脑帮我们画（因为画状态机就是一个<b>机械</b>的事情）</li>
</ul>
</li>
</ul>
<p><a href="https://jyywiki.cn/pages/OS/2022/demos/model-checker.py" target="_blank" rel="noopener noreffer">model-checker.py</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">inspect</span><span class="o">,</span> <span class="nn">ast</span><span class="o">,</span> <span class="nn">astor</span><span class="o">,</span> <span class="nn">copy</span><span class="o">,</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">threads</span><span class="p">,</span> <span class="n">marker_fn</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">thread</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Decorate a member function as a thread&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">threads</span>
</span></span><span class="line"><span class="cl">    <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fn</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fn</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">marker</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Decorate a member function as a state marker&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">global</span> <span class="n">marker_fn</span>
</span></span><span class="line"><span class="cl">    <span class="n">marker_fn</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">localvar</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">varname</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Return local variable value of thread t in state s&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">{}))[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">varname</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">checkpoint</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Instrumented `yield checkpoint()` goes here&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span> <span class="o">=</span> <span class="n">inspect</span><span class="o">.</span><span class="n">stack</span><span class="p">()[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">frame</span> <span class="c1"># stack[1] is the caller of checkpoint()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">f</span><span class="o">.</span><span class="n">f_lineno</span><span class="p">,</span> <span class="p">{</span> <span class="n">k</span><span class="p">:</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">f_locals</span><span class="o">.</span><span class="n">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">k</span> <span class="o">!=</span> <span class="s1">&#39;self&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">hack</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Hack Class to instrument @mc.thread functions&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Instrument</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">NodeTransformer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">def</span> <span class="nf">generic_visit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">in_fn</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">ast</span><span class="o">.</span><span class="n">FunctionDef</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">node</span><span class="o">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># a @mc.thread function -&gt; instrument it</span>
</span></span><span class="line"><span class="cl">                    <span class="n">in_fn</span><span class="p">,</span> <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span> <span class="o">=</span> <span class="kc">True</span><span class="p">,</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">                <span class="k">elif</span> <span class="n">node</span><span class="o">.</span><span class="n">decorator_list</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># a decorated function like @mc.mark -&gt; remove it</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">body</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="s1">&#39;body&#39;</span><span class="p">,</span> <span class="p">[]):</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># prepend each line with `yield checkpoint()`</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="n">in_fn</span><span class="p">:</span> <span class="n">body</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                    <span class="n">ast</span><span class="o">.</span><span class="n">Expr</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">Yield</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                        <span class="n">ast</span><span class="o">.</span><span class="n">Call</span><span class="p">(</span><span class="n">func</span><span class="o">=</span><span class="n">ast</span><span class="o">.</span><span class="n">Name</span><span class="p">(</span><span class="n">checkpoint</span><span class="o">.</span><span class="vm">__name__</span><span class="p">,</span> <span class="n">ctx</span><span class="o">=</span><span class="n">ast</span><span class="o">.</span><span class="n">Load</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">                            <span class="n">args</span><span class="o">=</span><span class="p">[],</span> <span class="n">keywords</span><span class="o">=</span><span class="p">[])))</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">body</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">generic_visit</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">in_fn</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">node</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">node</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="s1">&#39;hacked&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">hacked_ast</span> <span class="o">=</span> <span class="n">Instrument</span><span class="p">()</span><span class="o">.</span><span class="n">visit</span><span class="p">(</span><span class="n">ast</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">Class</span><span class="o">.</span><span class="n">source</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">hacked_src</span><span class="p">,</span> <span class="nb">vars</span> <span class="o">=</span> <span class="n">astor</span><span class="o">.</span><span class="n">to_source</span><span class="p">(</span><span class="n">hacked_ast</span><span class="p">),</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># set a breakpoint() here to see **magic happens**!</span>
</span></span><span class="line"><span class="cl">        <span class="n">exec</span><span class="p">(</span><span class="n">hacked_src</span><span class="p">,</span> <span class="nb">globals</span><span class="p">(),</span> <span class="nb">vars</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Class</span><span class="o">.</span><span class="n">hacked</span><span class="p">,</span> <span class="n">Class</span><span class="o">.</span><span class="n">hacked_src</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">[</span><span class="n">Class</span><span class="o">.</span><span class="vm">__name__</span><span class="p">],</span> <span class="n">hacked_src</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Class</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Execute trace (like [0,0,0,2,2,1,1,1]) on Class&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">attrs</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">attr</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">val</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">attr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">attr</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s1">&#39;__&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">type</span><span class="p">(</span><span class="n">val</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">bool</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="k">yield</span> <span class="n">attr</span><span class="p">,</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">obj</span> <span class="o">=</span> <span class="n">hack</span><span class="p">(</span><span class="n">Class</span><span class="p">)</span><span class="o">.</span><span class="n">hacked</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">attr</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">attrs</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">setattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">val</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fn</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">fn</span><span class="p">())</span> <span class="c1"># a generator for a thread</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span> <span class="o">=</span> <span class="p">{</span> <span class="n">t</span><span class="p">:</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">trace</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">chosen</span><span class="p">,</span> <span class="n">tname</span><span class="p">,</span> <span class="n">trace</span> <span class="o">=</span> <span class="n">trace</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">threads</span><span class="p">[</span><span class="n">trace</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="n">trace</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">T</span><span class="p">[</span><span class="n">chosen</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">S</span><span class="p">[</span><span class="n">tname</span><span class="p">]</span> <span class="o">=</span> <span class="n">T</span><span class="p">[</span><span class="n">chosen</span><span class="p">]</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">except</span> <span class="ne">StopIteration</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">S</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">tname</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">T</span><span class="p">[</span><span class="n">chosen</span><span class="p">]</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">attr</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">attrs</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">S</span><span class="p">[</span><span class="n">attr</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">obj</span><span class="p">,</span> <span class="n">S</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">State</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">trace</span> <span class="o">=</span> <span class="n">trace</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">execute</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="sa">f</span><span class="s1">&#39;s</span><span class="si">{</span><span class="nb">abs</span><span class="p">(</span><span class="n">State</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">state</span><span class="p">)</span><span class="o">.</span><span class="fm">__hash__</span><span class="p">())</span><span class="si">}</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@staticmethod</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">freeze</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;&#39;&#39;Create an object&#39;s hashable frozen (immutable) counterpart&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">obj</span> <span class="ow">is</span> <span class="kc">None</span> <span class="ow">or</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">bool</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">obj</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">State</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="nb">type</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="nb">sorted</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="nb">zip</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">keys</span><span class="p">(),</span> <span class="p">(</span><span class="n">State</span><span class="o">.</span><span class="n">freeze</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">obj</span><span class="o">.</span><span class="n">values</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">            <span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s1">&#39;Cannot freeze&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">serialize</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">s0</span><span class="p">,</span> <span class="n">vertices</span><span class="p">,</span> <span class="n">edges</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Serialize all model checking results&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;CLASS(</span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">Class</span><span class="o">.</span><span class="n">hacked_src</span><span class="p">)</span><span class="si">}</span><span class="s1">)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sid</span> <span class="o">=</span> <span class="p">{</span> <span class="n">s0</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">s</span><span class="o">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">sid</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">            <span class="n">sid</span><span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">sid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nb">repr</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;s</span><span class="si">{</span><span class="n">sid</span><span class="p">[</span><span class="n">s</span><span class="o">.</span><span class="n">name</span><span class="p">]</span><span class="si">}</span><span class="s1">&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">u</span> <span class="ow">in</span> <span class="n">vertices</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">mk</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">state</span><span class="p">)</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">marker_fn</span> <span class="k">if</span> <span class="n">f</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">state</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;STATE(</span><span class="si">{</span><span class="n">name</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">u</span><span class="o">.</span><span class="n">state</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">mk</span><span class="p">)</span><span class="si">}</span><span class="s1">)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">chosen</span> <span class="ow">in</span> <span class="n">edges</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;TRANS(</span><span class="si">{</span><span class="n">name</span><span class="p">(</span><span class="n">u</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="n">name</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="si">}</span><span class="s1">, </span><span class="si">{</span><span class="nb">repr</span><span class="p">(</span><span class="n">threads</span><span class="p">[</span><span class="n">chosen</span><span class="p">])</span><span class="si">}</span><span class="s1">)&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">check_bfs</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;&#39;&#39;Enumerate all possible thread interleavings of @mc.thread functions&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s0</span> <span class="o">=</span> <span class="n">State</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">trace</span><span class="o">=</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># breadth-first search to find all possible thread interleavings</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">,</span> <span class="n">vertices</span><span class="p">,</span> <span class="n">edges</span> <span class="o">=</span> <span class="p">[</span><span class="n">s0</span><span class="p">],</span> <span class="p">{</span><span class="n">s0</span><span class="o">.</span><span class="n">name</span><span class="p">:</span> <span class="n">s0</span><span class="p">},</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">u</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">queue</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">chosen</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">threads</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">v</span> <span class="o">=</span> <span class="n">State</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">trace</span> <span class="o">+</span> <span class="p">[</span><span class="n">chosen</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">vertices</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">vertices</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
</span></span><span class="line"><span class="cl">            <span class="n">edges</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">chosen</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">serialize</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">s0</span><span class="p">,</span> <span class="n">vertices</span><span class="p">,</span> <span class="n">edges</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">src</span><span class="p">,</span> <span class="nb">vars</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">.</span><span class="n">read_text</span><span class="p">(),</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="n">exec</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="nb">globals</span><span class="p">(),</span> <span class="nb">vars</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Class</span> <span class="o">=</span> <span class="p">[</span><span class="n">C</span> <span class="k">for</span> <span class="n">C</span> <span class="ow">in</span> <span class="nb">vars</span><span class="o">.</span><span class="n">values</span><span class="p">()</span> <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">C</span><span class="p">)</span> <span class="o">==</span> <span class="nb">type</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">setattr</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="s1">&#39;source&#39;</span><span class="p">,</span> <span class="n">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">check_bfs</span><span class="p">(</span><span class="n">Class</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>$Model$ $\Longrightarrow$ $Input$</p>
</li>
<li>
<p>$checker$ $\Longrightarrow$ 遍历所有状态</p>
</li>
<li>
<p>通过一些class来说明你的并发算法：<a href="https://jyywiki.cn/pages/OS/2022/demos/mutex-bad.py" target="_blank" rel="noopener noreffer">mutex-bad.py</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/peterson-flag.py" target="_blank" rel="noopener noreffer">peterson-flag.py</a>, <a href="https://jyywiki.cn/pages/OS/2022/demos/dekker.py" target="_blank" rel="noopener noreffer">dekker.py</a></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Mutex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Peterson</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">=</span> <span class="s1">&#39;  &#39;</span>
</span></span><span class="line"><span class="cl">    <span class="n">turn</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="s1">&#39;🏴&#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="s1">&#39;🏳&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39; &#39;</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="s1">&#39;🏳&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@thread</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">t2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39;🏳&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">=</span> <span class="s1">&#39;🏴&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="s1">&#39; &#39;</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">turn</span> <span class="o">==</span> <span class="s1">&#39;🏴&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="n">cs</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">            <span class="k">del</span> <span class="n">cs</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">flag</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">flag</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t1</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;blue&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_t2</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span> <span class="k">return</span> <span class="s1">&#39;green&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nd">@marker</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mark_both</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t1&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">localvar</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="s1">&#39;t2&#39;</span><span class="p">,</span> <span class="s1">&#39;cs&#39;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s1">&#39;red&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用例</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python3 model-checker.py peterson-flag.py
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>后面跟着model的参数脚本即可</p>
</li>
<li>
<p>为什么输出模式这么反人类 $\Longrightarrow$ 因为输出是给程序看的，后面的python脚本可以写一些lambda表达式来提取信息 $\Longrightarrow$ 加到后期的工具<a href="http://jyywiki.cn/pages/OS/2022/demos/visualize.py" target="_blank" rel="noopener noreffer">visualize.py</a>，直接可视化（很像之前<b>zweix</b>大佬的<a href="https://github.com/zweix123/jyyslide-md" target="_blank" rel="noopener noreffer">jyyslide-md</a>）的markdown转html的感觉很像</p>
</li>
<li>
<p>安装相关模块，除了pip的以外Linux的机器上要安装graphviz</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install graphviz
</span></span><span class="line"><span class="cl">pip install graphviz
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>然后通过管道通信和重定向</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python3 model-checker.py peterson-flag.py <span class="p">|</span> python3 visualize.py &gt; a.html
</span></span><span class="line"><span class="cl">open a.html
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/Jungle430/check-for-NJU-OS" target="_blank" rel="noopener noreffer">一个checker的demo</a></p>
<h4 id="代码导读python-generator">代码导读：Python Generator</h4>
<p>死循环也能返回？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">numbers</span><span class="p">(</span><span class="n">init</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="n">init</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">n</span> <span class="o">+=</span> <span class="n">step</span>
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">numbers</span> <span class="n">at</span> <span class="mh">0x107f873c0</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>yield</code>让死循环返回，但又<b>不是完全返回</b></li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter4-1.png" title="/img/Operating System/chapter4-1.png" data-thumbnail="/img/Operating System/chapter4-1.png" data-sub-html="<h2>效果 $\Longrightarrow$ g就是一个状态机</h2>">
        
    </a><figcaption class="image-caption">效果 $\Longrightarrow$ g就是一个<code>状态机</code></figcaption>
    </figure>
<ul>
<li>
<p>文章<a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856" target="_blank" rel="noopener noreffer">《python中yield的用法详解——最简单，最清晰的解释》</a></p>
</li>
<li>
<p>这里就模仿了线程的执行<u>使用<code>yield</code>的特性</u></p>
</li>
</ul>
<h4 id="model-checker-实现">Model Checker: 实现</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Mutex</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">T1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">==</span> <span class="s1">&#39;🔒&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">                <span class="k">pass</span>
</span></span><span class="line"><span class="cl">            <span class="k">yield</span> <span class="n">checkpoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="bp">self</span><span class="o">.</span><span class="n">locked</span> <span class="o">=</span> <span class="s1">&#39;🔒&#39;</span>
</span></span><span class="line"><span class="cl">            <span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">thread_state</span> <span class="o">=</span> <span class="n">mutex_obj</span><span class="p">()</span><span class="o">.</span><span class="n">T1</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl"><span class="n">thread_state</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span> <span class="c1"># 单步执行一行; see: execute()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="model-checker-实现-contd">Model Checker: 实现 (cont&rsquo;d)</h4>
<p>什么是状态空间？</p>
<ul>
<li>所有可能的状态机执行序列</li>
<li><code>BFS</code> 生成，合并重复状态</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">[0]      T1
</span></span><span class="line"><span class="cl">[1]      T2
</span></span><span class="line"><span class="cl">[0,0]    T1 -&gt; T1
</span></span><span class="line"><span class="cl">[0,1]    T1 -&gt; T2
</span></span><span class="line"><span class="cl">[0,0,0]  T1 -&gt; T1 -&gt; T1
</span></span><span class="line"><span class="cl">[0,0,1]  T1 -&gt; T1 -&gt; T2
</span></span><span class="line"><span class="cl">[0,1,0]  T1 -&gt; T2 -&gt; T1
</span></span><span class="line"><span class="cl">...      ...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="model-checking-和工具的故事">Model Checking 和工具的故事</h3>
<blockquote>
<p>Model checking is a method for formally verifying finite-state systems——只要能为系统建立模型，就能用 prove by brute-force 证明正确/找到错误。</p>
</blockquote>
<p>Model checker 的一切就是状态机！</p>
<ul>
<li>Safety: 红色的状态不可到达
<ul>
<li><em>G</em>(<em>V</em>,<em>E</em>) 上的可达性问题</li>
</ul>
</li>
<li>(Strong) Liveness: 从任意状态出发，都能到达绿/蓝色状态
<ul>
<li><em>G</em>(<em>V</em>,<em>E</em>) 上的什么问题？</li>
</ul>
</li>
<li>如何展示这个状态机？</li>
<li>如何能避免无效的探索？</li>
</ul>
<h4 id="更多的-model-checker">更多的 Model Checker</h4>
<p>真实程序的状态空间太大？</p>
<ul>
<li><a href="https://dl.acm.org/doi/abs/10.1145/263699.263717" target="_blank" rel="noopener noreffer">Model checking for programming languages using VeriSoft</a> (POPL'97, 第一个 “software model checker”)</li>
<li><a href="https://dl.acm.org/doi/10.5555/1855741.1855760" target="_blank" rel="noopener noreffer">Finding and reproducing Heisenbugs in concurrent programs</a> (OSDI'08, Small Scope Hypothesis 🪳🪳🪳)</li>
<li><a href="https://dl.acm.org/doi/10.1145/1189256.1189259" target="_blank" rel="noopener noreffer">Using model checking to find serious file system errors</a> (OSDI'04, Best Paper 🏅，可以用在不并发的系统上)</li>
</ul>
<hr>
<p>不满足于简单的内存模型？</p>
<ul>
<li><a href="https://dl.acm.org/doi/abs/10.1145/3445814.3446748" target="_blank" rel="noopener noreffer">VSync: Push-button verification and optimization for synchronization primitives on weak memory models</a> (ASPLOS'21, Distinguished Paper 🏅)</li>
</ul>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何理解各种并发程序？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>并发程序 = 状态机
<ul>
<li>线程共享内存</li>
<li>每一步非确定选择线程执行</li>
</ul>
</li>
<li>画状态机就对了
<ul>
<li>当然，用工具帮你画 (model checker)</li>
</ul>
</li>
</ul>
<p><b>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</b></p>
]]></description>
</item>
</channel>
</rss>
